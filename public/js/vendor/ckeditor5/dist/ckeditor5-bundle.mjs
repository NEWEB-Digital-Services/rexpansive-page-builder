function df(n, e) {
  for (var t = 0; t < e.length; t++) {
    const i = e[t];
    if (typeof i != "string" && !Array.isArray(i)) {
      for (const s in i)
        if (s !== "default" && !(s in n)) {
          const r = Object.getOwnPropertyDescriptor(i, s);
          r && Object.defineProperty(n, s, r.get ? r : {
            enumerable: !0,
            get: () => i[s]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ff() {
  try {
    return navigator.userAgent.toLowerCase();
  } catch {
    return "";
  }
}
const _t = ff(), S = {
  isMac: Tc(_t),
  isWindows: mf(_t),
  isGecko: gf(_t),
  isSafari: pf(_t),
  isiOS: wf(_t),
  isAndroid: bf(_t),
  isBlink: _f(_t),
  features: {
    isRegExpUnicodePropertySupported: vf()
  }
};
function Tc(n) {
  return n.indexOf("macintosh") > -1;
}
function mf(n) {
  return n.indexOf("windows") > -1;
}
function gf(n) {
  return !!n.match(/gecko\/\d+/);
}
function pf(n) {
  return n.indexOf(" applewebkit/") > -1 && n.indexOf("chrome") === -1;
}
function wf(n) {
  return !!n.match(/iphone|ipad/i) || Tc(n) && navigator.maxTouchPoints > 0;
}
function bf(n) {
  return n.indexOf("android") > -1;
}
function _f(n) {
  return n.indexOf("chrome/") > -1 && n.indexOf("edge/") < 0;
}
function vf() {
  let n = !1;
  try {
    n = "ć".search(new RegExp("[\\p{L}]", "u")) === 0;
  } catch {
  }
  return n;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Pc(n, e, t, i) {
  t = t || function(l, c) {
    return l === c;
  };
  const s = Array.isArray(n) ? n : Array.prototype.slice.call(n), r = Array.isArray(e) ? e : Array.prototype.slice.call(e), o = yf(s, r, t);
  return i ? Cf(o, r.length) : kf(r, o);
}
function yf(n, e, t) {
  const i = vo(n, e, t);
  if (i === -1)
    return { firstIndex: -1, lastIndexOld: -1, lastIndexNew: -1 };
  const s = yo(n, i), r = yo(e, i), o = vo(s, r, t), a = n.length - o, l = e.length - o;
  return { firstIndex: i, lastIndexOld: a, lastIndexNew: l };
}
function vo(n, e, t) {
  for (let i = 0; i < Math.max(n.length, e.length); i++)
    if (n[i] === void 0 || e[i] === void 0 || !t(n[i], e[i]))
      return i;
  return -1;
}
function yo(n, e) {
  return n.slice(e).reverse();
}
function kf(n, e) {
  const t = [], { firstIndex: i, lastIndexOld: s, lastIndexNew: r } = e;
  return r - i > 0 && t.push({
    index: i,
    type: "insert",
    values: n.slice(i, r)
  }), s - i > 0 && t.push({
    index: i + (r - i),
    type: "delete",
    howMany: s - i
  }), t;
}
function Cf(n, e) {
  const { firstIndex: t, lastIndexOld: i, lastIndexNew: s } = n;
  if (t === -1)
    return Array(e).fill("equal");
  let r = [];
  return t > 0 && (r = r.concat(Array(t).fill("equal"))), s - t > 0 && (r = r.concat(Array(s - t).fill("insert"))), i - t > 0 && (r = r.concat(Array(i - t).fill("delete"))), s < e && (r = r.concat(Array(e - s).fill("equal"))), r;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Ai(n, e, t) {
  t = t || function(b, C) {
    return b === C;
  };
  const i = n.length, s = e.length;
  if (i > 200 || s > 200 || i + s > 300)
    return Ai.fastDiff(n, e, t, !0);
  let r, o;
  if (s < i) {
    const b = n;
    n = e, e = b, r = "delete", o = "insert";
  } else
    r = "insert", o = "delete";
  const a = n.length, l = e.length, c = l - a, u = {}, h = {};
  function d(b) {
    const C = (h[b - 1] !== void 0 ? h[b - 1] : -1) + 1, T = h[b + 1] !== void 0 ? h[b + 1] : -1, ue = C > T ? -1 : 1;
    u[b + ue] && (u[b] = u[b + ue].slice(0)), u[b] || (u[b] = []), u[b].push(C > T ? r : o);
    let Ae = Math.max(C, T), we = Ae - b;
    for (; we < a && Ae < l && t(n[we], e[Ae]); )
      we++, Ae++, u[b].push("equal");
    return Ae;
  }
  let m = 0, p;
  do {
    for (p = -m; p < c; p++)
      h[p] = d(p);
    for (p = c + m; p > c; p--)
      h[p] = d(p);
    h[c] = d(c), m++;
  } while (h[c] !== l);
  return u[c].slice(1);
}
Ai.fastDiff = Pc;
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ko() {
  return function n() {
    n.called = !0;
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Qe {
  /**
   * @param source The emitter.
   * @param name The event name.
   */
  constructor(e, t) {
    this.source = e, this.name = t, this.path = [], this.stop = ko(), this.off = ko();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const le = new Array(256).fill("").map((n, e) => ("0" + e.toString(16)).slice(-2));
function et() {
  const n = Math.random() * 4294967296 >>> 0, e = Math.random() * 4294967296 >>> 0, t = Math.random() * 4294967296 >>> 0, i = Math.random() * 4294967296 >>> 0;
  return "e" + le[n >> 0 & 255] + le[n >> 8 & 255] + le[n >> 16 & 255] + le[n >> 24 & 255] + le[e >> 0 & 255] + le[e >> 8 & 255] + le[e >> 16 & 255] + le[e >> 24 & 255] + le[t >> 0 & 255] + le[t >> 8 & 255] + le[t >> 16 & 255] + le[t >> 24 & 255] + le[i >> 0 & 255] + le[i >> 8 & 255] + le[i >> 16 & 255] + le[i >> 24 & 255];
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const ve = {
  get(n = "normal") {
    return typeof n != "number" ? this[n] || this.normal : n;
  },
  highest: 1e5,
  high: 1e3,
  normal: 0,
  low: -1e3,
  lowest: -1e5
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Af(n, e) {
  const t = ve.get(e.priority);
  for (let i = 0; i < n.length; i++)
    if (ve.get(n[i].priority) < t) {
      n.splice(i, 0, e);
      return;
    }
  n.push(e);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Ef = "https://ckeditor.com/docs/ckeditor5/latest/support/error-codes.html";
class f extends Error {
  /**
   * Creates an instance of the CKEditorError class.
   *
   * @param errorName The error id in an `error-name` format. A link to this error documentation page will be added
   * to the thrown error's `message`.
   * @param context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}
   * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also
   * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).
   * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility
   * to check if the object works as the context.
   * @param data Additional data describing the error. A stringified version of this object
   * will be appended to the error message, so the data are quickly visible in the console. The original
   * data object will also be later available under the {@link #data} property.
   */
  constructor(e, t, i) {
    super(Tf(e, i)), this.name = "CKEditorError", this.context = t, this.data = i;
  }
  /**
   * Checks if the error is of the `CKEditorError` type.
   */
  is(e) {
    return e === "CKEditorError";
  }
  /**
   * A utility that ensures that the thrown error is a {@link module:utils/ckeditorerror~CKEditorError} one.
   * It is useful when combined with the {@link module:watchdog/watchdog~Watchdog} feature, which can restart the editor in case
   * of a {@link module:utils/ckeditorerror~CKEditorError} error.
   *
   * @param err The error to rethrow.
   * @param context An object connected through properties with the editor instance. This context will be used
   * by the watchdog to verify which editor should be restarted.
   */
  static rethrowUnexpectedError(e, t) {
    if (e.is && e.is("CKEditorError"))
      throw e;
    const i = new f(e.message, t);
    throw i.stack = e.stack, i;
  }
}
function G(n, e) {
  console.warn(...Pf(n, e));
}
function xc(n) {
  return `
Read more: ${Ef}#error-${n}`;
}
function Tf(n, e) {
  const t = /* @__PURE__ */ new WeakSet(), s = e ? ` ${JSON.stringify(e, (o, a) => {
    if (typeof a == "object" && a !== null) {
      if (t.has(a))
        return `[object ${a.constructor.name}]`;
      t.add(a);
    }
    return a;
  })}` : "", r = xc(n);
  return n + s + r;
}
function Pf(n, e) {
  const t = xc(n);
  return e ? [n, e, t] : [n, t];
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const xf = "38.1.1", Sf = new Date(2023, 6, 11);
/* istanbul ignore next -- @preserve */
const Co = typeof window == "object" ? window : global;
/* istanbul ignore next -- @preserve */
if (Co.CKEDITOR_VERSION)
  throw new f("ckeditor-duplicated-modules", null);
Co.CKEDITOR_VERSION = xf;
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Gt = Symbol("listeningTo"), Ns = Symbol("emitterId"), Ge = Symbol("delegations"), Sc = L(Object);
function L(n) {
  if (!n)
    return Sc;
  class e extends n {
    on(i, s, r) {
      this.listenTo(this, i, s, r);
    }
    once(i, s, r) {
      let o = !1;
      const a = (l, ...c) => {
        o || (o = !0, l.off(), s.call(this, l, ...c));
      };
      this.listenTo(this, i, a, r);
    }
    off(i, s) {
      this.stopListening(this, i, s);
    }
    listenTo(i, s, r, o = {}) {
      let a, l;
      this[Gt] || (this[Gt] = {});
      const c = this[Gt];
      ts(i) || Ic(i);
      const u = ts(i);
      (a = c[u]) || (a = c[u] = {
        emitter: i,
        callbacks: {}
      }), (l = a.callbacks[s]) || (l = a.callbacks[s] = []), l.push(r), Of(this, i, s, r, o);
    }
    stopListening(i, s, r) {
      const o = this[Gt];
      let a = i && ts(i);
      const l = o && a ? o[a] : void 0, c = l && s ? l.callbacks[s] : void 0;
      if (!(!o || i && !l || s && !c))
        if (r)
          is(this, i, s, r), c.indexOf(r) !== -1 && (c.length === 1 ? delete l.callbacks[s] : is(this, i, s, r));
        else if (c) {
          for (; r = c.pop(); )
            is(this, i, s, r);
          delete l.callbacks[s];
        } else if (l) {
          for (s in l.callbacks)
            this.stopListening(i, s);
          delete o[a];
        } else {
          for (a in o)
            this.stopListening(o[a].emitter);
          delete this[Gt];
        }
    }
    fire(i, ...s) {
      try {
        const r = i instanceof Qe ? i : new Qe(this, i), o = r.name;
        let a = Vc(this, o);
        if (r.path.push(this), a) {
          const c = [r, ...s];
          a = Array.from(a);
          for (let u = 0; u < a.length && (a[u].callback.apply(this, c), r.off.called && (delete r.off.called, this._removeEventListener(o, a[u].callback)), !r.stop.called); u++)
            ;
        }
        const l = this[Ge];
        if (l) {
          const c = l.get(o), u = l.get("*");
          c && Ao(c, r, s), u && Ao(u, r, s);
        }
        return r.return;
      } catch (r) {
        /* istanbul ignore next -- @preserve */
        f.rethrowUnexpectedError(r, this);
      }
    }
    delegate(...i) {
      return {
        to: (s, r) => {
          this[Ge] || (this[Ge] = /* @__PURE__ */ new Map()), i.forEach((o) => {
            const a = this[Ge].get(o);
            a ? a.set(s, r) : this[Ge].set(o, /* @__PURE__ */ new Map([[s, r]]));
          });
        }
      };
    }
    stopDelegating(i, s) {
      if (this[Ge])
        if (!i)
          this[Ge].clear();
        else if (!s)
          this[Ge].delete(i);
        else {
          const r = this[Ge].get(i);
          r && r.delete(s);
        }
    }
    _addEventListener(i, s, r) {
      Vf(this, i);
      const o = Ls(this, i), a = ve.get(r.priority), l = {
        callback: s,
        priority: a
      };
      for (const c of o)
        Af(c, l);
    }
    _removeEventListener(i, s) {
      const r = Ls(this, i);
      for (const o of r)
        for (let a = 0; a < o.length; a++)
          o[a].callback == s && (o.splice(a, 1), a--);
    }
  }
  return e;
}
[
  "on",
  "once",
  "off",
  "listenTo",
  "stopListening",
  "fire",
  "delegate",
  "stopDelegating",
  "_addEventListener",
  "_removeEventListener"
].forEach((n) => {
  L[n] = Sc.prototype[n];
});
function If(n, e) {
  const t = n[Gt];
  return t && t[e] ? t[e].emitter : null;
}
function Ic(n, e) {
  n[Ns] || (n[Ns] = e || et());
}
function ts(n) {
  return n[Ns];
}
function Rc(n) {
  return n._events || Object.defineProperty(n, "_events", {
    value: {}
  }), n._events;
}
function Rf() {
  return {
    callbacks: [],
    childEvents: []
  };
}
function Vf(n, e) {
  const t = Rc(n);
  if (t[e])
    return;
  let i = e, s = null;
  const r = [];
  for (; i !== "" && !t[i]; )
    t[i] = Rf(), r.push(t[i]), s && t[i].childEvents.push(s), s = i, i = i.substr(0, i.lastIndexOf(":"));
  if (i !== "") {
    for (const o of r)
      o.callbacks = t[i].callbacks.slice();
    t[i].childEvents.push(s);
  }
}
function Ls(n, e) {
  const t = Rc(n)[e];
  if (!t)
    return [];
  let i = [t.callbacks];
  for (let s = 0; s < t.childEvents.length; s++) {
    const r = Ls(n, t.childEvents[s]);
    i = i.concat(r);
  }
  return i;
}
function Vc(n, e) {
  let t;
  return !n._events || !(t = n._events[e]) || !t.callbacks.length ? e.indexOf(":") > -1 ? Vc(n, e.substr(0, e.lastIndexOf(":"))) : null : t.callbacks;
}
function Ao(n, e, t) {
  for (let [i, s] of n) {
    s ? typeof s == "function" && (s = s(e.name)) : s = e.name;
    const r = new Qe(e.source, s);
    r.path = [...e.path], i.fire(r, ...t);
  }
}
function Of(n, e, t, i, s) {
  e._addEventListener ? e._addEventListener(t, i, s) : n._addEventListener.call(e, t, i, s);
}
function is(n, e, t, i) {
  e._removeEventListener ? e._removeEventListener(t, i) : n._removeEventListener.call(e, t, i);
}
var Mf = typeof global == "object" && global && global.Object === Object && global;
const Oc = Mf;
var Bf = typeof self == "object" && self && self.Object === Object && self, Df = Oc || Bf || Function("return this")();
const Oe = Df;
var Ff = Oe.Symbol;
const He = Ff;
var Mc = Object.prototype, Nf = Mc.hasOwnProperty, Lf = Mc.toString, wi = He ? He.toStringTag : void 0;
function zf(n) {
  var e = Nf.call(n, wi), t = n[wi];
  try {
    n[wi] = void 0;
    var i = !0;
  } catch {
  }
  var s = Lf.call(n);
  return i && (e ? n[wi] = t : delete n[wi]), s;
}
var $f = Object.prototype, Hf = $f.toString;
function Wf(n) {
  return Hf.call(n);
}
var Uf = "[object Null]", jf = "[object Undefined]", Eo = He ? He.toStringTag : void 0;
function mt(n) {
  return n == null ? n === void 0 ? jf : Uf : Eo && Eo in Object(n) ? zf(n) : Wf(n);
}
function xe(n) {
  return n != null && typeof n == "object";
}
var qf = "[object Symbol]";
function Mn(n) {
  return typeof n == "symbol" || xe(n) && mt(n) == qf;
}
function Bc(n, e) {
  for (var t = -1, i = n == null ? 0 : n.length, s = Array(i); ++t < i; )
    s[t] = e(n[t], t, n);
  return s;
}
var Gf = Array.isArray;
const he = Gf;
var Kf = 1 / 0, To = He ? He.prototype : void 0, Po = To ? To.toString : void 0;
function Dc(n) {
  if (typeof n == "string")
    return n;
  if (he(n))
    return Bc(n, Dc) + "";
  if (Mn(n))
    return Po ? Po.call(n) : "";
  var e = n + "";
  return e == "0" && 1 / n == -Kf ? "-0" : e;
}
var Jf = /\s/;
function Yf(n) {
  for (var e = n.length; e-- && Jf.test(n.charAt(e)); )
    ;
  return e;
}
var Zf = /^\s+/;
function Xf(n) {
  return n && n.slice(0, Yf(n) + 1).replace(Zf, "");
}
function K(n) {
  var e = typeof n;
  return n != null && (e == "object" || e == "function");
}
var xo = 0 / 0, Qf = /^[-+]0x[0-9a-f]+$/i, em = /^0b[01]+$/i, tm = /^0o[0-7]+$/i, im = parseInt;
function So(n) {
  if (typeof n == "number")
    return n;
  if (Mn(n))
    return xo;
  if (K(n)) {
    var e = typeof n.valueOf == "function" ? n.valueOf() : n;
    n = K(e) ? e + "" : e;
  }
  if (typeof n != "string")
    return n === 0 ? n : +n;
  n = Xf(n);
  var t = em.test(n);
  return t || tm.test(n) ? im(n.slice(2), t ? 2 : 8) : Qf.test(n) ? xo : +n;
}
function At(n) {
  return n;
}
var nm = "[object AsyncFunction]", sm = "[object Function]", rm = "[object GeneratorFunction]", om = "[object Proxy]";
function St(n) {
  if (!K(n))
    return !1;
  var e = mt(n);
  return e == sm || e == rm || e == nm || e == om;
}
var am = Oe["__core-js_shared__"];
const ns = am;
var Io = function() {
  var n = /[^.]+$/.exec(ns && ns.keys && ns.keys.IE_PROTO || "");
  return n ? "Symbol(src)_1." + n : "";
}();
function lm(n) {
  return !!Io && Io in n;
}
var cm = Function.prototype, um = cm.toString;
function Mt(n) {
  if (n != null) {
    try {
      return um.call(n);
    } catch {
    }
    try {
      return n + "";
    } catch {
    }
  }
  return "";
}
var hm = /[\\^$.*+?()[\]{}|]/g, dm = /^\[object .+?Constructor\]$/, fm = Function.prototype, mm = Object.prototype, gm = fm.toString, pm = mm.hasOwnProperty, wm = RegExp(
  "^" + gm.call(pm).replace(hm, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function bm(n) {
  if (!K(n) || lm(n))
    return !1;
  var e = St(n) ? wm : dm;
  return e.test(Mt(n));
}
function _m(n, e) {
  return n == null ? void 0 : n[e];
}
function Bt(n, e) {
  var t = _m(n, e);
  return bm(t) ? t : void 0;
}
var vm = Bt(Oe, "WeakMap");
const zs = vm;
var Ro = Object.create, ym = function() {
  function n() {
  }
  return function(e) {
    if (!K(e))
      return {};
    if (Ro)
      return Ro(e);
    n.prototype = e;
    var t = new n();
    return n.prototype = void 0, t;
  };
}();
const km = ym;
function Cm(n, e, t) {
  switch (t.length) {
    case 0:
      return n.call(e);
    case 1:
      return n.call(e, t[0]);
    case 2:
      return n.call(e, t[0], t[1]);
    case 3:
      return n.call(e, t[0], t[1], t[2]);
  }
  return n.apply(e, t);
}
function Cr(n, e) {
  var t = -1, i = n.length;
  for (e || (e = Array(i)); ++t < i; )
    e[t] = n[t];
  return e;
}
var Am = 800, Em = 16, Tm = Date.now;
function Pm(n) {
  var e = 0, t = 0;
  return function() {
    var i = Tm(), s = Em - (i - t);
    if (t = i, s > 0) {
      if (++e >= Am)
        return arguments[0];
    } else
      e = 0;
    return n.apply(void 0, arguments);
  };
}
function xm(n) {
  return function() {
    return n;
  };
}
var Sm = function() {
  try {
    var n = Bt(Object, "defineProperty");
    return n({}, "", {}), n;
  } catch {
  }
}();
const pn = Sm;
var Im = pn ? function(n, e) {
  return pn(n, "toString", {
    configurable: !0,
    enumerable: !1,
    value: xm(e),
    writable: !0
  });
} : At;
const Rm = Im;
var Vm = Pm(Rm);
const Om = Vm;
function Mm(n, e) {
  for (var t = -1, i = n == null ? 0 : n.length; ++t < i && e(n[t], t, n) !== !1; )
    ;
  return n;
}
function Bm(n, e, t, i) {
  for (var s = n.length, r = t + (i ? 1 : -1); i ? r-- : ++r < s; )
    if (e(n[r], r, n))
      return r;
  return -1;
}
function Dm(n) {
  return n !== n;
}
function Fm(n, e, t) {
  for (var i = t - 1, s = n.length; ++i < s; )
    if (n[i] === e)
      return i;
  return -1;
}
function Nm(n, e, t) {
  return e === e ? Fm(n, e, t) : Bm(n, Dm, t);
}
var Lm = 9007199254740991, zm = /^(?:0|[1-9]\d*)$/;
function Ar(n, e) {
  var t = typeof n;
  return e = e ?? Lm, !!e && (t == "number" || t != "symbol" && zm.test(n)) && n > -1 && n % 1 == 0 && n < e;
}
function Er(n, e, t) {
  e == "__proto__" && pn ? pn(n, e, {
    configurable: !0,
    enumerable: !0,
    value: t,
    writable: !0
  }) : n[e] = t;
}
function Ui(n, e) {
  return n === e || n !== n && e !== e;
}
var $m = Object.prototype, Hm = $m.hasOwnProperty;
function Tr(n, e, t) {
  var i = n[e];
  (!(Hm.call(n, e) && Ui(i, t)) || t === void 0 && !(e in n)) && Er(n, e, t);
}
function fi(n, e, t, i) {
  var s = !t;
  t || (t = {});
  for (var r = -1, o = e.length; ++r < o; ) {
    var a = e[r], l = i ? i(t[a], n[a], a, t, n) : void 0;
    l === void 0 && (l = n[a]), s ? Er(t, a, l) : Tr(t, a, l);
  }
  return t;
}
var Vo = Math.max;
function Wm(n, e, t) {
  return e = Vo(e === void 0 ? n.length - 1 : e, 0), function() {
    for (var i = arguments, s = -1, r = Vo(i.length - e, 0), o = Array(r); ++s < r; )
      o[s] = i[e + s];
    s = -1;
    for (var a = Array(e + 1); ++s < e; )
      a[s] = i[s];
    return a[e] = t(o), Cm(n, this, a);
  };
}
function Fc(n, e) {
  return Om(Wm(n, e, At), n + "");
}
var Um = 9007199254740991;
function Nc(n) {
  return typeof n == "number" && n > -1 && n % 1 == 0 && n <= Um;
}
function Bn(n) {
  return n != null && Nc(n.length) && !St(n);
}
function jm(n, e, t) {
  if (!K(t))
    return !1;
  var i = typeof e;
  return (i == "number" ? Bn(t) && Ar(e, t.length) : i == "string" && e in t) ? Ui(t[e], n) : !1;
}
function Pr(n) {
  return Fc(function(e, t) {
    var i = -1, s = t.length, r = s > 1 ? t[s - 1] : void 0, o = s > 2 ? t[2] : void 0;
    for (r = n.length > 3 && typeof r == "function" ? (s--, r) : void 0, o && jm(t[0], t[1], o) && (r = s < 3 ? void 0 : r, s = 1), e = Object(e); ++i < s; ) {
      var a = t[i];
      a && n(e, a, i, r);
    }
    return e;
  });
}
var qm = Object.prototype;
function xr(n) {
  var e = n && n.constructor, t = typeof e == "function" && e.prototype || qm;
  return n === t;
}
function Gm(n, e) {
  for (var t = -1, i = Array(n); ++t < n; )
    i[t] = e(t);
  return i;
}
var Km = "[object Arguments]";
function Oo(n) {
  return xe(n) && mt(n) == Km;
}
var Lc = Object.prototype, Jm = Lc.hasOwnProperty, Ym = Lc.propertyIsEnumerable, Zm = Oo(function() {
  return arguments;
}()) ? Oo : function(n) {
  return xe(n) && Jm.call(n, "callee") && !Ym.call(n, "callee");
};
const $s = Zm;
function Xm() {
  return !1;
}
var zc = typeof exports == "object" && exports && !exports.nodeType && exports, Mo = zc && typeof module == "object" && module && !module.nodeType && module, Qm = Mo && Mo.exports === zc, Bo = Qm ? Oe.Buffer : void 0, eg = Bo ? Bo.isBuffer : void 0, tg = eg || Xm;
const Ii = tg;
var ig = "[object Arguments]", ng = "[object Array]", sg = "[object Boolean]", rg = "[object Date]", og = "[object Error]", ag = "[object Function]", lg = "[object Map]", cg = "[object Number]", ug = "[object Object]", hg = "[object RegExp]", dg = "[object Set]", fg = "[object String]", mg = "[object WeakMap]", gg = "[object ArrayBuffer]", pg = "[object DataView]", wg = "[object Float32Array]", bg = "[object Float64Array]", _g = "[object Int8Array]", vg = "[object Int16Array]", yg = "[object Int32Array]", kg = "[object Uint8Array]", Cg = "[object Uint8ClampedArray]", Ag = "[object Uint16Array]", Eg = "[object Uint32Array]", U = {};
U[wg] = U[bg] = U[_g] = U[vg] = U[yg] = U[kg] = U[Cg] = U[Ag] = U[Eg] = !0;
U[ig] = U[ng] = U[gg] = U[sg] = U[pg] = U[rg] = U[og] = U[ag] = U[lg] = U[cg] = U[ug] = U[hg] = U[dg] = U[fg] = U[mg] = !1;
function Tg(n) {
  return xe(n) && Nc(n.length) && !!U[mt(n)];
}
function Dn(n) {
  return function(e) {
    return n(e);
  };
}
var $c = typeof exports == "object" && exports && !exports.nodeType && exports, Ei = $c && typeof module == "object" && module && !module.nodeType && module, Pg = Ei && Ei.exports === $c, ss = Pg && Oc.process, xg = function() {
  try {
    var n = Ei && Ei.require && Ei.require("util").types;
    return n || ss && ss.binding && ss.binding("util");
  } catch {
  }
}();
const ii = xg;
var Do = ii && ii.isTypedArray, Sg = Do ? Dn(Do) : Tg;
const Sr = Sg;
var Ig = Object.prototype, Rg = Ig.hasOwnProperty;
function Hc(n, e) {
  var t = he(n), i = !t && $s(n), s = !t && !i && Ii(n), r = !t && !i && !s && Sr(n), o = t || i || s || r, a = o ? Gm(n.length, String) : [], l = a.length;
  for (var c in n)
    (e || Rg.call(n, c)) && !(o && // Safari 9 has enumerable `arguments.length` in strict mode.
    (c == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    s && (c == "offset" || c == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    r && (c == "buffer" || c == "byteLength" || c == "byteOffset") || // Skip index properties.
    Ar(c, l))) && a.push(c);
  return a;
}
function Wc(n, e) {
  return function(t) {
    return n(e(t));
  };
}
var Vg = Wc(Object.keys, Object);
const Og = Vg;
var Mg = Object.prototype, Bg = Mg.hasOwnProperty;
function Dg(n) {
  if (!xr(n))
    return Og(n);
  var e = [];
  for (var t in Object(n))
    Bg.call(n, t) && t != "constructor" && e.push(t);
  return e;
}
function Ir(n) {
  return Bn(n) ? Hc(n) : Dg(n);
}
function Fg(n) {
  var e = [];
  if (n != null)
    for (var t in Object(n))
      e.push(t);
  return e;
}
var Ng = Object.prototype, Lg = Ng.hasOwnProperty;
function zg(n) {
  if (!K(n))
    return Fg(n);
  var e = xr(n), t = [];
  for (var i in n)
    i == "constructor" && (e || !Lg.call(n, i)) || t.push(i);
  return t;
}
function mi(n) {
  return Bn(n) ? Hc(n, !0) : zg(n);
}
var $g = Pr(function(n, e) {
  fi(e, mi(e), n);
});
const Uc = $g;
var Hg = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, Wg = /^\w*$/;
function Ug(n, e) {
  if (he(n))
    return !1;
  var t = typeof n;
  return t == "number" || t == "symbol" || t == "boolean" || n == null || Mn(n) ? !0 : Wg.test(n) || !Hg.test(n) || e != null && n in Object(e);
}
var jg = Bt(Object, "create");
const Ri = jg;
function qg() {
  this.__data__ = Ri ? Ri(null) : {}, this.size = 0;
}
function Gg(n) {
  var e = this.has(n) && delete this.__data__[n];
  return this.size -= e ? 1 : 0, e;
}
var Kg = "__lodash_hash_undefined__", Jg = Object.prototype, Yg = Jg.hasOwnProperty;
function Zg(n) {
  var e = this.__data__;
  if (Ri) {
    var t = e[n];
    return t === Kg ? void 0 : t;
  }
  return Yg.call(e, n) ? e[n] : void 0;
}
var Xg = Object.prototype, Qg = Xg.hasOwnProperty;
function ep(n) {
  var e = this.__data__;
  return Ri ? e[n] !== void 0 : Qg.call(e, n);
}
var tp = "__lodash_hash_undefined__";
function ip(n, e) {
  var t = this.__data__;
  return this.size += this.has(n) ? 0 : 1, t[n] = Ri && e === void 0 ? tp : e, this;
}
function It(n) {
  var e = -1, t = n == null ? 0 : n.length;
  for (this.clear(); ++e < t; ) {
    var i = n[e];
    this.set(i[0], i[1]);
  }
}
It.prototype.clear = qg;
It.prototype.delete = Gg;
It.prototype.get = Zg;
It.prototype.has = ep;
It.prototype.set = ip;
function np() {
  this.__data__ = [], this.size = 0;
}
function Fn(n, e) {
  for (var t = n.length; t--; )
    if (Ui(n[t][0], e))
      return t;
  return -1;
}
var sp = Array.prototype, rp = sp.splice;
function op(n) {
  var e = this.__data__, t = Fn(e, n);
  if (t < 0)
    return !1;
  var i = e.length - 1;
  return t == i ? e.pop() : rp.call(e, t, 1), --this.size, !0;
}
function ap(n) {
  var e = this.__data__, t = Fn(e, n);
  return t < 0 ? void 0 : e[t][1];
}
function lp(n) {
  return Fn(this.__data__, n) > -1;
}
function cp(n, e) {
  var t = this.__data__, i = Fn(t, n);
  return i < 0 ? (++this.size, t.push([n, e])) : t[i][1] = e, this;
}
function it(n) {
  var e = -1, t = n == null ? 0 : n.length;
  for (this.clear(); ++e < t; ) {
    var i = n[e];
    this.set(i[0], i[1]);
  }
}
it.prototype.clear = np;
it.prototype.delete = op;
it.prototype.get = ap;
it.prototype.has = lp;
it.prototype.set = cp;
var up = Bt(Oe, "Map");
const Vi = up;
function hp() {
  this.size = 0, this.__data__ = {
    hash: new It(),
    map: new (Vi || it)(),
    string: new It()
  };
}
function dp(n) {
  var e = typeof n;
  return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? n !== "__proto__" : n === null;
}
function Nn(n, e) {
  var t = n.__data__;
  return dp(e) ? t[typeof e == "string" ? "string" : "hash"] : t.map;
}
function fp(n) {
  var e = Nn(this, n).delete(n);
  return this.size -= e ? 1 : 0, e;
}
function mp(n) {
  return Nn(this, n).get(n);
}
function gp(n) {
  return Nn(this, n).has(n);
}
function pp(n, e) {
  var t = Nn(this, n), i = t.size;
  return t.set(n, e), this.size += t.size == i ? 0 : 1, this;
}
function nt(n) {
  var e = -1, t = n == null ? 0 : n.length;
  for (this.clear(); ++e < t; ) {
    var i = n[e];
    this.set(i[0], i[1]);
  }
}
nt.prototype.clear = hp;
nt.prototype.delete = fp;
nt.prototype.get = mp;
nt.prototype.has = gp;
nt.prototype.set = pp;
var wp = "Expected a function";
function Rr(n, e) {
  if (typeof n != "function" || e != null && typeof e != "function")
    throw new TypeError(wp);
  var t = function() {
    var i = arguments, s = e ? e.apply(this, i) : i[0], r = t.cache;
    if (r.has(s))
      return r.get(s);
    var o = n.apply(this, i);
    return t.cache = r.set(s, o) || r, o;
  };
  return t.cache = new (Rr.Cache || nt)(), t;
}
Rr.Cache = nt;
var bp = 500;
function _p(n) {
  var e = Rr(n, function(i) {
    return t.size === bp && t.clear(), i;
  }), t = e.cache;
  return e;
}
var vp = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, yp = /\\(\\)?/g, kp = _p(function(n) {
  var e = [];
  return n.charCodeAt(0) === 46 && e.push(""), n.replace(vp, function(t, i, s, r) {
    e.push(s ? r.replace(yp, "$1") : i || t);
  }), e;
});
const Cp = kp;
function Ln(n) {
  return n == null ? "" : Dc(n);
}
function Vr(n, e) {
  return he(n) ? n : Ug(n, e) ? [n] : Cp(Ln(n));
}
var Ap = 1 / 0;
function Or(n) {
  if (typeof n == "string" || Mn(n))
    return n;
  var e = n + "";
  return e == "0" && 1 / n == -Ap ? "-0" : e;
}
function jc(n, e) {
  e = Vr(e, n);
  for (var t = 0, i = e.length; n != null && t < i; )
    n = n[Or(e[t++])];
  return t && t == i ? n : void 0;
}
function wn(n, e, t) {
  var i = n == null ? void 0 : jc(n, e);
  return i === void 0 ? t : i;
}
function qc(n, e) {
  for (var t = -1, i = e.length, s = n.length; ++t < i; )
    n[s + t] = e[t];
  return n;
}
var Ep = Wc(Object.getPrototypeOf, Object);
const Mr = Ep;
var Tp = "[object Object]", Pp = Function.prototype, xp = Object.prototype, Gc = Pp.toString, Sp = xp.hasOwnProperty, Ip = Gc.call(Object);
function me(n) {
  if (!xe(n) || mt(n) != Tp)
    return !1;
  var e = Mr(n);
  if (e === null)
    return !0;
  var t = Sp.call(e, "constructor") && e.constructor;
  return typeof t == "function" && t instanceof t && Gc.call(t) == Ip;
}
function Kc(n, e, t) {
  var i = -1, s = n.length;
  e < 0 && (e = -e > s ? 0 : s + e), t = t > s ? s : t, t < 0 && (t += s), s = e > t ? 0 : t - e >>> 0, e >>>= 0;
  for (var r = Array(s); ++i < s; )
    r[i] = n[i + e];
  return r;
}
function Rp(n, e, t) {
  var i = n.length;
  return t = t === void 0 ? i : t, !e && t >= i ? n : Kc(n, e, t);
}
var Vp = "\\ud800-\\udfff", Op = "\\u0300-\\u036f", Mp = "\\ufe20-\\ufe2f", Bp = "\\u20d0-\\u20ff", Dp = Op + Mp + Bp, Fp = "\\ufe0e\\ufe0f", Np = "\\u200d", Lp = RegExp("[" + Np + Vp + Dp + Fp + "]");
function Jc(n) {
  return Lp.test(n);
}
function zp(n) {
  return n.split("");
}
var Yc = "\\ud800-\\udfff", $p = "\\u0300-\\u036f", Hp = "\\ufe20-\\ufe2f", Wp = "\\u20d0-\\u20ff", Up = $p + Hp + Wp, jp = "\\ufe0e\\ufe0f", qp = "[" + Yc + "]", Hs = "[" + Up + "]", Ws = "\\ud83c[\\udffb-\\udfff]", Gp = "(?:" + Hs + "|" + Ws + ")", Zc = "[^" + Yc + "]", Xc = "(?:\\ud83c[\\udde6-\\uddff]){2}", Qc = "[\\ud800-\\udbff][\\udc00-\\udfff]", Kp = "\\u200d", eu = Gp + "?", tu = "[" + jp + "]?", Jp = "(?:" + Kp + "(?:" + [Zc, Xc, Qc].join("|") + ")" + tu + eu + ")*", Yp = tu + eu + Jp, Zp = "(?:" + [Zc + Hs + "?", Hs, Xc, Qc, qp].join("|") + ")", Xp = RegExp(Ws + "(?=" + Ws + ")|" + Zp + Yp, "g");
function Qp(n) {
  return n.match(Xp) || [];
}
function e1(n) {
  return Jc(n) ? Qp(n) : zp(n);
}
function t1(n) {
  return function(e) {
    e = Ln(e);
    var t = Jc(e) ? e1(e) : void 0, i = t ? t[0] : e.charAt(0), s = t ? Rp(t, 1).join("") : e.slice(1);
    return i[n]() + s;
  };
}
var i1 = t1("toUpperCase");
const iu = i1;
function n1(n, e, t, i) {
  var s = -1, r = n == null ? 0 : n.length;
  for (i && r && (t = n[++s]); ++s < r; )
    t = e(t, n[s], s, n);
  return t;
}
function s1(n) {
  return function(e) {
    return n == null ? void 0 : n[e];
  };
}
var r1 = {
  // Latin-1 Supplement block.
  À: "A",
  Á: "A",
  Â: "A",
  Ã: "A",
  Ä: "A",
  Å: "A",
  à: "a",
  á: "a",
  â: "a",
  ã: "a",
  ä: "a",
  å: "a",
  Ç: "C",
  ç: "c",
  Ð: "D",
  ð: "d",
  È: "E",
  É: "E",
  Ê: "E",
  Ë: "E",
  è: "e",
  é: "e",
  ê: "e",
  ë: "e",
  Ì: "I",
  Í: "I",
  Î: "I",
  Ï: "I",
  ì: "i",
  í: "i",
  î: "i",
  ï: "i",
  Ñ: "N",
  ñ: "n",
  Ò: "O",
  Ó: "O",
  Ô: "O",
  Õ: "O",
  Ö: "O",
  Ø: "O",
  ò: "o",
  ó: "o",
  ô: "o",
  õ: "o",
  ö: "o",
  ø: "o",
  Ù: "U",
  Ú: "U",
  Û: "U",
  Ü: "U",
  ù: "u",
  ú: "u",
  û: "u",
  ü: "u",
  Ý: "Y",
  ý: "y",
  ÿ: "y",
  Æ: "Ae",
  æ: "ae",
  Þ: "Th",
  þ: "th",
  ß: "ss",
  // Latin Extended-A block.
  Ā: "A",
  Ă: "A",
  Ą: "A",
  ā: "a",
  ă: "a",
  ą: "a",
  Ć: "C",
  Ĉ: "C",
  Ċ: "C",
  Č: "C",
  ć: "c",
  ĉ: "c",
  ċ: "c",
  č: "c",
  Ď: "D",
  Đ: "D",
  ď: "d",
  đ: "d",
  Ē: "E",
  Ĕ: "E",
  Ė: "E",
  Ę: "E",
  Ě: "E",
  ē: "e",
  ĕ: "e",
  ė: "e",
  ę: "e",
  ě: "e",
  Ĝ: "G",
  Ğ: "G",
  Ġ: "G",
  Ģ: "G",
  ĝ: "g",
  ğ: "g",
  ġ: "g",
  ģ: "g",
  Ĥ: "H",
  Ħ: "H",
  ĥ: "h",
  ħ: "h",
  Ĩ: "I",
  Ī: "I",
  Ĭ: "I",
  Į: "I",
  İ: "I",
  ĩ: "i",
  ī: "i",
  ĭ: "i",
  į: "i",
  ı: "i",
  Ĵ: "J",
  ĵ: "j",
  Ķ: "K",
  ķ: "k",
  ĸ: "k",
  Ĺ: "L",
  Ļ: "L",
  Ľ: "L",
  Ŀ: "L",
  Ł: "L",
  ĺ: "l",
  ļ: "l",
  ľ: "l",
  ŀ: "l",
  ł: "l",
  Ń: "N",
  Ņ: "N",
  Ň: "N",
  Ŋ: "N",
  ń: "n",
  ņ: "n",
  ň: "n",
  ŋ: "n",
  Ō: "O",
  Ŏ: "O",
  Ő: "O",
  ō: "o",
  ŏ: "o",
  ő: "o",
  Ŕ: "R",
  Ŗ: "R",
  Ř: "R",
  ŕ: "r",
  ŗ: "r",
  ř: "r",
  Ś: "S",
  Ŝ: "S",
  Ş: "S",
  Š: "S",
  ś: "s",
  ŝ: "s",
  ş: "s",
  š: "s",
  Ţ: "T",
  Ť: "T",
  Ŧ: "T",
  ţ: "t",
  ť: "t",
  ŧ: "t",
  Ũ: "U",
  Ū: "U",
  Ŭ: "U",
  Ů: "U",
  Ű: "U",
  Ų: "U",
  ũ: "u",
  ū: "u",
  ŭ: "u",
  ů: "u",
  ű: "u",
  ų: "u",
  Ŵ: "W",
  ŵ: "w",
  Ŷ: "Y",
  ŷ: "y",
  Ÿ: "Y",
  Ź: "Z",
  Ż: "Z",
  Ž: "Z",
  ź: "z",
  ż: "z",
  ž: "z",
  Ĳ: "IJ",
  ĳ: "ij",
  Œ: "Oe",
  œ: "oe",
  ŉ: "'n",
  ſ: "s"
}, o1 = s1(r1);
const a1 = o1;
var l1 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, c1 = "\\u0300-\\u036f", u1 = "\\ufe20-\\ufe2f", h1 = "\\u20d0-\\u20ff", d1 = c1 + u1 + h1, f1 = "[" + d1 + "]", m1 = RegExp(f1, "g");
function g1(n) {
  return n = Ln(n), n && n.replace(l1, a1).replace(m1, "");
}
var p1 = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function w1(n) {
  return n.match(p1) || [];
}
var b1 = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function _1(n) {
  return b1.test(n);
}
var nu = "\\ud800-\\udfff", v1 = "\\u0300-\\u036f", y1 = "\\ufe20-\\ufe2f", k1 = "\\u20d0-\\u20ff", C1 = v1 + y1 + k1, su = "\\u2700-\\u27bf", ru = "a-z\\xdf-\\xf6\\xf8-\\xff", A1 = "\\xac\\xb1\\xd7\\xf7", E1 = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", T1 = "\\u2000-\\u206f", P1 = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", ou = "A-Z\\xc0-\\xd6\\xd8-\\xde", x1 = "\\ufe0e\\ufe0f", au = A1 + E1 + T1 + P1, lu = "['’]", Fo = "[" + au + "]", S1 = "[" + C1 + "]", cu = "\\d+", I1 = "[" + su + "]", uu = "[" + ru + "]", hu = "[^" + nu + au + cu + su + ru + ou + "]", R1 = "\\ud83c[\\udffb-\\udfff]", V1 = "(?:" + S1 + "|" + R1 + ")", O1 = "[^" + nu + "]", du = "(?:\\ud83c[\\udde6-\\uddff]){2}", fu = "[\\ud800-\\udbff][\\udc00-\\udfff]", Kt = "[" + ou + "]", M1 = "\\u200d", No = "(?:" + uu + "|" + hu + ")", B1 = "(?:" + Kt + "|" + hu + ")", Lo = "(?:" + lu + "(?:d|ll|m|re|s|t|ve))?", zo = "(?:" + lu + "(?:D|LL|M|RE|S|T|VE))?", mu = V1 + "?", gu = "[" + x1 + "]?", D1 = "(?:" + M1 + "(?:" + [O1, du, fu].join("|") + ")" + gu + mu + ")*", F1 = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", N1 = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", L1 = gu + mu + D1, z1 = "(?:" + [I1, du, fu].join("|") + ")" + L1, $1 = RegExp([
  Kt + "?" + uu + "+" + Lo + "(?=" + [Fo, Kt, "$"].join("|") + ")",
  B1 + "+" + zo + "(?=" + [Fo, Kt + No, "$"].join("|") + ")",
  Kt + "?" + No + "+" + Lo,
  Kt + "+" + zo,
  N1,
  F1,
  cu,
  z1
].join("|"), "g");
function H1(n) {
  return n.match($1) || [];
}
function W1(n, e, t) {
  return n = Ln(n), e = t ? void 0 : e, e === void 0 ? _1(n) ? H1(n) : w1(n) : n.match(e) || [];
}
var U1 = "['’]", j1 = RegExp(U1, "g");
function q1(n) {
  return function(e) {
    return n1(W1(g1(e).replace(j1, "")), n, "");
  };
}
function G1() {
  this.__data__ = new it(), this.size = 0;
}
function K1(n) {
  var e = this.__data__, t = e.delete(n);
  return this.size = e.size, t;
}
function J1(n) {
  return this.__data__.get(n);
}
function Y1(n) {
  return this.__data__.has(n);
}
var Z1 = 200;
function X1(n, e) {
  var t = this.__data__;
  if (t instanceof it) {
    var i = t.__data__;
    if (!Vi || i.length < Z1 - 1)
      return i.push([n, e]), this.size = ++t.size, this;
    t = this.__data__ = new nt(i);
  }
  return t.set(n, e), this.size = t.size, this;
}
function ze(n) {
  var e = this.__data__ = new it(n);
  this.size = e.size;
}
ze.prototype.clear = G1;
ze.prototype.delete = K1;
ze.prototype.get = J1;
ze.prototype.has = Y1;
ze.prototype.set = X1;
function Q1(n, e) {
  return n && fi(e, Ir(e), n);
}
function e0(n, e) {
  return n && fi(e, mi(e), n);
}
var pu = typeof exports == "object" && exports && !exports.nodeType && exports, $o = pu && typeof module == "object" && module && !module.nodeType && module, t0 = $o && $o.exports === pu, Ho = t0 ? Oe.Buffer : void 0, Wo = Ho ? Ho.allocUnsafe : void 0;
function wu(n, e) {
  if (e)
    return n.slice();
  var t = n.length, i = Wo ? Wo(t) : new n.constructor(t);
  return n.copy(i), i;
}
function i0(n, e) {
  for (var t = -1, i = n == null ? 0 : n.length, s = 0, r = []; ++t < i; ) {
    var o = n[t];
    e(o, t, n) && (r[s++] = o);
  }
  return r;
}
function bu() {
  return [];
}
var n0 = Object.prototype, s0 = n0.propertyIsEnumerable, Uo = Object.getOwnPropertySymbols, r0 = Uo ? function(n) {
  return n == null ? [] : (n = Object(n), i0(Uo(n), function(e) {
    return s0.call(n, e);
  }));
} : bu;
const Br = r0;
function o0(n, e) {
  return fi(n, Br(n), e);
}
var a0 = Object.getOwnPropertySymbols, l0 = a0 ? function(n) {
  for (var e = []; n; )
    qc(e, Br(n)), n = Mr(n);
  return e;
} : bu;
const _u = l0;
function c0(n, e) {
  return fi(n, _u(n), e);
}
function vu(n, e, t) {
  var i = e(n);
  return he(n) ? i : qc(i, t(n));
}
function Us(n) {
  return vu(n, Ir, Br);
}
function u0(n) {
  return vu(n, mi, _u);
}
var h0 = Bt(Oe, "DataView");
const js = h0;
var d0 = Bt(Oe, "Promise");
const qs = d0;
var f0 = Bt(Oe, "Set");
const Gs = f0;
var jo = "[object Map]", m0 = "[object Object]", qo = "[object Promise]", Go = "[object Set]", Ko = "[object WeakMap]", Jo = "[object DataView]", g0 = Mt(js), p0 = Mt(Vi), w0 = Mt(qs), b0 = Mt(Gs), _0 = Mt(zs), Ct = mt;
(js && Ct(new js(new ArrayBuffer(1))) != Jo || Vi && Ct(new Vi()) != jo || qs && Ct(qs.resolve()) != qo || Gs && Ct(new Gs()) != Go || zs && Ct(new zs()) != Ko) && (Ct = function(n) {
  var e = mt(n), t = e == m0 ? n.constructor : void 0, i = t ? Mt(t) : "";
  if (i)
    switch (i) {
      case g0:
        return Jo;
      case p0:
        return jo;
      case w0:
        return qo;
      case b0:
        return Go;
      case _0:
        return Ko;
    }
  return e;
});
const Oi = Ct;
var v0 = Object.prototype, y0 = v0.hasOwnProperty;
function k0(n) {
  var e = n.length, t = new n.constructor(e);
  return e && typeof n[0] == "string" && y0.call(n, "index") && (t.index = n.index, t.input = n.input), t;
}
var C0 = Oe.Uint8Array;
const bn = C0;
function Dr(n) {
  var e = new n.constructor(n.byteLength);
  return new bn(e).set(new bn(n)), e;
}
function A0(n, e) {
  var t = e ? Dr(n.buffer) : n.buffer;
  return new n.constructor(t, n.byteOffset, n.byteLength);
}
var E0 = /\w*$/;
function T0(n) {
  var e = new n.constructor(n.source, E0.exec(n));
  return e.lastIndex = n.lastIndex, e;
}
var Yo = He ? He.prototype : void 0, Zo = Yo ? Yo.valueOf : void 0;
function P0(n) {
  return Zo ? Object(Zo.call(n)) : {};
}
function yu(n, e) {
  var t = e ? Dr(n.buffer) : n.buffer;
  return new n.constructor(t, n.byteOffset, n.length);
}
var x0 = "[object Boolean]", S0 = "[object Date]", I0 = "[object Map]", R0 = "[object Number]", V0 = "[object RegExp]", O0 = "[object Set]", M0 = "[object String]", B0 = "[object Symbol]", D0 = "[object ArrayBuffer]", F0 = "[object DataView]", N0 = "[object Float32Array]", L0 = "[object Float64Array]", z0 = "[object Int8Array]", $0 = "[object Int16Array]", H0 = "[object Int32Array]", W0 = "[object Uint8Array]", U0 = "[object Uint8ClampedArray]", j0 = "[object Uint16Array]", q0 = "[object Uint32Array]";
function G0(n, e, t) {
  var i = n.constructor;
  switch (e) {
    case D0:
      return Dr(n);
    case x0:
    case S0:
      return new i(+n);
    case F0:
      return A0(n, t);
    case N0:
    case L0:
    case z0:
    case $0:
    case H0:
    case W0:
    case U0:
    case j0:
    case q0:
      return yu(n, t);
    case I0:
      return new i();
    case R0:
    case M0:
      return new i(n);
    case V0:
      return T0(n);
    case O0:
      return new i();
    case B0:
      return P0(n);
  }
}
function ku(n) {
  return typeof n.constructor == "function" && !xr(n) ? km(Mr(n)) : {};
}
var K0 = "[object Map]";
function J0(n) {
  return xe(n) && Oi(n) == K0;
}
var Xo = ii && ii.isMap, Y0 = Xo ? Dn(Xo) : J0;
const Z0 = Y0;
var X0 = "[object Set]";
function Q0(n) {
  return xe(n) && Oi(n) == X0;
}
var Qo = ii && ii.isSet, ew = Qo ? Dn(Qo) : Q0;
const tw = ew;
var iw = 1, nw = 2, sw = 4, Cu = "[object Arguments]", rw = "[object Array]", ow = "[object Boolean]", aw = "[object Date]", lw = "[object Error]", Au = "[object Function]", cw = "[object GeneratorFunction]", uw = "[object Map]", hw = "[object Number]", Eu = "[object Object]", dw = "[object RegExp]", fw = "[object Set]", mw = "[object String]", gw = "[object Symbol]", pw = "[object WeakMap]", ww = "[object ArrayBuffer]", bw = "[object DataView]", _w = "[object Float32Array]", vw = "[object Float64Array]", yw = "[object Int8Array]", kw = "[object Int16Array]", Cw = "[object Int32Array]", Aw = "[object Uint8Array]", Ew = "[object Uint8ClampedArray]", Tw = "[object Uint16Array]", Pw = "[object Uint32Array]", z = {};
z[Cu] = z[rw] = z[ww] = z[bw] = z[ow] = z[aw] = z[_w] = z[vw] = z[yw] = z[kw] = z[Cw] = z[uw] = z[hw] = z[Eu] = z[dw] = z[fw] = z[mw] = z[gw] = z[Aw] = z[Ew] = z[Tw] = z[Pw] = !0;
z[lw] = z[Au] = z[pw] = !1;
function ei(n, e, t, i, s, r) {
  var o, a = e & iw, l = e & nw, c = e & sw;
  if (t && (o = s ? t(n, i, s, r) : t(n)), o !== void 0)
    return o;
  if (!K(n))
    return n;
  var u = he(n);
  if (u) {
    if (o = k0(n), !a)
      return Cr(n, o);
  } else {
    var h = Oi(n), d = h == Au || h == cw;
    if (Ii(n))
      return wu(n, a);
    if (h == Eu || h == Cu || d && !s) {
      if (o = l || d ? {} : ku(n), !a)
        return l ? c0(n, e0(o, n)) : o0(n, Q1(o, n));
    } else {
      if (!z[h])
        return s ? n : {};
      o = G0(n, h, a);
    }
  }
  r || (r = new ze());
  var m = r.get(n);
  if (m)
    return m;
  r.set(n, o), tw(n) ? n.forEach(function(C) {
    o.add(ei(C, e, t, C, n, r));
  }) : Z0(n) && n.forEach(function(C, T) {
    o.set(T, ei(C, e, t, T, n, r));
  });
  var p = c ? l ? u0 : Us : l ? mi : Ir, b = u ? void 0 : p(n);
  return Mm(b || n, function(C, T) {
    b && (T = C, C = n[T]), Tr(o, T, ei(C, e, t, T, n, r));
  }), o;
}
var xw = 4;
function Tu(n) {
  return ei(n, xw);
}
var Sw = 1, Iw = 4;
function st(n) {
  return ei(n, Sw | Iw);
}
var Rw = 1, Vw = 4;
function Fr(n, e) {
  return e = typeof e == "function" ? e : void 0, ei(n, Rw | Vw, e);
}
var Ow = "__lodash_hash_undefined__";
function Mw(n) {
  return this.__data__.set(n, Ow), this;
}
function Bw(n) {
  return this.__data__.has(n);
}
function _n(n) {
  var e = -1, t = n == null ? 0 : n.length;
  for (this.__data__ = new nt(); ++e < t; )
    this.add(n[e]);
}
_n.prototype.add = _n.prototype.push = Mw;
_n.prototype.has = Bw;
function Dw(n, e) {
  for (var t = -1, i = n == null ? 0 : n.length; ++t < i; )
    if (e(n[t], t, n))
      return !0;
  return !1;
}
function Fw(n, e) {
  return n.has(e);
}
var Nw = 1, Lw = 2;
function Pu(n, e, t, i, s, r) {
  var o = t & Nw, a = n.length, l = e.length;
  if (a != l && !(o && l > a))
    return !1;
  var c = r.get(n), u = r.get(e);
  if (c && u)
    return c == e && u == n;
  var h = -1, d = !0, m = t & Lw ? new _n() : void 0;
  for (r.set(n, e), r.set(e, n); ++h < a; ) {
    var p = n[h], b = e[h];
    if (i)
      var C = o ? i(b, p, h, e, n, r) : i(p, b, h, n, e, r);
    if (C !== void 0) {
      if (C)
        continue;
      d = !1;
      break;
    }
    if (m) {
      if (!Dw(e, function(T, ue) {
        if (!Fw(m, ue) && (p === T || s(p, T, t, i, r)))
          return m.push(ue);
      })) {
        d = !1;
        break;
      }
    } else if (!(p === b || s(p, b, t, i, r))) {
      d = !1;
      break;
    }
  }
  return r.delete(n), r.delete(e), d;
}
function zw(n) {
  var e = -1, t = Array(n.size);
  return n.forEach(function(i, s) {
    t[++e] = [s, i];
  }), t;
}
function $w(n) {
  var e = -1, t = Array(n.size);
  return n.forEach(function(i) {
    t[++e] = i;
  }), t;
}
var Hw = 1, Ww = 2, Uw = "[object Boolean]", jw = "[object Date]", qw = "[object Error]", Gw = "[object Map]", Kw = "[object Number]", Jw = "[object RegExp]", Yw = "[object Set]", Zw = "[object String]", Xw = "[object Symbol]", Qw = "[object ArrayBuffer]", eb = "[object DataView]", ea = He ? He.prototype : void 0, rs = ea ? ea.valueOf : void 0;
function tb(n, e, t, i, s, r, o) {
  switch (t) {
    case eb:
      if (n.byteLength != e.byteLength || n.byteOffset != e.byteOffset)
        return !1;
      n = n.buffer, e = e.buffer;
    case Qw:
      return !(n.byteLength != e.byteLength || !r(new bn(n), new bn(e)));
    case Uw:
    case jw:
    case Kw:
      return Ui(+n, +e);
    case qw:
      return n.name == e.name && n.message == e.message;
    case Jw:
    case Zw:
      return n == e + "";
    case Gw:
      var a = zw;
    case Yw:
      var l = i & Hw;
      if (a || (a = $w), n.size != e.size && !l)
        return !1;
      var c = o.get(n);
      if (c)
        return c == e;
      i |= Ww, o.set(n, e);
      var u = Pu(a(n), a(e), i, s, r, o);
      return o.delete(n), u;
    case Xw:
      if (rs)
        return rs.call(n) == rs.call(e);
  }
  return !1;
}
var ib = 1, nb = Object.prototype, sb = nb.hasOwnProperty;
function rb(n, e, t, i, s, r) {
  var o = t & ib, a = Us(n), l = a.length, c = Us(e), u = c.length;
  if (l != u && !o)
    return !1;
  for (var h = l; h--; ) {
    var d = a[h];
    if (!(o ? d in e : sb.call(e, d)))
      return !1;
  }
  var m = r.get(n), p = r.get(e);
  if (m && p)
    return m == e && p == n;
  var b = !0;
  r.set(n, e), r.set(e, n);
  for (var C = o; ++h < l; ) {
    d = a[h];
    var T = n[d], ue = e[d];
    if (i)
      var Ae = o ? i(ue, T, d, e, n, r) : i(T, ue, d, n, e, r);
    if (!(Ae === void 0 ? T === ue || s(T, ue, t, i, r) : Ae)) {
      b = !1;
      break;
    }
    C || (C = d == "constructor");
  }
  if (b && !C) {
    var we = n.constructor, Me = e.constructor;
    we != Me && "constructor" in n && "constructor" in e && !(typeof we == "function" && we instanceof we && typeof Me == "function" && Me instanceof Me) && (b = !1);
  }
  return r.delete(n), r.delete(e), b;
}
var ob = 1, ta = "[object Arguments]", ia = "[object Array]", Ki = "[object Object]", ab = Object.prototype, na = ab.hasOwnProperty;
function lb(n, e, t, i, s, r) {
  var o = he(n), a = he(e), l = o ? ia : Oi(n), c = a ? ia : Oi(e);
  l = l == ta ? Ki : l, c = c == ta ? Ki : c;
  var u = l == Ki, h = c == Ki, d = l == c;
  if (d && Ii(n)) {
    if (!Ii(e))
      return !1;
    o = !0, u = !1;
  }
  if (d && !u)
    return r || (r = new ze()), o || Sr(n) ? Pu(n, e, t, i, s, r) : tb(n, e, l, t, i, s, r);
  if (!(t & ob)) {
    var m = u && na.call(n, "__wrapped__"), p = h && na.call(e, "__wrapped__");
    if (m || p) {
      var b = m ? n.value() : n, C = p ? e.value() : e;
      return r || (r = new ze()), s(b, C, t, i, r);
    }
  }
  return d ? (r || (r = new ze()), rb(n, e, t, i, s, r)) : !1;
}
function Nr(n, e, t, i, s) {
  return n === e ? !0 : n == null || e == null || !xe(n) && !xe(e) ? n !== n && e !== e : lb(n, e, t, i, Nr, s);
}
function cb(n) {
  return function(e, t, i) {
    for (var s = -1, r = Object(e), o = i(e), a = o.length; a--; ) {
      var l = o[n ? a : ++s];
      if (t(r[l], l, r) === !1)
        break;
    }
    return e;
  };
}
var ub = cb();
const hb = ub;
var db = function() {
  return Oe.Date.now();
};
const os = db;
var fb = "Expected a function", mb = Math.max, gb = Math.min;
function ni(n, e, t) {
  var i, s, r, o, a, l, c = 0, u = !1, h = !1, d = !0;
  if (typeof n != "function")
    throw new TypeError(fb);
  e = So(e) || 0, K(t) && (u = !!t.leading, h = "maxWait" in t, r = h ? mb(So(t.maxWait) || 0, e) : r, d = "trailing" in t ? !!t.trailing : d);
  function m(k) {
    var x = i, A = s;
    return i = s = void 0, c = k, o = n.apply(A, x), o;
  }
  function p(k) {
    return c = k, a = setTimeout(T, e), u ? m(k) : o;
  }
  function b(k) {
    var x = k - l, A = k - c, J = e - x;
    return h ? gb(J, r - A) : J;
  }
  function C(k) {
    var x = k - l, A = k - c;
    return l === void 0 || x >= e || x < 0 || h && A >= r;
  }
  function T() {
    var k = os();
    if (C(k))
      return ue(k);
    a = setTimeout(T, b(k));
  }
  function ue(k) {
    return a = void 0, d && i ? m(k) : (i = s = void 0, o);
  }
  function Ae() {
    a !== void 0 && clearTimeout(a), c = 0, i = l = s = a = void 0;
  }
  function we() {
    return a === void 0 ? o : ue(os());
  }
  function Me() {
    var k = os(), x = C(k);
    if (i = arguments, s = this, l = k, x) {
      if (a === void 0)
        return p(l);
      if (h)
        return clearTimeout(a), a = setTimeout(T, e), m(l);
    }
    return a === void 0 && (a = setTimeout(T, e)), o;
  }
  return Me.cancel = Ae, Me.flush = we, Me;
}
function Ks(n, e, t) {
  (t !== void 0 && !Ui(n[e], t) || t === void 0 && !(e in n)) && Er(n, e, t);
}
function pb(n) {
  return xe(n) && Bn(n);
}
function Js(n, e) {
  if (!(e === "constructor" && typeof n[e] == "function") && e != "__proto__")
    return n[e];
}
function wb(n) {
  return fi(n, mi(n));
}
function bb(n, e, t, i, s, r, o) {
  var a = Js(n, t), l = Js(e, t), c = o.get(l);
  if (c) {
    Ks(n, t, c);
    return;
  }
  var u = r ? r(a, l, t + "", n, e, o) : void 0, h = u === void 0;
  if (h) {
    var d = he(l), m = !d && Ii(l), p = !d && !m && Sr(l);
    u = l, d || m || p ? he(a) ? u = a : pb(a) ? u = Cr(a) : m ? (h = !1, u = wu(l, !0)) : p ? (h = !1, u = yu(l, !0)) : u = [] : me(l) || $s(l) ? (u = a, $s(a) ? u = wb(a) : (!K(a) || St(a)) && (u = ku(l))) : h = !1;
  }
  h && (o.set(l, u), s(u, l, i, r, o), o.delete(l)), Ks(n, t, u);
}
function Lr(n, e, t, i, s) {
  n !== e && hb(e, function(r, o) {
    if (s || (s = new ze()), K(r))
      bb(n, e, o, t, Lr, i, s);
    else {
      var a = i ? i(Js(n, o), r, o + "", n, e, s) : void 0;
      a === void 0 && (a = r), Ks(n, o, a);
    }
  }, mi);
}
var _b = Pr(function(n, e, t, i) {
  Lr(n, e, t, i);
});
const vb = _b;
function yb(n) {
  var e = n == null ? 0 : n.length;
  return e ? n[e - 1] : void 0;
}
var kb = "[object String]";
function sa(n) {
  return typeof n == "string" || !he(n) && xe(n) && mt(n) == kb;
}
function Cb(n, e) {
  return e.length < 2 ? n : jc(n, Kc(e, 0, -1));
}
function gi(n) {
  return xe(n) && n.nodeType === 1 && !me(n);
}
function vn(n, e) {
  return Nr(n, e);
}
function Ab(n, e, t) {
  t = typeof t == "function" ? t : void 0;
  var i = t ? t(n, e) : void 0;
  return i === void 0 ? Nr(n, e, void 0, t) : !!i;
}
var Eb = Pr(function(n, e, t) {
  Lr(n, e, t);
});
const xu = Eb;
function Tb(n, e) {
  return e = Vr(e, n), n = Cb(n, e), n == null || delete n[Or(yb(e))];
}
function Pb(n, e, t, i) {
  if (!K(n))
    return n;
  e = Vr(e, n);
  for (var s = -1, r = e.length, o = r - 1, a = n; a != null && ++s < r; ) {
    var l = Or(e[s]), c = t;
    if (l === "__proto__" || l === "constructor" || l === "prototype")
      return n;
    if (s != o) {
      var u = a[l];
      c = i ? i(u, l, a) : void 0, c === void 0 && (c = K(u) ? u : Ar(e[s + 1]) ? [] : {});
    }
    Tr(a, l, c), a = a[l];
  }
  return n;
}
function xb(n, e, t, i) {
  for (var s = t - 1, r = n.length; ++s < r; )
    if (i(n[s], e))
      return s;
  return -1;
}
var Sb = Array.prototype, ra = Sb.splice;
function Ib(n, e, t, i) {
  var s = i ? xb : Nm, r = -1, o = e.length, a = n;
  for (n === e && (e = Cr(e)), t && (a = Bc(n, Dn(t))); ++r < o; )
    for (var l = 0, c = e[r], u = t ? t(c) : c; (l = s(a, u, l, i)) > -1; )
      a !== n && ra.call(a, l, 1), ra.call(n, l, 1);
  return n;
}
function Rb(n, e) {
  return n && n.length && e && e.length ? Ib(n, e) : n;
}
var Vb = Fc(Rb);
const Ob = Vb;
function Mb(n, e, t) {
  return n == null ? n : Pb(n, e, t);
}
var Bb = q1(function(n, e, t) {
  return n + (t ? " " : "") + iu(e);
});
const Db = Bb;
var Fb = "Expected a function";
function zn(n, e, t) {
  var i = !0, s = !0;
  if (typeof n != "function")
    throw new TypeError(Fb);
  return K(t) && (i = "leading" in t ? !!t.leading : i, s = "trailing" in t ? !!t.trailing : s), ni(n, e, {
    leading: i,
    maxWait: e,
    trailing: s
  });
}
function Nb(n, e) {
  return n == null ? !0 : Tb(n, e);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const yn = Symbol("observableProperties"), $n = Symbol("boundObservables"), kn = Symbol("boundProperties"), zt = Symbol("decoratedMethods"), oa = Symbol("decoratedOriginal"), Su = H(L());
function H(n) {
  if (!n)
    return Su;
  class e extends n {
    set(i, s) {
      if (K(i)) {
        Object.keys(i).forEach((o) => {
          this.set(o, i[o]);
        }, this);
        return;
      }
      as(this);
      const r = this[yn];
      if (i in this && !r.has(i))
        throw new f("observable-set-cannot-override", this);
      Object.defineProperty(this, i, {
        enumerable: !0,
        configurable: !0,
        get() {
          return r.get(i);
        },
        set(o) {
          const a = r.get(i);
          let l = this.fire(`set:${i}`, i, o, a);
          l === void 0 && (l = o), (a !== l || !r.has(i)) && (r.set(i, l), this.fire(`change:${i}`, i, l, a));
        }
      }), this[i] = s;
    }
    bind(...i) {
      if (!i.length || !aa(i))
        throw new f("observable-bind-wrong-properties", this);
      if (new Set(i).size !== i.length)
        throw new f("observable-bind-duplicate-properties", this);
      as(this);
      const s = this[kn];
      i.forEach((o) => {
        if (s.has(o))
          throw new f("observable-bind-rebind", this);
      });
      const r = /* @__PURE__ */ new Map();
      return i.forEach((o) => {
        const a = { property: o, to: [] };
        s.set(o, a), r.set(o, a);
      }), {
        to: Lb,
        toMany: zb,
        _observable: this,
        _bindProperties: i,
        _to: [],
        _bindings: r
      };
    }
    unbind(...i) {
      if (!this[yn])
        return;
      const s = this[kn], r = this[$n];
      if (i.length) {
        if (!aa(i))
          throw new f("observable-unbind-wrong-properties", this);
        i.forEach((o) => {
          const a = s.get(o);
          a && (a.to.forEach(([l, c]) => {
            const u = r.get(l), h = u[c];
            h.delete(a), h.size || delete u[c], Object.keys(u).length || (r.delete(l), this.stopListening(l, "change"));
          }), s.delete(o));
        });
      } else
        r.forEach((o, a) => {
          this.stopListening(a, "change");
        }), r.clear(), s.clear();
    }
    decorate(i) {
      as(this);
      const s = this[i];
      if (!s)
        throw new f("observablemixin-cannot-decorate-undefined", this, { object: this, methodName: i });
      this.on(i, (r, o) => {
        r.return = s.apply(this, o);
      }), this[i] = function(...r) {
        return this.fire(i, r);
      }, this[i][oa] = s, this[zt] || (this[zt] = []), this[zt].push(i);
    }
    // Override the EmitterMixin stopListening method to be able to clean (and restore) decorated methods.
    // This is needed in case of:
    //  1. Have x.foo() decorated.
    //  2. Call x.stopListening()
    //  3. Call x.foo(). Problem: nothing happens (the original foo() method is not executed)
    stopListening(i, s, r) {
      if (!i && this[zt]) {
        for (const o of this[zt])
          this[o] = this[o][oa];
        delete this[zt];
      }
      super.stopListening(i, s, r);
    }
  }
  return e;
}
[
  "set",
  "bind",
  "unbind",
  "decorate",
  "on",
  "once",
  "off",
  "listenTo",
  "stopListening",
  "fire",
  "delegate",
  "stopDelegating",
  "_addEventListener",
  "_removeEventListener"
].forEach((n) => {
  H[n] = Su.prototype[n];
});
function as(n) {
  n[yn] || (Object.defineProperty(n, yn, {
    value: /* @__PURE__ */ new Map()
  }), Object.defineProperty(n, $n, {
    value: /* @__PURE__ */ new Map()
  }), Object.defineProperty(n, kn, {
    value: /* @__PURE__ */ new Map()
  }));
}
function Lb(...n) {
  const e = Hb(...n), t = Array.from(this._bindings.keys()), i = t.length;
  if (!e.callback && e.to.length > 1)
    throw new f("observable-bind-to-no-callback", this);
  if (i > 1 && e.callback)
    throw new f("observable-bind-to-extra-callback", this);
  e.to.forEach((s) => {
    if (s.properties.length && s.properties.length !== i)
      throw new f("observable-bind-to-properties-length", this);
    s.properties.length || (s.properties = this._bindProperties);
  }), this._to = e.to, e.callback && (this._bindings.get(t[0]).callback = e.callback), jb(this._observable, this._to), Ub(this), this._bindProperties.forEach((s) => {
    Iu(this._observable, s);
  });
}
function zb(n, e, t) {
  if (this._bindings.size > 1)
    throw new f("observable-bind-to-many-not-one-binding", this);
  this.to(
    ...$b(n, e),
    // ...using given callback to parse attribute values.
    t
  );
}
function $b(n, e) {
  const t = n.map((i) => [i, e]);
  return Array.prototype.concat.apply([], t);
}
function aa(n) {
  return n.every((e) => typeof e == "string");
}
function Hb(...n) {
  if (!n.length)
    throw new f("observable-bind-to-parse-error", null);
  const e = { to: [] };
  let t;
  return typeof n[n.length - 1] == "function" && (e.callback = n.pop()), n.forEach((i) => {
    if (typeof i == "string")
      t.properties.push(i);
    else if (typeof i == "object")
      t = { observable: i, properties: [] }, e.to.push(t);
    else
      throw new f("observable-bind-to-parse-error", null);
  }), e;
}
function Wb(n, e, t, i) {
  const s = n[$n], r = s.get(t), o = r || {};
  o[i] || (o[i] = /* @__PURE__ */ new Set()), o[i].add(e), r || s.set(t, o);
}
function Ub(n) {
  let e;
  n._bindings.forEach((t, i) => {
    n._to.forEach((s) => {
      e = s.properties[t.callback ? 0 : n._bindProperties.indexOf(i)], t.to.push([s.observable, e]), Wb(n._observable, t, s.observable, e);
    });
  });
}
function Iu(n, e) {
  const i = n[kn].get(e);
  let s;
  i.callback ? s = i.callback.apply(n, i.to.map((r) => r[0][r[1]])) : (s = i.to[0], s = s[0][s[1]]), Object.prototype.hasOwnProperty.call(n, e) ? n[e] = s : n.set(e, s);
}
function jb(n, e) {
  e.forEach((t) => {
    const i = n[$n];
    let s;
    i.get(t.observable) || n.listenTo(t.observable, "change", (r, o) => {
      s = i.get(t.observable)[o], s && s.forEach((a) => {
        Iu(n, a.property);
      });
    });
  });
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Ys(n) {
  let e = 0;
  for (const t of n)
    e++;
  return e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ce(n, e) {
  const t = Math.min(n.length, e.length);
  for (let i = 0; i < t; i++)
    if (n[i] != e[i])
      return i;
  return n.length == e.length ? "same" : n.length < e.length ? "prefix" : "extension";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ye(n) {
  return !!(n && n[Symbol.iterator]);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function qb(n, e, t = {}, i = []) {
  const s = t && t.xmlns, r = s ? n.createElementNS(s, e) : n.createElement(e);
  for (const o in t)
    r.setAttribute(o, t[o]);
  (sa(i) || !ye(i)) && (i = [i]);
  for (let o of i)
    sa(o) && (o = n.createTextNode(o)), r.appendChild(o);
  return r;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ru {
  /**
   * Creates an instance of the {@link ~Config} class.
   *
   * @param configurations The initial configurations to be set. Usually, provided by the user.
   * @param defaultConfigurations The default configurations. Usually, provided by the system.
   */
  constructor(e, t) {
    this._config = {}, t && this.define(la(t)), e && this._setObjectToTarget(this._config, e);
  }
  set(e, t) {
    this._setToTarget(this._config, e, t);
  }
  define(e, t) {
    this._setToTarget(this._config, e, t, !0);
  }
  /**
   * Gets the value for a configuration entry.
   *
   * ```ts
   * config.get( 'name' );
   * ```
   *
   * Deep configurations can be retrieved by separating each part with a dot.
   *
   * ```ts
   * config.get( 'toolbar.collapsed' );
   * ```
   *
   * @param name The configuration name. Configuration names are case-sensitive.
   * @returns The configuration value or `undefined` if the configuration entry was not found.
   */
  get(e) {
    return this._getFromSource(this._config, e);
  }
  /**
   * Iterates over all top level configuration names.
   */
  *names() {
    for (const e of Object.keys(this._config))
      yield e;
  }
  /**
   * Saves passed configuration to the specified target (nested object).
   *
   * @param target Nested config object.
   * @param name The configuration name or an object from which take properties as
   * configuration entries. Configuration names are case-sensitive.
   * @param value The configuration value. Used if a name is passed.
   * @param isDefine Define if passed configuration should overwrite existing one.
   */
  _setToTarget(e, t, i, s = !1) {
    if (me(t)) {
      this._setObjectToTarget(e, t, s);
      return;
    }
    const r = t.split(".");
    t = r.pop();
    for (const o of r)
      me(e[o]) || (e[o] = {}), e = e[o];
    if (me(i)) {
      me(e[t]) || (e[t] = {}), e = e[t], this._setObjectToTarget(e, i, s);
      return;
    }
    s && typeof e[t] < "u" || (e[t] = i);
  }
  /**
   * Get specified configuration from specified source (nested object).
   *
   * @param source level of nested object.
   * @param name The configuration name. Configuration names are case-sensitive.
   * @returns The configuration value or `undefined` if the configuration entry was not found.
   */
  _getFromSource(e, t) {
    const i = t.split(".");
    t = i.pop();
    for (const s of i) {
      if (!me(e[s])) {
        e = null;
        break;
      }
      e = e[s];
    }
    return e ? la(e[t]) : void 0;
  }
  /**
   * Iterates through passed object and calls {@link #_setToTarget} method with object key and value for each property.
   *
   * @param target Nested config object.
   * @param configuration Configuration data set
   * @param isDefine Defines if passed configuration is default configuration or not.
   */
  _setObjectToTarget(e, t, i) {
    Object.keys(t).forEach((s) => {
      this._setToTarget(e, s, t[s], i);
    });
  }
}
function la(n) {
  return Fr(n, Gb);
}
function Gb(n) {
  return gi(n) ? n : void 0;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ut(n) {
  if (n) {
    if (n.defaultView)
      return n instanceof n.defaultView.Document;
    if (n.ownerDocument && n.ownerDocument.defaultView)
      return n instanceof n.ownerDocument.defaultView.Node;
  }
  return !1;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Cn(n) {
  const e = Object.prototype.toString.apply(n);
  return e == "[object Window]" || e == "[object global]";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Vu = rt(L());
function rt(n) {
  if (!n)
    return Vu;
  class e extends n {
    listenTo(i, s, r, o = {}) {
      if (ut(i) || Cn(i)) {
        const a = {
          capture: !!o.useCapture,
          passive: !!o.usePassive
        }, l = this._getProxyEmitter(i, a) || new Kb(i, a);
        this.listenTo(l, s, r, o);
      } else
        super.listenTo(i, s, r, o);
    }
    stopListening(i, s, r) {
      if (ut(i) || Cn(i)) {
        const o = this._getAllProxyEmitters(i);
        for (const a of o)
          this.stopListening(a, s, r);
      } else
        super.stopListening(i, s, r);
    }
    /**
     * Retrieves ProxyEmitter instance for given DOM Node residing in this Host and given options.
     *
     * @param node DOM Node of the ProxyEmitter.
     * @param options Additional options.
     * @param options.useCapture Indicates that events of this type will be dispatched to the registered
     * listener before being dispatched to any EventTarget beneath it in the DOM tree.
     * @param options.usePassive Indicates that the function specified by listener will never call preventDefault()
     * and prevents blocking browser's main thread by this event handler.
     * @returns ProxyEmitter instance bound to the DOM Node.
     */
    _getProxyEmitter(i, s) {
      return If(this, Ou(i, s));
    }
    /**
     * Retrieves all the ProxyEmitter instances for given DOM Node residing in this Host.
     *
     * @param node DOM Node of the ProxyEmitter.
     */
    _getAllProxyEmitters(i) {
      return [
        { capture: !1, passive: !1 },
        { capture: !1, passive: !0 },
        { capture: !0, passive: !1 },
        { capture: !0, passive: !0 }
      ].map((s) => this._getProxyEmitter(i, s)).filter((s) => !!s);
    }
  }
  return e;
}
[
  "_getProxyEmitter",
  "_getAllProxyEmitters",
  "on",
  "once",
  "off",
  "listenTo",
  "stopListening",
  "fire",
  "delegate",
  "stopDelegating",
  "_addEventListener",
  "_removeEventListener"
].forEach((n) => {
  rt[n] = Vu.prototype[n];
});
class Kb extends L() {
  /**
   * @param node DOM Node that fires events.
   * @param options Additional options.
   * @param options.useCapture Indicates that events of this type will be dispatched to the registered
   * listener before being dispatched to any EventTarget beneath it in the DOM tree.
   * @param options.usePassive Indicates that the function specified by listener will never call preventDefault()
   * and prevents blocking browser's main thread by this event handler.
   */
  constructor(e, t) {
    super(), Ic(this, Ou(e, t)), this._domNode = e, this._options = t;
  }
  /**
   * Registers a callback function to be executed when an event is fired.
   *
   * It attaches a native DOM listener to the DOM Node. When fired,
   * a corresponding Emitter event will also fire with DOM Event object as an argument.
   *
   * **Note**: This is automatically called by the
   * {@link module:utils/emittermixin~Emitter#listenTo `Emitter#listenTo()`}.
   *
   * @param event The name of the event.
   */
  attach(e) {
    if (this._domListeners && this._domListeners[e])
      return;
    const t = this._createDomListener(e);
    this._domNode.addEventListener(e, t, this._options), this._domListeners || (this._domListeners = {}), this._domListeners[e] = t;
  }
  /**
   * Stops executing the callback on the given event.
   *
   * **Note**: This is automatically called by the
   * {@link module:utils/emittermixin~Emitter#stopListening `Emitter#stopListening()`}.
   *
   * @param event The name of the event.
   */
  detach(e) {
    let t;
    this._domListeners[e] && (!(t = this._events[e]) || !t.callbacks.length) && this._domListeners[e].removeListener();
  }
  /**
   * Adds callback to emitter for given event.
   *
   * @internal
   * @param event The name of the event.
   * @param callback The function to be called on event.
   * @param options Additional options.
   */
  _addEventListener(e, t, i) {
    this.attach(e), L().prototype._addEventListener.call(this, e, t, i);
  }
  /**
   * Removes callback from emitter for given event.
   *
   * @internal
   * @param event The name of the event.
   * @param callback The function to stop being called.
   */
  _removeEventListener(e, t) {
    L().prototype._removeEventListener.call(this, e, t), this.detach(e);
  }
  /**
   * Creates a native DOM listener callback. When the native DOM event
   * is fired it will fire corresponding event on this ProxyEmitter.
   * Note: A native DOM Event is passed as an argument.
   *
   * @param event The name of the event.
   * @returns The DOM listener callback.
   */
  _createDomListener(e) {
    const t = (i) => {
      this.fire(e, i);
    };
    return t.removeListener = () => {
      this._domNode.removeEventListener(e, t, this._options), delete this._domListeners[e];
    }, t;
  }
}
function Jb(n) {
  return n["data-ck-expando"] || (n["data-ck-expando"] = et());
}
function Ou(n, e) {
  let t = Jb(n);
  for (const i of Object.keys(e).sort())
    e[i] && (t += "-" + i);
  return t;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let Zs;
try {
  Zs = { window, document };
} catch {
  /* istanbul ignore next -- @preserve */
  Zs = { window: {}, document: {} };
}
const I = Zs;
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Yb(n) {
  let e = n.parentElement;
  if (!e)
    return null;
  for (; e.tagName != "BODY"; ) {
    const t = e.style.overflowY || I.window.getComputedStyle(e).overflowY;
    if (t === "auto" || t === "scroll")
      break;
    if (e = e.parentElement, !e)
      return null;
  }
  return e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Mu(n) {
  const e = [];
  let t = n;
  for (; t && t.nodeType != Node.DOCUMENT_NODE; )
    e.unshift(t), t = t.parentNode;
  return e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Zb(n) {
  return n instanceof HTMLTextAreaElement ? n.value : n.innerHTML;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Y(n) {
  return Object.prototype.toString.call(n) == "[object Text]";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Hn(n) {
  return Object.prototype.toString.apply(n) == "[object Range]";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Bu(n) {
  const e = n.ownerDocument.defaultView.getComputedStyle(n);
  return {
    top: parseInt(e.borderTopWidth, 10),
    right: parseInt(e.borderRightWidth, 10),
    bottom: parseInt(e.borderBottomWidth, 10),
    left: parseInt(e.borderLeftWidth, 10)
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Du = ["top", "right", "bottom", "left", "width", "height"];
class M {
  /**
   * Creates an instance of rect.
   *
   * ```ts
   * // Rect of an HTMLElement.
   * const rectA = new Rect( document.body );
   *
   * // Rect of a DOM Range.
   * const rectB = new Rect( document.getSelection().getRangeAt( 0 ) );
   *
   * // Rect of a window (web browser viewport).
   * const rectC = new Rect( window );
   *
   * // Rect out of an object.
   * const rectD = new Rect( { top: 0, right: 10, bottom: 10, left: 0, width: 10, height: 10 } );
   *
   * // Rect out of another Rect instance.
   * const rectE = new Rect( rectD );
   *
   * // Rect out of a ClientRect.
   * const rectF = new Rect( document.body.getClientRects().item( 0 ) );
   * ```
   *
   * **Note**: By default a rect of an HTML element includes its CSS borders and scrollbars (if any)
   * ant the rect of a `window` includes scrollbars too. Use {@link #excludeScrollbarsAndBorders}
   * to get the inner part of the rect.
   *
   * @param source A source object to create the rect.
   */
  constructor(e) {
    const t = Hn(e);
    if (Object.defineProperty(this, "_source", {
      // If the source is a Rect instance, copy it's #_source.
      value: e._source || e,
      writable: !0,
      enumerable: !1
    }), Fu(e) || t)
      if (t) {
        const i = M.getDomRangeRects(e);
        Ji(this, M.getBoundingRect(i));
      } else
        Ji(this, e.getBoundingClientRect());
    else if (Cn(e)) {
      const { innerWidth: i, innerHeight: s } = e;
      Ji(this, {
        top: 0,
        right: i,
        bottom: s,
        left: 0,
        width: i,
        height: s
      });
    } else
      Ji(this, e);
  }
  /**
   * Returns a clone of the rect.
   *
   * @returns A cloned rect.
   */
  clone() {
    return new M(this);
  }
  /**
   * Moves the rect so that its upper–left corner lands in desired `[ x, y ]` location.
   *
   * @param x Desired horizontal location.
   * @param y Desired vertical location.
   * @returns A rect which has been moved.
   */
  moveTo(e, t) {
    return this.top = t, this.right = e + this.width, this.bottom = t + this.height, this.left = e, this;
  }
  /**
   * Moves the rect in–place by a dedicated offset.
   *
   * @param x A horizontal offset.
   * @param y A vertical offset
   * @returns A rect which has been moved.
   */
  moveBy(e, t) {
    return this.top += t, this.right += e, this.left += e, this.bottom += t, this;
  }
  /**
   * Returns a new rect a a result of intersection with another rect.
   */
  getIntersection(e) {
    const t = {
      top: Math.max(this.top, e.top),
      right: Math.min(this.right, e.right),
      bottom: Math.min(this.bottom, e.bottom),
      left: Math.max(this.left, e.left),
      width: 0,
      height: 0
    };
    return t.width = t.right - t.left, t.height = t.bottom - t.top, t.width < 0 || t.height < 0 ? null : new M(t);
  }
  /**
   * Returns the area of intersection with another rect.
   *
   * @returns Area of intersection.
   */
  getIntersectionArea(e) {
    const t = this.getIntersection(e);
    return t ? t.getArea() : 0;
  }
  /**
   * Returns the area of the rect.
   */
  getArea() {
    return this.width * this.height;
  }
  /**
   * Returns a new rect, a part of the original rect, which is actually visible to the user,
   * e.g. an original rect cropped by parent element rects which have `overflow` set in CSS
   * other than `"visible"`.
   *
   * If there's no such visible rect, which is when the rect is limited by one or many of
   * the ancestors, `null` is returned.
   *
   * **Note**: This method does not consider the boundaries of the viewport (window).
   * To get a rect cropped by all ancestors and the viewport, use an intersection such as:
   *
   * ```ts
   * const visibleInViewportRect = new Rect( window ).getIntersection( new Rect( source ).getVisible() );
   * ```
   *
   * @returns A visible rect instance or `null`, if there's none.
   */
  getVisible() {
    const e = this._source;
    let t = this.clone();
    if (ca(e))
      return t;
    let i = e, s = e.parentNode || e.commonAncestorContainer, r;
    for (; s && !ca(s); ) {
      if (i instanceof HTMLElement && ua(i) === "absolute" && (r = i), r && (ua(s) !== "relative" || Xb(s) === "visible")) {
        i = s, s = s.parentNode;
        continue;
      }
      const o = new M(s), a = t.getIntersection(o);
      if (a)
        a.getArea() < t.getArea() && (t = a);
      else
        return null;
      i = s, s = s.parentNode;
    }
    return t;
  }
  /**
   * Checks if all property values ({@link #top}, {@link #left}, {@link #right},
   * {@link #bottom}, {@link #width} and {@link #height}) are the equal in both rect
   * instances.
   *
   * @param anotherRect A rect instance to compare with.
   * @returns `true` when Rects are equal. `false` otherwise.
   */
  isEqual(e) {
    for (const t of Du)
      if (this[t] !== e[t])
        return !1;
    return !0;
  }
  /**
   * Checks whether a rect fully contains another rect instance.
   *
   * @param anotherRect
   * @returns `true` if contains, `false` otherwise.
   */
  contains(e) {
    const t = this.getIntersection(e);
    return !!(t && t.isEqual(e));
  }
  /**
   * Excludes scrollbars and CSS borders from the rect.
   *
   * * Borders are removed when {@link #_source} is an HTML element.
   * * Scrollbars are excluded from HTML elements and the `window`.
   *
   * @returns A rect which has been updated.
   */
  excludeScrollbarsAndBorders() {
    const e = this._source;
    let t, i, s;
    if (Cn(e))
      t = e.innerWidth - e.document.documentElement.clientWidth, i = e.innerHeight - e.document.documentElement.clientHeight, s = e.getComputedStyle(e.document.documentElement).direction;
    else {
      const r = Bu(e);
      t = e.offsetWidth - e.clientWidth - r.left - r.right, i = e.offsetHeight - e.clientHeight - r.top - r.bottom, s = e.ownerDocument.defaultView.getComputedStyle(e).direction, this.left += r.left, this.top += r.top, this.right -= r.right, this.bottom -= r.bottom, this.width = this.right - this.left, this.height = this.bottom - this.top;
    }
    return this.width -= t, s === "ltr" ? this.right -= t : this.left += t, this.height -= i, this.bottom -= i, this;
  }
  /**
   * Returns an array of rects of the given native DOM Range.
   *
   * @param range A native DOM range.
   * @returns DOM Range rects.
   */
  static getDomRangeRects(e) {
    const t = [], i = Array.from(e.getClientRects());
    if (i.length)
      for (const s of i)
        t.push(new M(s));
    else {
      let s = e.startContainer;
      Y(s) && (s = s.parentNode);
      const r = new M(s.getBoundingClientRect());
      r.right = r.left, r.width = 0, t.push(r);
    }
    return t;
  }
  /**
   * Returns a bounding rectangle that contains all the given `rects`.
   *
   * @param rects A list of rectangles that should be contained in the result rectangle.
   * @returns Bounding rectangle or `null` if no `rects` were given.
   */
  static getBoundingRect(e) {
    const t = {
      left: Number.POSITIVE_INFINITY,
      top: Number.POSITIVE_INFINITY,
      right: Number.NEGATIVE_INFINITY,
      bottom: Number.NEGATIVE_INFINITY,
      width: 0,
      height: 0
    };
    let i = 0;
    for (const s of e)
      i++, t.left = Math.min(t.left, s.left), t.top = Math.min(t.top, s.top), t.right = Math.max(t.right, s.right), t.bottom = Math.max(t.bottom, s.bottom);
    return i == 0 ? null : (t.width = t.right - t.left, t.height = t.bottom - t.top, new M(t));
  }
}
function Ji(n, e) {
  for (const t of Du)
    n[t] = e[t];
}
function ca(n) {
  return Fu(n) ? n === n.ownerDocument.body : !1;
}
function Fu(n) {
  return n !== null && typeof n == "object" && n.nodeType === 1 && typeof n.getBoundingClientRect == "function";
}
function ua(n) {
  return n.ownerDocument.defaultView.getComputedStyle(n).position;
}
function Xb(n) {
  return n.ownerDocument.defaultView.getComputedStyle(n).overflow;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class $ {
  /**
   * Creates an instance of the `ResizeObserver` class.
   *
   * @param element A DOM element that is to be observed for resizing. Note that
   * the element must be visible (i.e. not detached from DOM) for the observer to work.
   * @param callback A function called when the observed element was resized. It passes
   * the [`ResizeObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry)
   * object with information about the resize event.
   */
  constructor(e, t) {
    $._observerInstance || $._createObserver(), this._element = e, this._callback = t, $._addElementCallback(e, t), $._observerInstance.observe(e);
  }
  /**
   * The element observed by this observer.
   */
  get element() {
    return this._element;
  }
  /**
   * Destroys the observer which disables the `callback` passed to the {@link #constructor}.
   */
  destroy() {
    $._deleteElementCallback(this._element, this._callback);
  }
  /**
   * Registers a new resize callback for the DOM element.
   */
  static _addElementCallback(e, t) {
    $._elementCallbacks || ($._elementCallbacks = /* @__PURE__ */ new Map());
    let i = $._elementCallbacks.get(e);
    i || (i = /* @__PURE__ */ new Set(), $._elementCallbacks.set(e, i)), i.add(t);
  }
  /**
   * Removes a resize callback from the DOM element. If no callbacks are left
   * for the element, it removes the element from the native observer.
   */
  static _deleteElementCallback(e, t) {
    const i = $._getElementCallbacks(e);
    i && (i.delete(t), i.size || ($._elementCallbacks.delete(e), $._observerInstance.unobserve(e))), $._elementCallbacks && !$._elementCallbacks.size && ($._observerInstance = null, $._elementCallbacks = null);
  }
  /**
   * Returns are registered resize callbacks for the DOM element.
   */
  static _getElementCallbacks(e) {
    return $._elementCallbacks ? $._elementCallbacks.get(e) : null;
  }
  /**
   * Creates the single native observer shared across all `ResizeObserver` instances.
   */
  static _createObserver() {
    $._observerInstance = new I.window.ResizeObserver((e) => {
      for (const t of e) {
        const i = $._getElementCallbacks(t.target);
        if (i)
          for (const s of i)
            s(t);
      }
    });
  }
}
$._observerInstance = null;
$._elementCallbacks = null;
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ha(n, e) {
  n instanceof HTMLTextAreaElement && (n.value = e), n.innerHTML = e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function zr(n) {
  return (e) => e + n;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Yi(n) {
  let e = 0;
  for (; n.previousSibling; )
    n = n.previousSibling, e++;
  return e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Nu(n, e, t) {
  n.insertBefore(t, n.childNodes[e] || null);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Xt(n) {
  return n && n.nodeType === Node.COMMENT_NODE;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Lu(n) {
  try {
    I.document.createAttribute(n);
  } catch {
    return !1;
  }
  return !0;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Rt(n) {
  return !!(n && n.getClientRects && n.getClientRects().length);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Qb(n) {
  return !n || !n.parentNode || n.offsetParent === I.document.body ? null : n.offsetParent;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function zu({ element: n, target: e, positions: t, limiter: i, fitInViewport: s, viewportOffsetConfig: r }) {
  St(e) && (e = e()), St(i) && (i = i());
  const o = Qb(n), a = new M(n), l = new M(e);
  let c;
  const u = s && e_(r) || null, h = { targetRect: l, elementRect: a, positionedElementAncestor: o, viewportRect: u };
  if (!i && !s)
    c = new Xs(t[0], h);
  else {
    const d = i && new M(i).getVisible();
    Object.assign(h, { limiterRect: d, viewportRect: u }), c = t_(t, h) || new Xs(t[0], h);
  }
  return c;
}
function e_(n) {
  n = Object.assign({ top: 0, bottom: 0, left: 0, right: 0 }, n);
  const e = new M(I.window);
  return e.top += n.top, e.height -= n.top, e.bottom -= n.bottom, e.height -= n.bottom, e;
}
function t_(n, e) {
  const { elementRect: t } = e, i = t.getArea(), s = n.map((a) => new Xs(a, e)).filter((a) => !!a.name);
  let r = 0, o = null;
  for (const a of s) {
    const { limiterIntersectionArea: l, viewportIntersectionArea: c } = a;
    if (l === i)
      return a;
    const u = c ** 2 + l ** 2;
    u > r && (r = u, o = a);
  }
  return o;
}
function i_(n, e) {
  const t = $u(new M(e)), i = Bu(e);
  let s = 0, r = 0;
  s -= t.left, r -= t.top, s += e.scrollLeft, r += e.scrollTop, s -= i.left, r -= i.top, n.moveBy(s, r);
}
function $u(n) {
  const { scrollX: e, scrollY: t } = I.window;
  return n.clone().moveBy(e, t);
}
class Xs {
  /**
   * Creates an instance of the {@link module:utils/dom/position~PositionObject} class.
   *
   * @param positioningFunction function The function that defines the expected
   * coordinates the positioned element should move to.
   * @param options options object.
   * @param options.elementRect The positioned element rect.
   * @param options.targetRect The target element rect.
   * @param options.viewportRect The viewport rect.
   * @param options.limiterRect The limiter rect.
   * @param options.positionedElementAncestor Nearest element ancestor element which CSS position is not "static".
   */
  constructor(e, t) {
    const i = e(t.targetRect, t.elementRect, t.viewportRect);
    if (!i)
      return;
    const { left: s, top: r, name: o, config: a } = i;
    this.name = o, this.config = a, this._positioningFunctionCorrdinates = { left: s, top: r }, this._options = t;
  }
  /**
   * The left value in pixels in the CSS `position: absolute` coordinate system.
   * Set it on the positioned element in DOM to move it to the position.
   */
  get left() {
    return this._absoluteRect.left;
  }
  /**
   * The top value in pixels in the CSS `position: absolute` coordinate system.
   * Set it on the positioned element in DOM to move it to the position.
   */
  get top() {
    return this._absoluteRect.top;
  }
  /**
   * An intersection area between positioned element and limiter within viewport constraints.
   */
  get limiterIntersectionArea() {
    const e = this._options.limiterRect;
    if (e) {
      const t = this._options.viewportRect;
      if (t) {
        const i = e.getIntersection(t);
        if (i)
          return i.getIntersectionArea(this._rect);
      } else
        return e.getIntersectionArea(this._rect);
    }
    return 0;
  }
  /**
   * An intersection area between positioned element and viewport.
   */
  get viewportIntersectionArea() {
    const e = this._options.viewportRect;
    return e ? e.getIntersectionArea(this._rect) : 0;
  }
  /**
   * An already positioned element rect. A clone of the element rect passed to the constructor
   * but placed in the viewport according to the positioning function.
   */
  get _rect() {
    return this._cachedRect ? this._cachedRect : (this._cachedRect = this._options.elementRect.clone().moveTo(this._positioningFunctionCorrdinates.left, this._positioningFunctionCorrdinates.top), this._cachedRect);
  }
  /**
   * An already absolutely positioned element rect. See ({@link #_rect}).
   */
  get _absoluteRect() {
    return this._cachedAbsoluteRect ? this._cachedAbsoluteRect : (this._cachedAbsoluteRect = $u(this._rect), this._options.positionedElementAncestor && i_(this._cachedAbsoluteRect, this._options.positionedElementAncestor), this._cachedAbsoluteRect);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function da(n) {
  const e = n.parentNode;
  e && e.removeChild(n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function n_({ target: n, viewportOffset: e = 0, ancestorOffset: t = 0, alignToTop: i, forceScroll: s }) {
  const r = $r(n);
  let o = r, a = null;
  for (e = o_(e); o; ) {
    let l;
    o == r ? l = fa(n) : l = fa(a), r_({
      parent: l,
      getRect: () => ma(n, o),
      alignToTop: i,
      ancestorOffset: t,
      forceScroll: s
    });
    const c = ma(n, o);
    if (s_({
      window: o,
      rect: c,
      viewportOffset: e,
      alignToTop: i,
      forceScroll: s
    }), o.parent != o) {
      if (a = o.frameElement, o = o.parent, !a)
        return;
    } else
      o = null;
  }
}
function s_({ window: n, rect: e, alignToTop: t, forceScroll: i, viewportOffset: s }) {
  const r = e.clone().moveBy(0, s.bottom), o = e.clone().moveBy(0, -s.top), a = new M(n).excludeScrollbarsAndBorders(), l = [o, r], c = t && i, u = l.every((b) => a.contains(b));
  let { scrollX: h, scrollY: d } = n;
  const m = h, p = d;
  c ? d -= a.top - e.top + s.top : u || (Wu(o, a) ? d -= a.top - e.top + s.top : Hu(r, a) && (t ? d += e.top - a.top - s.top : d += e.bottom - a.bottom + s.bottom)), u || (Uu(e, a) ? h -= a.left - e.left + s.left : ju(e, a) && (h += e.right - a.right + s.right)), (h != m || d !== p) && n.scrollTo(h, d);
}
function r_({ parent: n, getRect: e, alignToTop: t, forceScroll: i, ancestorOffset: s = 0 }) {
  const r = $r(n), o = t && i;
  let a, l, c;
  for (; n != r.document.body; )
    l = e(), a = new M(n).excludeScrollbarsAndBorders(), c = a.contains(l), o ? n.scrollTop -= a.top - l.top + s : c || (Wu(l, a) ? n.scrollTop -= a.top - l.top + s : Hu(l, a) && (t ? n.scrollTop += l.top - a.top - s : n.scrollTop += l.bottom - a.bottom + s)), c || (Uu(l, a) ? n.scrollLeft -= a.left - l.left + s : ju(l, a) && (n.scrollLeft += l.right - a.right + s)), n = n.parentNode;
}
function Hu(n, e) {
  return n.bottom > e.bottom;
}
function Wu(n, e) {
  return n.top < e.top;
}
function Uu(n, e) {
  return n.left < e.left;
}
function ju(n, e) {
  return n.right > e.right;
}
function $r(n) {
  return Hn(n) ? n.startContainer.ownerDocument.defaultView : n.ownerDocument.defaultView;
}
function fa(n) {
  if (Hn(n)) {
    let e = n.commonAncestorContainer;
    return Y(e) && (e = e.parentNode), e;
  } else
    return n.parentNode;
}
function ma(n, e) {
  const t = $r(n), i = new M(n);
  if (t === e)
    return i;
  {
    let s = t;
    for (; s != e; ) {
      const r = s.frameElement, o = new M(r).excludeScrollbarsAndBorders();
      i.moveBy(o.left, o.top), s = s.parent;
    }
  }
  return i;
}
function o_(n) {
  return typeof n == "number" ? {
    top: n,
    bottom: n,
    left: n,
    right: n
  } : n;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const a_ = {
  ctrl: "⌃",
  cmd: "⌘",
  alt: "⌥",
  shift: "⇧"
}, l_ = {
  ctrl: "Ctrl+",
  alt: "Alt+",
  shift: "Shift+"
}, R = f_(), c_ = Object.fromEntries(Object.entries(R).map(([n, e]) => [e, n.charAt(0).toUpperCase() + n.slice(1)]));
function si(n) {
  let e;
  if (typeof n == "string") {
    if (e = R[n.toLowerCase()], !e)
      throw new f("keyboard-unknown-key", null, { key: n });
  } else
    e = n.keyCode + (n.altKey ? R.alt : 0) + (n.ctrlKey ? R.ctrl : 0) + (n.shiftKey ? R.shift : 0) + (n.metaKey ? R.cmd : 0);
  return e;
}
function Wn(n) {
  return typeof n == "string" && (n = m_(n)), n.map((e) => typeof e == "string" ? h_(e) : e).reduce((e, t) => t + e, 0);
}
function ga(n) {
  let e = Wn(n);
  return Object.entries(S.isMac ? a_ : l_).reduce((s, [r, o]) => (e & R[r] && (e &= ~R[r], s += o), s), "") + (e ? c_[e] : "");
}
function u_(n) {
  return n == R.arrowright || n == R.arrowleft || n == R.arrowup || n == R.arrowdown;
}
function qu(n, e) {
  const t = e === "ltr";
  switch (n) {
    case R.arrowleft:
      return t ? "left" : "right";
    case R.arrowright:
      return t ? "right" : "left";
    case R.arrowup:
      return "up";
    case R.arrowdown:
      return "down";
  }
}
function h_(n) {
  if (n.endsWith("!"))
    return si(n.slice(0, -1));
  const e = si(n);
  return S.isMac && e == R.ctrl ? R.cmd : e;
}
function d_(n, e) {
  const t = qu(n, e);
  return t === "down" || t === "right";
}
function f_() {
  const n = {
    arrowleft: 37,
    arrowup: 38,
    arrowright: 39,
    arrowdown: 40,
    backspace: 8,
    delete: 46,
    enter: 13,
    space: 32,
    esc: 27,
    tab: 9,
    // The idea about these numbers is that they do not collide with any real key codes, so we can use them
    // like bit masks.
    ctrl: 1114112,
    shift: 2228224,
    alt: 4456448,
    cmd: 8912896
  };
  for (let e = 65; e <= 90; e++) {
    const t = String.fromCharCode(e);
    n[t.toLowerCase()] = e;
  }
  for (let e = 48; e <= 57; e++)
    n[e - 48] = e;
  for (let e = 112; e <= 123; e++)
    n["f" + (e - 111)] = e;
  for (const e of "`-=[];',./\\")
    n[e] = e.charCodeAt(0);
  return n;
}
function m_(n) {
  return n.split("+").map((e) => e.trim());
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const g_ = [
  "ar",
  "ara",
  "fa",
  "per",
  "fas",
  "he",
  "heb",
  "ku",
  "kur",
  "ug",
  "uig"
  // Uighur, Uyghur
];
function pa(n) {
  return g_.includes(n) ? "rtl" : "ltr";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Q(n) {
  return Array.isArray(n) ? n : [n];
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
/* istanbul ignore else -- @preserve */
I.window.CKEDITOR_TRANSLATIONS || (I.window.CKEDITOR_TRANSLATIONS = {});
function p_(n, e, t = 1) {
  if (typeof t != "number")
    throw new f("translation-service-quantity-not-a-number", null, { quantity: t });
  const i = b_();
  i === 1 && (n = Object.keys(I.window.CKEDITOR_TRANSLATIONS)[0]);
  const s = e.id || e.string;
  if (i === 0 || !w_(n, s))
    return t !== 1 ? e.plural : e.string;
  const r = I.window.CKEDITOR_TRANSLATIONS[n].dictionary, o = I.window.CKEDITOR_TRANSLATIONS[n].getPluralForm || ((c) => c === 1 ? 0 : 1), a = r[s];
  if (typeof a == "string")
    return a;
  const l = Number(o(t));
  return a[l];
}
function w_(n, e) {
  return !!I.window.CKEDITOR_TRANSLATIONS[n] && !!I.window.CKEDITOR_TRANSLATIONS[n].dictionary[e];
}
function b_() {
  return Object.keys(I.window.CKEDITOR_TRANSLATIONS).length;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class __ {
  /**
   * Creates a new instance of the locale class. Learn more about
   * {@glink features/ui-language configuring the language of the editor}.
   *
   * @param options Locale configuration.
   * @param options.uiLanguage The editor UI language code in the
   * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. See {@link #uiLanguage}.
   * @param options.contentLanguage The editor content language code in the
   * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. If not specified, the same as `options.language`.
   * See {@link #contentLanguage}.
   */
  constructor({ uiLanguage: e = "en", contentLanguage: t } = {}) {
    this.uiLanguage = e, this.contentLanguage = t || this.uiLanguage, this.uiLanguageDirection = pa(this.uiLanguage), this.contentLanguageDirection = pa(this.contentLanguage), this.t = (i, s) => this._t(i, s);
  }
  /**
   * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.
   *
   * **Note**: This property was deprecated. Please use {@link #uiLanguage} and {@link #contentLanguage}
   * properties instead.
   *
   * @deprecated
   */
  get language() {
    return console.warn("locale-deprecated-language-property: The Locale#language property has been deprecated and will be removed in the near future. Please use #uiLanguage and #contentLanguage properties instead."), this.uiLanguage;
  }
  /**
   * An unbound version of the {@link #t} method.
   */
  _t(e, t = []) {
    t = Q(t), typeof e == "string" && (e = { string: e });
    const s = !!e.plural ? t[0] : 1, r = p_(this.uiLanguage, e, s);
    return v_(r, t);
  }
}
function v_(n, e) {
  return n.replace(/%(\d+)/g, (t, i) => i < e.length ? e[i] : t);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ue extends L() {
  constructor(e = {}, t = {}) {
    super();
    const i = ye(e);
    if (i || (t = e), this._items = [], this._itemMap = /* @__PURE__ */ new Map(), this._idProperty = t.idProperty || "id", this._bindToExternalToInternalMap = /* @__PURE__ */ new WeakMap(), this._bindToInternalToExternalMap = /* @__PURE__ */ new WeakMap(), this._skippedIndexesFromExternal = [], i)
      for (const s of e)
        this._items.push(s), this._itemMap.set(this._getItemIdBeforeAdding(s), s);
  }
  /**
   * The number of items available in the collection.
   */
  get length() {
    return this._items.length;
  }
  /**
   * Returns the first item from the collection or null when collection is empty.
   */
  get first() {
    return this._items[0] || null;
  }
  /**
   * Returns the last item from the collection or null when collection is empty.
   */
  get last() {
    return this._items[this.length - 1] || null;
  }
  /**
   * Adds an item into the collection.
   *
   * If the item does not have an id, then it will be automatically generated and set on the item.
   *
   * @param item
   * @param index The position of the item in the collection. The item
   * is pushed to the collection when `index` not specified.
   * @fires add
   * @fires change
   */
  add(e, t) {
    return this.addMany([e], t);
  }
  /**
   * Adds multiple items into the collection.
   *
   * Any item not containing an id will get an automatically generated one.
   *
   * @param items
   * @param index The position of the insertion. Items will be appended if no `index` is specified.
   * @fires add
   * @fires change
   */
  addMany(e, t) {
    if (t === void 0)
      t = this._items.length;
    else if (t > this._items.length || t < 0)
      throw new f("collection-add-item-invalid-index", this);
    let i = 0;
    for (const s of e) {
      const r = this._getItemIdBeforeAdding(s), o = t + i;
      this._items.splice(o, 0, s), this._itemMap.set(r, s), this.fire("add", s, o), i++;
    }
    return this.fire("change", {
      added: e,
      removed: [],
      index: t
    }), this;
  }
  /**
   * Gets an item by its ID or index.
   *
   * @param idOrIndex The item ID or index in the collection.
   * @returns The requested item or `null` if such item does not exist.
   */
  get(e) {
    let t;
    if (typeof e == "string")
      t = this._itemMap.get(e);
    else if (typeof e == "number")
      t = this._items[e];
    else
      throw new f("collection-get-invalid-arg", this);
    return t || null;
  }
  /**
   * Returns a Boolean indicating whether the collection contains an item.
   *
   * @param itemOrId The item or its ID in the collection.
   * @returns `true` if the collection contains the item, `false` otherwise.
   */
  has(e) {
    if (typeof e == "string")
      return this._itemMap.has(e);
    {
      const t = this._idProperty, i = e[t];
      return i && this._itemMap.has(i);
    }
  }
  /**
   * Gets an index of an item in the collection.
   * When an item is not defined in the collection, the index will equal -1.
   *
   * @param itemOrId The item or its ID in the collection.
   * @returns The index of a given item.
   */
  getIndex(e) {
    let t;
    return typeof e == "string" ? t = this._itemMap.get(e) : t = e, t ? this._items.indexOf(t) : -1;
  }
  /**
   * Removes an item from the collection.
   *
   * @param subject The item to remove, its ID or index in the collection.
   * @returns The removed item.
   * @fires remove
   * @fires change
   */
  remove(e) {
    const [t, i] = this._remove(e);
    return this.fire("change", {
      added: [],
      removed: [t],
      index: i
    }), t;
  }
  /**
   * Executes the callback for each item in the collection and composes an array or values returned by this callback.
   *
   * @typeParam U The result type of the callback.
   * @param callback
   * @param ctx Context in which the `callback` will be called.
   * @returns The result of mapping.
   */
  map(e, t) {
    return this._items.map(e, t);
  }
  /**
   * Finds the first item in the collection for which the `callback` returns a true value.
   *
   * @param callback
   * @param ctx Context in which the `callback` will be called.
   * @returns The item for which `callback` returned a true value.
   */
  find(e, t) {
    return this._items.find(e, t);
  }
  /**
   * Returns an array with items for which the `callback` returned a true value.
   *
   * @param callback
   * @param ctx Context in which the `callback` will be called.
   * @returns The array with matching items.
   */
  filter(e, t) {
    return this._items.filter(e, t);
  }
  /**
   * Removes all items from the collection and destroys the binding created using
   * {@link #bindTo}.
   *
   * @fires remove
   * @fires change
   */
  clear() {
    this._bindToCollection && (this.stopListening(this._bindToCollection), this._bindToCollection = null);
    const e = Array.from(this._items);
    for (; this.length; )
      this._remove(0);
    this.fire("change", {
      added: [],
      removed: e,
      index: 0
    });
  }
  /**
   * Binds and synchronizes the collection with another one.
   *
   * The binding can be a simple factory:
   *
   * ```ts
   * class FactoryClass {
   * 	public label: string;
   *
   * 	constructor( data: { label: string } ) {
   * 		this.label = data.label;
   * 	}
   * }
   *
   * const source = new Collection<{ label: string }>( { idProperty: 'label' } );
   * const target = new Collection<FactoryClass>();
   *
   * target.bindTo( source ).as( FactoryClass );
   *
   * source.add( { label: 'foo' } );
   * source.add( { label: 'bar' } );
   *
   * console.log( target.length ); // 2
   * console.log( target.get( 1 ).label ); // 'bar'
   *
   * source.remove( 0 );
   * console.log( target.length ); // 1
   * console.log( target.get( 0 ).label ); // 'bar'
   * ```
   *
   * or the factory driven by a custom callback:
   *
   * ```ts
   * class FooClass {
   * 	public label: string;
   *
   * 	constructor( data: { label: string } ) {
   * 		this.label = data.label;
   * 	}
   * }
   *
   * class BarClass {
   * 	public label: string;
   *
   * 	constructor( data: { label: string } ) {
   * 		this.label = data.label;
   * 	}
   * }
   *
   * const source = new Collection<{ label: string }>( { idProperty: 'label' } );
   * const target = new Collection<FooClass | BarClass>();
   *
   * target.bindTo( source ).using( ( item ) => {
   * 	if ( item.label == 'foo' ) {
   * 		return new FooClass( item );
   * 	} else {
   * 		return new BarClass( item );
   * 	}
   * } );
   *
   * source.add( { label: 'foo' } );
   * source.add( { label: 'bar' } );
   *
   * console.log( target.length ); // 2
   * console.log( target.get( 0 ) instanceof FooClass ); // true
   * console.log( target.get( 1 ) instanceof BarClass ); // true
   * ```
   *
   * or the factory out of property name:
   *
   * ```ts
   * const source = new Collection<{ nested: { value: string } }>();
   * const target = new Collection<{ value: string }>();
   *
   * target.bindTo( source ).using( 'nested' );
   *
   * source.add( { nested: { value: 'foo' } } );
   * source.add( { nested: { value: 'bar' } } );
   *
   * console.log( target.length ); // 2
   * console.log( target.get( 0 ).value ); // 'foo'
   * console.log( target.get( 1 ).value ); // 'bar'
   * ```
   *
   * It's possible to skip specified items by returning null value:
   *
   * ```ts
   * const source = new Collection<{ hidden: boolean }>();
   * const target = new Collection<{ hidden: boolean }>();
   *
   * target.bindTo( source ).using( item => {
   * 	if ( item.hidden ) {
   * 		return null;
   * 	}
   *
   * 	return item;
   * } );
   *
   * source.add( { hidden: true } );
   * source.add( { hidden: false } );
   *
   * console.log( source.length ); // 2
   * console.log( target.length ); // 1
   * ```
   *
   * **Note**: {@link #clear} can be used to break the binding.
   *
   * @typeParam S The type of `externalCollection` element.
   * @param externalCollection A collection to be bound.
   * @returns The binding chain object.
   */
  bindTo(e) {
    if (this._bindToCollection)
      throw new f("collection-bind-to-rebind", this);
    return this._bindToCollection = e, {
      as: (t) => {
        this._setUpBindToBinding((i) => new t(i));
      },
      using: (t) => {
        typeof t == "function" ? this._setUpBindToBinding(t) : this._setUpBindToBinding((i) => i[t]);
      }
    };
  }
  /**
   * Finalizes and activates a binding initiated by {@link #bindTo}.
   *
   * @param factory A function which produces collection items.
   */
  _setUpBindToBinding(e) {
    const t = this._bindToCollection, i = (s, r, o) => {
      const a = t._bindToCollection == this, l = t._bindToInternalToExternalMap.get(r);
      if (a && l)
        this._bindToExternalToInternalMap.set(r, l), this._bindToInternalToExternalMap.set(l, r);
      else {
        const c = e(r);
        if (!c) {
          this._skippedIndexesFromExternal.push(o);
          return;
        }
        let u = o;
        for (const h of this._skippedIndexesFromExternal)
          o > h && u--;
        for (const h of t._skippedIndexesFromExternal)
          u >= h && u++;
        this._bindToExternalToInternalMap.set(r, c), this._bindToInternalToExternalMap.set(c, r), this.add(c, u);
        for (let h = 0; h < t._skippedIndexesFromExternal.length; h++)
          u <= t._skippedIndexesFromExternal[h] && t._skippedIndexesFromExternal[h]++;
      }
    };
    for (const s of t)
      i(null, s, t.getIndex(s));
    this.listenTo(t, "add", i), this.listenTo(t, "remove", (s, r, o) => {
      const a = this._bindToExternalToInternalMap.get(r);
      a && this.remove(a), this._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce((l, c) => (o < c && l.push(c - 1), o > c && l.push(c), l), []);
    });
  }
  /**
   * Returns an unique id property for a given `item`.
   *
   * The method will generate new id and assign it to the `item` if it doesn't have any.
   *
   * @param item Item to be added.
   */
  _getItemIdBeforeAdding(e) {
    const t = this._idProperty;
    let i;
    if (t in e) {
      if (i = e[t], typeof i != "string")
        throw new f("collection-add-invalid-id", this);
      if (this.get(i))
        throw new f("collection-add-item-already-exists", this);
    } else
      e[t] = i = et();
    return i;
  }
  /**
   * Core {@link #remove} method implementation shared in other functions.
   *
   * In contrast this method **does not** fire the {@link #event:change} event.
   *
   * @param subject The item to remove, its id or index in the collection.
   * @returns Returns an array with the removed item and its index.
   * @fires remove
   */
  _remove(e) {
    let t, i, s, r = !1;
    const o = this._idProperty;
    if (typeof e == "string" ? (i = e, s = this._itemMap.get(i), r = !s, s && (t = this._items.indexOf(s))) : typeof e == "number" ? (t = e, s = this._items[t], r = !s, s && (i = s[o])) : (s = e, i = s[o], t = this._items.indexOf(s), r = t == -1 || !this._itemMap.get(i)), r)
      throw new f("collection-remove-404", this);
    this._items.splice(t, 1), this._itemMap.delete(i);
    const a = this._bindToInternalToExternalMap.get(s);
    return this._bindToInternalToExternalMap.delete(s), this._bindToExternalToInternalMap.delete(a), this.fire("remove", s, t), [s, t];
  }
  /**
   * Iterable interface.
   */
  [Symbol.iterator]() {
    return this._items[Symbol.iterator]();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function de(n) {
  const e = n.next();
  return e.done ? null : e.value;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class fe extends rt(H()) {
  constructor() {
    super(), this._elements = /* @__PURE__ */ new Set(), this._nextEventLoopTimeout = null, this.set("isFocused", !1), this.set("focusedElement", null);
  }
  /**
   * Starts tracking the specified element.
   */
  add(e) {
    if (this._elements.has(e))
      throw new f("focustracker-add-element-already-exist", this);
    this.listenTo(e, "focus", () => this._focus(e), { useCapture: !0 }), this.listenTo(e, "blur", () => this._blur(), { useCapture: !0 }), this._elements.add(e);
  }
  /**
   * Stops tracking the specified element and stops listening on this element.
   */
  remove(e) {
    e === this.focusedElement && this._blur(), this._elements.has(e) && (this.stopListening(e), this._elements.delete(e));
  }
  /**
   * Destroys the focus tracker by:
   * - Disabling all event listeners attached to tracked elements.
   * - Removing all tracked elements that were previously added.
   */
  destroy() {
    this.stopListening();
  }
  /**
   * Stores currently focused element and set {@link #isFocused} as `true`.
   */
  _focus(e) {
    clearTimeout(this._nextEventLoopTimeout), this.focusedElement = e, this.isFocused = !0;
  }
  /**
   * Clears currently focused element and set {@link #isFocused} as `false`.
   * This method uses `setTimeout` to change order of fires `blur` and `focus` events.
   */
  _blur() {
    clearTimeout(this._nextEventLoopTimeout), this._nextEventLoopTimeout = setTimeout(() => {
      this.focusedElement = null, this.isFocused = !1;
    }, 0);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ke {
  /**
   * Creates an instance of the keystroke handler.
   */
  constructor() {
    this._listener = new (rt())();
  }
  /**
   * Starts listening for `keydown` events from a given emitter.
   */
  listenTo(e) {
    this._listener.listenTo(e, "keydown", (t, i) => {
      this._listener.fire("_keydown:" + si(i), i);
    });
  }
  /**
   * Registers a handler for the specified keystroke.
   *
   * @param keystroke Keystroke defined in a format accepted by
   * the {@link module:utils/keyboard~parseKeystroke} function.
   * @param callback A function called with the
   * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and
   * a helper function to call both `preventDefault()` and `stopPropagation()` on the underlying event.
   * @param options Additional options.
   * @param options.priority The priority of the keystroke
   * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority
   * are called in the order they were added.
   */
  set(e, t, i = {}) {
    const s = Wn(e), r = i.priority;
    this._listener.listenTo(this._listener, "_keydown:" + s, (o, a) => {
      t(a, () => {
        a.preventDefault(), a.stopPropagation(), o.stop();
      }), o.return = !0;
    }, { priority: r });
  }
  /**
   * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.
   *
   * @param keyEvtData Key event data.
   * @returns Whether the keystroke was handled.
   */
  press(e) {
    return !!this._listener.fire("_keydown:" + si(e), e);
  }
  /**
   * Stops listening to `keydown` events from the given emitter.
   */
  stopListening(e) {
    this._listener.stopListening(e);
  }
  /**
   * Destroys the keystroke handler.
   */
  destroy() {
    this.stopListening();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function y_(n) {
  const e = /* @__PURE__ */ new Map();
  for (const t in n)
    e.set(t, n[t]);
  return e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function tt(n) {
  return ye(n) ? new Map(n) : y_(n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const k_ = 1e4;
function C_(n, e, t, i) {
  if (Math.max(e.length, n.length) > k_)
    return n.slice(0, t).concat(e).concat(n.slice(t + i, n.length));
  {
    const s = Array.from(n);
    return s.splice(t, i, ...e), s;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Qs(n, e) {
  let t;
  function i(...s) {
    i.cancel(), t = setTimeout(() => n(...s), e);
  }
  return i.cancel = () => {
    clearTimeout(t);
  }, i;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function A_(n) {
  function e(h) {
    return h.length >= 40 && h.length <= 255 ? "VALID" : "INVALID";
  }
  if (!n)
    return "INVALID";
  let t = "";
  try {
    t = atob(n);
  } catch {
    return "INVALID";
  }
  const i = t.split("-"), s = i[0], r = i[1];
  if (!r)
    return e(n);
  try {
    atob(r);
  } catch {
    try {
      if (atob(s), !atob(s).length)
        return e(n);
    } catch {
      return e(n);
    }
  }
  if (s.length < 40 || s.length > 255)
    return "INVALID";
  let o = "";
  try {
    atob(s), o = atob(r);
  } catch {
    return "INVALID";
  }
  if (o.length !== 8)
    return "INVALID";
  const a = Number(o.substring(0, 4)), l = Number(o.substring(4, 6)) - 1, c = Number(o.substring(6, 8)), u = new Date(a, l, c);
  return u < Sf || isNaN(Number(u)) ? "INVALID" : "VALID";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function E_(n) {
  return !!n && n.length == 1 && /[\u0300-\u036f\u1ab0-\u1aff\u1dc0-\u1dff\u20d0-\u20ff\ufe20-\ufe2f]/.test(n);
}
function T_(n) {
  return !!n && n.length == 1 && /[\ud800-\udbff]/.test(n);
}
function P_(n) {
  return !!n && n.length == 1 && /[\udc00-\udfff]/.test(n);
}
function Hr(n, e) {
  return T_(n.charAt(e - 1)) && P_(n.charAt(e));
}
function Wr(n, e) {
  return E_(n.charAt(e));
}
const x_ = S_();
function Gu(n, e) {
  const t = String(n).matchAll(x_);
  return Array.from(t).some((i) => i.index < e && e < i.index + i[0].length);
}
function S_() {
  const n = [
    // Emoji Tag Sequence (ETS)
    /\p{Emoji}[\u{E0020}-\u{E007E}]+\u{E007F}/u,
    // Emoji Keycap Sequence
    /\p{Emoji}\u{FE0F}?\u{20E3}/u,
    // Emoji Presentation Sequence
    /\p{Emoji}\u{FE0F}/u,
    // Single-Character Emoji / Emoji Modifier Sequence
    /(?=\p{General_Category=Other_Symbol})\p{Emoji}\p{Emoji_Modifier}*/u
  ], e = /\p{Regional_Indicator}{2}/u.source, t = "(?:" + n.map((s) => s.source).join("|") + ")", i = `${e}|${t}(?:‍${t})*`;
  return new RegExp(i, "ug");
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class _ extends H() {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(), this._disableStack = /* @__PURE__ */ new Set(), this.editor = e, this.set("isEnabled", !0);
  }
  /**
   * Disables the plugin.
   *
   * Plugin may be disabled by multiple features or algorithms (at once). When disabling a plugin, unique id should be passed
   * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the plugin.
   * The plugin becomes enabled only after all features {@link #clearForceDisabled enabled it back}.
   *
   * Disabling and enabling a plugin:
   *
   * ```ts
   * plugin.isEnabled; // -> true
   * plugin.forceDisabled( 'MyFeature' );
   * plugin.isEnabled; // -> false
   * plugin.clearForceDisabled( 'MyFeature' );
   * plugin.isEnabled; // -> true
   * ```
   *
   * Plugin disabled by multiple features:
   *
   * ```ts
   * plugin.forceDisabled( 'MyFeature' );
   * plugin.forceDisabled( 'OtherFeature' );
   * plugin.clearForceDisabled( 'MyFeature' );
   * plugin.isEnabled; // -> false
   * plugin.clearForceDisabled( 'OtherFeature' );
   * plugin.isEnabled; // -> true
   * ```
   *
   * Multiple disabling with the same identifier is redundant:
   *
   * ```ts
   * plugin.forceDisabled( 'MyFeature' );
   * plugin.forceDisabled( 'MyFeature' );
   * plugin.clearForceDisabled( 'MyFeature' );
   * plugin.isEnabled; // -> true
   * ```
   *
   * **Note:** some plugins or algorithms may have more complex logic when it comes to enabling or disabling certain plugins,
   * so the plugin might be still disabled after {@link #clearForceDisabled} was used.
   *
   * @param id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the plugin.
   */
  forceDisabled(e) {
    this._disableStack.add(e), this._disableStack.size == 1 && (this.on("set:isEnabled", wa, { priority: "highest" }), this.isEnabled = !1);
  }
  /**
   * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.
   *
   * @param id Unique identifier, equal to the one passed in {@link #forceDisabled} call.
   */
  clearForceDisabled(e) {
    this._disableStack.delete(e), this._disableStack.size == 0 && (this.off("set:isEnabled", wa), this.isEnabled = !0);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    this.stopListening();
  }
  /**
   * @inheritDoc
   */
  static get isContextPlugin() {
    return !1;
  }
}
function wa(n) {
  n.return = !1, n.stop();
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class W extends H() {
  /**
   * Creates a new `Command` instance.
   *
   * @param editor The editor on which this command will be used.
   */
  constructor(e) {
    super(), this.editor = e, this.set("value", void 0), this.set("isEnabled", !1), this._affectsData = !0, this._isEnabledBasedOnSelection = !0, this._disableStack = /* @__PURE__ */ new Set(), this.decorate("execute"), this.listenTo(this.editor.model.document, "change", () => {
      this.refresh();
    }), this.listenTo(e, "change:isReadOnly", () => {
      this.refresh();
    }), this.on("set:isEnabled", (t) => {
      this.affectsData && (e.isReadOnly || this._isEnabledBasedOnSelection && !e.model.canEditAt(e.model.document.selection)) && (t.return = !1, t.stop());
    }, { priority: "highest" }), this.on("execute", (t) => {
      this.isEnabled || t.stop();
    }, { priority: "high" });
  }
  /**
   * A flag indicating whether a command execution changes the editor data or not.
   *
   * Commands with `affectsData` set to `false` will not be automatically disabled in
   * the {@link module:core/editor/editor~Editor#isReadOnly read-only mode} and
   * {@glink features/read-only#related-features other editor modes} with restricted user write permissions.
   *
   * **Note:** You do not have to set it for your every command. It is `true` by default.
   *
   * @default true
   */
  get affectsData() {
    return this._affectsData;
  }
  set affectsData(e) {
    this._affectsData = e;
  }
  /**
   * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties
   * in this method.
   *
   * This method is automatically called when
   * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.
   */
  refresh() {
    this.isEnabled = !0;
  }
  /**
   * Disables the command.
   *
   * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed
   * (e.g. the feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.
   * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.
   *
   * Disabling and enabling a command:
   *
   * ```ts
   * command.isEnabled; // -> true
   * command.forceDisabled( 'MyFeature' );
   * command.isEnabled; // -> false
   * command.clearForceDisabled( 'MyFeature' );
   * command.isEnabled; // -> true
   * ```
   *
   * Command disabled by multiple features:
   *
   * ```ts
   * command.forceDisabled( 'MyFeature' );
   * command.forceDisabled( 'OtherFeature' );
   * command.clearForceDisabled( 'MyFeature' );
   * command.isEnabled; // -> false
   * command.clearForceDisabled( 'OtherFeature' );
   * command.isEnabled; // -> true
   * ```
   *
   * Multiple disabling with the same identifier is redundant:
   *
   * ```ts
   * command.forceDisabled( 'MyFeature' );
   * command.forceDisabled( 'MyFeature' );
   * command.clearForceDisabled( 'MyFeature' );
   * command.isEnabled; // -> true
   * ```
   *
   * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,
   * so the command might be still disabled after {@link #clearForceDisabled} was used.
   *
   * @param id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.
   */
  forceDisabled(e) {
    this._disableStack.add(e), this._disableStack.size == 1 && (this.on("set:isEnabled", ba, { priority: "highest" }), this.isEnabled = !1);
  }
  /**
   * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.
   *
   * @param id Unique identifier, equal to the one passed in {@link #forceDisabled} call.
   */
  clearForceDisabled(e) {
    this._disableStack.delete(e), this._disableStack.size == 0 && (this.off("set:isEnabled", ba), this.refresh());
  }
  /**
   * Executes the command.
   *
   * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}
   * to the command.
   *
   * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).
   * This behavior is implemented by a high priority listener to the {@link #event:execute} event.
   *
   * In order to see how to disable a command from "outside" see the {@link #isEnabled} documentation.
   *
   * This method may return a value, which would be forwarded all the way down to the
   * {@link module:core/editor/editor~Editor#execute `editor.execute()`}.
   *
   * @fires execute
   */
  execute(...e) {
  }
  /**
   * Destroys the command.
   */
  destroy() {
    this.stopListening();
  }
}
function ba(n) {
  n.return = !1, n.stop();
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ku extends L() {
  /**
   * Creates an instance of the plugin collection class.
   * Allows loading and initializing plugins and their dependencies.
   * Allows providing a list of already loaded plugins. These plugins will not be destroyed along with this collection.
   *
   * @param availablePlugins Plugins (constructors) which the collection will be able to use
   * when {@link module:core/plugincollection~PluginCollection#init} is used with the plugin names (strings, instead of constructors).
   * Usually, the editor will pass its built-in plugins to the collection so they can later be
   * used in `config.plugins` or `config.removePlugins` by names.
   * @param contextPlugins A list of already initialized plugins represented by a `[ PluginConstructor, pluginInstance ]` pair.
   */
  constructor(e, t = [], i = []) {
    super(), this._plugins = /* @__PURE__ */ new Map(), this._context = e, this._availablePlugins = /* @__PURE__ */ new Map();
    for (const s of t)
      s.pluginName && this._availablePlugins.set(s.pluginName, s);
    this._contextPlugins = /* @__PURE__ */ new Map();
    for (const [s, r] of i)
      this._contextPlugins.set(s, r), this._contextPlugins.set(r, s), s.pluginName && this._availablePlugins.set(s.pluginName, s);
  }
  /**
   * Iterable interface.
   *
   * Returns `[ PluginConstructor, pluginInstance ]` pairs.
   */
  *[Symbol.iterator]() {
    for (const e of this._plugins)
      typeof e[0] == "function" && (yield e);
  }
  /**
   * Gets the plugin instance by its constructor or name.
   *
   * ```ts
   * // Check if 'Clipboard' plugin was loaded.
   * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {
   * 	// Get clipboard plugin instance
   * 	const clipboard = editor.plugins.get( 'ClipboardPipeline' );
   *
   * 	this.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {
   * 		// Do something on clipboard input.
   * 	} );
   * }
   * ```
   *
   * **Note**: This method will throw an error if a plugin is not loaded. Use `{@link #has editor.plugins.has()}`
   * to check if a plugin is available.
   *
   * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.
   */
  get(e) {
    const t = this._plugins.get(e);
    if (!t) {
      let i = e;
      throw typeof e == "function" && (i = e.pluginName || e.name), new f("plugincollection-plugin-not-loaded", this._context, { plugin: i });
    }
    return t;
  }
  /**
   * Checks if a plugin is loaded.
   *
   * ```ts
   * // Check if the 'Clipboard' plugin was loaded.
   * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {
   * 	// Now use the clipboard plugin instance:
   * 	const clipboard = editor.plugins.get( 'ClipboardPipeline' );
   *
   * 	// ...
   * }
   * ```
   *
   * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.
   */
  has(e) {
    return this._plugins.has(e);
  }
  /**
   * Initializes a set of plugins and adds them to the collection.
   *
   * @param plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}
   * or {@link module:core/plugin~PluginStaticMembers#pluginName plugin names}.
   * @param pluginsToRemove Names of the plugins or plugin constructors
   * that should not be loaded (despite being specified in the `plugins` array).
   * @param pluginsSubstitutions An array of {@link module:core/plugin~PluginInterface plugin constructors}
   * that will be used to replace plugins of the same names that were passed in `plugins` or that are in their dependency tree.
   * A useful option for replacing built-in plugins while creating tests (for mocking their APIs). Plugins that will be replaced
   * must follow these rules:
   *   * The new plugin must be a class.
   *   * The new plugin must be named.
   *   * Both plugins must not depend on other plugins.
   * @returns A promise which gets resolved once all plugins are loaded and available in the collection.
   */
  init(e, t = [], i = []) {
    const s = this, r = this._context;
    m(e), b(e);
    const o = e.filter((k) => !h(k, t)), a = [...p(o)];
    Me(a, i);
    const l = Ae(a);
    return we(l, "init").then(() => we(l, "afterInit")).then(() => l);
    function c(k) {
      return typeof k == "function";
    }
    function u(k) {
      return c(k) && !!k.isContextPlugin;
    }
    function h(k, x) {
      return x.some((A) => A === k || d(k) === A || d(A) === k);
    }
    function d(k) {
      return c(k) ? k.pluginName || k.name : k;
    }
    function m(k, x = /* @__PURE__ */ new Set()) {
      k.forEach((A) => {
        c(A) && (x.has(A) || (x.add(A), A.pluginName && !s._availablePlugins.has(A.pluginName) && s._availablePlugins.set(A.pluginName, A), A.requires && m(A.requires, x)));
      });
    }
    function p(k, x = /* @__PURE__ */ new Set()) {
      return k.map((A) => c(A) ? A : s._availablePlugins.get(A)).reduce((A, J) => x.has(J) ? A : (x.add(J), J.requires && (b(J.requires, J), p(J.requires, x).forEach((bt) => A.add(bt))), A.add(J)), /* @__PURE__ */ new Set());
    }
    function b(k, x = null) {
      k.map((A) => c(A) ? A : s._availablePlugins.get(A) || A).forEach((A) => {
        C(A, x), T(A, x), ue(A, x);
      });
    }
    function C(k, x) {
      if (!c(k))
        throw x ? new f("plugincollection-soft-required", r, { missingPlugin: k, requiredBy: d(x) }) : new f("plugincollection-plugin-not-found", r, { plugin: k });
    }
    function T(k, x) {
      if (u(x) && !u(k))
        throw new f("plugincollection-context-required", r, { plugin: d(k), requiredBy: d(x) });
    }
    function ue(k, x) {
      if (x && h(k, t))
        throw new f("plugincollection-required", r, { plugin: d(k), requiredBy: d(x) });
    }
    function Ae(k) {
      return k.map((x) => {
        let A = s._contextPlugins.get(x);
        return A = A || new x(r), s._add(x, A), A;
      });
    }
    function we(k, x) {
      return k.reduce((A, J) => !J[x] || s._contextPlugins.has(J) ? A : A.then(J[x].bind(J)), Promise.resolve());
    }
    function Me(k, x) {
      for (const A of x) {
        if (typeof A != "function")
          throw new f("plugincollection-replace-plugin-invalid-type", null, { pluginItem: A });
        const J = A.pluginName;
        if (!J)
          throw new f("plugincollection-replace-plugin-missing-name", null, { pluginItem: A });
        if (A.requires && A.requires.length)
          throw new f("plugincollection-plugin-for-replacing-cannot-have-dependencies", null, { pluginName: J });
        const bt = s._availablePlugins.get(J);
        if (!bt)
          throw new f("plugincollection-plugin-for-replacing-not-exist", null, { pluginName: J });
        const _o = k.indexOf(bt);
        if (_o === -1) {
          if (s._contextPlugins.has(bt))
            return;
          throw new f("plugincollection-plugin-for-replacing-not-loaded", null, { pluginName: J });
        }
        if (bt.requires && bt.requires.length)
          throw new f("plugincollection-replaced-plugin-cannot-have-dependencies", null, { pluginName: J });
        k.splice(_o, 1, A), s._availablePlugins.set(J, A);
      }
    }
  }
  /**
   * Destroys all loaded plugins.
   */
  destroy() {
    const e = [];
    for (const [, t] of this)
      typeof t.destroy == "function" && !this._contextPlugins.has(t) && e.push(t.destroy());
    return Promise.all(e);
  }
  /**
   * Adds the plugin to the collection. Exposed mainly for testing purposes.
   *
   * @param PluginConstructor The plugin constructor.
   * @param plugin The instance of the plugin.
   */
  _add(e, t) {
    this._plugins.set(e, t);
    const i = e.pluginName;
    if (i) {
      if (this._plugins.has(i))
        throw new f("plugincollection-plugin-name-conflict", null, { pluginName: i, plugin1: this._plugins.get(i).constructor, plugin2: e });
      this._plugins.set(i, t);
    }
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ju {
  /**
   * Creates a context instance with a given configuration.
   *
   * Usually not to be used directly. See the static {@link module:core/context~Context.create `create()`} method.
   *
   * @param config The context configuration.
   */
  constructor(e) {
    this._contextOwner = null, this.config = new Ru(e, this.constructor.defaultConfig);
    const t = this.constructor.builtinPlugins;
    this.config.define("plugins", t), this.plugins = new Ku(this, t);
    const i = this.config.get("language") || {};
    this.locale = new __({
      uiLanguage: typeof i == "string" ? i : i.ui,
      contentLanguage: this.config.get("language.content")
    }), this.t = this.locale.t, this.editors = new Ue();
  }
  /**
   * Loads and initializes plugins specified in the configuration.
   *
   * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.
   */
  initPlugins() {
    const e = this.config.get("plugins") || [], t = this.config.get("substitutePlugins") || [];
    for (const i of e.concat(t)) {
      if (typeof i != "function")
        throw new f("context-initplugins-constructor-only", null, { Plugin: i });
      if (i.isContextPlugin !== !0)
        throw new f("context-initplugins-invalid-plugin", null, { Plugin: i });
    }
    return this.plugins.init(e, [], t);
  }
  /**
   * Destroys the context instance and all editors used with the context,
   * releasing all resources used by the context.
   *
   * @returns A promise that resolves once the context instance is fully destroyed.
   */
  destroy() {
    return Promise.all(Array.from(this.editors, (e) => e.destroy())).then(() => this.plugins.destroy());
  }
  /**
   * Adds a reference to the editor which is used with this context.
   *
   * When the given editor has created the context, the reference to this editor will be stored
   * as a {@link ~Context#_contextOwner}.
   *
   * This method should only be used by the editor.
   *
   * @internal
   * @param isContextOwner Stores the given editor as a context owner.
   */
  _addEditor(e, t) {
    if (this._contextOwner)
      throw new f("context-addeditor-private-context");
    this.editors.add(e), t && (this._contextOwner = e);
  }
  /**
   * Removes a reference to the editor which was used with this context.
   * When the context was created by the given editor, the context will be destroyed.
   *
   * This method should only be used by the editor.
   *
   * @internal
   * @return A promise that resolves once the editor is removed from the context or when the context was destroyed.
   */
  _removeEditor(e) {
    return this.editors.has(e) && this.editors.remove(e), this._contextOwner === e ? this.destroy() : Promise.resolve();
  }
  /**
   * Returns the context configuration which will be copied to the editors created using this context.
   *
   * The configuration returned by this method has the plugins configuration removed &mdash; plugins are shared with all editors
   * through another mechanism.
   *
   * This method should only be used by the editor.
   *
   * @internal
   * @returns Configuration as a plain object.
   */
  _getEditorConfig() {
    const e = {};
    for (const t of this.config.names())
      ["plugins", "removePlugins", "extraPlugins"].includes(t) || (e[t] = this.config.get(t));
    return e;
  }
  /**
   * Creates and initializes a new context instance.
   *
   * ```ts
   * const commonConfig = { ... }; // Configuration for all the plugins and editors.
   * const editorPlugins = [ ... ]; // Regular plugins here.
   *
   * Context
   * 	.create( {
   * 		// Only context plugins here.
   * 		plugins: [ ... ],
   *
   * 		// Configure the language for all the editors (it cannot be overwritten).
   * 		language: { ... },
   *
   * 		// Configuration for context plugins.
   * 		comments: { ... },
   * 		...
   *
   * 		// Default configuration for editor plugins.
   * 		toolbar: { ... },
   * 		image: { ... },
   * 		...
   * 	} )
   * 	.then( context => {
   * 		const promises = [];
   *
   * 		promises.push( ClassicEditor.create(
   * 			document.getElementById( 'editor1' ),
   * 			{
   * 				editorPlugins,
   * 				context
   * 			}
   * 		) );
   *
   * 		promises.push( ClassicEditor.create(
   * 			document.getElementById( 'editor2' ),
   * 			{
   * 				editorPlugins,
   * 				context,
   * 				toolbar: { ... } // You can overwrite the configuration of the context.
   * 			}
   * 		) );
   *
   * 		return Promise.all( promises );
   * 	} );
   * ```
   *
   * @param config The context configuration.
   * @returns A promise resolved once the context is ready. The promise resolves with the created context instance.
   */
  static create(e) {
    return new Promise((t) => {
      const i = new this(e);
      t(i.initPlugins().then(() => i));
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const un = /* @__PURE__ */ new WeakMap();
function I_({ view: n, element: e, text: t, isDirectHost: i = !0, keepOnFocus: s = !1 }) {
  const r = n.document;
  un.has(r) || (un.set(r, /* @__PURE__ */ new Map()), r.registerPostFixer((o) => ls(r, o)), r.on("change:isComposing", () => {
    n.change((o) => ls(r, o));
  }, { priority: "high" })), un.get(r).set(e, {
    text: t,
    isDirectHost: i,
    keepOnFocus: s,
    hostElement: i ? e : null
  }), n.change((o) => ls(r, o));
}
function R_(n, e) {
  return e.hasClass("ck-placeholder") ? !1 : (n.addClass("ck-placeholder", e), !0);
}
function V_(n, e) {
  return e.hasClass("ck-placeholder") ? (n.removeClass("ck-placeholder", e), !0) : !1;
}
function O_(n, e) {
  if (!n.isAttached() || Array.from(n.getChildren()).some((o) => !o.is("uiElement")))
    return !1;
  const i = n.document, r = i.selection.anchor;
  return i.isComposing && r && r.parent === n ? !1 : e || !i.isFocused ? !0 : !!r && r.parent !== n;
}
function ls(n, e) {
  const t = un.get(n), i = [];
  let s = !1;
  for (const [r, o] of t)
    o.isDirectHost && (i.push(r), _a(e, r, o) && (s = !0));
  for (const [r, o] of t) {
    if (o.isDirectHost)
      continue;
    const a = M_(r);
    a && (i.includes(a) || (o.hostElement = a, _a(e, r, o) && (s = !0)));
  }
  return s;
}
function _a(n, e, t) {
  const { text: i, isDirectHost: s, hostElement: r } = t;
  let o = !1;
  return r.getAttribute("data-placeholder") !== i && (n.setAttribute("data-placeholder", i, r), o = !0), (s || e.childCount == 1) && O_(r, t.keepOnFocus) ? R_(n, r) && (o = !0) : V_(n, r) && (o = !0), o;
}
function M_(n) {
  if (n.childCount) {
    const e = n.getChild(0);
    if (e.is("element") && !e.is("uiElement") && !e.is("attributeElement"))
      return e;
  }
  return null;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let Dt = class {
  /* istanbul ignore next -- @preserve */
  is() {
    throw new Error("is() method is abstract");
  }
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let Ft = class extends L(Dt) {
  /**
   * Creates a tree view node.
   *
   * @param document The document instance to which this node belongs.
   */
  constructor(e) {
    super(), this.document = e, this.parent = null;
  }
  /**
   * Index of the node in the parent element or null if the node has no parent.
   *
   * Accessing this property throws an error if this node's parent element does not contain it.
   * This means that view tree got broken.
   */
  get index() {
    let e;
    if (!this.parent)
      return null;
    if ((e = this.parent.getChildIndex(this)) == -1)
      throw new f("view-node-not-found-in-parent", this);
    return e;
  }
  /**
   * Node's next sibling, or `null` if it is the last child.
   */
  get nextSibling() {
    const e = this.index;
    return e !== null && this.parent.getChild(e + 1) || null;
  }
  /**
   * Node's previous sibling, or `null` if it is the first child.
   */
  get previousSibling() {
    const e = this.index;
    return e !== null && this.parent.getChild(e - 1) || null;
  }
  /**
   * Top-most ancestor of the node. If the node has no parent it is the root itself.
   */
  get root() {
    let e = this;
    for (; e.parent; )
      e = e.parent;
    return e;
  }
  /**
   * Returns true if the node is in a tree rooted in the document (is a descendant of one of its roots).
   */
  isAttached() {
    return this.root.is("rootElement");
  }
  /**
   * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,
   * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.
   *
   * ```ts
   * const abc = downcastWriter.createText( 'abc' );
   * const foo = downcastWriter.createText( 'foo' );
   * const h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );
   * const p = downcastWriter.createElement( 'p', null, [ abc, foo ] );
   * const div = downcastWriter.createElement( 'div', null, [ h1, p ] );
   * foo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.
   * h1.getPath(); // Returns [ 0 ].
   * div.getPath(); // Returns [].
   * ```
   *
   * @returns The path.
   */
  getPath() {
    const e = [];
    let t = this;
    for (; t.parent; )
      e.unshift(t.index), t = t.parent;
    return e;
  }
  /**
   * Returns ancestors array of this node.
   *
   * @param options Options object.
   * @param options.includeSelf When set to `true` this node will be also included in parent's array.
   * @param options.parentFirst When set to `true`, array will be sorted from node's parent to root element,
   * otherwise root element will be the first item in the array.
   * @returns Array with ancestors.
   */
  getAncestors(e = {}) {
    const t = [];
    let i = e.includeSelf ? this : this.parent;
    for (; i; )
      t[e.parentFirst ? "push" : "unshift"](i), i = i.parent;
    return t;
  }
  /**
   * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}
   * which is a common ancestor of both nodes.
   *
   * @param node The second node.
   * @param options Options object.
   * @param options.includeSelf When set to `true` both nodes will be considered "ancestors" too.
   * Which means that if e.g. node A is inside B, then their common ancestor will be B.
   */
  getCommonAncestor(e, t = {}) {
    const i = this.getAncestors(t), s = e.getAncestors(t);
    let r = 0;
    for (; i[r] == s[r] && i[r]; )
      r++;
    return r === 0 ? null : i[r - 1];
  }
  /**
   * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,
   * in different {@link module:engine/view/documentfragment~DocumentFragment}s).
   *
   * @param node Node to compare with.
   */
  isBefore(e) {
    if (this == e || this.root !== e.root)
      return !1;
    const t = this.getPath(), i = e.getPath(), s = ce(t, i);
    switch (s) {
      case "prefix":
        return !0;
      case "extension":
        return !1;
      default:
        return t[s] < i[s];
    }
  }
  /**
   * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,
   * in different {@link module:engine/view/documentfragment~DocumentFragment}s).
   *
   * @param node Node to compare with.
   */
  isAfter(e) {
    return this == e || this.root !== e.root ? !1 : !this.isBefore(e);
  }
  /**
   * Removes node from parent.
   *
   * @internal
   */
  _remove() {
    this.parent._removeChildren(this.index);
  }
  /**
   * @internal
   * @param type Type of the change.
   * @param node Changed node.
   * @fires change
   */
  _fireChange(e, t) {
    this.fire(`change:${e}`, t), this.parent && this.parent._fireChange(e, t);
  }
  /**
   * Custom toJSON method to solve child-parent circular dependencies.
   *
   * @returns Clone of this object with the parent property removed.
   */
  toJSON() {
    const e = Tu(this);
    return delete e.parent, e;
  }
};
Ft.prototype.is = function(n) {
  return n === "node" || n === "view:node";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let q = class er extends Ft {
  /**
   * Creates a tree view text node.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#createText
   * @internal
   * @param document The document instance to which this text node belongs.
   * @param data The text's data.
   */
  constructor(e, t) {
    super(e), this._textData = t;
  }
  /**
   * The text content.
   */
  get data() {
    return this._textData;
  }
  /**
   * The `_data` property is controlled by a getter and a setter.
   *
   * The getter is required when using the addition assignment operator on protected property:
   *
   * ```ts
   * const foo = downcastWriter.createText( 'foo' );
   * const bar = downcastWriter.createText( 'bar' );
   *
   * foo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`
   * console.log( foo.data ); // prints: 'foobar'
   * ```
   *
   * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.
   *
   * The setter sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.
   *
   * @internal
   */
  get _data() {
    return this.data;
  }
  set _data(e) {
    this._fireChange("text", this), this._textData = e;
  }
  /**
   * Checks if this text node is similar to other text node.
   * Both nodes should have the same data to be considered as similar.
   *
   * @param otherNode Node to check if it is same as this node.
   */
  isSimilar(e) {
    return e instanceof er ? this === e || this.data === e.data : !1;
  }
  /**
   * Clones this node.
   *
   * @internal
   * @returns Text node that is a clone of this node.
   */
  _clone() {
    return new er(this.document, this.data);
  }
};
q.prototype.is = function(n) {
  return n === "$text" || n === "view:$text" || // This are legacy values kept for backward compatibility.
  n === "text" || n === "view:text" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "node" || n === "view:node";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let De = class extends Dt {
  /**
   * Creates a text proxy.
   *
   * @internal
   * @param textNode Text node which part is represented by this text proxy.
   * @param offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}
   * from which the text proxy starts.
   * @param length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.
   * @constructor
   */
  constructor(e, t, i) {
    if (super(), this.textNode = e, t < 0 || t > e.data.length)
      throw new f("view-textproxy-wrong-offsetintext", this);
    if (i < 0 || t + i > e.data.length)
      throw new f("view-textproxy-wrong-length", this);
    this.data = e.data.substring(t, t + i), this.offsetInText = t;
  }
  /**
   * Offset size of this node.
   */
  get offsetSize() {
    return this.data.length;
  }
  /**
   * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}
   * (`true`) or the whole text node (`false`).
   *
   * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}
   * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to
   * text node size.
   */
  get isPartial() {
    return this.data.length !== this.textNode.data.length;
  }
  /**
   * Parent of this text proxy, which is same as parent of text node represented by this text proxy.
   */
  get parent() {
    return this.textNode.parent;
  }
  /**
   * Root of this text proxy, which is same as root of text node represented by this text proxy.
   */
  get root() {
    return this.textNode.root;
  }
  /**
   * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside
   * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.
   */
  get document() {
    return this.textNode.document;
  }
  /**
   * Returns ancestors array of this text proxy.
   *
   * @param options Options object.
   * @param options.includeSelf When set to `true`, textNode will be also included in parent's array.
   * @param options.parentFirst When set to `true`, array will be sorted from text proxy parent to
   * root element, otherwise root element will be the first item in the array.
   * @returns Array with ancestors.
   */
  getAncestors(e = {}) {
    const t = [];
    let i = e.includeSelf ? this.textNode : this.parent;
    for (; i !== null; )
      t[e.parentFirst ? "push" : "unshift"](i), i = i.parent;
    return t;
  }
};
De.prototype.is = function(n) {
  return n === "$textProxy" || n === "view:$textProxy" || // This are legacy values kept for backward compatibility.
  n === "textProxy" || n === "view:textProxy";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ri {
  /**
   * Creates new instance of Matcher.
   *
   * @param pattern Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for more information.
   */
  constructor(...e) {
    this._patterns = [], this.add(...e);
  }
  /**
   * Adds pattern or patterns to matcher instance.
   *
   * ```ts
   * // String.
   * matcher.add( 'div' );
   *
   * // Regular expression.
   * matcher.add( /^\w/ );
   *
   * // Single class.
   * matcher.add( {
   * 	classes: 'foobar'
   * } );
   * ```
   *
   * See {@link module:engine/view/matcher~MatcherPattern} for more examples.
   *
   * Multiple patterns can be added in one call:
   *
   * ```ts
   * matcher.add( 'div', { classes: 'foobar' } );
   * ```
   *
   * @param pattern Object describing pattern details. If string or regular expression
   * is provided it will be used to match element's name. Pattern can be also provided in a form
   * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.
   * Function's return value will be stored under `match` key of the object returned from
   * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.
   */
  add(...e) {
    for (let t of e)
      (typeof t == "string" || t instanceof RegExp) && (t = { name: t }), this._patterns.push(t);
  }
  /**
   * Matches elements for currently stored patterns. Returns match information about first found
   * {@link module:engine/view/element~Element element}, otherwise returns `null`.
   *
   * Example of returned object:
   *
   * ```ts
   * {
   * 	element: <instance of found element>,
   * 	pattern: <pattern used to match found element>,
   * 	match: {
   * 		name: true,
   * 		attributes: [ 'title', 'href' ],
   * 		classes: [ 'foo' ],
   * 		styles: [ 'color', 'position' ]
   * 	}
   * }
   * ```
   *
   * @see module:engine/view/matcher~Matcher#add
   * @see module:engine/view/matcher~Matcher#matchAll
   * @param element View element to match against stored patterns.
   */
  match(...e) {
    for (const t of e)
      for (const i of this._patterns) {
        const s = va(t, i);
        if (s)
          return {
            element: t,
            pattern: i,
            match: s
          };
      }
    return null;
  }
  /**
   * Matches elements for currently stored patterns. Returns array of match information with all found
   * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.
   *
   * @see module:engine/view/matcher~Matcher#add
   * @see module:engine/view/matcher~Matcher#match
   * @param element View element to match against stored patterns.
   * @returns Array with match information about found elements or `null`. For more information
   * see {@link module:engine/view/matcher~Matcher#match match method} description.
   */
  matchAll(...e) {
    const t = [];
    for (const i of e)
      for (const s of this._patterns) {
        const r = va(i, s);
        r && t.push({
          element: i,
          pattern: s,
          match: r
        });
      }
    return t.length > 0 ? t : null;
  }
  /**
   * Returns the name of the element to match if there is exactly one pattern added to the matcher instance
   * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.
   *
   * @returns Element name trying to match.
   */
  getElementName() {
    if (this._patterns.length !== 1)
      return null;
    const e = this._patterns[0], t = e.name;
    return typeof e != "function" && t && !(t instanceof RegExp) ? t : null;
  }
}
function va(n, e) {
  if (typeof e == "function")
    return e(n);
  const t = {};
  return e.name && (t.name = B_(e.name, n.name), !t.name) || e.attributes && (t.attributes = L_(e.attributes, n), !t.attributes) || e.classes && (t.classes = z_(e.classes, n), !t.classes) || e.styles && (t.styles = $_(e.styles, n), !t.styles) ? null : t;
}
function B_(n, e) {
  return n instanceof RegExp ? !!e.match(n) : n === e;
}
function Ur(n, e, t) {
  const i = D_(n), s = Array.from(e), r = [];
  if (i.forEach(([o, a]) => {
    s.forEach((l) => {
      F_(o, l) && N_(a, l, t) && r.push(l);
    });
  }), !(!i.length || r.length < i.length))
    return r;
}
function D_(n) {
  return Array.isArray(n) ? n.map((e) => me(e) ? ((e.key === void 0 || e.value === void 0) && G("matcher-pattern-missing-key-or-value", e), [e.key, e.value]) : [e, !0]) : me(n) ? Object.entries(n) : [[n, !0]];
}
function F_(n, e) {
  return n === !0 || n === e || n instanceof RegExp && e.match(n);
}
function N_(n, e, t) {
  if (n === !0)
    return !0;
  const i = t(e);
  return n === i || n instanceof RegExp && !!String(i).match(n);
}
function L_(n, e) {
  const t = new Set(e.getAttributeKeys());
  return me(n) ? (n.style !== void 0 && G("matcher-pattern-deprecated-attributes-style-key", n), n.class !== void 0 && G("matcher-pattern-deprecated-attributes-class-key", n)) : (t.delete("style"), t.delete("class")), Ur(n, t, (i) => e.getAttribute(i));
}
function z_(n, e) {
  return Ur(
    n,
    e.getClassNames(),
    /* istanbul ignore next -- @preserve */
    () => {
    }
  );
}
function $_(n, e) {
  return Ur(n, e.getStyleNames(!0), (t) => e.getStyle(t));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class H_ {
  /**
   * Creates Styles instance.
   */
  constructor(e) {
    this._styles = {}, this._styleProcessor = e;
  }
  /**
   * Returns true if style map has no styles set.
   */
  get isEmpty() {
    const e = Object.entries(this._styles);
    return !Array.from(e).length;
  }
  /**
   * Number of styles defined.
   */
  get size() {
    return this.isEmpty ? 0 : this.getStyleNames().length;
  }
  /**
   * Set styles map to a new value.
   *
   * ```ts
   * styles.setTo( 'border:1px solid blue;margin-top:1px;' );
   * ```
   */
  setTo(e) {
    this.clear();
    const t = Array.from(U_(e).entries());
    for (const [i, s] of t)
      this._styleProcessor.toNormalizedForm(i, s, this._styles);
  }
  /**
   * Checks if a given style is set.
   *
   * ```ts
   * styles.setTo( 'margin-left:1px;' );
   *
   * styles.has( 'margin-left' );    // -> true
   * styles.has( 'padding' );        // -> false
   * ```
   *
   * **Note**: This check supports normalized style names.
   *
   * ```ts
   * // Enable 'margin' shorthand processing:
   * editor.data.addStyleProcessorRules( addMarginRules );
   *
   * styles.setTo( 'margin:2px;' );
   *
   * styles.has( 'margin' );         // -> true
   * styles.has( 'margin-top' );     // -> true
   * styles.has( 'margin-left' );    // -> true
   *
   * styles.remove( 'margin-top' );
   *
   * styles.has( 'margin' );         // -> false
   * styles.has( 'margin-top' );     // -> false
   * styles.has( 'margin-left' );    // -> true
   * ```
   *
   * @param name Style name.
   */
  has(e) {
    if (this.isEmpty)
      return !1;
    const i = this._styleProcessor.getReducedForm(e, this._styles).find(([s]) => s === e);
    return Array.isArray(i);
  }
  set(e, t) {
    if (K(e))
      for (const [i, s] of Object.entries(e))
        this._styleProcessor.toNormalizedForm(i, s, this._styles);
    else
      this._styleProcessor.toNormalizedForm(e, t, this._styles);
  }
  /**
   * Removes given style.
   *
   * ```ts
   * styles.setTo( 'background:#f00;margin-right:2px;' );
   *
   * styles.remove( 'background' );
   *
   * styles.toString();   // -> 'margin-right:2px;'
   * ```
   *
   * ***Note**:* This method uses {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules
   * enabled style processor rules} to normalize passed values.
   *
   * ```ts
   * // Enable 'margin' shorthand processing:
   * editor.data.addStyleProcessorRules( addMarginRules );
   *
   * styles.setTo( 'margin:1px' );
   *
   * styles.remove( 'margin-top' );
   * styles.remove( 'margin-right' );
   *
   * styles.toString(); // -> 'margin-bottom:1px;margin-left:1px;'
   * ```
   *
   * @param name Style name.
   */
  remove(e) {
    const t = tr(e);
    Nb(this._styles, t), delete this._styles[e], this._cleanEmptyObjectsOnPath(t);
  }
  /**
   * Returns a normalized style object or a single value.
   *
   * ```ts
   * // Enable 'margin' shorthand processing:
   * editor.data.addStyleProcessorRules( addMarginRules );
   *
   * const styles = new Styles();
   * styles.setTo( 'margin:1px 2px 3em;' );
   *
   * styles.getNormalized( 'margin' );
   * // will log:
   * // {
   * //     top: '1px',
   * //     right: '2px',
   * //     bottom: '3em',
   * //     left: '2px'     // normalized value from margin shorthand
   * // }
   *
   * styles.getNormalized( 'margin-left' ); // -> '2px'
   * ```
   *
   * **Note**: This method will only return normalized styles if a style processor was defined.
   *
   * @param name Style name.
   */
  getNormalized(e) {
    return this._styleProcessor.getNormalized(e, this._styles);
  }
  /**
   * Returns a normalized style string. Styles are sorted by name.
   *
   * ```ts
   * styles.set( 'margin' , '1px' );
   * styles.set( 'background', '#f00' );
   *
   * styles.toString(); // -> 'background:#f00;margin:1px;'
   * ```
   *
   * **Note**: This method supports normalized styles if defined.
   *
   * ```ts
   * // Enable 'margin' shorthand processing:
   * editor.data.addStyleProcessorRules( addMarginRules );
   *
   * styles.set( 'margin' , '1px' );
   * styles.set( 'background', '#f00' );
   * styles.remove( 'margin-top' );
   * styles.remove( 'margin-right' );
   *
   * styles.toString(); // -> 'background:#f00;margin-bottom:1px;margin-left:1px;'
   * ```
   */
  toString() {
    return this.isEmpty ? "" : this._getStylesEntries().map((e) => e.join(":")).sort().join(";") + ";";
  }
  /**
   * Returns property as a value string or undefined if property is not set.
   *
   * ```ts
   * // Enable 'margin' shorthand processing:
   * editor.data.addStyleProcessorRules( addMarginRules );
   *
   * const styles = new Styles();
   * styles.setTo( 'margin:1px;' );
   * styles.set( 'margin-bottom', '3em' );
   *
   * styles.getAsString( 'margin' ); // -> 'margin: 1px 1px 3em;'
   * ```
   *
   * Note, however, that all sub-values must be set for the longhand property name to return a value:
   *
   * ```ts
   * const styles = new Styles();
   * styles.setTo( 'margin:1px;' );
   * styles.remove( 'margin-bottom' );
   *
   * styles.getAsString( 'margin' ); // -> undefined
   * ```
   *
   * In the above scenario, it is not possible to return a `margin` value, so `undefined` is returned.
   * Instead, you should use:
   *
   * ```ts
   * const styles = new Styles();
   * styles.setTo( 'margin:1px;' );
   * styles.remove( 'margin-bottom' );
   *
   * for ( const styleName of styles.getStyleNames() ) {
   * 	console.log( styleName, styles.getAsString( styleName ) );
   * }
   * // 'margin-top', '1px'
   * // 'margin-right', '1px'
   * // 'margin-left', '1px'
   * ```
   *
   * In general, it is recommend to iterate over style names like in the example above. This way, you will always get all
   * the currently set style values. So, if all the 4 margin values would be set
   * the for-of loop above would yield only `'margin'`, `'1px'`:
   *
   * ```ts
   * const styles = new Styles();
   * styles.setTo( 'margin:1px;' );
   *
   * for ( const styleName of styles.getStyleNames() ) {
   * 	console.log( styleName, styles.getAsString( styleName ) );
   * }
   * // 'margin', '1px'
   * ```
   *
   * **Note**: To get a normalized version of a longhand property use the {@link #getNormalized `#getNormalized()`} method.
   */
  getAsString(e) {
    if (this.isEmpty)
      return;
    if (this._styles[e] && !K(this._styles[e]))
      return this._styles[e];
    const i = this._styleProcessor.getReducedForm(e, this._styles).find(([s]) => s === e);
    if (Array.isArray(i))
      return i[1];
  }
  /**
   * Returns all style properties names as they would appear when using {@link #toString `#toString()`}.
   *
   * When `expand` is set to true and there's a shorthand style property set, it will also return all equivalent styles:
   *
   * ```ts
   * stylesMap.setTo( 'margin: 1em' )
   * ```
   *
   * will be expanded to:
   *
   * ```ts
   * [ 'margin', 'margin-top', 'margin-right', 'margin-bottom', 'margin-left' ]
   * ```
   *
   * @param expand Expand shorthand style properties and all return equivalent style representations.
   */
  getStyleNames(e = !1) {
    return this.isEmpty ? [] : e ? this._styleProcessor.getStyleNames(this._styles) : this._getStylesEntries().map(([i]) => i);
  }
  /**
   * Removes all styles.
   */
  clear() {
    this._styles = {};
  }
  /**
   * Returns normalized styles entries for further processing.
   */
  _getStylesEntries() {
    const e = [], t = Object.keys(this._styles);
    for (const i of t)
      e.push(...this._styleProcessor.getReducedForm(i, this._styles));
    return e;
  }
  /**
   * Removes empty objects upon removing an entry from internal object.
   */
  _cleanEmptyObjectsOnPath(e) {
    const t = e.split(".");
    if (!(t.length > 1))
      return;
    const s = t.splice(0, t.length - 1).join("."), r = wn(this._styles, s);
    if (!r)
      return;
    !Array.from(Object.keys(r)).length && this.remove(s);
  }
}
class W_ {
  /**
   * Creates StylesProcessor instance.
   *
   * @internal
   */
  constructor() {
    this._normalizers = /* @__PURE__ */ new Map(), this._extractors = /* @__PURE__ */ new Map(), this._reducers = /* @__PURE__ */ new Map(), this._consumables = /* @__PURE__ */ new Map();
  }
  /**
   * Parse style string value to a normalized object and appends it to styles object.
   *
   * ```ts
   * const styles = {};
   *
   * stylesProcessor.toNormalizedForm( 'margin', '1px', styles );
   *
   * // styles will consist: { margin: { top: '1px', right: '1px', bottom: '1px', left: '1px; } }
   * ```
   *
   * **Note**: To define normalizer callbacks use {@link #setNormalizer}.
   *
   * @param name Name of style property.
   * @param propertyValue Value of style property.
   * @param styles Object holding normalized styles.
   */
  toNormalizedForm(e, t, i) {
    if (K(t)) {
      cs(i, tr(e), t);
      return;
    }
    if (this._normalizers.has(e)) {
      const s = this._normalizers.get(e), { path: r, value: o } = s(t);
      cs(i, r, o);
    } else
      cs(i, e, t);
  }
  /**
   * Returns a normalized version of a style property.
   *
   * ```ts
   * const styles = {
   * 	margin: { top: '1px', right: '1px', bottom: '1px', left: '1px; },
   * 	background: { color: '#f00' }
   * };
   *
   * stylesProcessor.getNormalized( 'background' );
   * // will return: { color: '#f00' }
   *
   * stylesProcessor.getNormalized( 'margin-top' );
   * // will return: '1px'
   * ```
   *
   * **Note**: In some cases extracting single value requires defining an extractor callback {@link #setExtractor}.
   *
   * @param name Name of style property.
   * @param styles Object holding normalized styles.
   */
  getNormalized(e, t) {
    if (!e)
      return xu({}, t);
    if (t[e] !== void 0)
      return t[e];
    if (this._extractors.has(e)) {
      const i = this._extractors.get(e);
      if (typeof i == "string")
        return wn(t, i);
      const s = i(e, t);
      if (s)
        return s;
    }
    return wn(t, tr(e));
  }
  /**
   * Returns a reduced form of style property form normalized object.
   *
   * For default margin reducer, the below code:
   *
   * ```ts
   * stylesProcessor.getReducedForm( 'margin', {
   * 	margin: { top: '1px', right: '1px', bottom: '2px', left: '1px; }
   * } );
   * ```
   *
   * will return:
   *
   * ```ts
   * [
   * 	[ 'margin', '1px 1px 2px' ]
   * ]
   * ```
   *
   * because it might be represented as a shorthand 'margin' value. However if one of margin long hand values is missing it should return:
   *
   * ```ts
   * [
   * 	[ 'margin-top', '1px' ],
   * 	[ 'margin-right', '1px' ],
   * 	[ 'margin-bottom', '2px' ]
   * 	// the 'left' value is missing - cannot use 'margin' shorthand.
   * ]
   * ```
   *
   * **Note**: To define reducer callbacks use {@link #setReducer}.
   *
   * @param name Name of style property.
   */
  getReducedForm(e, t) {
    const i = this.getNormalized(e, t);
    return i === void 0 ? [] : this._reducers.has(e) ? this._reducers.get(e)(i) : [[e, i]];
  }
  /**
   * Return all style properties. Also expand shorthand properties (e.g. `margin`, `background`) if respective extractor is available.
   *
   * @param styles Object holding normalized styles.
   */
  getStyleNames(e) {
    const t = Array.from(this._consumables.keys()).filter((s) => {
      const r = this.getNormalized(s, e);
      return r && typeof r == "object" ? Object.keys(r).length : r;
    }), i = /* @__PURE__ */ new Set([
      ...t,
      ...Object.keys(e)
    ]);
    return Array.from(i.values());
  }
  /**
   * Returns related style names.
   *
   * ```ts
   * stylesProcessor.getRelatedStyles( 'margin' );
   * // will return: [ 'margin-top', 'margin-right', 'margin-bottom', 'margin-left' ];
   *
   * stylesProcessor.getRelatedStyles( 'margin-top' );
   * // will return: [ 'margin' ];
   * ```
   *
   * **Note**: To define new style relations load an existing style processor or use
   * {@link module:engine/view/stylesmap~StylesProcessor#setStyleRelation `StylesProcessor.setStyleRelation()`}.
   */
  getRelatedStyles(e) {
    return this._consumables.get(e) || [];
  }
  /**
   * Adds a normalizer method for a style property.
   *
   * A normalizer returns describing how the value should be normalized.
   *
   * For instance 'margin' style is a shorthand for four margin values:
   *
   * - 'margin-top'
   * - 'margin-right'
   * - 'margin-bottom'
   * - 'margin-left'
   *
   * and can be written in various ways if some values are equal to others. For instance `'margin: 1px 2em;'` is a shorthand for
   * `'margin-top: 1px;margin-right: 2em;margin-bottom: 1px;margin-left: 2em'`.
   *
   * A normalizer should parse various margin notations as a single object:
   *
   * ```ts
   * const styles = {
   * 	margin: {
   * 		top: '1px',
   * 		right: '2em',
   * 		bottom: '1px',
   * 		left: '2em'
   * 	}
   * };
   * ```
   *
   * Thus a normalizer for 'margin' style should return an object defining style path and value to store:
   *
   * ```ts
   * const returnValue = {
   * 	path: 'margin',
   * 	value: {
   * 		top: '1px',
   * 		right: '2em',
   * 		bottom: '1px',
   * 		left: '2em'
   * 	}
   * };
   * ```
   *
   * Additionally to fully support all margin notations there should be also defined 4 normalizers for longhand margin notations. Below
   * is an example for 'margin-top' style property normalizer:
   *
   * ```ts
   * stylesProcessor.setNormalizer( 'margin-top', valueString => {
   * 	return {
   * 		path: 'margin.top',
   * 		value: valueString
   * 	}
   * } );
   * ```
   */
  setNormalizer(e, t) {
    this._normalizers.set(e, t);
  }
  /**
   * Adds a extractor callback for a style property.
   *
   * Most normalized style values are stored as one level objects. It is assumed that `'margin-top'` style will be stored as:
   *
   * ```ts
   * const styles = {
   * 	margin: {
   * 		top: 'value'
   * 	}
   * }
   * ```
   *
   * However, some styles can have conflicting notations and thus it might be harder to extract a style value from shorthand. For instance
   * the 'border-top-style' can be defined using `'border-top:solid'`, `'border-style:solid none none none'` or by `'border:solid'`
   * shorthands. The default border styles processors stores styles as:
   *
   * ```ts
   * const styles = {
   * 	border: {
   * 		style: {
   * 			top: 'solid'
   * 		}
   * 	}
   * }
   * ```
   *
   * as it is better to modify border style independently from other values. On the other part the output of the border might be
   * desired as `border-top`, `border-left`, etc notation.
   *
   * In the above example an extractor should return a side border value that combines style, color and width:
   *
   * ```ts
   * styleProcessor.setExtractor( 'border-top', styles => {
   * 	return {
   * 		color: styles.border.color.top,
   * 		style: styles.border.style.top,
   * 		width: styles.border.width.top
   * 	}
   * } );
   * ```
   *
   * @param callbackOrPath Callback that return a requested value or path string for single values.
   */
  setExtractor(e, t) {
    this._extractors.set(e, t);
  }
  /**
   * Adds a reducer callback for a style property.
   *
   * Reducer returns a minimal notation for given style name. For longhand properties it is not required to write a reducer as
   * by default the direct value from style path is taken.
   *
   * For shorthand styles a reducer should return minimal style notation either by returning single name-value tuple or multiple tuples
   * if a shorthand cannot be used. For instance for a margin shorthand a reducer might return:
   *
   * ```ts
   * const marginShortHandTuple = [
   * 	[ 'margin', '1px 1px 2px' ]
   * ];
   * ```
   *
   * or a longhand tuples for defined values:
   *
   * ```ts
   * // Considering margin.bottom and margin.left are undefined.
   * const marginLonghandsTuples = [
   * 	[ 'margin-top', '1px' ],
   * 	[ 'margin-right', '1px' ]
   * ];
   * ```
   *
   * A reducer obtains a normalized style value:
   *
   * ```ts
   * // Simplified reducer that always outputs 4 values which are always present:
   * stylesProcessor.setReducer( 'margin', margin => {
   * 	return [
   * 		[ 'margin', `${ margin.top } ${ margin.right } ${ margin.bottom } ${ margin.left }` ]
   * 	]
   * } );
   * ```
   */
  setReducer(e, t) {
    this._reducers.set(e, t);
  }
  /**
   * Defines a style shorthand relation to other style notations.
   *
   * ```ts
   * stylesProcessor.setStyleRelation( 'margin', [
   * 	'margin-top',
   * 	'margin-right',
   * 	'margin-bottom',
   * 	'margin-left'
   * ] );
   * ```
   *
   * This enables expanding of style names for shorthands. For instance, if defined,
   * {@link module:engine/conversion/viewconsumable~ViewConsumable view consumable} items are automatically created
   * for long-hand margin style notation alongside the `'margin'` item.
   *
   * This means that when an element being converted has a style `margin`, a converter for `margin-left` will work just
   * fine since the view consumable will contain a consumable `margin-left` item (thanks to the relation) and
   * `element.getStyle( 'margin-left' )` will work as well assuming that the style processor was correctly configured.
   * However, once `margin-left` is consumed, `margin` will not be consumable anymore.
   */
  setStyleRelation(e, t) {
    this._mapStyleNames(e, t);
    for (const i of t)
      this._mapStyleNames(i, [e]);
  }
  /**
   * Set two-way binding of style names.
   */
  _mapStyleNames(e, t) {
    this._consumables.has(e) || this._consumables.set(e, []), this._consumables.get(e).push(...t);
  }
}
function U_(n) {
  let e = null, t = 0, i = 0, s = null;
  const r = /* @__PURE__ */ new Map();
  if (n === "")
    return r;
  n.charAt(n.length - 1) != ";" && (n = n + ";");
  for (let o = 0; o < n.length; o++) {
    const a = n.charAt(o);
    if (e === null)
      switch (a) {
        case ":":
          s || (s = n.substr(t, o - t), i = o + 1);
          break;
        case '"':
        case "'":
          e = a;
          break;
        case ";": {
          const l = n.substr(i, o - i);
          s && r.set(s.trim(), l.trim()), s = null, t = o + 1;
          break;
        }
      }
    else
      a === e && (e = null);
  }
  return r;
}
function tr(n) {
  return n.replace("-", ".");
}
function cs(n, e, t) {
  let i = t;
  K(t) && (i = xu({}, wn(n, e), t)), Mb(n, e, i);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let Re = class Yu extends Ft {
  /**
   * Creates a view element.
   *
   * Attributes can be passed in various formats:
   *
   * ```ts
   * new Element( viewDocument, 'div', { class: 'editor', contentEditable: 'true' } ); // object
   * new Element( viewDocument, 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator
   * new Element( viewDocument, 'div', mapOfAttributes ); // map
   * ```
   *
   * @internal
   * @param document The document instance to which this element belongs.
   * @param name Node name.
   * @param attrs Collection of attributes.
   * @param children A list of nodes to be inserted into created element.
   */
  constructor(e, t, i, s) {
    if (super(e), this._unsafeAttributesToRender = [], this._customProperties = /* @__PURE__ */ new Map(), this.name = t, this._attrs = j_(i), this._children = [], s && this._insertChild(0, s), this._classes = /* @__PURE__ */ new Set(), this._attrs.has("class")) {
      const r = this._attrs.get("class");
      ya(this._classes, r), this._attrs.delete("class");
    }
    this._styles = new H_(this.document.stylesProcessor), this._attrs.has("style") && (this._styles.setTo(this._attrs.get("style")), this._attrs.delete("style"));
  }
  /**
   * Number of element's children.
   */
  get childCount() {
    return this._children.length;
  }
  /**
   * Is `true` if there are no nodes inside this element, `false` otherwise.
   */
  get isEmpty() {
    return this._children.length === 0;
  }
  /**
   * Gets child at the given index.
   *
   * @param index Index of child.
   * @returns Child node.
   */
  getChild(e) {
    return this._children[e];
  }
  /**
   * Gets index of the given child node. Returns `-1` if child node is not found.
   *
   * @param node Child node.
   * @returns Index of the child node.
   */
  getChildIndex(e) {
    return this._children.indexOf(e);
  }
  /**
   * Gets child nodes iterator.
   *
   * @returns Child nodes iterator.
   */
  getChildren() {
    return this._children[Symbol.iterator]();
  }
  /**
   * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.
   *
   * @returns Keys for attributes.
   */
  *getAttributeKeys() {
    this._classes.size > 0 && (yield "class"), this._styles.isEmpty || (yield "style"), yield* this._attrs.keys();
  }
  /**
   * Returns iterator that iterates over this element's attributes.
   *
   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.
   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.
   */
  *getAttributes() {
    yield* this._attrs.entries(), this._classes.size > 0 && (yield ["class", this.getAttribute("class")]), this._styles.isEmpty || (yield ["style", this.getAttribute("style")]);
  }
  /**
   * Gets attribute by key. If attribute is not present - returns undefined.
   *
   * @param key Attribute key.
   * @returns Attribute value.
   */
  getAttribute(e) {
    if (e == "class")
      return this._classes.size > 0 ? [...this._classes].join(" ") : void 0;
    if (e == "style") {
      const t = this._styles.toString();
      return t == "" ? void 0 : t;
    }
    return this._attrs.get(e);
  }
  /**
   * Returns a boolean indicating whether an attribute with the specified key exists in the element.
   *
   * @param key Attribute key.
   * @returns `true` if attribute with the specified key exists in the element, `false` otherwise.
   */
  hasAttribute(e) {
    return e == "class" ? this._classes.size > 0 : e == "style" ? !this._styles.isEmpty : this._attrs.has(e);
  }
  /**
   * Checks if this element is similar to other element.
   * Both elements should have the same name and attributes to be considered as similar. Two similar elements
   * can contain different set of children nodes.
   */
  isSimilar(e) {
    if (!(e instanceof Yu))
      return !1;
    if (this === e)
      return !0;
    if (this.name != e.name || this._attrs.size !== e._attrs.size || this._classes.size !== e._classes.size || this._styles.size !== e._styles.size)
      return !1;
    for (const [t, i] of this._attrs)
      if (!e._attrs.has(t) || e._attrs.get(t) !== i)
        return !1;
    for (const t of this._classes)
      if (!e._classes.has(t))
        return !1;
    for (const t of this._styles.getStyleNames())
      if (!e._styles.has(t) || e._styles.getAsString(t) !== this._styles.getAsString(t))
        return !1;
    return !0;
  }
  /**
   * Returns true if class is present.
   * If more then one class is provided - returns true only when all classes are present.
   *
   * ```ts
   * element.hasClass( 'foo' ); // Returns true if 'foo' class is present.
   * element.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.
   * ```
   */
  hasClass(...e) {
    for (const t of e)
      if (!this._classes.has(t))
        return !1;
    return !0;
  }
  /**
   * Returns iterator that contains all class names.
   */
  getClassNames() {
    return this._classes.keys();
  }
  /**
   * Returns style value for the given property mae.
   * If the style does not exist `undefined` is returned.
   *
   * **Note**: This method can work with normalized style names if
   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.
   * See {@link module:engine/view/stylesmap~StylesMap#getAsString `StylesMap#getAsString()`} for details.
   *
   * For an element with style set to `'margin:1px'`:
   *
   * ```ts
   * // Enable 'margin' shorthand processing:
   * editor.data.addStyleProcessorRules( addMarginRules );
   *
   * const element = view.change( writer => {
   * 	const element = writer.createElement();
   * 	writer.setStyle( 'margin', '1px' );
   * 	writer.setStyle( 'margin-bottom', '3em' );
   *
   * 	return element;
   * } );
   *
   * element.getStyle( 'margin' ); // -> 'margin: 1px 1px 3em;'
   * ```
   */
  getStyle(e) {
    return this._styles.getAsString(e);
  }
  /**
   * Returns a normalized style object or single style value.
   *
   * For an element with style set to: margin:1px 2px 3em;
   *
   * ```ts
   * element.getNormalizedStyle( 'margin' ) );
   * ```
   *
   * will return:
   *
   * ```ts
   * {
   * 	top: '1px',
   * 	right: '2px',
   * 	bottom: '3em',
   * 	left: '2px'    // a normalized value from margin shorthand
   * }
   * ```
   *
   * and reading for single style value:
   *
   * ```ts
   * styles.getNormalizedStyle( 'margin-left' );
   * ```
   *
   * Will return a `2px` string.
   *
   * **Note**: This method will return normalized values only if
   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.
   * See {@link module:engine/view/stylesmap~StylesMap#getNormalized `StylesMap#getNormalized()`} for details.
   *
   * @param property Name of CSS property
   */
  getNormalizedStyle(e) {
    return this._styles.getNormalized(e);
  }
  /**
   * Returns iterator that contains all style names.
   *
   * @param expand Expand shorthand style properties and return all equivalent style representations.
   */
  getStyleNames(e) {
    return this._styles.getStyleNames(e);
  }
  /**
   * Returns true if style keys are present.
   * If more then one style property is provided - returns true only when all properties are present.
   *
   * ```ts
   * element.hasStyle( 'color' ); // Returns true if 'border-top' style is present.
   * element.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.
   * ```
   */
  hasStyle(...e) {
    for (const t of e)
      if (!this._styles.has(t))
        return !1;
    return !0;
  }
  /**
   * Returns ancestor element that match specified pattern.
   * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.
   *
   * @see module:engine/view/matcher~Matcher
   * @param patterns Patterns used to match correct ancestor. See {@link module:engine/view/matcher~Matcher}.
   * @returns Found element or `null` if no matching ancestor was found.
   */
  findAncestor(...e) {
    const t = new ri(...e);
    let i = this.parent;
    for (; i && !i.is("documentFragment"); ) {
      if (t.match(i))
        return i;
      i = i.parent;
    }
    return null;
  }
  /**
   * Returns the custom property value for the given key.
   */
  getCustomProperty(e) {
    return this._customProperties.get(e);
  }
  /**
   * Returns an iterator which iterates over this element's custom properties.
   * Iterator provides `[ key, value ]` pairs for each stored property.
   */
  *getCustomProperties() {
    yield* this._customProperties.entries();
  }
  /**
   * Returns identity string based on element's name, styles, classes and other attributes.
   * Two elements that {@link #isSimilar are similar} will have same identity string.
   * It has the following format:
   *
   * ```ts
   * 'name class="class1,class2" style="style1:value1;style2:value2" attr1="val1" attr2="val2"'
   * ```
   *
   * For example:
   *
   * ```ts
   * const element = writer.createContainerElement( 'foo', {
   * 	banana: '10',
   * 	apple: '20',
   * 	style: 'color: red; border-color: white;',
   * 	class: 'baz'
   * } );
   *
   * // returns 'foo class="baz" style="border-color:white;color:red" apple="20" banana="10"'
   * element.getIdentity();
   * ```
   *
   * **Note**: Classes, styles and other attributes are sorted alphabetically.
   */
  getIdentity() {
    const e = Array.from(this._classes).sort().join(","), t = this._styles.toString(), i = Array.from(this._attrs).map((s) => `${s[0]}="${s[1]}"`).sort().join(" ");
    return this.name + (e == "" ? "" : ` class="${e}"`) + (t ? ` style="${t}"` : "") + (i == "" ? "" : ` ${i}`);
  }
  /**
   * Decides whether an unsafe attribute is whitelisted and should be rendered in the editing pipeline even though filtering mechanisms
   * like {@link module:engine/view/domconverter~DomConverter#shouldRenderAttribute} say it should not.
   *
   * Unsafe attribute names can be specified when creating an element via {@link module:engine/view/downcastwriter~DowncastWriter}.
   *
   * @param attributeName The name of the attribute to be checked.
   */
  shouldRenderUnsafeAttribute(e) {
    return this._unsafeAttributesToRender.includes(e);
  }
  /**
   * Clones provided element.
   *
   * @internal
   * @param deep If set to `true` clones element and all its children recursively. When set to `false`,
   * element will be cloned without any children.
   * @returns Clone of this element.
   */
  _clone(e = !1) {
    const t = [];
    if (e)
      for (const s of this.getChildren())
        t.push(s._clone(e));
    const i = new this.constructor(this.document, this.name, this._attrs, t);
    return i._classes = new Set(this._classes), i._styles.set(this._styles.getNormalized()), i._customProperties = new Map(this._customProperties), i.getFillerOffset = this.getFillerOffset, i._unsafeAttributesToRender = this._unsafeAttributesToRender, i;
  }
  /**
   * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node
   * and sets the parent of these nodes to this element.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#insert
   * @internal
   * @param items Items to be inserted.
   * @fires change
   * @returns Number of appended nodes.
   */
  _appendChild(e) {
    return this._insertChild(this.childCount, e);
  }
  /**
   * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to
   * this element.
   *
   * @internal
   * @see module:engine/view/downcastwriter~DowncastWriter#insert
   * @param index Position where nodes should be inserted.
   * @param items Items to be inserted.
   * @fires change
   * @returns Number of inserted nodes.
   */
  _insertChild(e, t) {
    this._fireChange("children", this);
    let i = 0;
    const s = q_(this.document, t);
    for (const r of s)
      r.parent !== null && r._remove(), r.parent = this, r.document = this.document, this._children.splice(e, 0, r), e++, i++;
    return i;
  }
  /**
   * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#remove
   * @internal
   * @param index Number of the first node to remove.
   * @param howMany Number of nodes to remove.
   * @fires change
   * @returns The array of removed nodes.
   */
  _removeChildren(e, t = 1) {
    this._fireChange("children", this);
    for (let i = e; i < e + t; i++)
      this._children[i].parent = null;
    return this._children.splice(e, t);
  }
  /**
   * Adds or overwrite attribute with a specified key and value.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute
   * @internal
   * @param key Attribute key.
   * @param value Attribute value.
   * @fires change
   */
  _setAttribute(e, t) {
    const i = String(t);
    this._fireChange("attributes", this), e == "class" ? ya(this._classes, i) : e == "style" ? this._styles.setTo(i) : this._attrs.set(e, i);
  }
  /**
   * Removes attribute from the element.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute
   * @internal
   * @param key Attribute key.
   * @returns Returns true if an attribute existed and has been removed.
   * @fires change
   */
  _removeAttribute(e) {
    return this._fireChange("attributes", this), e == "class" ? this._classes.size > 0 ? (this._classes.clear(), !0) : !1 : e == "style" ? this._styles.isEmpty ? !1 : (this._styles.clear(), !0) : this._attrs.delete(e);
  }
  /**
   * Adds specified class.
   *
   * ```ts
   * element._addClass( 'foo' ); // Adds 'foo' class.
   * element._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.
   * ```
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#addClass
   * @internal
   * @fires change
   */
  _addClass(e) {
    this._fireChange("attributes", this);
    for (const t of Q(e))
      this._classes.add(t);
  }
  /**
   * Removes specified class.
   *
   * ```ts
   * element._removeClass( 'foo' );  // Removes 'foo' class.
   * element._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.
   * ```
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#removeClass
   * @internal
   * @fires change
   */
  _removeClass(e) {
    this._fireChange("attributes", this);
    for (const t of Q(e))
      this._classes.delete(t);
  }
  _setStyle(e, t) {
    this._fireChange("attributes", this), typeof e != "string" ? this._styles.set(e) : this._styles.set(e, t);
  }
  /**
   * Removes specified style.
   *
   * ```ts
   * element._removeStyle( 'color' );  // Removes 'color' style.
   * element._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.
   * ```
   *
   * **Note**: This method can work with normalized style names if
   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.
   * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle
   * @internal
   * @fires change
   */
  _removeStyle(e) {
    this._fireChange("attributes", this);
    for (const t of Q(e))
      this._styles.remove(t);
  }
  /**
   * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,
   * so they can be used to add special data to elements.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty
   * @internal
   */
  _setCustomProperty(e, t) {
    this._customProperties.set(e, t);
  }
  /**
   * Removes the custom property stored under the given key.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty
   * @internal
   * @returns Returns true if property was removed.
   */
  _removeCustomProperty(e) {
    return this._customProperties.delete(e);
  }
};
Re.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "element" || n === "view:element") : n === "element" || n === "view:element" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "node" || n === "view:node";
};
function j_(n) {
  const e = tt(n);
  for (const [t, i] of e)
    i === null ? e.delete(t) : typeof i != "string" && e.set(t, String(i));
  return e;
}
function ya(n, e) {
  const t = e.split(/\s+/);
  n.clear(), t.forEach((i) => n.add(i));
}
function q_(n, e) {
  return typeof e == "string" ? [new q(n, e)] : (ye(e) || (e = [e]), Array.from(e).map((t) => typeof t == "string" ? new q(n, t) : t instanceof De ? new q(n, t.data) : t));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Mi extends Re {
  /**
   * Creates a container element.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement
   * @see module:engine/view/element~Element
   * @internal
   * @param document The document instance to which this element belongs.
   * @param name Node name.
   * @param attrs Collection of attributes.
   * @param children A list of nodes to be inserted into created element.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s), this.getFillerOffset = Zu;
  }
}
Mi.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "containerElement" || n === "view:containerElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "element" || n === "view:element") : n === "containerElement" || n === "view:containerElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "element" || n === "view:element" || n === "node" || n === "view:node";
};
function Zu() {
  const n = [...this.getChildren()], e = n[this.childCount - 1];
  if (e && e.is("element", "br"))
    return this.childCount;
  for (const t of n)
    if (!t.is("uiElement"))
      return null;
  return this.childCount;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Un extends H(Mi) {
  /**
   * Creates an editable element.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement
   * @internal
   * @param document The document instance to which this element belongs.
   * @param name Node name.
   * @param attrs Collection of attributes.
   * @param children A list of nodes to be inserted into created element.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s), this.set("isReadOnly", !1), this.set("isFocused", !1), this.bind("isReadOnly").to(e), this.bind("isFocused").to(e, "isFocused", (r) => r && e.selection.editableElement == this), this.listenTo(e.selection, "change", () => {
      this.isFocused = e.isFocused && e.selection.editableElement == this;
    });
  }
  destroy() {
    this.stopListening();
  }
}
Un.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "editableElement" || n === "view:editableElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "containerElement" || n === "view:containerElement" || n === "element" || n === "view:element") : n === "editableElement" || n === "view:editableElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "containerElement" || n === "view:containerElement" || n === "element" || n === "view:element" || n === "node" || n === "view:node";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const ka = Symbol("rootName");
class Xu extends Un {
  /**
   * Creates root editable element.
   *
   * @param document The document instance to which this element belongs.
   * @param name Node name.
   */
  constructor(e, t) {
    super(e, t), this.rootName = "main";
  }
  /**
   * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no
   * other name is set, `main` name is used.
   *
   * @readonly
   */
  get rootName() {
    return this.getCustomProperty(ka);
  }
  set rootName(e) {
    this._setCustomProperty(ka, e);
  }
  /**
   * Overrides old element name and sets new one.
   * This is needed because view roots are created before they are attached to the DOM.
   * The name of the root element is temporary at this stage. It has to be changed when the
   * view root element is attached to the DOM element.
   *
   * @internal
   * @param name The new name of element.
   */
  set _name(e) {
    this.name = e;
  }
}
Xu.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "rootElement" || n === "view:rootElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "editableElement" || n === "view:editableElement" || n === "containerElement" || n === "view:containerElement" || n === "element" || n === "view:element") : n === "rootElement" || n === "view:rootElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "editableElement" || n === "view:editableElement" || n === "containerElement" || n === "view:containerElement" || n === "element" || n === "view:element" || n === "node" || n === "view:node";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let Et = class {
  /**
   * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.
   *
   * @param options Object with configuration.
   */
  constructor(e = {}) {
    if (!e.boundaries && !e.startPosition)
      throw new f("view-tree-walker-no-start-position", null);
    if (e.direction && e.direction != "forward" && e.direction != "backward")
      throw new f("view-tree-walker-unknown-direction", e.startPosition, { direction: e.direction });
    this.boundaries = e.boundaries || null, e.startPosition ? this._position = v._createAt(e.startPosition) : this._position = v._createAt(e.boundaries[e.direction == "backward" ? "end" : "start"]), this.direction = e.direction || "forward", this.singleCharacters = !!e.singleCharacters, this.shallow = !!e.shallow, this.ignoreElementEnd = !!e.ignoreElementEnd, this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null, this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;
  }
  /**
   * Iterable interface.
   */
  [Symbol.iterator]() {
    return this;
  }
  /**
   * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is
   * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.
   */
  get position() {
    return this._position;
  }
  /**
   * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.
   *
   * For example:
   *
   * ```ts
   * walker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>
   * walker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]
   * walker.skip( value => false ); // Do not move the position.
   * ```
   *
   * @param skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should
   * return `true` if the value should be skipped or `false` if not.
   */
  skip(e) {
    let t, i;
    do
      i = this.position, t = this.next();
    while (!t.done && e(t.value));
    t.done || (this._position = i);
  }
  /**
   * Gets the next tree walker's value.
   *
   * @returns Object implementing iterator interface, returning
   * information about taken step.
   */
  next() {
    return this.direction == "forward" ? this._next() : this._previous();
  }
  /**
   * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.
   */
  _next() {
    let e = this.position.clone();
    const t = this.position, i = e.parent;
    if (i.parent === null && e.offset === i.childCount)
      return { done: !0, value: void 0 };
    if (i === this._boundaryEndParent && e.offset == this.boundaries.end.offset)
      return { done: !0, value: void 0 };
    let s;
    if (i instanceof q) {
      if (e.isAtEnd)
        return this._position = v._createAfter(i), this._next();
      s = i.data[e.offset];
    } else
      s = i.getChild(e.offset);
    if (s instanceof Re) {
      if (!this.shallow)
        e = new v(s, 0);
      else {
        if (this.boundaries && this.boundaries.end.isBefore(e))
          return { done: !0, value: void 0 };
        e.offset++;
      }
      return this._position = e, this._formatReturnValue("elementStart", s, t, e, 1);
    }
    if (s instanceof q) {
      if (this.singleCharacters)
        return e = new v(s, 0), this._position = e, this._next();
      let r = s.data.length, o;
      return s == this._boundaryEndParent ? (r = this.boundaries.end.offset, o = new De(s, 0, r), e = v._createAfter(o)) : (o = new De(s, 0, s.data.length), e.offset++), this._position = e, this._formatReturnValue("text", o, t, e, r);
    }
    if (typeof s == "string") {
      let r;
      this.singleCharacters ? r = 1 : r = (i === this._boundaryEndParent ? this.boundaries.end.offset : i.data.length) - e.offset;
      const o = new De(i, e.offset, r);
      return e.offset += r, this._position = e, this._formatReturnValue("text", o, t, e, r);
    }
    return e = v._createAfter(i), this._position = e, this.ignoreElementEnd ? this._next() : this._formatReturnValue("elementEnd", i, t, e);
  }
  /**
   * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.
   */
  _previous() {
    let e = this.position.clone();
    const t = this.position, i = e.parent;
    if (i.parent === null && e.offset === 0)
      return { done: !0, value: void 0 };
    if (i == this._boundaryStartParent && e.offset == this.boundaries.start.offset)
      return { done: !0, value: void 0 };
    let s;
    if (i instanceof q) {
      if (e.isAtStart)
        return this._position = v._createBefore(i), this._previous();
      s = i.data[e.offset - 1];
    } else
      s = i.getChild(e.offset - 1);
    if (s instanceof Re)
      return this.shallow ? (e.offset--, this._position = e, this._formatReturnValue("elementStart", s, t, e, 1)) : (e = new v(s, s.childCount), this._position = e, this.ignoreElementEnd ? this._previous() : this._formatReturnValue("elementEnd", s, t, e));
    if (s instanceof q) {
      if (this.singleCharacters)
        return e = new v(s, s.data.length), this._position = e, this._previous();
      let r = s.data.length, o;
      if (s == this._boundaryStartParent) {
        const a = this.boundaries.start.offset;
        o = new De(s, a, s.data.length - a), r = o.data.length, e = v._createBefore(o);
      } else
        o = new De(s, 0, s.data.length), e.offset--;
      return this._position = e, this._formatReturnValue("text", o, t, e, r);
    }
    if (typeof s == "string") {
      let r;
      if (this.singleCharacters)
        r = 1;
      else {
        const a = i === this._boundaryStartParent ? this.boundaries.start.offset : 0;
        r = e.offset - a;
      }
      e.offset -= r;
      const o = new De(i, e.offset, r);
      return this._position = e, this._formatReturnValue("text", o, t, e, r);
    }
    return e = v._createBefore(i), this._position = e, this._formatReturnValue("elementStart", i, t, e, 1);
  }
  /**
   * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.
   *
   * @param type Type of step.
   * @param item Item between old and new position.
   * @param previousPosition Previous position of iterator.
   * @param nextPosition Next position of iterator.
   * @param length Length of the item.
   */
  _formatReturnValue(e, t, i, s, r) {
    return t instanceof De && (t.offsetInText + t.data.length == t.textNode.data.length && (this.direction == "forward" && !(this.boundaries && this.boundaries.end.isEqual(this.position)) ? (s = v._createAfter(t.textNode), this._position = s) : i = v._createAfter(t.textNode)), t.offsetInText === 0 && (this.direction == "backward" && !(this.boundaries && this.boundaries.start.isEqual(this.position)) ? (s = v._createBefore(t.textNode), this._position = s) : i = v._createBefore(t.textNode))), {
      done: !1,
      value: {
        type: e,
        item: t,
        previousPosition: i,
        nextPosition: s,
        length: r
      }
    };
  }
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let v = class Ke extends Dt {
  /**
   * Creates a position.
   *
   * @param parent Position parent.
   * @param offset Position offset.
   */
  constructor(e, t) {
    super(), this.parent = e, this.offset = t;
  }
  /**
   * Node directly after the position. Equals `null` when there is no node after position or position is located
   * inside text node.
   */
  get nodeAfter() {
    return this.parent.is("$text") ? null : this.parent.getChild(this.offset) || null;
  }
  /**
   * Node directly before the position. Equals `null` when there is no node before position or position is located
   * inside text node.
   */
  get nodeBefore() {
    return this.parent.is("$text") ? null : this.parent.getChild(this.offset - 1) || null;
  }
  /**
   * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.
   */
  get isAtStart() {
    return this.offset === 0;
  }
  /**
   * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.
   */
  get isAtEnd() {
    const e = this.parent.is("$text") ? this.parent.data.length : this.parent.childCount;
    return this.offset === e;
  }
  /**
   * Position's root, that is the root of the position's parent element.
   */
  get root() {
    return this.parent.root;
  }
  /**
   * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if
   * position is not inside an editable element.
   */
  get editableElement() {
    let e = this.parent;
    for (; !(e instanceof Un); )
      if (e.parent)
        e = e.parent;
      else
        return null;
    return e;
  }
  /**
   * Returns a new instance of Position with offset incremented by `shift` value.
   *
   * @param shift How position offset should get changed. Accepts negative values.
   * @returns Shifted position.
   */
  getShiftedBy(e) {
    const t = Ke._createAt(this), i = t.offset + e;
    return t.offset = i < 0 ? 0 : i, t;
  }
  /**
   * Gets the farthest position which matches the callback using
   * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.
   *
   * For example:
   *
   * ```ts
   * getLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>
   * getLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>
   * getLastMatchingPosition( value => false ); // Do not move the position.
   * ```
   *
   * @param skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should
   * return `true` if the value should be skipped or `false` if not.
   * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.
   * @returns The position after the last item which matches the `skip` callback test.
   */
  getLastMatchingPosition(e, t = {}) {
    t.startPosition = this;
    const i = new Et(t);
    return i.skip(e), i.position;
  }
  /**
   * Returns ancestors array of this position, that is this position's parent and it's ancestors.
   *
   * @returns Array with ancestors.
   */
  getAncestors() {
    return this.parent.is("documentFragment") ? [this.parent] : this.parent.getAncestors({ includeSelf: !0 });
  }
  /**
   * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}
   * which is a common ancestor of both positions.
   */
  getCommonAncestor(e) {
    const t = this.getAncestors(), i = e.getAncestors();
    let s = 0;
    for (; t[s] == i[s] && t[s]; )
      s++;
    return s === 0 ? null : t[s - 1];
  }
  /**
   * Checks whether this position equals given position.
   *
   * @param otherPosition Position to compare with.
   * @returns True if positions are same.
   */
  isEqual(e) {
    return this.parent == e.parent && this.offset == e.offset;
  }
  /**
   * Checks whether this position is located before given position. When method returns `false` it does not mean that
   * this position is after give one. Two positions may be located inside separate roots and in that situation this
   * method will still return `false`.
   *
   * @see module:engine/view/position~Position#isAfter
   * @see module:engine/view/position~Position#compareWith
   * @param otherPosition Position to compare with.
   * @returns Returns `true` if this position is before given position.
   */
  isBefore(e) {
    return this.compareWith(e) == "before";
  }
  /**
   * Checks whether this position is located after given position. When method returns `false` it does not mean that
   * this position is before give one. Two positions may be located inside separate roots and in that situation this
   * method will still return `false`.
   *
   * @see module:engine/view/position~Position#isBefore
   * @see module:engine/view/position~Position#compareWith
   * @param otherPosition Position to compare with.
   * @returns Returns `true` if this position is after given position.
   */
  isAfter(e) {
    return this.compareWith(e) == "after";
  }
  /**
   * Checks whether this position is before, after or in same position that other position. Two positions may be also
   * different when they are located in separate roots.
   *
   * @param otherPosition Position to compare with.
   */
  compareWith(e) {
    if (this.root !== e.root)
      return "different";
    if (this.isEqual(e))
      return "same";
    const t = this.parent.is("node") ? this.parent.getPath() : [], i = e.parent.is("node") ? e.parent.getPath() : [];
    t.push(this.offset), i.push(e.offset);
    const s = ce(t, i);
    switch (s) {
      case "prefix":
        return "before";
      case "extension":
        return "after";
      default:
        return t[s] < i[s] ? "before" : "after";
    }
  }
  /**
   * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.
   *
   * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}
   */
  getWalker(e = {}) {
    return e.startPosition = this, new Et(e);
  }
  /**
   * Clones this position.
   */
  clone() {
    return new Ke(this.parent, this.offset);
  }
  /**
   * Creates position at the given location. The location can be specified as:
   *
   * * a {@link module:engine/view/position~Position position},
   * * parent element and offset (offset defaults to `0`),
   * * parent element and `'end'` (sets position at the end of that element),
   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).
   *
   * This method is a shortcut to other constructors such as:
   *
   * * {@link module:engine/view/position~Position._createBefore},
   * * {@link module:engine/view/position~Position._createAfter}.
   *
   * @internal
   * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.
   */
  static _createAt(e, t) {
    if (e instanceof Ke)
      return new this(e.parent, e.offset);
    {
      const i = e;
      if (t == "end")
        t = i.is("$text") ? i.data.length : i.childCount;
      else {
        if (t == "before")
          return this._createBefore(i);
        if (t == "after")
          return this._createAfter(i);
        if (t !== 0 && !t)
          throw new f("view-createpositionat-offset-required", i);
      }
      return new Ke(i, t);
    }
  }
  /**
   * Creates a new position after given view item.
   *
   * @internal
   * @param item View item after which the position should be located.
   */
  static _createAfter(e) {
    if (e.is("$textProxy"))
      return new Ke(e.textNode, e.offsetInText + e.data.length);
    if (!e.parent)
      throw new f("view-position-after-root", e, { root: e });
    return new Ke(e.parent, e.index + 1);
  }
  /**
   * Creates a new position before given view item.
   *
   * @internal
   * @param item View item before which the position should be located.
   */
  static _createBefore(e) {
    if (e.is("$textProxy"))
      return new Ke(e.textNode, e.offsetInText);
    if (!e.parent)
      throw new f("view-position-before-root", e, { root: e });
    return new Ke(e.parent, e.index);
  }
};
v.prototype.is = function(n) {
  return n === "position" || n === "view:position";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let P = class at extends Dt {
  /**
   * Creates a range spanning from `start` position to `end` position.
   *
   * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.
   *
   * @param start Start position.
   * @param end End position. If not set, range will be collapsed at the `start` position.
   */
  constructor(e, t = null) {
    super(), this.start = e.clone(), this.end = t ? t.clone() : e.clone();
  }
  /**
   * Iterable interface.
   *
   * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns
   * them together with additional information like length or {@link module:engine/view/position~Position positions},
   * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.
   *
   * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and
   * `ignoreElementEnd` option
   * set to `true`.
   */
  *[Symbol.iterator]() {
    yield* new Et({ boundaries: this, ignoreElementEnd: !0 });
  }
  /**
   * Returns whether the range is collapsed, that is it start and end positions are equal.
   */
  get isCollapsed() {
    return this.start.isEqual(this.end);
  }
  /**
   * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and
   * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.
   */
  get isFlat() {
    return this.start.parent === this.end.parent;
  }
  /**
   * Range root element.
   */
  get root() {
    return this.start.root;
  }
  /**
   * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning
   * and at the end).
   *
   * For example:
   *
   * ```html
   * <p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>
   * <p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>
   * ```
   *
   * Note that in the sample above:
   *
   * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},
   * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},
   * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.
   *
   * @returns Enlarged range.
   */
  getEnlarged() {
    let e = this.start.getLastMatchingPosition(Zi, { direction: "backward" }), t = this.end.getLastMatchingPosition(Zi);
    return e.parent.is("$text") && e.isAtStart && (e = v._createBefore(e.parent)), t.parent.is("$text") && t.isAtEnd && (t = v._createAfter(t.parent)), new at(e, t);
  }
  /**
   * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning
   * and at the end).
   *
   * For example:
   *
   * ```html
   * <p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>
   * <p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>
   * ```
   *
   * Note that in the sample above:
   *
   * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},
   * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},
   * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.
   *
   * @returns Shrunk range.
   */
  getTrimmed() {
    let e = this.start.getLastMatchingPosition(Zi);
    if (e.isAfter(this.end) || e.isEqual(this.end))
      return new at(e, e);
    let t = this.end.getLastMatchingPosition(Zi, { direction: "backward" });
    const i = e.nodeAfter, s = t.nodeBefore;
    return i && i.is("$text") && (e = new v(i, 0)), s && s.is("$text") && (t = new v(s, s.data.length)), new at(e, t);
  }
  /**
   * Two ranges are equal if their start and end positions are equal.
   *
   * @param otherRange Range to compare with.
   * @returns `true` if ranges are equal, `false` otherwise
   */
  isEqual(e) {
    return this == e || this.start.isEqual(e.start) && this.end.isEqual(e.end);
  }
  /**
   * Checks whether this range contains given {@link module:engine/view/position~Position position}.
   *
   * @param position Position to check.
   * @returns `true` if given {@link module:engine/view/position~Position position} is contained in this range, `false` otherwise.
   */
  containsPosition(e) {
    return e.isAfter(this.start) && e.isBefore(this.end);
  }
  /**
   * Checks whether this range contains given {@link module:engine/view/range~Range range}.
   *
   * @param otherRange Range to check.
   * @param loose Whether the check is loose or strict. If the check is strict (`false`), compared range cannot
   * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or
   * even be equal to this range. Note that collapsed ranges are always compared in strict mode.
   * @returns `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`
   * otherwise.
   */
  containsRange(e, t = !1) {
    e.isCollapsed && (t = !1);
    const i = this.containsPosition(e.start) || t && this.start.isEqual(e.start), s = this.containsPosition(e.end) || t && this.end.isEqual(e.end);
    return i && s;
  }
  /**
   * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given
   * {@link module:engine/view/range~Range range}.
   * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.
   *
   * Examples:
   *
   * ```ts
   * let foo = downcastWriter.createText( 'foo' );
   * let img = downcastWriter.createContainerElement( 'img' );
   * let bar = downcastWriter.createText( 'bar' );
   * let p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );
   *
   * let range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // "o", img, "b" are in range.
   * let otherRange = view.createRange( // "oo", img, "ba" are in range.
   * 	view.createPositionAt( foo, 1 ),
   * 	view.createPositionAt( bar, 2 )
   * );
   * let transformed = range.getDifference( otherRange );
   * // transformed array has no ranges because `otherRange` contains `range`
   *
   * otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // "oo", img are in range.
   * transformed = range.getDifference( otherRange );
   * // transformed array has one range: from ( p, 2 ) to ( bar, 1 )
   *
   * otherRange = view.createRange( view.createPositionAt( p, 1 ), view.createPositionAt( p, 2 ) ); // img is in range.
   * transformed = range.getDifference( otherRange );
   * // transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )
   * ```
   *
   * @param otherRange Range to differentiate against.
   * @returns The difference between ranges.
   */
  getDifference(e) {
    const t = [];
    return this.isIntersecting(e) ? (this.containsPosition(e.start) && t.push(new at(this.start, e.start)), this.containsPosition(e.end) && t.push(new at(e.end, this.end))) : t.push(this.clone()), t;
  }
  /**
   * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.
   * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.
   *
   * Examples:
   *
   * ```ts
   * let foo = downcastWriter.createText( 'foo' );
   * let img = downcastWriter.createContainerElement( 'img' );
   * let bar = downcastWriter.createText( 'bar' );
   * let p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );
   *
   * let range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // "o", img, "b" are in range.
   * let otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // "oo", img are in range.
   * let transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).
   *
   * otherRange = view.createRange( view.createPositionAt( bar, 1 ), view.createPositionAt( bar, 3 ); "ar" is in range.
   * transformed = range.getIntersection( otherRange ); // null - no common part.
   * ```
   *
   * @param otherRange Range to check for intersection.
   * @returns A common part of given ranges or `null` if ranges have no common part.
   */
  getIntersection(e) {
    if (this.isIntersecting(e)) {
      let t = this.start, i = this.end;
      return this.containsPosition(e.start) && (t = e.start), this.containsPosition(e.end) && (i = e.end), new at(t, i);
    }
    return null;
  }
  /**
   * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.
   *
   * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.
   */
  getWalker(e = {}) {
    return e.boundaries = this, new Et(e);
  }
  /**
   * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}
   * which is a common ancestor of range's both ends (in which the entire range is contained).
   */
  getCommonAncestor() {
    return this.start.getCommonAncestor(this.end);
  }
  /**
   * Returns an {@link module:engine/view/element~Element Element} contained by the range.
   * The element will be returned when it is the **only** node within the range and **fully–contained**
   * at the same time.
   */
  getContainedElement() {
    if (this.isCollapsed)
      return null;
    let e = this.start.nodeAfter, t = this.end.nodeBefore;
    return this.start.parent.is("$text") && this.start.isAtEnd && this.start.parent.nextSibling && (e = this.start.parent.nextSibling), this.end.parent.is("$text") && this.end.isAtStart && this.end.parent.previousSibling && (t = this.end.parent.previousSibling), e && e.is("element") && e === t ? e : null;
  }
  /**
   * Clones this range.
   */
  clone() {
    return new at(this.start, this.end);
  }
  /**
   * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns
   * them.
   *
   * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option
   * set to `true`. However it returns only {@link module:engine/view/item~Item items},
   * not {@link module:engine/view/treewalker~TreeWalkerValue}.
   *
   * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for
   * a full list of available options.
   *
   * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.
   */
  *getItems(e = {}) {
    e.boundaries = this, e.ignoreElementEnd = !0;
    const t = new Et(e);
    for (const i of t)
      yield i.item;
  }
  /**
   * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or
   * contained in this range.
   *
   * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only
   * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.
   *
   * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for
   * a full list of available options.
   *
   * @param options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.
   */
  *getPositions(e = {}) {
    e.boundaries = this;
    const t = new Et(e);
    yield t.position;
    for (const i of t)
      yield i.nextPosition;
  }
  /**
   * Checks and returns whether this range intersects with the given range.
   *
   * @param otherRange Range to compare with.
   * @returns True if ranges intersect.
   */
  isIntersecting(e) {
    return this.start.isBefore(e.end) && this.end.isAfter(e.start);
  }
  /**
   * Creates a range from the given parents and offsets.
   *
   * @internal
   * @param startElement Start position parent element.
   * @param startOffset Start position offset.
   * @param endElement End position parent element.
   * @param endOffset End position offset.
   * @returns Created range.
   */
  static _createFromParentsAndOffsets(e, t, i, s) {
    return new this(new v(e, t), new v(i, s));
  }
  /**
   * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by
   * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.
   *
   * @internal
   * @param position Beginning of the range.
   * @param shift How long the range should be.
   */
  static _createFromPositionAndShift(e, t) {
    const i = e, s = e.getShiftedBy(t);
    return t > 0 ? new this(i, s) : new this(s, i);
  }
  /**
   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of
   * that element and ends after the last child of that element.
   *
   * @internal
   * @param element Element which is a parent for the range.
   */
  static _createIn(e) {
    return this._createFromParentsAndOffsets(e, 0, e, e.childCount);
  }
  /**
   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.
   *
   * @internal
   */
  static _createOn(e) {
    const t = e.is("$textProxy") ? e.offsetSize : 1;
    return this._createFromPositionAndShift(v._createBefore(e), t);
  }
};
P.prototype.is = function(n) {
  return n === "range" || n === "view:range";
};
function Zi(n) {
  return !!(n.item.is("attributeElement") || n.item.is("uiElement"));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let ht = class Qu extends L(Dt) {
  /**
   * Creates new selection instance.
   *
   * **Note**: The selection constructor is available as a factory method:
   *
   * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},
   * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.
   *
   * ```ts
   * // Creates empty selection without ranges.
   * const selection = writer.createSelection();
   *
   * // Creates selection at the given range.
   * const range = writer.createRange( start, end );
   * const selection = writer.createSelection( range );
   *
   * // Creates selection at the given ranges
   * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];
   * const selection = writer.createSelection( ranges );
   *
   * // Creates selection from the other selection.
   * const otherSelection = writer.createSelection();
   * const selection = writer.createSelection( otherSelection );
   *
   * // Creates selection from the document selection.
   * const selection = writer.createSelection( editor.editing.view.document.selection );
   *
   * // Creates selection at the given position.
   * const position = writer.createPositionFromPath( root, path );
   * const selection = writer.createSelection( position );
   *
   * // Creates collapsed selection at the position of given item and offset.
   * const paragraph = writer.createContainerElement( 'paragraph' );
   * const selection = writer.createSelection( paragraph, offset );
   *
   * // Creates a range inside an {@link module:engine/view/element~Element element} which starts before the
   * // first child of that element and ends after the last child of that element.
   * const selection = writer.createSelection( paragraph, 'in' );
   *
   * // Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends
   * // just after the item.
   * const selection = writer.createSelection( paragraph, 'on' );
   * ```
   *
   * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.
   *
   * ```ts
   * // Creates backward selection.
   * const selection = writer.createSelection( range, { backward: true } );
   * ```
   *
   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.
   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be
   * represented in other way, for example by applying proper CSS class.
   *
   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM
   * (and be  properly handled by screen readers).
   *
   * ```ts
   * // Creates fake selection with label.
   * const selection = writer.createSelection( range, { fake: true, label: 'foo' } );
   * ```
   *
   * @internal
   */
  constructor(...e) {
    super(), this._ranges = [], this._lastRangeBackward = !1, this._isFake = !1, this._fakeSelectionLabel = "", e.length && this.setTo(...e);
  }
  /**
   * Returns true if selection instance is marked as `fake`.
   *
   * @see #setTo
   */
  get isFake() {
    return this._isFake;
  }
  /**
   * Returns fake selection label.
   *
   * @see #setTo
   */
  get fakeSelectionLabel() {
    return this._fakeSelectionLabel;
  }
  /**
   * Selection anchor. Anchor may be described as a position where the selection starts. Together with
   * {@link #focus focus} they define the direction of selection, which is important
   * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.
   * It may be a bit unintuitive when there are multiple ranges in selection.
   *
   * @see #focus
   */
  get anchor() {
    if (!this._ranges.length)
      return null;
    const e = this._ranges[this._ranges.length - 1];
    return (this._lastRangeBackward ? e.end : e.start).clone();
  }
  /**
   * Selection focus. Focus is a position where the selection ends.
   *
   * @see #anchor
   */
  get focus() {
    if (!this._ranges.length)
      return null;
    const e = this._ranges[this._ranges.length - 1];
    return (this._lastRangeBackward ? e.start : e.end).clone();
  }
  /**
   * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is
   * collapsed.
   */
  get isCollapsed() {
    return this.rangeCount === 1 && this._ranges[0].isCollapsed;
  }
  /**
   * Returns number of ranges in selection.
   */
  get rangeCount() {
    return this._ranges.length;
  }
  /**
   * Specifies whether the {@link #focus} precedes {@link #anchor}.
   */
  get isBackward() {
    return !this.isCollapsed && this._lastRangeBackward;
  }
  /**
   * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`
   * if the selection is not inside an editable element.
   */
  get editableElement() {
    return this.anchor ? this.anchor.editableElement : null;
  }
  /**
   * Returns an iterable that contains copies of all ranges added to the selection.
   */
  *getRanges() {
    for (const e of this._ranges)
      yield e.clone();
  }
  /**
   * Returns copy of the first range in the selection. First range is the one which
   * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start
   * position of all other ranges (not to confuse with the first range added to the selection).
   * Returns `null` if no ranges are added to selection.
   */
  getFirstRange() {
    let e = null;
    for (const t of this._ranges)
      (!e || t.start.isBefore(e.start)) && (e = t);
    return e ? e.clone() : null;
  }
  /**
   * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}
   * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse
   * with the last range added to the selection). Returns `null` if no ranges are added to selection.
   */
  getLastRange() {
    let e = null;
    for (const t of this._ranges)
      (!e || t.end.isAfter(e.end)) && (e = t);
    return e ? e.clone() : null;
  }
  /**
   * Returns copy of the first position in the selection. First position is the position that
   * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.
   * Returns `null` if no ranges are added to selection.
   */
  getFirstPosition() {
    const e = this.getFirstRange();
    return e ? e.start.clone() : null;
  }
  /**
   * Returns copy of the last position in the selection. Last position is the position that
   * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.
   * Returns `null` if no ranges are added to selection.
   */
  getLastPosition() {
    const e = this.getLastRange();
    return e ? e.end.clone() : null;
  }
  /**
   * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,
   * same number of ranges and all ranges from one selection equal to a range from other selection.
   *
   * @param otherSelection Selection to compare with.
   * @returns `true` if selections are equal, `false` otherwise.
   */
  isEqual(e) {
    if (this.isFake != e.isFake || this.isFake && this.fakeSelectionLabel != e.fakeSelectionLabel || this.rangeCount != e.rangeCount)
      return !1;
    if (this.rangeCount === 0)
      return !0;
    if (!this.anchor.isEqual(e.anchor) || !this.focus.isEqual(e.focus))
      return !1;
    for (const t of this._ranges) {
      let i = !1;
      for (const s of e._ranges)
        if (t.isEqual(s)) {
          i = !0;
          break;
        }
      if (!i)
        return !1;
    }
    return !0;
  }
  /**
   * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same
   * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are
   * equal to any trimmed range from other selection.
   *
   * @param otherSelection Selection to compare with.
   * @returns `true` if selections are similar, `false` otherwise.
   */
  isSimilar(e) {
    if (this.isBackward != e.isBackward)
      return !1;
    const t = Ys(this.getRanges()), i = Ys(e.getRanges());
    if (t != i)
      return !1;
    if (t == 0)
      return !0;
    for (let s of this.getRanges()) {
      s = s.getTrimmed();
      let r = !1;
      for (let o of e.getRanges())
        if (o = o.getTrimmed(), s.start.isEqual(o.start) && s.end.isEqual(o.end)) {
          r = !0;
          break;
        }
      if (!r)
        return !1;
    }
    return !0;
  }
  /**
   * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only
   * one range in the selection, and that range contains exactly one element.
   * Returns `null` if there is no selected element.
   */
  getSelectedElement() {
    return this.rangeCount !== 1 ? null : this.getFirstRange().getContainedElement();
  }
  /**
   * Sets this selection's ranges and direction to the specified location based on the given
   * {@link module:engine/view/selection~Selectable selectable}.
   *
   * ```ts
   * // Sets selection to the given range.
   * const range = writer.createRange( start, end );
   * selection.setTo( range );
   *
   * // Sets selection to given ranges.
   * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];
   * selection.setTo( range );
   *
   * // Sets selection to the other selection.
   * const otherSelection = writer.createSelection();
   * selection.setTo( otherSelection );
   *
   * // Sets selection to contents of DocumentSelection.
   * selection.setTo( editor.editing.view.document.selection );
   *
   * // Sets collapsed selection at the given position.
   * const position = writer.createPositionAt( root, path );
   * selection.setTo( position );
   *
   * // Sets collapsed selection at the position of given item and offset.
   * selection.setTo( paragraph, offset );
   * ```
   *
   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of
   * that element and ends after the last child of that element.
   *
   * ```ts
   * selection.setTo( paragraph, 'in' );
   * ```
   *
   * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.
   *
   * ```ts
   * selection.setTo( paragraph, 'on' );
   *
   * // Clears selection. Removes all ranges.
   * selection.setTo( null );
   * ```
   *
   * `Selection#setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.
   *
   * ```ts
   * // Sets selection as backward.
   * selection.setTo( range, { backward: true } );
   * ```
   *
   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.
   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be
   * represented in other way, for example by applying proper CSS class.
   *
   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM
   * (and be  properly handled by screen readers).
   *
   * ```ts
   * // Creates fake selection with label.
   * selection.setTo( range, { fake: true, label: 'foo' } );
   * ```
   *
   * @fires change
   */
  setTo(...e) {
    let [t, i, s] = e;
    if (typeof i == "object" && (s = i, i = void 0), t === null)
      this._setRanges([]), this._setFakeOptions(s);
    else if (t instanceof Qu || t instanceof jr)
      this._setRanges(t.getRanges(), t.isBackward), this._setFakeOptions({ fake: t.isFake, label: t.fakeSelectionLabel });
    else if (t instanceof P)
      this._setRanges([t], s && s.backward), this._setFakeOptions(s);
    else if (t instanceof v)
      this._setRanges([new P(t)]), this._setFakeOptions(s);
    else if (t instanceof Ft) {
      const r = !!s && !!s.backward;
      let o;
      if (i === void 0)
        throw new f("view-selection-setto-required-second-parameter", this);
      i == "in" ? o = P._createIn(t) : i == "on" ? o = P._createOn(t) : o = new P(v._createAt(t, i)), this._setRanges([o], r), this._setFakeOptions(s);
    } else if (ye(t))
      this._setRanges(t, s && s.backward), this._setFakeOptions(s);
    else
      throw new f("view-selection-setto-not-selectable", this);
    this.fire("change");
  }
  /**
   * Moves {@link #focus} to the specified location.
   *
   * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}
   * parameters.
   *
   * @fires change
   * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.
   */
  setFocus(e, t) {
    if (this.anchor === null)
      throw new f("view-selection-setfocus-no-ranges", this);
    const i = v._createAt(e, t);
    if (i.compareWith(this.focus) == "same")
      return;
    const s = this.anchor;
    this._ranges.pop(), i.compareWith(s) == "before" ? this._addRange(new P(i, s), !0) : this._addRange(new P(s, i)), this.fire("change");
  }
  /**
   * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array
   * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.
   * Accepts a flag describing in which way the selection is made.
   *
   * @param newRanges Iterable object of ranges to set.
   * @param isLastBackward Flag describing if last added range was selected forward - from start to end
   * (`false`) or backward - from end to start (`true`). Defaults to `false`.
   */
  _setRanges(e, t = !1) {
    e = Array.from(e), this._ranges = [];
    for (const i of e)
      this._addRange(i);
    this._lastRangeBackward = !!t;
  }
  /**
   * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection
   * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to
   * the user and selection over elements can be represented in other way, for example by applying proper CSS class.
   *
   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be
   * properly handled by screen readers).
   */
  _setFakeOptions(e = {}) {
    this._isFake = !!e.fake, this._fakeSelectionLabel = e.fake && e.label || "";
  }
  /**
   * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the
   * selection instance and you can safely operate on it.
   *
   * Accepts a flag describing in which way the selection is made - passed range might be selected from
   * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}
   * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.
   * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects
   * with ranges already stored in Selection instance.
   */
  _addRange(e, t = !1) {
    if (!(e instanceof P))
      throw new f("view-selection-add-range-not-range", this);
    this._pushRange(e), this._lastRangeBackward = !!t;
  }
  /**
   * Adds range to selection - creates copy of given range so it can be safely used and modified.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects
   * with ranges already stored in selection instance.
   */
  _pushRange(e) {
    for (const t of this._ranges)
      if (e.isIntersecting(t))
        throw new f("view-selection-range-intersects", this, { addedRange: e, intersectingRange: t });
    this._ranges.push(new P(e.start, e.end));
  }
};
ht.prototype.is = function(n) {
  return n === "selection" || n === "view:selection";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let jr = class extends L(Dt) {
  constructor(...e) {
    super(), this._selection = new ht(), this._selection.delegate("change").to(this), e.length && this._selection.setTo(...e);
  }
  /**
   * Returns true if selection instance is marked as `fake`.
   *
   * @see #_setTo
   */
  get isFake() {
    return this._selection.isFake;
  }
  /**
   * Returns fake selection label.
   *
   * @see #_setTo
   */
  get fakeSelectionLabel() {
    return this._selection.fakeSelectionLabel;
  }
  /**
   * Selection anchor. Anchor may be described as a position where the selection starts. Together with
   * {@link #focus focus} they define the direction of selection, which is important
   * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.
   * It may be a bit unintuitive when there are multiple ranges in selection.
   *
   * @see #focus
   */
  get anchor() {
    return this._selection.anchor;
  }
  /**
   * Selection focus. Focus is a position where the selection ends.
   *
   * @see #anchor
   */
  get focus() {
    return this._selection.focus;
  }
  /**
   * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is
   * collapsed.
   */
  get isCollapsed() {
    return this._selection.isCollapsed;
  }
  /**
   * Returns number of ranges in selection.
   */
  get rangeCount() {
    return this._selection.rangeCount;
  }
  /**
   * Specifies whether the {@link #focus} precedes {@link #anchor}.
   */
  get isBackward() {
    return this._selection.isBackward;
  }
  /**
   * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`
   * if the selection is not inside an editable element.
   */
  get editableElement() {
    return this._selection.editableElement;
  }
  /**
   * Used for the compatibility with the {@link module:engine/view/selection~Selection#isEqual} method.
   *
   * @internal
   */
  get _ranges() {
    return this._selection._ranges;
  }
  /**
   * Returns an iterable that contains copies of all ranges added to the selection.
   */
  *getRanges() {
    yield* this._selection.getRanges();
  }
  /**
   * Returns copy of the first range in the selection. First range is the one which
   * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start
   * position of all other ranges (not to confuse with the first range added to the selection).
   * Returns `null` if no ranges are added to selection.
   */
  getFirstRange() {
    return this._selection.getFirstRange();
  }
  /**
   * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}
   * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse
   * with the last range added to the selection). Returns `null` if no ranges are added to selection.
   */
  getLastRange() {
    return this._selection.getLastRange();
  }
  /**
   * Returns copy of the first position in the selection. First position is the position that
   * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.
   * Returns `null` if no ranges are added to selection.
   */
  getFirstPosition() {
    return this._selection.getFirstPosition();
  }
  /**
   * Returns copy of the last position in the selection. Last position is the position that
   * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.
   * Returns `null` if no ranges are added to selection.
   */
  getLastPosition() {
    return this._selection.getLastPosition();
  }
  /**
   * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only
   * one range in the selection, and that range contains exactly one element.
   * Returns `null` if there is no selected element.
   */
  getSelectedElement() {
    return this._selection.getSelectedElement();
  }
  /**
   * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,
   * same number of ranges and all ranges from one selection equal to a range from other selection.
   *
   * @param otherSelection Selection to compare with.
   * @returns `true` if selections are equal, `false` otherwise.
   */
  isEqual(e) {
    return this._selection.isEqual(e);
  }
  /**
   * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same
   * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are
   * equal to any trimmed range from other selection.
   *
   * @param otherSelection Selection to compare with.
   * @returns `true` if selections are similar, `false` otherwise.
   */
  isSimilar(e) {
    return this._selection.isSimilar(e);
  }
  /**
   * Sets this selection's ranges and direction to the specified location based on the given
   * {@link module:engine/view/selection~Selectable selectable}.
   *
   * ```ts
   * // Sets selection to the given range.
   * const range = writer.createRange( start, end );
   * documentSelection._setTo( range );
   *
   * // Sets selection to given ranges.
   * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];
   * documentSelection._setTo( range );
   *
   * // Sets selection to the other selection.
   * const otherSelection = writer.createSelection();
   * documentSelection._setTo( otherSelection );
   *
   * // Sets collapsed selection at the given position.
   * const position = writer.createPositionAt( root, offset );
   * documentSelection._setTo( position );
   *
   * // Sets collapsed selection at the position of given item and offset.
   * documentSelection._setTo( paragraph, offset );
   * ```
   *
   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of
   * that element and ends after the last child of that element.
   *
   * ```ts
   * documentSelection._setTo( paragraph, 'in' );
   * ```
   *
   * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.
   *
   * ```ts
   * documentSelection._setTo( paragraph, 'on' );
   *
   * // Clears selection. Removes all ranges.
   * documentSelection._setTo( null );
   * ```
   *
   * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.
   *
   * ```ts
   * // Sets selection as backward.
   * documentSelection._setTo( range, { backward: true } );
   * ```
   *
   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.
   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be
   * represented in other way, for example by applying proper CSS class.
   *
   * Additionally fake's selection label can be provided. It will be used to des cribe fake selection in DOM
   * (and be  properly handled by screen readers).
   *
   * ```ts
   * // Creates fake selection with label.
   * documentSelection._setTo( range, { fake: true, label: 'foo' } );
   * ```
   *
   * @internal
   * @fires change
   */
  _setTo(...e) {
    this._selection.setTo(...e);
  }
  /**
   * Moves {@link #focus} to the specified location.
   *
   * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}
   * parameters.
   *
   * @internal
   * @fires change
   * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.
   */
  _setFocus(e, t) {
    this._selection.setFocus(e, t);
  }
};
jr.prototype.is = function(n) {
  return n === "selection" || n == "documentSelection" || n == "view:selection" || n == "view:documentSelection";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class pi extends Qe {
  /**
   * @param source The emitter.
   * @param name The event name.
   * @param startRange The view range that the bubbling should start from.
   */
  constructor(e, t, i) {
    super(e, t), this.startRange = i, this._eventPhase = "none", this._currentTarget = null;
  }
  /**
   * The current event phase.
   */
  get eventPhase() {
    return this._eventPhase;
  }
  /**
   * The current bubbling target.
   */
  get currentTarget() {
    return this._currentTarget;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const us = Symbol("bubbling contexts");
function ir(n) {
  class e extends n {
    fire(i, ...s) {
      try {
        const r = i instanceof Qe ? i : new Qe(this, i), o = hs(this);
        if (!o.size)
          return;
        if (bi(r, "capturing", this), $t(o, "$capture", r, ...s))
          return r.return;
        const a = r.startRange || this.selection.getFirstRange(), l = a ? a.getContainedElement() : null, c = l ? !!eh(o, l) : !1;
        let u = l || G_(a);
        if (bi(r, "atTarget", u), !c) {
          if ($t(o, "$text", r, ...s))
            return r.return;
          bi(r, "bubbling", u);
        }
        for (; u; ) {
          if (u.is("rootElement")) {
            if ($t(o, "$root", r, ...s))
              return r.return;
          } else if (u.is("element") && $t(o, u.name, r, ...s))
            return r.return;
          if ($t(o, u, r, ...s))
            return r.return;
          u = u.parent, bi(r, "bubbling", u);
        }
        return bi(r, "bubbling", this), $t(o, "$document", r, ...s), r.return;
      } catch (r) {
        /* istanbul ignore next -- @preserve */
        f.rethrowUnexpectedError(r, this);
      }
    }
    _addEventListener(i, s, r) {
      const o = Q(r.context || "$document"), a = hs(this);
      for (const l of o) {
        let c = a.get(l);
        c || (c = new (L())(), a.set(l, c)), this.listenTo(c, i, s, r);
      }
    }
    _removeEventListener(i, s) {
      const r = hs(this);
      for (const o of r.values())
        this.stopListening(o, i, s);
    }
  }
  return e;
}
{
  const n = ir(Object);
  ["fire", "_addEventListener", "_removeEventListener"].forEach((e) => {
    ir[e] = n.prototype[e];
  });
}
function bi(n, e, t) {
  n instanceof pi && (n._eventPhase = e, n._currentTarget = t);
}
function $t(n, e, t, ...i) {
  const s = typeof e == "string" ? n.get(e) : eh(n, e);
  return s ? (s.fire(t, ...i), t.stop.called) : !1;
}
function eh(n, e) {
  for (const [t, i] of n)
    if (typeof t == "function" && t(e))
      return i;
  return null;
}
function hs(n) {
  return n[us] || (n[us] = /* @__PURE__ */ new Map()), n[us];
}
function G_(n) {
  if (!n)
    return null;
  const e = n.start.parent, t = n.end.parent, i = e.getPath(), s = t.getPath();
  return i.length > s.length ? e : t;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let th = class extends ir(H()) {
  /**
   * Creates a Document instance.
   *
   * @param stylesProcessor The styles processor instance.
   */
  constructor(e) {
    super(), this._postFixers = /* @__PURE__ */ new Set(), this.selection = new jr(), this.roots = new Ue({ idProperty: "rootName" }), this.stylesProcessor = e, this.set("isReadOnly", !1), this.set("isFocused", !1), this.set("isSelecting", !1), this.set("isComposing", !1);
  }
  /**
   * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not
   * specific "main" root is returned.
   *
   * @param name Name of the root.
   * @returns The view root element with the specified name or null when there is no root of given name.
   */
  getRoot(e = "main") {
    return this.roots.get(e);
  }
  /**
   * Allows registering post-fixer callbacks. A post-fixers mechanism allows to update the view tree just before it is rendered
   * to the DOM.
   *
   * Post-fixers are executed right after all changes from the outermost change block were applied but
   * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made
   * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should
   * not be fixed in the new document tree state.
   *
   * View post-fixers are useful when you want to apply some fixes whenever the view structure changes. Keep in mind that
   * changes executed in a view post-fixer should not break model-view mapping.
   *
   * The types of changes which should be safe:
   *
   * * adding or removing attribute from elements,
   * * changes inside of {@link module:engine/view/uielement~UIElement UI elements},
   * * {@link module:engine/controller/editingcontroller~EditingController#reconvertItem marking some of the model elements to be
   * re-converted}.
   *
   * Try to avoid changes which touch view structure:
   *
   * * you should not add or remove nor wrap or unwrap any view elements,
   * * you should not change the editor data model in a view post-fixer.
   *
   * As a parameter, a post-fixer callback receives a {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.
   *
   * Typically, a post-fixer will look like this:
   *
   * ```ts
   * editor.editing.view.document.registerPostFixer( writer => {
   * 	if ( checkSomeCondition() ) {
   * 		writer.doSomething();
   *
   * 		// Let other post-fixers know that something changed.
   * 		return true;
   * 	}
   * } );
   * ```
   *
   * Note that nothing happens right after you register a post-fixer (e.g. execute such a code in the console).
   * That is because adding a post-fixer does not execute it.
   * The post-fixer will be executed as soon as any change in the document needs to cause its rendering.
   * If you want to re-render the editor's view after registering the post-fixer then you should do it manually by calling
   * {@link module:engine/view/view~View#forceRender `view.forceRender()`}.
   *
   * If you need to register a callback which is executed when DOM elements are already updated,
   * use {@link module:engine/view/view~View#event:render render event}.
   */
  registerPostFixer(e) {
    this._postFixers.add(e);
  }
  /**
   * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.
   */
  destroy() {
    this.roots.map((e) => e.destroy()), this.stopListening();
  }
  /**
   * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.
   *
   * @internal
   */
  _callPostFixers(e) {
    let t = !1;
    do
      for (const i of this._postFixers)
        if (t = i(e), t)
          break;
    while (t);
  }
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const ih = 10;
class Tt extends Re {
  /**
   * Creates an attribute element.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement
   * @see module:engine/view/element~Element
   * @protected
   * @param document The document instance to which this element belongs.
   * @param name Node name.
   * @param attrs Collection of attributes.
   * @param children A list of nodes to be inserted into created element.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s), this._priority = ih, this._id = null, this._clonesGroup = null, this.getFillerOffset = K_;
  }
  /**
   * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.
   */
  get priority() {
    return this._priority;
  }
  /**
   * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},
   * and then two elements are considered similar if, and only if they have the same `id`.
   */
  get id() {
    return this._id;
  }
  /**
   * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the
   * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).
   *
   * Note: If this element has been removed from the tree, returned set will not include it.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}
   * if this element has no `id`.
   *
   * @returns Set containing all the attribute elements
   * with the same `id` that were added and not removed from the view tree.
   */
  getElementsWithSameId() {
    if (this.id === null)
      throw new f("attribute-element-get-elements-with-same-id-no-id", this);
    return new Set(this._clonesGroup);
  }
  /**
   * Checks if this element is similar to other element.
   *
   * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements
   * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain
   * different set of children nodes.
   *
   * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both
   * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be
   * considered similar.
   *
   * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:
   *
   * * two following similar elements can be merged together into one, longer element,
   * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to
   * decide whether processed element should be unwrapped,
   * * etc.
   */
  isSimilar(e) {
    return this.id !== null || e.id !== null ? this.id === e.id : super.isSimilar(e) && this.priority == e.priority;
  }
  /**
   * Clones provided element with priority.
   *
   * @internal
   * @param deep If set to `true` clones element and all its children recursively. When set to `false`,
   * element will be cloned without any children.
   * @returns Clone of this element.
   */
  _clone(e = !1) {
    const t = super._clone(e);
    return t._priority = this._priority, t._id = this._id, t;
  }
}
Tt.DEFAULT_PRIORITY = ih;
Tt.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "attributeElement" || n === "view:attributeElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "element" || n === "view:element") : n === "attributeElement" || n === "view:attributeElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "element" || n === "view:element" || n === "node" || n === "view:node";
};
function K_() {
  if (ds(this))
    return null;
  let n = this.parent;
  for (; n && n.is("attributeElement"); ) {
    if (ds(n) > 1)
      return null;
    n = n.parent;
  }
  return !n || ds(n) > 1 ? null : this.childCount;
}
function ds(n) {
  return Array.from(n.getChildren()).filter((e) => !e.is("uiElement")).length;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class qr extends Re {
  /**
   * Creates new instance of EmptyElement.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,
   * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement
   * @internal
   * @param document The document instance to which this element belongs.
   * @param name Node name.
   * @param attrs Collection of attributes.
   * @param children A list of nodes to be inserted into created element.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s), this.getFillerOffset = J_;
  }
  /**
   * Overrides {@link module:engine/view/element~Element#_insertChild} method.
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent
   * adding any child nodes to EmptyElement.
   *
   * @internal
   */
  _insertChild(e, t) {
    if (t && (t instanceof Ft || Array.from(t).length > 0))
      throw new f("view-emptyelement-cannot-add", [this, t]);
    return 0;
  }
}
qr.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "emptyElement" || n === "view:emptyElement" || n === "element" || n === "view:element") : n === "emptyElement" || n === "view:emptyElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "element" || n === "view:element" || n === "node" || n === "view:node";
};
function J_() {
  return null;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class jn extends Re {
  /**
   * Creates new instance of UIElement.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,
   * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#createUIElement
   * @internal
   * @param document The document instance to which this element belongs.
   * @param name Node name.
   * @param attrs Collection of attributes.
   * @param children A list of nodes to be inserted into created element.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s), this.getFillerOffset = Z_;
  }
  /**
   * Overrides {@link module:engine/view/element~Element#_insertChild} method.
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes
   * to UIElement.
   *
   * @internal
   */
  _insertChild(e, t) {
    if (t && (t instanceof Ft || Array.from(t).length > 0))
      throw new f("view-uielement-cannot-add", [this, t]);
    return 0;
  }
  /**
   * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by
   * {@link module:engine/view/domconverter~DomConverter}.
   * Do not use inheritance to create custom rendering method, replace `render()` method instead:
   *
   * ```ts
   * const myUIElement = downcastWriter.createUIElement( 'span' );
   * myUIElement.render = function( domDocument, domConverter ) {
   * 	const domElement = this.toDomElement( domDocument );
   *
   * 	domConverter.setContentOf( domElement, '<b>this is ui element</b>' );
   *
   * 	return domElement;
   * };
   * ```
   *
   * If changes in your UI element should trigger some editor UI update you should call
   * the {@link module:ui/editorui/editorui~EditorUI#update `editor.ui.update()`} method
   * after rendering your UI element.
   *
   * @param domConverter Instance of the DomConverter used to optimize the output.
   */
  render(e, t) {
    return this.toDomElement(e);
  }
  /**
   * Creates DOM element based on this view UIElement.
   * Note that each time this method is called new DOM element is created.
   */
  toDomElement(e) {
    const t = e.createElement(this.name);
    for (const i of this.getAttributeKeys())
      t.setAttribute(i, this.getAttribute(i));
    return t;
  }
}
jn.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "uiElement" || n === "view:uiElement" || n === "element" || n === "view:element") : n === "uiElement" || n === "view:uiElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "element" || n === "view:element" || n === "node" || n === "view:node";
};
function Y_(n) {
  n.document.on("arrowKey", (e, t) => X_(e, t, n.domConverter), { priority: "low" });
}
function Z_() {
  return null;
}
function X_(n, e, t) {
  if (e.keyCode == R.arrowright) {
    const i = e.domTarget.ownerDocument.defaultView.getSelection(), s = i.rangeCount == 1 && i.getRangeAt(0).collapsed;
    if (s || e.shiftKey) {
      const r = i.focusNode, o = i.focusOffset, a = t.domPositionToView(r, o);
      if (a === null)
        return;
      let l = !1;
      const c = a.getLastMatchingPosition((u) => (u.item.is("uiElement") && (l = !0), !!(u.item.is("uiElement") || u.item.is("attributeElement"))));
      if (l) {
        const u = t.viewPositionToDom(c);
        s ? i.collapse(u.parent, u.offset) : i.extend(u.parent, u.offset);
      }
    }
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Gr extends Re {
  /**
   * Creates a new instance of a raw element.
   *
   * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} when the `children`
   * parameter is passed to inform that the usage of `RawElement` is incorrect (adding child nodes to `RawElement` is forbidden).
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#createRawElement
   * @internal
   * @param document The document instance to which this element belongs.
   * @param name Node name.
   * @param attrs Collection of attributes.
   * @param children A list of nodes to be inserted into created element.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s), this.getFillerOffset = Q_;
  }
  /**
   * Overrides the {@link module:engine/view/element~Element#_insertChild} method.
   * Throws the `view-rawelement-cannot-add` {@link module:utils/ckeditorerror~CKEditorError CKEditorError} to prevent
   * adding any child nodes to a raw element.
   *
   * @internal
   */
  _insertChild(e, t) {
    if (t && (t instanceof Ft || Array.from(t).length > 0))
      throw new f("view-rawelement-cannot-add", [this, t]);
    return 0;
  }
  /**
   * This allows rendering the children of a {@link module:engine/view/rawelement~RawElement} on the DOM level.
   * This method is called by the {@link module:engine/view/domconverter~DomConverter} with the raw DOM element
   * passed as an argument, leaving the number and shape of the children up to the integrator.
   *
   * This method **must be defined** for the raw element to work:
   *
   * ```ts
   * const myRawElement = downcastWriter.createRawElement( 'div' );
   *
   * myRawElement.render = function( domElement, domConverter ) {
   * 	domConverter.setContentOf( domElement, '<b>This is the raw content of myRawElement.</b>' );
   * };
   * ```
   *
   * @param domElement The native DOM element representing the raw view element.
   * @param domConverter Instance of the DomConverter used to optimize the output.
   */
  render(e, t) {
  }
}
Gr.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "rawElement" || n === "view:rawElement" || n === "element" || n === "view:element") : n === "rawElement" || n === "view:rawElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === this.name || n === "view:" + this.name || n === "element" || n === "view:element" || n === "node" || n === "view:node";
};
function Q_() {
  return null;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let Pt = class extends L(Dt) {
  /**
   * Creates new DocumentFragment instance.
   *
   * @internal
   * @param document The document to which this document fragment belongs.
   * @param children A list of nodes to be inserted into the created document fragment.
   */
  constructor(e, t) {
    super(), this._children = [], this._customProperties = /* @__PURE__ */ new Map(), this.document = e, t && this._insertChild(0, t);
  }
  /**
   * Iterable interface.
   *
   * Iterates over nodes added to this document fragment.
   */
  [Symbol.iterator]() {
    return this._children[Symbol.iterator]();
  }
  /**
   * Number of child nodes in this document fragment.
   */
  get childCount() {
    return this._children.length;
  }
  /**
   * Is `true` if there are no nodes inside this document fragment, `false` otherwise.
   */
  get isEmpty() {
    return this.childCount === 0;
  }
  /**
   * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.
   */
  get root() {
    return this;
  }
  /**
   * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.
   */
  get parent() {
    return null;
  }
  /**
   * Artificial element name. Returns `undefined`. Added for compatibility reasons.
   */
  get name() {
  }
  /**
   * Returns the custom property value for the given key.
   */
  getCustomProperty(e) {
    return this._customProperties.get(e);
  }
  /**
   * Returns an iterator which iterates over this document fragment's custom properties.
   * Iterator provides `[ key, value ]` pairs for each stored property.
   */
  *getCustomProperties() {
    yield* this._customProperties.entries();
  }
  /**
   * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end
   * and sets the parent of these nodes to this fragment.
   *
   * @internal
   * @param items Items to be inserted.
   * @returns Number of appended nodes.
   */
  _appendChild(e) {
    return this._insertChild(this.childCount, e);
  }
  /**
   * Gets child at the given index.
   *
   * @param index Index of child.
   * @returns Child node.
   */
  getChild(e) {
    return this._children[e];
  }
  /**
   * Gets index of the given child node. Returns `-1` if child node is not found.
   *
   * @param node Child node.
   * @returns Index of the child node.
   */
  getChildIndex(e) {
    return this._children.indexOf(e);
  }
  /**
   * Gets child nodes iterator.
   *
   * @returns Child nodes iterator.
   */
  getChildren() {
    return this._children[Symbol.iterator]();
  }
  /**
   * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to
   * this fragment.
   *
   * @internal
   * @param index Position where nodes should be inserted.
   * @param items Items to be inserted.
   * @returns Number of inserted nodes.
   */
  _insertChild(e, t) {
    this._fireChange("children", this);
    let i = 0;
    const s = ev(this.document, t);
    for (const r of s)
      r.parent !== null && r._remove(), r.parent = this, this._children.splice(e, 0, r), e++, i++;
    return i;
  }
  /**
   * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.
   *
   * @internal
   * @param index Number of the first node to remove.
   * @param howMany Number of nodes to remove.
   * @returns The array of removed nodes.
   */
  _removeChildren(e, t = 1) {
    this._fireChange("children", this);
    for (let i = e; i < e + t; i++)
      this._children[i].parent = null;
    return this._children.splice(e, t);
  }
  /**
   * Fires `change` event with given type of the change.
   *
   * @internal
   * @param type Type of the change.
   * @param node Changed node.
   */
  _fireChange(e, t) {
    this.fire("change:" + e, t);
  }
  /**
   * Sets a custom property. They can be used to add special data to elements.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty
   * @internal
   */
  _setCustomProperty(e, t) {
    this._customProperties.set(e, t);
  }
  /**
   * Removes the custom property stored under the given key.
   *
   * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty
   * @internal
   * @returns Returns true if property was removed.
   */
  _removeCustomProperty(e) {
    return this._customProperties.delete(e);
  }
};
Pt.prototype.is = function(n) {
  return n === "documentFragment" || n === "view:documentFragment";
};
function ev(n, e) {
  return typeof e == "string" ? [new q(n, e)] : (ye(e) || (e = [e]), Array.from(e).map((t) => typeof t == "string" ? new q(n, t) : t instanceof De ? new q(n, t.data) : t));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class nh {
  /**
   * @param document The view document instance.
   */
  constructor(e) {
    this._cloneGroups = /* @__PURE__ */ new Map(), this._slotFactory = null, this.document = e;
  }
  setSelection(...e) {
    this.document.selection._setTo(...e);
  }
  /**
   * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.
   *
   * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}
   * parameters.
   *
   * @param Offset or one of the flags. Used only when the first parameter is a {@link module:engine/view/item~Item view item}.
   */
  setSelectionFocus(e, t) {
    this.document.selection._setFocus(e, t);
  }
  /**
   * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.
   *
   * @param children A list of nodes to be inserted into the created document fragment.
   * @returns The created document fragment.
   */
  createDocumentFragment(e) {
    return new Pt(this.document, e);
  }
  /**
   * Creates a new {@link module:engine/view/text~Text text node}.
   *
   * ```ts
   * writer.createText( 'foo' );
   * ```
   *
   * @param data The text's data.
   * @returns The created text node.
   */
  createText(e) {
    return new q(this.document, e);
  }
  /**
   * Creates a new {@link module:engine/view/attributeelement~AttributeElement}.
   *
   * ```ts
   * writer.createAttributeElement( 'strong' );
   * writer.createAttributeElement( 'a', { href: 'foo.bar' } );
   *
   * // Make `<a>` element contain other attributes element so the `<a>` element is not broken.
   * writer.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );
   *
   * // Set `id` of a marker element so it is not joined or merged with "normal" elements.
   * writer.createAttributeElement( 'span', { class: 'my-marker' }, { id: 'marker:my' } );
   * ```
   *
   * @param name Name of the element.
   * @param attributes Element's attributes.
   * @param options Element's options.
   * @param options.priority Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.
   * @param options.id Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.
   * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing
   * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.
   * @returns Created element.
   */
  createAttributeElement(e, t, i = {}) {
    const s = new Tt(this.document, e, t);
    return typeof i.priority == "number" && (s._priority = i.priority), i.id && (s._id = i.id), i.renderUnsafeAttributes && s._unsafeAttributesToRender.push(...i.renderUnsafeAttributes), s;
  }
  createContainerElement(e, t, i = {}, s = {}) {
    let r = null;
    me(i) ? s = i : r = i;
    const o = new Mi(this.document, e, t, r);
    return s.renderUnsafeAttributes && o._unsafeAttributesToRender.push(...s.renderUnsafeAttributes), o;
  }
  /**
   * Creates a new {@link module:engine/view/editableelement~EditableElement}.
   *
   * ```ts
   * writer.createEditableElement( 'div' );
   * writer.createEditableElement( 'div', { id: 'foo-1234' } );
   * ```
   *
   * Note: The editable element is to be used in the editing pipeline. Usually, together with
   * {@link module:widget/utils~toWidgetEditable `toWidgetEditable()`}.
   *
   * @param name Name of the element.
   * @param attributes Elements attributes.
   * @param options Element's options.
   * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing
   * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.
   * @returns Created element.
   */
  createEditableElement(e, t, i = {}) {
    const s = new Un(this.document, e, t);
    return i.renderUnsafeAttributes && s._unsafeAttributesToRender.push(...i.renderUnsafeAttributes), s;
  }
  /**
   * Creates a new {@link module:engine/view/emptyelement~EmptyElement}.
   *
   * ```ts
   * writer.createEmptyElement( 'img' );
   * writer.createEmptyElement( 'img', { id: 'foo-1234' } );
   * ```
   *
   * @param name Name of the element.
   * @param attributes Elements attributes.
   * @param options Element's options.
   * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing
   * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.
   * @returns Created element.
   */
  createEmptyElement(e, t, i = {}) {
    const s = new qr(this.document, e, t);
    return i.renderUnsafeAttributes && s._unsafeAttributesToRender.push(...i.renderUnsafeAttributes), s;
  }
  /**
   * Creates a new {@link module:engine/view/uielement~UIElement}.
   *
   * ```ts
   * writer.createUIElement( 'span' );
   * writer.createUIElement( 'span', { id: 'foo-1234' } );
   * ```
   *
   * A custom render function can be provided as the third parameter:
   *
   * ```ts
   * writer.createUIElement( 'span', null, function( domDocument ) {
   * 	const domElement = this.toDomElement( domDocument );
   * 	domElement.innerHTML = '<b>this is ui element</b>';
   *
   * 	return domElement;
   * } );
   * ```
   *
   * Unlike {@link #createRawElement raw elements}, UI elements are by no means editor content, for instance,
   * they are ignored by the editor selection system.
   *
   * You should not use UI elements as data containers. Check out {@link #createRawElement} instead.
   *
   * @param name The name of the element.
   * @param attributes Element attributes.
   * @param renderFunction A custom render function.
   * @returns The created element.
   */
  createUIElement(e, t, i) {
    const s = new jn(this.document, e, t);
    return i && (s.render = i), s;
  }
  /**
   * Creates a new {@link module:engine/view/rawelement~RawElement}.
   *
   * ```ts
   * writer.createRawElement( 'span', { id: 'foo-1234' }, function( domElement ) {
   * 	domElement.innerHTML = '<b>This is the raw content of the raw element.</b>';
   * } );
   * ```
   *
   * Raw elements work as data containers ("wrappers", "sandboxes") but their children are not managed or
   * even recognized by the editor. This encapsulation allows integrations to maintain custom DOM structures
   * in the editor content without, for instance, worrying about compatibility with other editor features.
   * Raw elements are a perfect tool for integration with external frameworks and data sources.
   *
   * Unlike {@link #createUIElement UI elements}, raw elements act like "real" editor content (similar to
   * {@link module:engine/view/containerelement~ContainerElement} or {@link module:engine/view/emptyelement~EmptyElement}),
   * and they are considered by the editor selection.
   *
   * You should not use raw elements to render the UI in the editor content. Check out {@link #createUIElement `#createUIElement()`}
   * instead.
   *
   * @param name The name of the element.
   * @param attributes Element attributes.
   * @param renderFunction A custom render function.
   * @param options Element's options.
   * @param options.renderUnsafeAttributes A list of attribute names that should be rendered in the editing
   * pipeline even though they would normally be filtered out by unsafe attribute detection mechanisms.
   * @returns The created element.
   */
  createRawElement(e, t, i, s = {}) {
    const r = new Gr(this.document, e, t);
    return i && (r.render = i), s.renderUnsafeAttributes && r._unsafeAttributesToRender.push(...s.renderUnsafeAttributes), r;
  }
  /**
   * Adds or overwrites the element's attribute with a specified key and value.
   *
   * ```ts
   * writer.setAttribute( 'href', 'http://ckeditor.com', linkElement );
   * ```
   *
   * @param key The attribute key.
   * @param value The attribute value.
   */
  setAttribute(e, t, i) {
    i._setAttribute(e, t);
  }
  /**
   * Removes attribute from the element.
   *
   * ```ts
   * writer.removeAttribute( 'href', linkElement );
   * ```
   *
   * @param key Attribute key.
   */
  removeAttribute(e, t) {
    t._removeAttribute(e);
  }
  /**
   * Adds specified class to the element.
   *
   * ```ts
   * writer.addClass( 'foo', linkElement );
   * writer.addClass( [ 'foo', 'bar' ], linkElement );
   * ```
   */
  addClass(e, t) {
    t._addClass(e);
  }
  /**
   * Removes specified class from the element.
   *
   * ```ts
   * writer.removeClass( 'foo', linkElement );
   * writer.removeClass( [ 'foo', 'bar' ], linkElement );
   * ```
   */
  removeClass(e, t) {
    t._removeClass(e);
  }
  setStyle(e, t, i) {
    me(e) && i === void 0 ? t._setStyle(e) : i._setStyle(e, t);
  }
  /**
   * Removes specified style from the element.
   *
   * ```ts
   * writer.removeStyle( 'color', element ); // Removes 'color' style.
   * writer.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.
   * ```
   *
   * **Note**: This method can work with normalized style names if
   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.
   * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.
   */
  removeStyle(e, t) {
    t._removeStyle(e);
  }
  /**
   * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,
   * so they can be used to add special data to elements.
   */
  setCustomProperty(e, t, i) {
    i._setCustomProperty(e, t);
  }
  /**
   * Removes a custom property stored under the given key.
   *
   * @returns Returns true if property was removed.
   */
  removeCustomProperty(e, t) {
    return t._removeCustomProperty(e);
  }
  /**
   * Breaks attribute elements at the provided position or at the boundaries of a provided range. It breaks attribute elements
   * up to their first ancestor that is a container element.
   *
   * In following examples `<p>` is a container, `<b>` and `<u>` are attribute elements:
   *
   * ```html
   * <p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>
   * <p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>
   * <p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>
   * <p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>
   * ```
   *
   * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.
   *
   * **Note:** The difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes()} and
   * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer()} is that `breakAttributes()` breaks all
   * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of a given `position`,
   * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.
   * `breakContainer()` assumes that a given `position` is directly in the container element and breaks that container element.
   *
   * Throws the `view-writer-invalid-range-container` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}
   * when the {@link module:engine/view/range~Range#start start}
   * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.
   *
   * Throws the `view-writer-cannot-break-empty-element` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}
   * when trying to break attributes inside an {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.
   *
   * Throws the `view-writer-cannot-break-ui-element` {@link module:utils/ckeditorerror~CKEditorError CKEditorError}
   * when trying to break attributes inside a {@link module:engine/view/uielement~UIElement UIElement}.
   *
   * @see module:engine/view/attributeelement~AttributeElement
   * @see module:engine/view/containerelement~ContainerElement
   * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer
   * @param positionOrRange The position where to break attribute elements.
   * @returns The new position or range, after breaking the attribute elements.
   */
  breakAttributes(e) {
    return e instanceof v ? this._breakAttributes(e) : this._breakAttributesRange(e);
  }
  /**
   * Breaks a {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position.
   * The position has to be directly inside the container element and cannot be in the root. It does not break the conrainer view element
   * if the position is at the beginning or at the end of its parent element.
   *
   * ```html
   * <p>foo^bar</p> -> <p>foo</p><p>bar</p>
   * <div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>
   * <p>^foobar</p> -> ^<p>foobar</p>
   * <p>foobar^</p> -> <p>foobar</p>^
   * ```
   *
   * **Note:** The difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes()} and
   * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer()} is that `breakAttributes()` breaks all
   * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of a given `position`,
   * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.
   * `breakContainer()` assumes that the given `position` is directly in the container element and breaks that container element.
   *
   * @see module:engine/view/attributeelement~AttributeElement
   * @see module:engine/view/containerelement~ContainerElement
   * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes
   * @param position The position where to break the element.
   * @returns The position between broken elements. If an element has not been broken,
   * the returned position is placed either before or after it.
   */
  breakContainer(e) {
    const t = e.parent;
    if (!t.is("containerElement"))
      throw new f("view-writer-break-non-container-element", this.document);
    if (!t.parent)
      throw new f("view-writer-break-root", this.document);
    if (e.isAtStart)
      return v._createBefore(t);
    if (!e.isAtEnd) {
      const i = t._clone(!1);
      this.insert(v._createAfter(t), i);
      const s = new P(e, v._createAt(t, "end")), r = new v(i, 0);
      this.move(s, r);
    }
    return v._createAfter(t);
  }
  /**
   * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.
   * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.
   *
   * In following examples `<p>` is a container and `<b>` is an attribute element:
   *
   * ```html
   * <p>foo[]bar</p> -> <p>foo{}bar</p>
   * <p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>
   * <p><b foo="bar">a</b>[]<b foo="baz">b</b></p> -> <p><b foo="bar">a</b>[]<b foo="baz">b</b></p>
   * ```
   *
   * It will also take care about empty attributes when merging:
   *
   * ```html
   * <p><b>[]</b></p> -> <p>[]</p>
   * <p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>
   * ```
   *
   * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and
   * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two
   * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}
   * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.
   *
   * @see module:engine/view/attributeelement~AttributeElement
   * @see module:engine/view/containerelement~ContainerElement
   * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers
   * @param position Merge position.
   * @returns Position after merge.
   */
  mergeAttributes(e) {
    const t = e.offset, i = e.parent;
    if (i.is("$text"))
      return e;
    if (i.is("attributeElement") && i.childCount === 0) {
      const o = i.parent, a = i.index;
      return i._remove(), this._removeFromClonedElementsGroup(i), this.mergeAttributes(new v(o, a));
    }
    const s = i.getChild(t - 1), r = i.getChild(t);
    if (!s || !r)
      return e;
    if (s.is("$text") && r.is("$text"))
      return Aa(s, r);
    if (s.is("attributeElement") && r.is("attributeElement") && s.isSimilar(r)) {
      const o = s.childCount;
      return s._appendChild(r.getChildren()), r._remove(), this._removeFromClonedElementsGroup(r), this.mergeAttributes(new v(s, o));
    }
    return e;
  }
  /**
   * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.
   * Precisely, the element after the position is removed and it's contents are moved to element before the position.
   *
   * ```html
   * <p>foo</p>^<p>bar</p> -> <p>foo^bar</p>
   * <div>foo</div>^<p>bar</p> -> <div>foo^bar</div>
   * ```
   *
   * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and
   * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two
   * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}
   * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.
   *
   * @see module:engine/view/attributeelement~AttributeElement
   * @see module:engine/view/containerelement~ContainerElement
   * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes
   * @param position Merge position.
   * @returns Position after merge.
   */
  mergeContainers(e) {
    const t = e.nodeBefore, i = e.nodeAfter;
    if (!t || !i || !t.is("containerElement") || !i.is("containerElement"))
      throw new f("view-writer-merge-containers-invalid-position", this.document);
    const s = t.getChild(t.childCount - 1), r = s instanceof q ? v._createAt(s, "end") : v._createAt(t, "end");
    return this.move(P._createIn(i), v._createAt(t, "end")), this.remove(P._createOn(i)), r;
  }
  /**
   * Inserts a node or nodes at specified position. Takes care about breaking attributes before insertion
   * and merging them afterwards.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert
   * contains instances that are not {@link module:engine/view/text~Text Texts},
   * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},
   * {@link module:engine/view/containerelement~ContainerElement ContainerElements},
   * {@link module:engine/view/emptyelement~EmptyElement EmptyElements},
   * {@link module:engine/view/rawelement~RawElement RawElements} or
   * {@link module:engine/view/uielement~UIElement UIElements}.
   *
   * @param position Insertion position.
   * @param nodes Node or nodes to insert.
   * @returns Range around inserted nodes.
   */
  insert(e, t) {
    t = ye(t) ? [...t] : [t], sh(t, this.document);
    const i = t.reduce((o, a) => {
      const l = o[o.length - 1], c = !a.is("uiElement");
      return !l || l.breakAttributes != c ? o.push({
        breakAttributes: c,
        nodes: [a]
      }) : l.nodes.push(a), o;
    }, []);
    let s = null, r = e;
    for (const { nodes: o, breakAttributes: a } of i) {
      const l = this._insertNodes(r, o, a);
      s || (s = l.start), r = l.end;
    }
    return s ? new P(s, r) : new P(e);
  }
  /**
   * Removes provided range from the container.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when
   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside
   * same parent container.
   *
   * @param rangeOrItem Range to remove from container
   * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated
   * to a collapsed range showing the new position.
   * @returns Document fragment containing removed nodes.
   */
  remove(e) {
    const t = e instanceof P ? e : P._createOn(e);
    if (_i(t, this.document), t.isCollapsed)
      return new Pt(this.document);
    const { start: i, end: s } = this._breakAttributesRange(t, !0), r = i.parent, o = s.offset - i.offset, a = r._removeChildren(i.offset, o);
    for (const c of a)
      this._removeFromClonedElementsGroup(c);
    const l = this.mergeAttributes(i);
    return t.start = l, t.end = l.clone(), new Pt(this.document, a);
  }
  /**
   * Removes matching elements from given range.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when
   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside
   * same parent container.
   *
   * @param range Range to clear.
   * @param element Element to remove.
   */
  clear(e, t) {
    _i(e, this.document);
    const i = e.getWalker({
      direction: "backward",
      ignoreElementEnd: !0
    });
    for (const s of i) {
      const r = s.item;
      let o;
      if (r.is("element") && t.isSimilar(r))
        o = P._createOn(r);
      else if (!s.nextPosition.isAfter(e.start) && r.is("$textProxy")) {
        const a = r.getAncestors().find((l) => l.is("element") && t.isSimilar(l));
        a && (o = P._createIn(a));
      }
      o && (o.end.isAfter(e.end) && (o.end = e.end), o.start.isBefore(e.start) && (o.start = e.start), this.remove(o));
    }
  }
  /**
   * Moves nodes from provided range to target position.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when
   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside
   * same parent container.
   *
   * @param sourceRange Range containing nodes to move.
   * @param targetPosition Position to insert.
   * @returns Range in target container. Inserted nodes are placed between
   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.
   */
  move(e, t) {
    let i;
    if (t.isAfter(e.end)) {
      t = this._breakAttributes(t, !0);
      const s = t.parent, r = s.childCount;
      e = this._breakAttributesRange(e, !0), i = this.remove(e), t.offset += s.childCount - r;
    } else
      i = this.remove(e);
    return this.insert(t, i);
  }
  /**
   * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.
   * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.
   *
   * If a collapsed range was passed and is same as selection, the selection
   * will be moved to the inside of the wrapped attribute element.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`
   * when {@link module:engine/view/range~Range#start}
   * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not
   * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range
   * is collapsed and different than view selection.
   *
   * @param range Range to wrap.
   * @param attribute Attribute element to use as wrapper.
   * @returns range Range after wrapping, spanning over wrapping attribute element.
   */
  wrap(e, t) {
    if (!(t instanceof Tt))
      throw new f("view-writer-wrap-invalid-attribute", this.document);
    if (_i(e, this.document), e.isCollapsed) {
      let i = e.start;
      i.parent.is("element") && !tv(i.parent) && (i = i.getLastMatchingPosition((r) => r.item.is("uiElement"))), i = this._wrapPosition(i, t);
      const s = this.document.selection;
      return s.isCollapsed && s.getFirstPosition().isEqual(e.start) && this.setSelection(i), new P(i);
    } else
      return this._wrapRange(e, t);
  }
  /**
   * Unwraps nodes within provided range from attribute element.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when
   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside
   * same parent container.
   */
  unwrap(e, t) {
    if (!(t instanceof Tt))
      throw new f("view-writer-unwrap-invalid-attribute", this.document);
    if (_i(e, this.document), e.isCollapsed)
      return e;
    const { start: i, end: s } = this._breakAttributesRange(e, !0), r = i.parent, o = this._unwrapChildren(r, i.offset, s.offset, t), a = this.mergeAttributes(o.start);
    a.isEqual(o.start) || o.end.offset--;
    const l = this.mergeAttributes(o.end);
    return new P(a, l);
  }
  /**
   * Renames element by creating a copy of renamed element but with changed name and then moving contents of the
   * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which
   * has renamed element as {@link module:engine/view/position~Position#parent a parent}.
   *
   * New element has to be created because `Element#tagName` property in DOM is readonly.
   *
   * Since this function creates a new element and removes the given one, the new element is returned to keep reference.
   *
   * @param newName New name for element.
   * @param viewElement Element to be renamed.
   * @returns Element created due to rename.
   */
  rename(e, t) {
    const i = new Mi(this.document, e, t.getAttributes());
    return this.insert(v._createAfter(t), i), this.move(P._createIn(t), v._createAt(i, 0)), this.remove(P._createOn(t)), i;
  }
  /**
   * Cleans up memory by removing obsolete cloned elements group from the writer.
   *
   * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}
   * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and
   * the group will no longer be needed.
   *
   * Cloned elements group are not removed automatically in case if the group is still needed after all its elements
   * were removed from the view.
   *
   * Keep in mind that group names are equal to the `id` property of the attribute element.
   *
   * @param groupName Name of the group to clear.
   */
  clearClonedElementsGroup(e) {
    this._cloneGroups.delete(e);
  }
  /**
   * Creates position at the given location. The location can be specified as:
   *
   * * a {@link module:engine/view/position~Position position},
   * * parent element and offset (offset defaults to `0`),
   * * parent element and `'end'` (sets position at the end of that element),
   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).
   *
   * This method is a shortcut to other constructors such as:
   *
   * * {@link #createPositionBefore},
   * * {@link #createPositionAfter},
   *
   * @param offset Offset or one of the flags. Used only when the first parameter is a {@link module:engine/view/item~Item view item}.
   */
  createPositionAt(e, t) {
    return v._createAt(e, t);
  }
  /**
   * Creates a new position after given view item.
   *
   * @param item View item after which the position should be located.
   */
  createPositionAfter(e) {
    return v._createAfter(e);
  }
  /**
   * Creates a new position before given view item.
   *
   * @param item View item before which the position should be located.
   */
  createPositionBefore(e) {
    return v._createBefore(e);
  }
  /**
   * Creates a range spanning from `start` position to `end` position.
   *
   * **Note:** This factory method creates its own {@link module:engine/view/position~Position} instances basing on passed values.
   *
   * @param start Start position.
   * @param end End position. If not set, range will be collapsed at `start` position.
   */
  createRange(e, t) {
    return new P(e, t);
  }
  /**
   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.
   */
  createRangeOn(e) {
    return P._createOn(e);
  }
  /**
   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of
   * that element and ends after the last child of that element.
   *
   * @param element Element which is a parent for the range.
   */
  createRangeIn(e) {
    return P._createIn(e);
  }
  createSelection(...e) {
    return new ht(...e);
  }
  /**
   * Creates placeholders for child elements of the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure
   * `elementToStructure()`} conversion helper.
   *
   * ```ts
   * const viewSlot = conversionApi.writer.createSlot();
   * const viewPosition = conversionApi.writer.createPositionAt( viewElement, 0 );
   *
   * conversionApi.writer.insert( viewPosition, viewSlot );
   * ```
   *
   * It could be filtered down to a specific subset of children (only `<foo>` model elements in this case):
   *
   * ```ts
   * const viewSlot = conversionApi.writer.createSlot( node => node.is( 'element', 'foo' ) );
   * const viewPosition = conversionApi.writer.createPositionAt( viewElement, 0 );
   *
   * conversionApi.writer.insert( viewPosition, viewSlot );
   * ```
   *
   * While providing a filtered slot, make sure to provide slots for all child nodes. A single node can not be downcasted into
   * multiple slots.
   *
   * **Note**: You should not change the order of nodes. View elements should be in the same order as model nodes.
   *
   * @param modeOrFilter The filter for child nodes.
   * @returns The slot element to be placed in to the view structure while processing
   * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure `elementToStructure()`}.
   */
  createSlot(e = "children") {
    if (!this._slotFactory)
      throw new f("view-writer-invalid-create-slot-context", this.document);
    return this._slotFactory(this, e);
  }
  /**
   * Registers a slot factory.
   *
   * @internal
   * @param slotFactory The slot factory.
   */
  _registerSlotFactory(e) {
    this._slotFactory = e;
  }
  /**
   * Clears the registered slot factory.
   *
   * @internal
   */
  _clearSlotFactory() {
    this._slotFactory = null;
  }
  /**
   * Inserts a node or nodes at the specified position. Takes care of breaking attributes before insertion
   * and merging them afterwards if requested by the breakAttributes param.
   *
   * @param position Insertion position.
   * @param nodes Node or nodes to insert.
   * @param breakAttributes Whether attributes should be broken.
   * @returns Range around inserted nodes.
   */
  _insertNodes(e, t, i) {
    let s;
    if (i ? s = nr(e) : s = e.parent.is("$text") ? e.parent.parent : e.parent, !s)
      throw new f("view-writer-invalid-position-container", this.document);
    let r;
    i ? r = this._breakAttributes(e, !0) : r = e.parent.is("$text") ? fs(e) : e;
    const o = s._insertChild(r.offset, t);
    for (const u of t)
      this._addToClonedElementsGroup(u);
    const a = r.getShiftedBy(o), l = this.mergeAttributes(r);
    l.isEqual(r) || a.offset--;
    const c = this.mergeAttributes(a);
    return new P(l, c);
  }
  /**
   * Wraps children with provided `wrapElement`. Only children contained in `parent` element between
   * `startOffset` and `endOffset` will be wrapped.
   */
  _wrapChildren(e, t, i, s) {
    let r = t;
    const o = [];
    for (; r < i; ) {
      const l = e.getChild(r), c = l.is("$text"), u = l.is("attributeElement");
      if (u && this._wrapAttributeElement(s, l))
        o.push(new v(e, r));
      else if (c || !u || iv(s, l)) {
        const h = s._clone();
        l._remove(), h._appendChild(l), e._insertChild(r, h), this._addToClonedElementsGroup(h), o.push(new v(e, r));
      } else
        this._wrapChildren(l, 0, l.childCount, s);
      r++;
    }
    let a = 0;
    for (const l of o) {
      if (l.offset -= a, l.offset == t)
        continue;
      this.mergeAttributes(l).isEqual(l) || (a++, i--);
    }
    return P._createFromParentsAndOffsets(e, t, e, i);
  }
  /**
   * Unwraps children from provided `unwrapElement`. Only children contained in `parent` element between
   * `startOffset` and `endOffset` will be unwrapped.
   */
  _unwrapChildren(e, t, i, s) {
    let r = t;
    const o = [];
    for (; r < i; ) {
      const l = e.getChild(r);
      if (!l.is("attributeElement")) {
        r++;
        continue;
      }
      if (l.isSimilar(s)) {
        const c = l.getChildren(), u = l.childCount;
        l._remove(), e._insertChild(r, c), this._removeFromClonedElementsGroup(l), o.push(new v(e, r), new v(e, r + u)), r += u, i += u - 1;
        continue;
      }
      if (this._unwrapAttributeElement(s, l)) {
        o.push(new v(e, r), new v(e, r + 1)), r++;
        continue;
      }
      this._unwrapChildren(l, 0, l.childCount, s), r++;
    }
    let a = 0;
    for (const l of o) {
      if (l.offset -= a, l.offset == t || l.offset == i)
        continue;
      this.mergeAttributes(l).isEqual(l) || (a++, i--);
    }
    return P._createFromParentsAndOffsets(e, t, e, i);
  }
  /**
   * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.
   * This method will also merge newly added attribute element with its siblings whenever possible.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not
   * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.
   *
   * @returns New range after wrapping, spanning over wrapping attribute element.
   */
  _wrapRange(e, t) {
    const { start: i, end: s } = this._breakAttributesRange(e, !0), r = i.parent, o = this._wrapChildren(r, i.offset, s.offset, t), a = this.mergeAttributes(o.start);
    a.isEqual(o.start) || o.end.offset--;
    const l = this.mergeAttributes(o.end);
    return new P(a, l);
  }
  /**
   * Helper function for {@link #wrap}. Wraps position with provided attribute element.
   * This method will also merge newly added attribute element with its siblings whenever possible.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not
   * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.
   *
   * @returns New position after wrapping.
   */
  _wrapPosition(e, t) {
    if (t.isSimilar(e.parent))
      return Ca(e.clone());
    e.parent.is("$text") && (e = fs(e));
    const i = this.createAttributeElement("_wrapPosition-fake-element");
    i._priority = Number.POSITIVE_INFINITY, i.isSimilar = () => !1, e.parent._insertChild(e.offset, i);
    const s = new P(e, e.getShiftedBy(1));
    this.wrap(s, t);
    const r = new v(i.parent, i.index);
    i._remove();
    const o = r.nodeBefore, a = r.nodeAfter;
    return o instanceof q && a instanceof q ? Aa(o, a) : Ca(r);
  }
  /**
   * Wraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by
   * merging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper
   * element to element being wrapped.
   *
   * @param wrapper Wrapper AttributeElement.
   * @param toWrap AttributeElement to wrap using wrapper element.
   * @returns Returns `true` if elements are merged.
   */
  _wrapAttributeElement(e, t) {
    if (!Ea(e, t) || e.name !== t.name || e.priority !== t.priority)
      return !1;
    for (const i of e.getAttributeKeys())
      if (!(i === "class" || i === "style") && t.hasAttribute(i) && t.getAttribute(i) !== e.getAttribute(i))
        return !1;
    for (const i of e.getStyleNames())
      if (t.hasStyle(i) && t.getStyle(i) !== e.getStyle(i))
        return !1;
    for (const i of e.getAttributeKeys())
      i === "class" || i === "style" || t.hasAttribute(i) || this.setAttribute(i, e.getAttribute(i), t);
    for (const i of e.getStyleNames())
      t.hasStyle(i) || this.setStyle(i, e.getStyle(i), t);
    for (const i of e.getClassNames())
      t.hasClass(i) || this.addClass(i, t);
    return !0;
  }
  /**
   * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing
   * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present
   * inside element being unwrapped.
   *
   * @param wrapper Wrapper AttributeElement.
   * @param toUnwrap AttributeElement to unwrap using wrapper element.
   * @returns Returns `true` if elements are unwrapped.
   **/
  _unwrapAttributeElement(e, t) {
    if (!Ea(e, t) || e.name !== t.name || e.priority !== t.priority)
      return !1;
    for (const i of e.getAttributeKeys())
      if (!(i === "class" || i === "style") && (!t.hasAttribute(i) || t.getAttribute(i) !== e.getAttribute(i)))
        return !1;
    if (!t.hasClass(...e.getClassNames()))
      return !1;
    for (const i of e.getStyleNames())
      if (!t.hasStyle(i) || t.getStyle(i) !== e.getStyle(i))
        return !1;
    for (const i of e.getAttributeKeys())
      i === "class" || i === "style" || this.removeAttribute(i, t);
    return this.removeClass(Array.from(e.getClassNames()), t), this.removeStyle(Array.from(e.getStyleNames()), t), !0;
  }
  /**
   * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.
   *
   * @param range Range which `start` and `end` positions will be used to break attributes.
   * @param forceSplitText If set to `true`, will break text nodes even if they are directly in container element.
   * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.
   * @returns New range with located at break positions.
   */
  _breakAttributesRange(e, t = !1) {
    const i = e.start, s = e.end;
    if (_i(e, this.document), e.isCollapsed) {
      const l = this._breakAttributes(e.start, t);
      return new P(l, l);
    }
    const r = this._breakAttributes(s, t), o = r.parent.childCount, a = this._breakAttributes(i, t);
    return r.offset += r.parent.childCount - o, new P(a, r);
  }
  /**
   * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position
   * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position
   * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.
   *
   * @param position Position where to break attributes.
   * @param forceSplitText If set to `true`, will break text nodes even if they are directly in container element.
   * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.
   * @returns New position after breaking the attributes.
   */
  _breakAttributes(e, t = !1) {
    const i = e.offset, s = e.parent;
    if (e.parent.is("emptyElement"))
      throw new f("view-writer-cannot-break-empty-element", this.document);
    if (e.parent.is("uiElement"))
      throw new f("view-writer-cannot-break-ui-element", this.document);
    if (e.parent.is("rawElement"))
      throw new f("view-writer-cannot-break-raw-element", this.document);
    if (!t && s.is("$text") && sr(s.parent) || sr(s))
      return e.clone();
    if (s.is("$text"))
      return this._breakAttributes(fs(e), t);
    const r = s.childCount;
    if (i == r) {
      const o = new v(s.parent, s.index + 1);
      return this._breakAttributes(o, t);
    } else if (i === 0) {
      const o = new v(s.parent, s.index);
      return this._breakAttributes(o, t);
    } else {
      const o = s.index + 1, a = s._clone();
      s.parent._insertChild(o, a), this._addToClonedElementsGroup(a);
      const l = s.childCount - i, c = s._removeChildren(i, l);
      a._appendChild(c);
      const u = new v(s.parent, o);
      return this._breakAttributes(u, t);
    }
  }
  /**
   * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was
   * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements
   * from the group now keep a reference to the given attribute element.
   *
   * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.
   *
   * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.
   *
   * @param element Attribute element to save.
   */
  _addToClonedElementsGroup(e) {
    if (!e.root.is("rootElement"))
      return;
    if (e.is("element"))
      for (const s of e.getChildren())
        this._addToClonedElementsGroup(s);
    const t = e.id;
    if (!t)
      return;
    let i = this._cloneGroups.get(t);
    i || (i = /* @__PURE__ */ new Set(), this._cloneGroups.set(t, i)), i.add(e), e._clonesGroup = i;
  }
  /**
   * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}
   * from its clones group.
   *
   * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).
   * This allows to reference the whole group even if the element was already removed from the tree.
   *
   * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.
   *
   * @param element Attribute element to remove.
   */
  _removeFromClonedElementsGroup(e) {
    if (e.is("element"))
      for (const s of e.getChildren())
        this._removeFromClonedElementsGroup(s);
    const t = e.id;
    if (!t)
      return;
    const i = this._cloneGroups.get(t);
    i && i.delete(e);
  }
}
function tv(n) {
  return Array.from(n.getChildren()).some((e) => !e.is("uiElement"));
}
function nr(n) {
  let e = n.parent;
  for (; !sr(e); ) {
    if (!e)
      return;
    e = e.parent;
  }
  return e;
}
function iv(n, e) {
  return n.priority < e.priority ? !0 : n.priority > e.priority ? !1 : n.getIdentity() < e.getIdentity();
}
function Ca(n) {
  const e = n.nodeBefore;
  if (e && e.is("$text"))
    return new v(e, e.data.length);
  const t = n.nodeAfter;
  return t && t.is("$text") ? new v(t, 0) : n;
}
function fs(n) {
  if (n.offset == n.parent.data.length)
    return new v(n.parent.parent, n.parent.index + 1);
  if (n.offset === 0)
    return new v(n.parent.parent, n.parent.index);
  const e = n.parent.data.slice(n.offset);
  return n.parent._data = n.parent.data.slice(0, n.offset), n.parent.parent._insertChild(n.parent.index + 1, new q(n.root.document, e)), new v(n.parent.parent, n.parent.index + 1);
}
function Aa(n, e) {
  const t = n.data.length;
  return n._data += e.data, e._remove(), new v(n, t);
}
const nv = [q, Tt, Mi, qr, Gr, jn];
function sh(n, e) {
  for (const t of n) {
    if (!nv.some((i) => t instanceof i))
      throw new f("view-writer-insert-invalid-node-type", e);
    t.is("$text") || sh(t.getChildren(), e);
  }
}
function sr(n) {
  return n && (n.is("containerElement") || n.is("documentFragment"));
}
function _i(n, e) {
  const t = nr(n.start), i = nr(n.end);
  if (!t || !i || t !== i)
    throw new f("view-writer-invalid-range-container", e);
}
function Ea(n, e) {
  return n.id === null && e.id === null;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const rh = (n) => n.createTextNode(" "), oh = (n) => {
  const e = n.createElement("span");
  return e.dataset.ckeFiller = "true", e.innerText = " ", e;
}, ah = (n) => {
  const e = n.createElement("br");
  return e.dataset.ckeFiller = "true", e;
}, Ne = 7, An = "⁠".repeat(Ne);
function be(n) {
  return Y(n) && n.data.substr(0, Ne) === An;
}
function ki(n) {
  return n.data.length == Ne && be(n);
}
function Ta(n) {
  return be(n) ? n.data.slice(Ne) : n.data;
}
function sv(n) {
  n.document.on("arrowKey", rv, { priority: "low" });
}
function rv(n, e) {
  if (e.keyCode == R.arrowleft) {
    const t = e.domTarget.ownerDocument.defaultView.getSelection();
    if (t.rangeCount == 1 && t.getRangeAt(0).collapsed) {
      const i = t.getRangeAt(0).startContainer, s = t.getRangeAt(0).startOffset;
      be(i) && s <= Ne && t.collapse(i, 0);
    }
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ov extends H() {
  /**
   * Creates a renderer instance.
   *
   * @param domConverter Converter instance.
   * @param selection View selection.
   */
  constructor(e, t) {
    super(), this.domDocuments = /* @__PURE__ */ new Set(), this.markedAttributes = /* @__PURE__ */ new Set(), this.markedChildren = /* @__PURE__ */ new Set(), this.markedTexts = /* @__PURE__ */ new Set(), this._inlineFiller = null, this._fakeSelectionContainer = null, this.domConverter = e, this.selection = t, this.set("isFocused", !1), this.set("isSelecting", !1), S.isBlink && !S.isAndroid && this.on("change:isSelecting", () => {
      this.isSelecting || this.render();
    }), this.set("isComposing", !1), this.on("change:isComposing", () => {
      this.isComposing || this.render();
    });
  }
  /**
   * Marks a view node to be updated in the DOM by {@link #render `render()`}.
   *
   * Note that only view nodes whose parents have corresponding DOM elements need to be marked to be synchronized.
   *
   * @see #markedAttributes
   * @see #markedChildren
   * @see #markedTexts
   *
   * @param type Type of the change.
   * @param node ViewNode to be marked.
   */
  markToSync(e, t) {
    if (e === "text")
      this.domConverter.mapViewToDom(t.parent) && this.markedTexts.add(t);
    else {
      if (!this.domConverter.mapViewToDom(t))
        return;
      if (e === "attributes")
        this.markedAttributes.add(t);
      else if (e === "children")
        this.markedChildren.add(t);
      else
        throw new f("view-renderer-unknown-type", this);
    }
  }
  /**
   * Renders all buffered changes ({@link #markedAttributes}, {@link #markedChildren} and {@link #markedTexts}) and
   * the current view selection (if needed) to the DOM by applying a minimal set of changes to it.
   *
   * Renderer tries not to break the text composition (e.g. IME) and x-index of the selection,
   * so it does as little as it is needed to update the DOM.
   *
   * Renderer also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed
   * at the selection position and adds or removes it. To prevent breaking text composition inline filler will not be
   * removed as long as the selection is in the text node which needed it at first.
   */
  render() {
    if (this.isComposing && !S.isAndroid)
      return;
    let e = null;
    const t = S.isBlink && !S.isAndroid ? !this.isSelecting : !0;
    for (const i of this.markedChildren)
      this._updateChildrenMappings(i);
    t ? (this._inlineFiller && !this._isSelectionInInlineFiller() && this._removeInlineFiller(), this._inlineFiller ? e = this._getInlineFillerPosition() : this._needsInlineFillerAtSelection() && (e = this.selection.getFirstPosition(), this.markedChildren.add(e.parent))) : this._inlineFiller && this._inlineFiller.parentNode && (e = this.domConverter.domPositionToView(this._inlineFiller), e && e.parent.is("$text") && (e = v._createBefore(e.parent)));
    for (const i of this.markedAttributes)
      this._updateAttrs(i);
    for (const i of this.markedChildren)
      this._updateChildren(i, { inlineFillerPosition: e });
    for (const i of this.markedTexts)
      !this.markedChildren.has(i.parent) && this.domConverter.mapViewToDom(i.parent) && this._updateText(i, { inlineFillerPosition: e });
    if (t)
      if (e) {
        const i = this.domConverter.viewPositionToDom(e), s = i.parent.ownerDocument;
        be(i.parent) ? this._inlineFiller = i.parent : this._inlineFiller = Pa(s, i.parent, i.offset);
      } else
        this._inlineFiller = null;
    this._updateFocus(), this._updateSelection(), this.markedTexts.clear(), this.markedAttributes.clear(), this.markedChildren.clear();
  }
  /**
   * Updates mappings of view element's children.
   *
   * Children that were replaced in the view structure by similar elements (same tag name) are treated as 'replaced'.
   * This means that their mappings can be updated so the new view elements are mapped to the existing DOM elements.
   * Thanks to that these elements do not need to be re-rendered completely.
   *
   * @param viewElement The view element whose children mappings will be updated.
   */
  _updateChildrenMappings(e) {
    if (!this.domConverter.mapViewToDom(e))
      return;
    const i = Array.from(this.domConverter.mapViewToDom(e).childNodes), s = Array.from(this.domConverter.viewChildrenToDom(e, { withChildren: !1 })), r = this._diffNodeLists(i, s), o = this._findUpdateActions(r, i, s, lv);
    if (o.indexOf("update") !== -1) {
      const a = { equal: 0, insert: 0, delete: 0 };
      for (const l of o)
        if (l === "update") {
          const c = a.equal + a.insert, u = a.equal + a.delete, h = e.getChild(c);
          h && !(h.is("uiElement") || h.is("rawElement")) && this._updateElementMappings(h, i[u]), da(s[c]), a.equal++;
        } else
          a[l]++;
    }
  }
  /**
   * Updates mappings of a given view element.
   *
   * @param viewElement The view element whose mappings will be updated.
   * @param domElement The DOM element representing the given view element.
   */
  _updateElementMappings(e, t) {
    this.domConverter.unbindDomElement(t), this.domConverter.bindElements(t, e), this.markedChildren.add(e), this.markedAttributes.add(e);
  }
  /**
   * Gets the position of the inline filler based on the current selection.
   * Here, we assume that we know that the filler is needed and
   * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it is needed,
   * it is somewhere at the selection position.
   *
   * Note: The filler position cannot be restored based on the filler's DOM text node, because
   * when this method is called (before rendering), the bindings will often be broken. View-to-DOM
   * bindings are only dependable after rendering.
   */
  _getInlineFillerPosition() {
    const e = this.selection.getFirstPosition();
    return e.parent.is("$text") ? v._createBefore(e.parent) : e;
  }
  /**
   * Returns `true` if the selection has not left the inline filler's text node.
   * If it is `true`, it means that the filler had been added for a reason and the selection did not
   * leave the filler's text node. For example, the user can be in the middle of a composition so it should not be touched.
   *
   * @returns `true` if the inline filler and selection are in the same place.
   */
  _isSelectionInInlineFiller() {
    if (this.selection.rangeCount != 1 || !this.selection.isCollapsed)
      return !1;
    const e = this.selection.getFirstPosition(), t = this.domConverter.viewPositionToDom(e);
    return !!(t && Y(t.parent) && be(t.parent));
  }
  /**
   * Removes the inline filler.
   */
  _removeInlineFiller() {
    const e = this._inlineFiller;
    if (!be(e))
      throw new f("view-renderer-filler-was-lost", this);
    ki(e) ? e.remove() : e.data = e.data.substr(Ne), this._inlineFiller = null;
  }
  /**
   * Checks if the inline {@link module:engine/view/filler filler} should be added.
   *
   * @returns `true` if the inline filler should be added.
   */
  _needsInlineFillerAtSelection() {
    if (this.selection.rangeCount != 1 || !this.selection.isCollapsed)
      return !1;
    const e = this.selection.getFirstPosition(), t = e.parent, i = e.offset;
    if (!this.domConverter.mapViewToDom(t.root) || !t.is("element") || !av(t) || i === t.getFillerOffset())
      return !1;
    const s = e.nodeBefore, r = e.nodeAfter;
    return !(s instanceof q || r instanceof q || S.isAndroid && (s || r));
  }
  /**
   * Checks if text needs to be updated and possibly updates it.
   *
   * @param viewText View text to update.
   * @param options.inlineFillerPosition The position where the inline filler should be rendered.
   */
  _updateText(e, t) {
    const i = this.domConverter.findCorrespondingDomText(e);
    let r = this.domConverter.viewToDom(e).data;
    const o = t.inlineFillerPosition;
    o && o.parent == e.parent && o.offset == e.index && (r = An + r), xa(i, r);
  }
  /**
   * Checks if attribute list needs to be updated and possibly updates it.
   *
   * @param viewElement The view element to update.
   */
  _updateAttrs(e) {
    const t = this.domConverter.mapViewToDom(e);
    if (!t)
      return;
    const i = Array.from(t.attributes).map((r) => r.name), s = e.getAttributeKeys();
    for (const r of s)
      this.domConverter.setDomElementAttribute(t, r, e.getAttribute(r), e);
    for (const r of i)
      e.hasAttribute(r) || this.domConverter.removeDomElementAttribute(t, r);
  }
  /**
   * Checks if elements child list needs to be updated and possibly updates it.
   *
   * Note that on Android, to reduce the risk of composition breaks, it tries to update data of an existing
   * child text nodes instead of replacing them completely.
   *
   * @param viewElement View element to update.
   * @param options.inlineFillerPosition The position where the inline filler should be rendered.
   */
  _updateChildren(e, t) {
    const i = this.domConverter.mapViewToDom(e);
    if (!i)
      return;
    if (S.isAndroid) {
      let h = null;
      for (const d of Array.from(i.childNodes)) {
        if (h && Y(h) && Y(d)) {
          i.normalize();
          break;
        }
        h = d;
      }
    }
    const s = t.inlineFillerPosition, r = i.childNodes, o = Array.from(this.domConverter.viewChildrenToDom(e, { bind: !0 }));
    s && s.parent === e && Pa(i.ownerDocument, o, s.offset);
    const a = this._diffNodeLists(r, o), l = this._findUpdateActions(a, r, o, cv);
    let c = 0;
    const u = /* @__PURE__ */ new Set();
    for (const h of l)
      h === "delete" ? (u.add(r[c]), da(r[c])) : (h === "equal" || h === "update") && c++;
    c = 0;
    for (const h of l)
      h === "insert" ? (Nu(i, c, o[c]), c++) : h === "update" ? (xa(r[c], o[c].data), c++) : h === "equal" && (this._markDescendantTextToSync(this.domConverter.domToView(o[c])), c++);
    for (const h of u)
      h.parentNode || this.domConverter.unbindDomElement(h);
  }
  /**
   * Shorthand for diffing two arrays or node lists of DOM nodes.
   *
   * @param actualDomChildren Actual DOM children
   * @param expectedDomChildren Expected DOM children.
   * @returns The list of actions based on the {@link module:utils/diff~diff} function.
   */
  _diffNodeLists(e, t) {
    return e = dv(e, this._fakeSelectionContainer), Ai(e, t, uv.bind(null, this.domConverter));
  }
  /**
   * Finds DOM nodes that were replaced with the similar nodes (same tag name) in the view. All nodes are compared
   * within one `insert`/`delete` action group, for example:
   *
   * ```
   * Actual DOM:		<p><b>Foo</b>Bar<i>Baz</i><b>Bax</b></p>
   * Expected DOM:	<p>Bar<b>123</b><i>Baz</i><b>456</b></p>
   * Input actions:	[ insert, insert, delete, delete, equal, insert, delete ]
   * Output actions:	[ insert, replace, delete, equal, replace ]
   * ```
   *
   * @param actions Actions array which is a result of the {@link module:utils/diff~diff} function.
   * @param actualDom Actual DOM children
   * @param expectedDom Expected DOM children.
   * @param comparator A comparator function that should return `true` if the given node should be reused
   * (either by the update of a text node data or an element children list for similar elements).
   * @returns Actions array modified with the `update` actions.
   */
  _findUpdateActions(e, t, i, s) {
    if (e.indexOf("insert") === -1 || e.indexOf("delete") === -1)
      return e;
    let r = [], o = [], a = [];
    const l = { equal: 0, insert: 0, delete: 0 };
    for (const c of e)
      c === "insert" ? a.push(i[l.equal + l.insert]) : c === "delete" ? o.push(t[l.equal + l.delete]) : (r = r.concat(Ai(o, a, s).map((u) => u === "equal" ? "update" : u)), r.push("equal"), o = [], a = []), l[c]++;
    return r.concat(Ai(o, a, s).map((c) => c === "equal" ? "update" : c));
  }
  /**
   * Marks text nodes to be synchronized.
   *
   * If a text node is passed, it will be marked. If an element is passed, all descendant text nodes inside it will be marked.
   *
   * @param viewNode View node to sync.
   */
  _markDescendantTextToSync(e) {
    if (e) {
      if (e.is("$text"))
        this.markedTexts.add(e);
      else if (e.is("element"))
        for (const t of e.getChildren())
          this._markDescendantTextToSync(t);
    }
  }
  /**
   * Checks if the selection needs to be updated and possibly updates it.
   */
  _updateSelection() {
    if (S.isBlink && !S.isAndroid && this.isSelecting && !this.markedChildren.size)
      return;
    if (this.selection.rangeCount === 0) {
      this._removeDomSelection(), this._removeFakeSelection();
      return;
    }
    const e = this.domConverter.mapViewToDom(this.selection.editableElement);
    !this.isFocused || !e || (this.selection.isFake ? this._updateFakeSelection(e) : this._fakeSelectionContainer && this._fakeSelectionContainer.isConnected ? (this._removeFakeSelection(), this._updateDomSelection(e)) : this.isComposing && S.isAndroid || this._updateDomSelection(e));
  }
  /**
   * Updates the fake selection.
   *
   * @param domRoot A valid DOM root where the fake selection container should be added.
   */
  _updateFakeSelection(e) {
    const t = e.ownerDocument;
    this._fakeSelectionContainer || (this._fakeSelectionContainer = fv(t));
    const i = this._fakeSelectionContainer;
    if (this.domConverter.bindFakeSelection(i, this.selection), !this._fakeSelectionNeedsUpdate(e))
      return;
    (!i.parentElement || i.parentElement != e) && e.appendChild(i), i.textContent = this.selection.fakeSelectionLabel || " ";
    const s = t.getSelection(), r = t.createRange();
    s.removeAllRanges(), r.selectNodeContents(i), s.addRange(r);
  }
  /**
   * Updates the DOM selection.
   *
   * @param domRoot A valid DOM root where the DOM selection should be rendered.
   */
  _updateDomSelection(e) {
    const t = e.ownerDocument.defaultView.getSelection();
    if (!this._domSelectionNeedsUpdate(t))
      return;
    const i = this.domConverter.viewPositionToDom(this.selection.anchor), s = this.domConverter.viewPositionToDom(this.selection.focus);
    t.collapse(i.parent, i.offset), t.extend(s.parent, s.offset), S.isGecko && hv(s, t);
  }
  /**
   * Checks whether a given DOM selection needs to be updated.
   *
   * @param domSelection The DOM selection to check.
   */
  _domSelectionNeedsUpdate(e) {
    if (!this.domConverter.isDomSelectionCorrect(e))
      return !0;
    const t = e && this.domConverter.domSelectionToView(e);
    return !(t && this.selection.isEqual(t) || !this.selection.isCollapsed && this.selection.isSimilar(t));
  }
  /**
   * Checks whether the fake selection needs to be updated.
   *
   * @param domRoot A valid DOM root where a new fake selection container should be added.
   */
  _fakeSelectionNeedsUpdate(e) {
    const t = this._fakeSelectionContainer, i = e.ownerDocument.getSelection();
    return !t || t.parentElement !== e || i.anchorNode !== t && !t.contains(i.anchorNode) ? !0 : t.textContent !== this.selection.fakeSelectionLabel;
  }
  /**
   * Removes the DOM selection.
   */
  _removeDomSelection() {
    for (const e of this.domDocuments) {
      const t = e.getSelection();
      if (t.rangeCount) {
        const i = e.activeElement, s = this.domConverter.mapDomToView(i);
        i && s && t.removeAllRanges();
      }
    }
  }
  /**
   * Removes the fake selection.
   */
  _removeFakeSelection() {
    const e = this._fakeSelectionContainer;
    e && e.remove();
  }
  /**
   * Checks if focus needs to be updated and possibly updates it.
   */
  _updateFocus() {
    if (this.isFocused) {
      const e = this.selection.editableElement;
      e && this.domConverter.focus(e);
    }
  }
}
function av(n) {
  if (n.getAttribute("contenteditable") == "false")
    return !1;
  const e = n.findAncestor((t) => t.hasAttribute("contenteditable"));
  return !e || e.getAttribute("contenteditable") == "true";
}
function Pa(n, e, t) {
  const i = e instanceof Array ? e : e.childNodes, s = i[t];
  if (Y(s))
    return s.data = An + s.data, s;
  {
    const r = n.createTextNode(An);
    return Array.isArray(e) ? i.splice(t, 0, r) : Nu(e, t, r), r;
  }
}
function lv(n, e) {
  return ut(n) && ut(e) && !Y(n) && !Y(e) && !Xt(n) && !Xt(e) && n.tagName.toLowerCase() === e.tagName.toLowerCase();
}
function cv(n, e) {
  return ut(n) && ut(e) && Y(n) && Y(e);
}
function uv(n, e, t) {
  return e === t ? !0 : Y(e) && Y(t) ? e.data === t.data : !!(n.isBlockFiller(e) && n.isBlockFiller(t));
}
function hv(n, e) {
  const t = n.parent;
  if (t.nodeType != Node.ELEMENT_NODE || n.offset != t.childNodes.length - 1)
    return;
  const i = t.childNodes[n.offset];
  i && i.tagName == "BR" && e.addRange(e.getRangeAt(0));
}
function dv(n, e) {
  const t = Array.from(n);
  return t.length == 0 || !e || t[t.length - 1] == e && t.pop(), t;
}
function fv(n) {
  const e = n.createElement("div");
  return e.className = "ck-fake-selection-container", Object.assign(e.style, {
    position: "fixed",
    top: 0,
    left: "-9999px",
    // See https://github.com/ckeditor/ckeditor5/issues/752.
    width: "42px"
  }), e.textContent = " ", e;
}
function xa(n, e) {
  const t = n.data;
  if (t == e)
    return;
  const i = Pc(t, e);
  for (const s of i)
    s.type === "insert" ? n.insertData(s.index, s.values.join("")) : n.deleteData(s.index, s.howMany);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const mv = ah(I.document), gv = rh(I.document), pv = oh(I.document), Xi = "data-ck-unsafe-attribute-", Sa = "data-ck-unsafe-element";
class lh {
  /**
   * Creates a DOM converter.
   *
   * @param document The view document instance.
   * @param options An object with configuration options.
   * @param options.blockFillerMode The type of the block filler to use.
   * Default value depends on the options.renderingMode:
   *  'nbsp' when options.renderingMode == 'data',
   *  'br' when options.renderingMode == 'editing'.
   * @param options.renderingMode Whether to leave the View-to-DOM conversion result unchanged
   * or improve editing experience by filtering out interactive data.
   */
  constructor(e, { blockFillerMode: t, renderingMode: i = "editing" } = {}) {
    this._domToViewMapping = /* @__PURE__ */ new WeakMap(), this._viewToDomMapping = /* @__PURE__ */ new WeakMap(), this._fakeSelectionMapping = /* @__PURE__ */ new WeakMap(), this._rawContentElementMatcher = new ri(), this._encounteredRawContentDomNodes = /* @__PURE__ */ new WeakSet(), this.document = e, this.renderingMode = i, this.blockFillerMode = t || (i === "editing" ? "br" : "nbsp"), this.preElements = ["pre"], this.blockElements = [
      "address",
      "article",
      "aside",
      "blockquote",
      "caption",
      "center",
      "dd",
      "details",
      "dir",
      "div",
      "dl",
      "dt",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "header",
      "hgroup",
      "legend",
      "li",
      "main",
      "menu",
      "nav",
      "ol",
      "p",
      "pre",
      "section",
      "summary",
      "table",
      "tbody",
      "td",
      "tfoot",
      "th",
      "thead",
      "tr",
      "ul"
    ], this.inlineObjectElements = [
      "object",
      "iframe",
      "input",
      "button",
      "textarea",
      "select",
      "option",
      "video",
      "embed",
      "audio",
      "img",
      "canvas"
    ], this.unsafeElements = ["script", "style"], this._domDocument = this.renderingMode === "editing" ? I.document : I.document.implementation.createHTMLDocument("");
  }
  /**
   * Binds a given DOM element that represents fake selection to a **position** of a
   * {@link module:engine/view/documentselection~DocumentSelection document selection}.
   * Document selection copy is stored and can be retrieved by the
   * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.
   */
  bindFakeSelection(e, t) {
    this._fakeSelectionMapping.set(e, new ht(t));
  }
  /**
   * Returns a {@link module:engine/view/selection~Selection view selection} instance corresponding to a given
   * DOM element that represents fake selection. Returns `undefined` if binding to the given DOM element does not exist.
   */
  fakeSelectionToView(e) {
    return this._fakeSelectionMapping.get(e);
  }
  /**
   * Binds DOM and view elements, so it will be possible to get corresponding elements using
   * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and
   * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.
   *
   * @param domElement The DOM element to bind.
   * @param viewElement The view element to bind.
   */
  bindElements(e, t) {
    this._domToViewMapping.set(e, t), this._viewToDomMapping.set(t, e);
  }
  /**
   * Unbinds a given DOM element from the view element it was bound to. Unbinding is deep, meaning that all children of
   * the DOM element will be unbound too.
   *
   * @param domElement The DOM element to unbind.
   */
  unbindDomElement(e) {
    const t = this._domToViewMapping.get(e);
    if (t) {
      this._domToViewMapping.delete(e), this._viewToDomMapping.delete(t);
      for (const i of Array.from(e.children))
        this.unbindDomElement(i);
    }
  }
  /**
   * Binds DOM and view document fragments, so it will be possible to get corresponding document fragments using
   * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and
   * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.
   *
   * @param domFragment The DOM document fragment to bind.
   * @param viewFragment The view document fragment to bind.
   */
  bindDocumentFragments(e, t) {
    this._domToViewMapping.set(e, t), this._viewToDomMapping.set(t, e);
  }
  /**
   * Decides whether a given pair of attribute key and value should be passed further down the pipeline.
   *
   * @param elementName Element name in lower case.
   */
  shouldRenderAttribute(e, t, i) {
    return this.renderingMode === "data" ? !0 : (e = e.toLowerCase(), e.startsWith("on") || e === "srcdoc" && t.match(/\bon\S+\s*=|javascript:|<\s*\/*script/i) ? !1 : i === "img" && (e === "src" || e === "srcset") || i === "source" && e === "srcset" ? !0 : !t.match(/^\s*(javascript:|data:(image\/svg|text\/x?html))/i));
  }
  /**
   * Set `domElement`'s content using provided `html` argument. Apply necessary filtering for the editing pipeline.
   *
   * @param domElement DOM element that should have `html` set as its content.
   * @param html Textual representation of the HTML that will be set on `domElement`.
   */
  setContentOf(e, t) {
    if (this.renderingMode === "data") {
      e.innerHTML = t;
      return;
    }
    const i = new DOMParser().parseFromString(t, "text/html"), s = i.createDocumentFragment(), r = i.body.childNodes;
    for (; r.length > 0; )
      s.appendChild(r[0]);
    const o = i.createTreeWalker(s, NodeFilter.SHOW_ELEMENT), a = [];
    let l;
    for (; l = o.nextNode(); )
      a.push(l);
    for (const c of a) {
      for (const h of c.getAttributeNames())
        this.setDomElementAttribute(c, h, c.getAttribute(h));
      const u = c.tagName.toLowerCase();
      this._shouldRenameElement(u) && (Ra(u), c.replaceWith(this._createReplacementDomElement(u, c)));
    }
    for (; e.firstChild; )
      e.firstChild.remove();
    e.append(s);
  }
  /**
   * Converts the view to the DOM. For all text nodes, not bound elements and document fragments new items will
   * be created. For bound elements and document fragments the method will return corresponding items.
   *
   * @param viewNode View node or document fragment to transform.
   * @param options Conversion options.
   * @param options.bind Determines whether new elements will be bound.
   * @param options.withChildren If `false`, node's and document fragment's children will not be converted.
   * @returns Converted node or DocumentFragment.
   */
  viewToDom(e, t = {}) {
    if (e.is("$text")) {
      const i = this._processDataFromViewText(e);
      return this._domDocument.createTextNode(i);
    } else {
      if (this.mapViewToDom(e))
        return this.mapViewToDom(e);
      let i;
      if (e.is("documentFragment"))
        i = this._domDocument.createDocumentFragment(), t.bind && this.bindDocumentFragments(i, e);
      else {
        if (e.is("uiElement"))
          return e.name === "$comment" ? i = this._domDocument.createComment(e.getCustomProperty("$rawContent")) : i = e.render(this._domDocument, this), t.bind && this.bindElements(i, e), i;
        this._shouldRenameElement(e.name) ? (Ra(e.name), i = this._createReplacementDomElement(e.name)) : e.hasAttribute("xmlns") ? i = this._domDocument.createElementNS(e.getAttribute("xmlns"), e.name) : i = this._domDocument.createElement(e.name), e.is("rawElement") && e.render(i, this), t.bind && this.bindElements(i, e);
        for (const s of e.getAttributeKeys())
          this.setDomElementAttribute(i, s, e.getAttribute(s), e);
      }
      if (t.withChildren !== !1)
        for (const s of this.viewChildrenToDom(e, t))
          i.appendChild(s);
      return i;
    }
  }
  /**
   * Sets the attribute on a DOM element.
   *
   * **Note**: To remove the attribute, use {@link #removeDomElementAttribute}.
   *
   * @param domElement The DOM element the attribute should be set on.
   * @param key The name of the attribute.
   * @param value The value of the attribute.
   * @param relatedViewElement The view element related to the `domElement` (if there is any).
   * It helps decide whether the attribute set is unsafe. For instance, view elements created via the
   * {@link module:engine/view/downcastwriter~DowncastWriter} methods can allow certain attributes that would normally be filtered out.
   */
  setDomElementAttribute(e, t, i, s) {
    const r = this.shouldRenderAttribute(t, i, e.tagName.toLowerCase()) || s && s.shouldRenderUnsafeAttribute(t);
    if (r || G("domconverter-unsafe-attribute-detected", { domElement: e, key: t, value: i }), !Lu(t)) {
      G("domconverter-invalid-attribute-detected", { domElement: e, key: t, value: i });
      return;
    }
    e.hasAttribute(t) && !r ? e.removeAttribute(t) : e.hasAttribute(Xi + t) && r && e.removeAttribute(Xi + t), e.setAttribute(r ? t : Xi + t, i);
  }
  /**
   * Removes an attribute from a DOM element.
   *
   * **Note**: To set the attribute, use {@link #setDomElementAttribute}.
   *
   * @param domElement The DOM element the attribute should be removed from.
   * @param key The name of the attribute.
   */
  removeDomElementAttribute(e, t) {
    t != Sa && (e.removeAttribute(t), e.removeAttribute(Xi + t));
  }
  /**
   * Converts children of the view element to DOM using the
   * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.
   * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.
   *
   * @param viewElement Parent view element.
   * @param options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.
   * @returns DOM nodes.
   */
  *viewChildrenToDom(e, t = {}) {
    const i = e.getFillerOffset && e.getFillerOffset();
    let s = 0;
    for (const r of e.getChildren()) {
      i === s && (yield this._getBlockFiller());
      const o = r.is("element") && !!r.getCustomProperty("dataPipeline:transparentRendering") && !de(r.getAttributes());
      o && this.renderingMode == "data" ? yield* this.viewChildrenToDom(r, t) : (o && G("domconverter-transparent-rendering-unsupported-in-editing-pipeline", { viewElement: r }), yield this.viewToDom(r, t)), s++;
    }
    i === s && (yield this._getBlockFiller());
  }
  /**
   * Converts view {@link module:engine/view/range~Range} to DOM range.
   * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.
   *
   * @param viewRange View range.
   * @returns DOM range.
   */
  viewRangeToDom(e) {
    const t = this.viewPositionToDom(e.start), i = this.viewPositionToDom(e.end), s = this._domDocument.createRange();
    return s.setStart(t.parent, t.offset), s.setEnd(i.parent, i.offset), s;
  }
  /**
   * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.
   *
   * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.
   * If the converted position is directly before inline filler it is moved inside the filler.
   *
   * @param viewPosition View position.
   * @returns DOM position or `null` if view position could not be converted to DOM.
   * DOM position has two properties:
   * * `parent` - DOM position parent.
   * * `offset` - DOM position offset.
   */
  viewPositionToDom(e) {
    const t = e.parent;
    if (t.is("$text")) {
      const i = this.findCorrespondingDomText(t);
      if (!i)
        return null;
      let s = e.offset;
      return be(i) && (s += Ne), { parent: i, offset: s };
    } else {
      let i, s, r;
      if (e.offset === 0) {
        if (i = this.mapViewToDom(t), !i)
          return null;
        r = i.childNodes[0];
      } else {
        const a = e.nodeBefore;
        if (s = a.is("$text") ? this.findCorrespondingDomText(a) : this.mapViewToDom(a), !s)
          return null;
        i = s.parentNode, r = s.nextSibling;
      }
      if (Y(r) && be(r))
        return { parent: r, offset: Ne };
      const o = s ? Yi(s) + 1 : 0;
      return { parent: i, offset: o };
    }
  }
  /**
   * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will
   * be created. For bound elements and document fragments function will return corresponding items. For
   * {@link module:engine/view/filler fillers} `null` will be returned.
   * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.
   *
   * @param domNode DOM node or document fragment to transform.
   * @param options Conversion options.
   * @param options.bind Determines whether new elements will be bound. False by default.
   * @param options.withChildren If `true`, node's and document fragment's children will be converted too. True by default.
   * @param options.keepOriginalCase If `false`, node's tag name will be converted to lower case. False by default.
   * @param options.skipComments If `false`, comment nodes will be converted to `$comment`
   * {@link module:engine/view/uielement~UIElement view UI elements}. False by default.
   * @returns Converted node or document fragment or `null` if DOM node is a {@link module:engine/view/filler filler}
   * or the given node is an empty text node.
   */
  domToView(e, t = {}) {
    if (this.isBlockFiller(e))
      return null;
    const i = this.getHostViewElement(e);
    if (i)
      return i;
    if (Xt(e) && t.skipComments)
      return null;
    if (Y(e)) {
      if (ki(e))
        return null;
      {
        const s = this._processDataFromDomText(e);
        return s === "" ? null : new q(this.document, s);
      }
    } else {
      if (this.mapDomToView(e))
        return this.mapDomToView(e);
      let s;
      if (this.isDocumentFragment(e))
        s = new Pt(this.document), t.bind && this.bindDocumentFragments(e, s);
      else {
        s = this._createViewElement(e, t), t.bind && this.bindElements(e, s);
        const r = e.attributes;
        if (r)
          for (let o = r.length, a = 0; a < o; a++)
            s._setAttribute(r[a].name, r[a].value);
        if (this._isViewElementWithRawContent(s, t) || Xt(e)) {
          const o = Xt(e) ? e.data : e.innerHTML;
          return s._setCustomProperty("$rawContent", o), this._encounteredRawContentDomNodes.add(e), s;
        }
      }
      if (t.withChildren !== !1)
        for (const r of this.domChildrenToView(e, t))
          s._appendChild(r);
      return s;
    }
  }
  /**
   * Converts children of the DOM element to view nodes using
   * the {@link module:engine/view/domconverter~DomConverter#domToView} method.
   * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.
   *
   * @param domElement Parent DOM element.
   * @param options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.
   * @returns View nodes.
   */
  *domChildrenToView(e, t) {
    for (let i = 0; i < e.childNodes.length; i++) {
      const s = e.childNodes[i], r = this.domToView(s, t);
      r !== null && (yield r);
    }
  }
  /**
   * Converts DOM selection to view {@link module:engine/view/selection~Selection}.
   * Ranges which cannot be converted will be omitted.
   *
   * @param domSelection DOM selection.
   * @returns View selection.
   */
  domSelectionToView(e) {
    if (e.rangeCount === 1) {
      let s = e.getRangeAt(0).startContainer;
      Y(s) && (s = s.parentNode);
      const r = this.fakeSelectionToView(s);
      if (r)
        return r;
    }
    const t = this.isDomSelectionBackward(e), i = [];
    for (let s = 0; s < e.rangeCount; s++) {
      const r = e.getRangeAt(s), o = this.domRangeToView(r);
      o && i.push(o);
    }
    return new ht(i, { backward: t });
  }
  /**
   * Converts DOM Range to view {@link module:engine/view/range~Range}.
   * If the start or end position can not be converted `null` is returned.
   *
   * @param domRange DOM range.
   * @returns View range.
   */
  domRangeToView(e) {
    const t = this.domPositionToView(e.startContainer, e.startOffset), i = this.domPositionToView(e.endContainer, e.endOffset);
    return t && i ? new P(t, i) : null;
  }
  /**
   * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.
   *
   * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,
   * position of the filler will be converted and returned.
   *
   * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}
   * that position will be converted to view position before that UIElement.
   *
   * If structures are too different and it is not possible to find corresponding position then `null` will be returned.
   *
   * @param domParent DOM position parent.
   * @param domOffset DOM position offset. You can skip it when converting the inline filler node.
   * @returns View position.
   */
  domPositionToView(e, t = 0) {
    if (this.isBlockFiller(e))
      return this.domPositionToView(e.parentNode, Yi(e));
    const i = this.mapDomToView(e);
    if (i && (i.is("uiElement") || i.is("rawElement")))
      return v._createBefore(i);
    if (Y(e)) {
      if (ki(e))
        return this.domPositionToView(e.parentNode, Yi(e));
      const s = this.findCorrespondingViewText(e);
      let r = t;
      return s ? (be(e) && (r -= Ne, r = r < 0 ? 0 : r), new v(s, r)) : null;
    } else {
      if (t === 0) {
        const s = this.mapDomToView(e);
        if (s)
          return new v(s, 0);
      } else {
        const s = e.childNodes[t - 1];
        if (Y(s) && ki(s) || s && this.isBlockFiller(s))
          return this.domPositionToView(s.parentNode, Yi(s));
        const r = Y(s) ? this.findCorrespondingViewText(s) : this.mapDomToView(s);
        if (r && r.parent)
          return new v(r.parent, r.index + 1);
      }
      return null;
    }
  }
  /**
   * Returns corresponding view {@link module:engine/view/element~Element Element} or
   * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or
   * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}
   * to the given DOM - `undefined` is returned.
   *
   * For all DOM elements rendered by a {@link module:engine/view/uielement~UIElement} or
   * a {@link module:engine/view/rawelement~RawElement}, the parent `UIElement` or `RawElement` will be returned.
   *
   * @param domElementOrDocumentFragment DOM element or document fragment.
   * @returns Corresponding view element, document fragment or `undefined` if no element was bound.
   */
  mapDomToView(e) {
    return this.getHostViewElement(e) || this._domToViewMapping.get(e);
  }
  /**
   * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},
   * corresponding text node is returned based on the sibling or parent.
   *
   * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used
   * to find the corresponding text node.
   *
   * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}
   * element, it is used to find the corresponding text node.
   *
   * For all text nodes rendered by a {@link module:engine/view/uielement~UIElement} or
   * a {@link module:engine/view/rawelement~RawElement}, the parent `UIElement` or `RawElement` will be returned.
   *
   * Otherwise `null` is returned.
   *
   * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.
   *
   * @param domText DOM text node.
   * @returns Corresponding view text node or `null`, if it was not possible to find a corresponding node.
   */
  findCorrespondingViewText(e) {
    if (ki(e))
      return null;
    const t = this.getHostViewElement(e);
    if (t)
      return t;
    const i = e.previousSibling;
    if (i) {
      if (!this.isElement(i))
        return null;
      const s = this.mapDomToView(i);
      if (s) {
        const r = s.nextSibling;
        return r instanceof q ? r : null;
      }
    } else {
      const s = this.mapDomToView(e.parentNode);
      if (s) {
        const r = s.getChild(0);
        return r instanceof q ? r : null;
      }
    }
    return null;
  }
  mapViewToDom(e) {
    return this._viewToDomMapping.get(e);
  }
  /**
   * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},
   * corresponding text node is returned based on the sibling or parent.
   *
   * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used
   * to find the corresponding text node.
   *
   * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}
   * element, it is used to find the corresponding text node.
   *
   * Otherwise `null` is returned.
   *
   * @param viewText View text node.
   * @returns Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.
   */
  findCorrespondingDomText(e) {
    const t = e.previousSibling;
    return t && this.mapViewToDom(t) ? this.mapViewToDom(t).nextSibling : !t && e.parent && this.mapViewToDom(e.parent) ? this.mapViewToDom(e.parent).childNodes[0] : null;
  }
  /**
   * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.
   */
  focus(e) {
    const t = this.mapViewToDom(e);
    if (t && t.ownerDocument.activeElement !== t) {
      const { scrollX: i, scrollY: s } = I.window, r = [];
      Ia(t, (o) => {
        const { scrollLeft: a, scrollTop: l } = o;
        r.push([a, l]);
      }), t.focus(), Ia(t, (o) => {
        const [a, l] = r.shift();
        o.scrollLeft = a, o.scrollTop = l;
      }), I.window.scrollTo(i, s);
    }
  }
  /**
   * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.
   *
   * @param node Node to check.
   */
  isElement(e) {
    return e && e.nodeType == Node.ELEMENT_NODE;
  }
  /**
   * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.
   *
   * @param node Node to check.
   */
  isDocumentFragment(e) {
    return e && e.nodeType == Node.DOCUMENT_FRAGMENT_NODE;
  }
  /**
   * Checks if the node is an instance of the block filler for this DOM converter.
   *
   * ```ts
   * const converter = new DomConverter( viewDocument, { blockFillerMode: 'br' } );
   *
   * converter.isBlockFiller( BR_FILLER( document ) ); // true
   * converter.isBlockFiller( NBSP_FILLER( document ) ); // false
   * ```
   *
   * **Note:**: For the `'nbsp'` mode the method also checks context of a node so it cannot be a detached node.
   *
   * **Note:** A special case in the `'nbsp'` mode exists where the `<br>` in `<p><br></p>` is treated as a block filler.
   *
   * @param domNode DOM node to check.
   * @returns True if a node is considered a block filler for given mode.
   */
  isBlockFiller(e) {
    return this.blockFillerMode == "br" ? e.isEqualNode(mv) : e.tagName === "BR" && ch(e, this.blockElements) && e.parentNode.childNodes.length === 1 ? !0 : e.isEqualNode(pv) || bv(e, this.blockElements);
  }
  /**
   * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.
   *
   * @param DOM Selection instance to check.
   */
  isDomSelectionBackward(e) {
    if (e.isCollapsed)
      return !1;
    const t = this._domDocument.createRange();
    try {
      t.setStart(e.anchorNode, e.anchorOffset), t.setEnd(e.focusNode, e.focusOffset);
    } catch {
      return !1;
    }
    const i = t.collapsed;
    return t.detach(), i;
  }
  /**
   * Returns a parent {@link module:engine/view/uielement~UIElement} or {@link module:engine/view/rawelement~RawElement}
   * that hosts the provided DOM node. Returns `null` if there is no such parent.
   */
  getHostViewElement(e) {
    const t = Mu(e);
    for (t.pop(); t.length; ) {
      const i = t.pop(), s = this._domToViewMapping.get(i);
      if (s && (s.is("uiElement") || s.is("rawElement")))
        return s;
    }
    return null;
  }
  /**
   * Checks if the given selection's boundaries are at correct places.
   *
   * The following places are considered as incorrect for selection boundaries:
   *
   * * before or in the middle of an inline filler sequence,
   * * inside a DOM element which represents {@link module:engine/view/uielement~UIElement a view UI element},
   * * inside a DOM element which represents {@link module:engine/view/rawelement~RawElement a view raw element}.
   *
   * @param domSelection The DOM selection object to be checked.
   * @returns `true` if the given selection is at a correct place, `false` otherwise.
   */
  isDomSelectionCorrect(e) {
    return this._isDomSelectionPositionCorrect(e.anchorNode, e.anchorOffset) && this._isDomSelectionPositionCorrect(e.focusNode, e.focusOffset);
  }
  /**
   * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data
   * and not processed during the conversion from DOM nodes to view elements.
   *
   * This is affecting how {@link module:engine/view/domconverter~DomConverter#domToView} and
   * {@link module:engine/view/domconverter~DomConverter#domChildrenToView} process DOM nodes.
   *
   * The raw data can be later accessed by a
   * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `"$rawContent"`.
   *
   * @param pattern Pattern matching a view element whose content should
   * be treated as raw data.
   */
  registerRawContentMatcher(e) {
    this._rawContentElementMatcher.add(e);
  }
  /**
   * Returns the block {@link module:engine/view/filler filler} node based on the current {@link #blockFillerMode} setting.
   */
  _getBlockFiller() {
    switch (this.blockFillerMode) {
      case "nbsp":
        return rh(this._domDocument);
      case "markedNbsp":
        return oh(this._domDocument);
      case "br":
        return ah(this._domDocument);
    }
  }
  /**
   * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.
   *
   * @param domParent Position parent.
   * @param offset Position offset.
   * @returns `true` if given position is at a correct place for selection boundary, `false` otherwise.
   */
  _isDomSelectionPositionCorrect(e, t) {
    if (Y(e) && be(e) && t < Ne || this.isElement(e) && be(e.childNodes[t]))
      return !1;
    const i = this.mapDomToView(e);
    return !(i && (i.is("uiElement") || i.is("rawElement")));
  }
  /**
   * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so
   * it is correctly displayed in the DOM.
   *
   * Following changes are done:
   *
   * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container
   * element or if a previous text node ends with a space character,
   * * space at the end of the text node is changed to `&nbsp;` if there are two spaces at the end of a node or if next node
   * starts with a space or if it is the last text node in its container,
   * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).
   *
   * Content of {@link #preElements} is not processed.
   *
   * @param node View text node to process.
   * @returns Processed text data.
   */
  _processDataFromViewText(e) {
    let t = e.data;
    if (e.getAncestors().some((i) => this.preElements.includes(i.name)))
      return t;
    if (t.charAt(0) == " ") {
      const i = this._getTouchingInlineViewNode(e, !1);
      (i && i.is("$textProxy") && this._nodeEndsWithSpace(i) || !i) && (t = " " + t.substr(1));
    }
    if (t.charAt(t.length - 1) == " ") {
      const i = this._getTouchingInlineViewNode(e, !0), s = i && i.is("$textProxy") && i.data.charAt(0) == " ";
      (t.charAt(t.length - 2) == " " || !i || s) && (t = t.substr(0, t.length - 1) + " ");
    }
    return t.replace(/ {2}/g, "  ");
  }
  /**
   * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.
   *
   * @param  node Node to check.
   * @returns `true` if given `node` ends with space, `false` otherwise.
   */
  _nodeEndsWithSpace(e) {
    if (e.getAncestors().some((i) => this.preElements.includes(i.name)))
      return !1;
    const t = this._processDataFromViewText(e);
    return t.charAt(t.length - 1) == " ";
  }
  /**
   * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.
   *
   * Following changes are done:
   *
   * * multiple whitespaces are replaced to a single space,
   * * space at the beginning of a text node is removed if it is the first text node in its container
   * element or if the previous text node ends with a space character,
   * * space at the end of the text node is removed if there are two spaces at the end of a node or if next node
   * starts with a space or if it is the last text node in its container
   * * nbsps are converted to spaces.
   *
   * @param node DOM text node to process.
   * @returns Processed data.
   */
  _processDataFromDomText(e) {
    let t = e.data;
    if (wv(e, this.preElements))
      return Ta(e);
    t = t.replace(/[ \n\t\r]{1,}/g, " ");
    const i = this._getTouchingInlineDomNode(e, !1), s = this._getTouchingInlineDomNode(e, !0), r = this._checkShouldLeftTrimDomText(e, i), o = this._checkShouldRightTrimDomText(e, s);
    r && (t = t.replace(/^ /, "")), o && (t = t.replace(/ $/, "")), t = Ta(new Text(t)), t = t.replace(/ \u00A0/g, "  ");
    const a = s && this.isElement(s) && s.tagName != "BR", l = s && Y(s) && s.data.charAt(0) == " ";
    return (/( |\u00A0)\u00A0$/.test(t) || !s || a || l) && (t = t.replace(/\u00A0$/, " ")), (r || i && this.isElement(i) && i.tagName != "BR") && (t = t.replace(/^\u00A0/, " ")), t;
  }
  /**
   * Helper function which checks if a DOM text node, preceded by the given `prevNode` should
   * be trimmed from the left side.
   *
   * @param prevNode Either DOM text or `<br>` or one of `#inlineObjectElements`.
   */
  _checkShouldLeftTrimDomText(e, t) {
    return t ? this.isElement(t) ? t.tagName === "BR" : this._encounteredRawContentDomNodes.has(e.previousSibling) ? !1 : /[^\S\u00A0]/.test(t.data.charAt(t.data.length - 1)) : !0;
  }
  /**
   * Helper function which checks if a DOM text node, succeeded by the given `nextNode` should
   * be trimmed from the right side.
   *
   * @param nextNode Either DOM text or `<br>` or one of `#inlineObjectElements`.
   */
  _checkShouldRightTrimDomText(e, t) {
    return t ? !1 : !be(e);
  }
  /**
   * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling
   * that is contained in the same container element. If there is no such sibling, `null` is returned.
   *
   * @param node Reference node.
   * @returns Touching text node, an inline object
   * or `null` if there is no next or previous touching text node.
   */
  _getTouchingInlineViewNode(e, t) {
    const i = new Et({
      startPosition: t ? v._createAfter(e) : v._createBefore(e),
      direction: t ? "forward" : "backward"
    });
    for (const s of i) {
      if (s.item.is("element") && this.inlineObjectElements.includes(s.item.name))
        return s.item;
      if (s.item.is("containerElement"))
        return null;
      if (s.item.is("element", "br"))
        return null;
      if (s.item.is("$textProxy"))
        return s.item;
    }
    return null;
  }
  /**
   * Helper function. For the given text node, it finds the closest touching node which is either
   * a text, `<br>` or an {@link #inlineObjectElements inline object}.
   *
   * If no such node is found, `null` is returned.
   *
   * For instance, in the following DOM structure:
   *
   * ```html
   * <p>foo<b>bar</b><br>bom</p>
   * ```
   *
   * * `foo` doesn't have its previous touching inline node (`null` is returned),
   * * `foo`'s next touching inline node is `bar`
   * * `bar`'s next touching inline node is `<br>`
   *
   * This method returns text nodes and `<br>` elements because these types of nodes affect how
   * spaces in the given text node need to be converted.
   */
  _getTouchingInlineDomNode(e, t) {
    if (!e.parentNode)
      return null;
    const i = t ? "firstChild" : "lastChild", s = t ? "nextSibling" : "previousSibling";
    let r = !0, o = e;
    do
      if (!r && o[i] ? o = o[i] : o[s] ? (o = o[s], r = !1) : (o = o.parentNode, r = !0), !o || this._isBlockElement(o))
        return null;
    while (!(Y(o) || o.tagName == "BR" || this._isInlineObjectElement(o)));
    return o;
  }
  /**
   * Returns `true` if a DOM node belongs to {@link #blockElements}. `false` otherwise.
   */
  _isBlockElement(e) {
    return this.isElement(e) && this.blockElements.includes(e.tagName.toLowerCase());
  }
  /**
   * Returns `true` if a DOM node belongs to {@link #inlineObjectElements}. `false` otherwise.
   */
  _isInlineObjectElement(e) {
    return this.isElement(e) && this.inlineObjectElements.includes(e.tagName.toLowerCase());
  }
  /**
   * Creates view element basing on the node type.
   *
   * @param node DOM node to check.
   * @param options Conversion options. See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.
   */
  _createViewElement(e, t) {
    if (Xt(e))
      return new jn(this.document, "$comment");
    const i = t.keepOriginalCase ? e.tagName : e.tagName.toLowerCase();
    return new Re(this.document, i);
  }
  /**
   * Checks if view element's content should be treated as a raw data.
   *
   * @param viewElement View element to check.
   * @param options Conversion options. See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.
   */
  _isViewElementWithRawContent(e, t) {
    return t.withChildren !== !1 && !!this._rawContentElementMatcher.match(e);
  }
  /**
   * Checks whether a given element name should be renamed in a current rendering mode.
   *
   * @param elementName The name of view element.
   */
  _shouldRenameElement(e) {
    const t = e.toLowerCase();
    return this.renderingMode === "editing" && this.unsafeElements.includes(t);
  }
  /**
   * Return a <span> element with a special attribute holding the name of the original element.
   * Optionally, copy all the attributes of the original element if that element is provided.
   *
   * @param elementName The name of view element.
   * @param originalDomElement The original DOM element to copy attributes and content from.
   */
  _createReplacementDomElement(e, t) {
    const i = this._domDocument.createElement("span");
    if (i.setAttribute(Sa, e), t) {
      for (; t.firstChild; )
        i.appendChild(t.firstChild);
      for (const s of t.getAttributeNames())
        i.setAttribute(s, t.getAttribute(s));
    }
    return i;
  }
}
function wv(n, e) {
  return Mu(n).some((i) => i.tagName && e.includes(i.tagName.toLowerCase()));
}
function Ia(n, e) {
  let t = n;
  for (; t; )
    e(t), t = t.parentElement;
}
function bv(n, e) {
  return n.isEqualNode(gv) && ch(n, e) && n.parentNode.childNodes.length === 1;
}
function ch(n, e) {
  const t = n.parentNode;
  return !!t && !!t.tagName && e.includes(t.tagName.toLowerCase());
}
function Ra(n) {
  n === "script" && G("domconverter-unsafe-script-element-detected"), n === "style" && G("domconverter-unsafe-style-element-detected");
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class je extends rt() {
  /**
   * Creates an instance of the observer.
   */
  constructor(e) {
    super(), this._isEnabled = !1, this.view = e, this.document = e.document;
  }
  /**
   * The state of the observer. If it is disabled, no events will be fired.
   */
  get isEnabled() {
    return this._isEnabled;
  }
  /**
   * Enables the observer. This method is called when the observer is registered to the
   * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#forceRender rendering}
   * (all observers are {@link #disable disabled} before rendering).
   *
   * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.
   * However, a child class may not need to be disabled, so it can implement an empty method.
   *
   * @see module:engine/view/observer/observer~Observer#disable
   */
  enable() {
    this._isEnabled = !0;
  }
  /**
   * Disables the observer. This method is called before
   * {@link module:engine/view/view~View#forceRender rendering} to prevent firing events during rendering.
   *
   * @see module:engine/view/observer/observer~Observer#enable
   */
  disable() {
    this._isEnabled = !1;
  }
  /**
   * Disables and destroys the observer, among others removes event listeners created by the observer.
   */
  destroy() {
    this.disable(), this.stopListening();
  }
  /**
   * Checks whether a given DOM event should be ignored (should not be turned into a synthetic view document event).
   *
   * Currently, an event will be ignored only if its target or any of its ancestors has the `data-cke-ignore-events` attribute.
   * This attribute can be used inside the structures generated by
   * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `DowncastWriter#createUIElement()`} to ignore events
   * fired within a UI that should be excluded from CKEditor 5's realms.
   *
   * @param domTarget The DOM event target to check (usually an element, sometimes a text node and
   * potentially sometimes a document, too).
   * @returns Whether this event should be ignored by the observer.
   */
  checkShouldIgnoreEventFromTarget(e) {
    return e && e.nodeType === 3 && (e = e.parentNode), !e || e.nodeType !== 1 ? !1 : e.matches("[data-cke-ignore-events], [data-cke-ignore-events] *");
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class oi {
  /**
   * @param view The instance of the view controller.
   * @param domEvent The DOM event.
   * @param additionalData Additional properties that the instance should contain.
   */
  constructor(e, t, i) {
    this.view = e, this.document = e.document, this.domEvent = t, this.domTarget = t.target, Uc(this, i);
  }
  /**
   * The tree view element representing the target.
   */
  get target() {
    return this.view.domConverter.mapDomToView(this.domTarget);
  }
  /**
   * Prevents the native's event default action.
   */
  preventDefault() {
    this.domEvent.preventDefault();
  }
  /**
   * Stops native event propagation.
   */
  stopPropagation() {
    this.domEvent.stopPropagation();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Nt extends je {
  constructor() {
    super(...arguments), this.useCapture = !1;
  }
  /**
   * @inheritDoc
   */
  observe(e) {
    (typeof this.domEventType == "string" ? [this.domEventType] : this.domEventType).forEach((i) => {
      this.listenTo(e, i, (s, r) => {
        this.isEnabled && !this.checkShouldIgnoreEventFromTarget(r.target) && this.onDomEvent(r);
      }, { useCapture: this.useCapture });
    });
  }
  /**
   * @inheritDoc
   */
  stopObserving(e) {
    this.stopListening(e);
  }
  /**
   * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.
   *
   * @see module:utils/emittermixin~Emitter#fire
   * @param eventType The event type (name).
   * @param domEvent The DOM event.
   * @param additionalData The additional data which should extend the
   * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.
   */
  fire(e, t, i) {
    this.isEnabled && this.document.fire(e, new oi(this.view, t, i));
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class _v extends Nt {
  constructor() {
    super(...arguments), this.domEventType = ["keydown", "keyup"];
  }
  /**
   * @inheritDoc
   */
  onDomEvent(e) {
    const t = {
      keyCode: e.keyCode,
      altKey: e.altKey,
      ctrlKey: e.ctrlKey,
      shiftKey: e.shiftKey,
      metaKey: e.metaKey,
      get keystroke() {
        return si(this);
      }
    };
    this.fire(e.type, e, t);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class vv extends je {
  /**
   * Creates new FakeSelectionObserver instance.
   */
  constructor(e) {
    super(e), this._fireSelectionChangeDoneDebounced = ni((t) => {
      this.document.fire("selectionChangeDone", t);
    }, 200);
  }
  /**
   * @inheritDoc
   */
  observe() {
    const e = this.document;
    e.on("arrowKey", (t, i) => {
      e.selection.isFake && this.isEnabled && i.preventDefault();
    }, { context: "$capture" }), e.on("arrowKey", (t, i) => {
      e.selection.isFake && this.isEnabled && this._handleSelectionMove(i.keyCode);
    }, { priority: "lowest" });
  }
  /**
   * @inheritDoc
   */
  stopObserving() {
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this._fireSelectionChangeDoneDebounced.cancel();
  }
  /**
   * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be
   * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.
   *
   * This method fires {@link module:engine/view/document~Document#event:selectionChange} and
   * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of
   * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.
   */
  _handleSelectionMove(e) {
    const t = this.document.selection, i = new ht(t.getRanges(), { backward: t.isBackward, fake: !1 });
    (e == R.arrowleft || e == R.arrowup) && i.setTo(i.getFirstPosition()), (e == R.arrowright || e == R.arrowdown) && i.setTo(i.getLastPosition());
    const s = {
      oldSelection: t,
      newSelection: i,
      domSelection: null
    };
    this.document.fire("selectionChange", s), this._fireSelectionChangeDoneDebounced(s);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class uh extends je {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this._config = {
      childList: !0,
      characterData: !0,
      subtree: !0
    }, this.domConverter = e.domConverter, this.renderer = e._renderer, this._domElements = /* @__PURE__ */ new Set(), this._mutationObserver = new window.MutationObserver(this._onMutations.bind(this));
  }
  /**
   * Synchronously handles mutations and empties the queue.
   */
  flush() {
    this._onMutations(this._mutationObserver.takeRecords());
  }
  /**
   * @inheritDoc
   */
  observe(e) {
    this._domElements.add(e), this.isEnabled && this._mutationObserver.observe(e, this._config);
  }
  /**
   * @inheritDoc
   */
  stopObserving(e) {
    if (this._domElements.delete(e), this.isEnabled) {
      this._mutationObserver.disconnect();
      for (const t of this._domElements)
        this._mutationObserver.observe(t, this._config);
    }
  }
  /**
   * @inheritDoc
   */
  enable() {
    super.enable();
    for (const e of this._domElements)
      this._mutationObserver.observe(e, this._config);
  }
  /**
   * @inheritDoc
   */
  disable() {
    super.disable(), this._mutationObserver.disconnect();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this._mutationObserver.disconnect();
  }
  /**
   * Handles mutations. Mark view elements to sync and call render.
   *
   * @param domMutations Array of native mutations.
   */
  _onMutations(e) {
    if (e.length === 0)
      return;
    const t = this.domConverter, i = /* @__PURE__ */ new Set(), s = /* @__PURE__ */ new Set();
    for (const o of e) {
      const a = t.mapDomToView(o.target);
      a && (a.is("uiElement") || a.is("rawElement") || o.type === "childList" && !this._isBogusBrMutation(o) && s.add(a));
    }
    for (const o of e) {
      const a = t.mapDomToView(o.target);
      if (!(a && (a.is("uiElement") || a.is("rawElement"))) && o.type === "characterData") {
        const l = t.findCorrespondingViewText(o.target);
        l && !s.has(l.parent) ? i.add(l) : !l && be(o.target) && s.add(t.mapDomToView(o.target.parentNode));
      }
    }
    let r = !1;
    for (const o of i)
      r = !0, this.renderer.markToSync("text", o);
    for (const o of s) {
      const a = t.mapViewToDom(o), l = Array.from(o.getChildren()), c = Array.from(t.domChildrenToView(a, { withChildren: !1 }));
      Ab(l, c, yv) || (r = !0, this.renderer.markToSync("children", o));
    }
    r && this.view.forceRender();
  }
  /**
   * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.
   * Such mutations are generated while pressing space or performing native spellchecker correction
   * on the end of the block element in Firefox browser.
   *
   * @param mutation Native mutation object.
   */
  _isBogusBrMutation(e) {
    let t = null;
    return e.nextSibling === null && e.removedNodes.length === 0 && e.addedNodes.length == 1 && (t = this.domConverter.domToView(e.addedNodes[0], {
      withChildren: !1
    })), t && t.is("element", "br");
  }
}
function yv(n, e) {
  if (!Array.isArray(n))
    return n === e ? !0 : n.is("$text") && e.is("$text") ? n.data === e.data : !1;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class rr extends Nt {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this._isFocusChanging = !1, this.domEventType = ["focus", "blur"], this.useCapture = !0;
    const t = this.document;
    t.on("focus", () => {
      this._isFocusChanging = !0, this._renderTimeoutId = setTimeout(() => {
        this.flush(), e.change(() => {
        });
      }, 50);
    }), t.on("blur", (i, s) => {
      const r = t.selection.editableElement;
      (r === null || r === s.target) && (t.isFocused = !1, this._isFocusChanging = !1, e.change(() => {
      }));
    });
  }
  /**
   * Finishes setting the document focus state.
   */
  flush() {
    this._isFocusChanging && (this._isFocusChanging = !1, this.document.isFocused = !0);
  }
  /**
   * @inheritDoc
   */
  onDomEvent(e) {
    this.fire(e.type, e);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    this._renderTimeoutId && clearTimeout(this._renderTimeoutId), super.destroy();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class kv extends je {
  constructor(e) {
    super(e), this.mutationObserver = e.getObserver(uh), this.focusObserver = e.getObserver(rr), this.selection = this.document.selection, this.domConverter = e.domConverter, this._documents = /* @__PURE__ */ new WeakSet(), this._fireSelectionChangeDoneDebounced = ni((t) => {
      this.document.fire("selectionChangeDone", t);
    }, 200), this._clearInfiniteLoopInterval = setInterval(() => this._clearInfiniteLoop(), 1e3), this._documentIsSelectingInactivityTimeoutDebounced = ni(() => this.document.isSelecting = !1, 5e3), this._loopbackCounter = 0;
  }
  /**
   * @inheritDoc
   */
  observe(e) {
    const t = e.ownerDocument, i = () => {
      this.document.isSelecting = !0, this._documentIsSelectingInactivityTimeoutDebounced();
    }, s = () => {
      this.document.isSelecting && (this._handleSelectionChange(null, t), this.document.isSelecting = !1, this._documentIsSelectingInactivityTimeoutDebounced.cancel());
    };
    this.listenTo(e, "selectstart", i, { priority: "highest" }), this.listenTo(e, "keydown", s, { priority: "highest", useCapture: !0 }), this.listenTo(e, "keyup", s, { priority: "highest", useCapture: !0 }), !this._documents.has(t) && (this.listenTo(t, "mouseup", s, { priority: "highest", useCapture: !0 }), this.listenTo(t, "selectionchange", (r, o) => {
      this.document.isComposing && !S.isAndroid || (this._handleSelectionChange(o, t), this._documentIsSelectingInactivityTimeoutDebounced());
    }), this._documents.add(t));
  }
  /**
   * @inheritDoc
   */
  stopObserving(e) {
    this.stopListening(e);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), clearInterval(this._clearInfiniteLoopInterval), this._fireSelectionChangeDoneDebounced.cancel(), this._documentIsSelectingInactivityTimeoutDebounced.cancel();
  }
  /* istanbul ignore next -- @preserve */
  _reportInfiniteLoop() {
  }
  /**
   * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if
   * a selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change
   * and {@link module:engine/view/document~Document#event:selectionChangeDone} when a selection stop changing.
   *
   * @param domEvent DOM event.
   * @param domDocument DOM document.
   */
  _handleSelectionChange(e, t) {
    if (!this.isEnabled)
      return;
    const i = t.defaultView.getSelection();
    if (this.checkShouldIgnoreEventFromTarget(i.anchorNode))
      return;
    this.mutationObserver.flush();
    const s = this.domConverter.domSelectionToView(i);
    if (s.rangeCount == 0) {
      this.view.hasDomSelection = !1;
      return;
    }
    if (this.view.hasDomSelection = !0, !(this.selection.isEqual(s) && this.domConverter.isDomSelectionCorrect(i))) {
      if (++this._loopbackCounter > 60) {
        this._reportInfiniteLoop();
        return;
      }
      if (this.focusObserver.flush(), this.selection.isSimilar(s))
        this.view.forceRender();
      else {
        const r = {
          oldSelection: this.selection,
          newSelection: s,
          domSelection: i
        };
        this.document.fire("selectionChange", r), this._fireSelectionChangeDoneDebounced(r);
      }
    }
  }
  /**
   * Clears `SelectionObserver` internal properties connected with preventing infinite loop.
   */
  _clearInfiniteLoop() {
    this._loopbackCounter = 0;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Cv extends Nt {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.domEventType = ["compositionstart", "compositionupdate", "compositionend"];
    const t = this.document;
    t.on("compositionstart", () => {
      t.isComposing = !0;
    }, { priority: "low" }), t.on("compositionend", () => {
      t.isComposing = !1;
    }, { priority: "low" });
  }
  /**
   * @inheritDoc
   */
  onDomEvent(e) {
    this.fire(e.type, e, {
      data: e.data
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class hh {
  /**
   * @param nativeDataTransfer The native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.
   * @param options.cacheFiles Whether `files` list should be initialized in the constructor.
   */
  constructor(e, t = {}) {
    this._files = t.cacheFiles ? Va(e) : null, this._native = e;
  }
  /**
   * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.
   */
  get files() {
    return this._files || (this._files = Va(this._native)), this._files;
  }
  /**
   * Returns an array of available native content types.
   */
  get types() {
    return this._native.types;
  }
  /**
   * Gets the data from the data transfer by its MIME type.
   *
   * ```ts
   * dataTransfer.getData( 'text/plain' );
   * ```
   *
   * @param type The MIME type. E.g. `text/html` or `text/plain`.
   */
  getData(e) {
    return this._native.getData(e);
  }
  /**
   * Sets the data in the data transfer.
   *
   * @param type The MIME type. E.g. `text/html` or `text/plain`.
   */
  setData(e, t) {
    this._native.setData(e, t);
  }
  /**
   * The effect that is allowed for a drag operation.
   */
  set effectAllowed(e) {
    this._native.effectAllowed = e;
  }
  get effectAllowed() {
    return this._native.effectAllowed;
  }
  /**
   * The actual drop effect.
   */
  set dropEffect(e) {
    this._native.dropEffect = e;
  }
  get dropEffect() {
    return this._native.dropEffect;
  }
  /**
   * Set a preview image of the dragged content.
   */
  setDragImage(e, t, i) {
    this._native.setDragImage(e, t, i);
  }
  /**
   * Whether the dragging operation was canceled.
   */
  get isCanceled() {
    return this._native.dropEffect == "none" || !!this._native.mozUserCancelled;
  }
}
function Va(n) {
  const e = Array.from(n.files || []), t = Array.from(n.items || []);
  return e.length ? e : t.filter((i) => i.kind === "file").map((i) => i.getAsFile());
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Av extends Nt {
  constructor() {
    super(...arguments), this.domEventType = "beforeinput";
  }
  /**
   * @inheritDoc
   */
  onDomEvent(e) {
    const t = e.getTargetRanges(), i = this.view, s = i.document;
    let r = null, o = null, a = [];
    if (e.dataTransfer && (r = new hh(e.dataTransfer)), e.data !== null ? o = e.data : r && (o = r.getData("text/plain")), s.selection.isFake)
      a = Array.from(s.selection.getRanges());
    else if (t.length)
      a = t.map((l) => {
        const c = i.domConverter.domPositionToView(l.startContainer, l.startOffset), u = i.domConverter.domPositionToView(l.endContainer, l.endOffset);
        if (c)
          return i.createRange(c, u);
        if (u)
          return i.createRange(u);
      }).filter((l) => !!l);
    else if (S.isAndroid) {
      const l = e.target.ownerDocument.defaultView.getSelection();
      a = Array.from(i.domConverter.domSelectionToView(l).getRanges());
    }
    if (S.isAndroid && e.inputType == "insertCompositionText" && o && o.endsWith(`
`)) {
      this.fire(e.type, e, {
        inputType: "insertParagraph",
        targetRanges: [i.createRange(a[0].end)]
      });
      return;
    }
    if (e.inputType == "insertText" && o && o.includes(`
`)) {
      const l = o.split(/\n{1,2}/g);
      let c = a;
      for (let u = 0; u < l.length; u++) {
        const h = l[u];
        h != "" && (this.fire(e.type, e, {
          data: h,
          dataTransfer: r,
          targetRanges: c,
          inputType: e.inputType,
          isComposing: e.isComposing
        }), c = [s.selection.getFirstRange()]), u + 1 < l.length && (this.fire(e.type, e, {
          inputType: "insertParagraph",
          targetRanges: c
        }), c = [s.selection.getFirstRange()]);
      }
      return;
    }
    this.fire(e.type, e, {
      data: o,
      dataTransfer: r,
      targetRanges: a,
      inputType: e.inputType,
      isComposing: e.isComposing
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ev extends je {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.document.on("keydown", (t, i) => {
      if (this.isEnabled && u_(i.keyCode)) {
        const s = new pi(this.document, "arrowKey", this.document.selection.getFirstRange());
        this.document.fire(s, i), s.stop.called && t.stop();
      }
    });
  }
  /**
   * @inheritDoc
   */
  observe() {
  }
  /**
   * @inheritDoc
   */
  stopObserving() {
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Tv extends je {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = this.document;
    t.on("keydown", (i, s) => {
      if (!this.isEnabled || s.keyCode != R.tab || s.ctrlKey)
        return;
      const r = new pi(t, "tab", t.selection.getFirstRange());
      t.fire(r, s), r.stop.called && i.stop();
    });
  }
  /**
   * @inheritDoc
   */
  observe() {
  }
  /**
   * @inheritDoc
   */
  stopObserving() {
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let Pv = class extends H() {
  /**
   * @param stylesProcessor The styles processor instance.
   */
  constructor(e) {
    super(), this.domRoots = /* @__PURE__ */ new Map(), this._initialDomRootAttributes = /* @__PURE__ */ new WeakMap(), this._observers = /* @__PURE__ */ new Map(), this._ongoingChange = !1, this._postFixersInProgress = !1, this._renderingDisabled = !1, this._hasChangedSinceTheLastRendering = !1, this.document = new th(e), this.domConverter = new lh(this.document), this.set("isRenderingInProgress", !1), this.set("hasDomSelection", !1), this._renderer = new ov(this.domConverter, this.document.selection), this._renderer.bind("isFocused", "isSelecting", "isComposing").to(this.document, "isFocused", "isSelecting", "isComposing"), this._writer = new nh(this.document), this.addObserver(uh), this.addObserver(rr), this.addObserver(kv), this.addObserver(_v), this.addObserver(vv), this.addObserver(Cv), this.addObserver(Ev), this.addObserver(Av), this.addObserver(Tv), sv(this), Y_(this), this.on("render", () => {
      this._render(), this.document.fire("layoutChanged"), this._hasChangedSinceTheLastRendering = !1;
    }), this.listenTo(this.document.selection, "change", () => {
      this._hasChangedSinceTheLastRendering = !0;
    }), this.listenTo(this.document, "change:isFocused", () => {
      this._hasChangedSinceTheLastRendering = !0;
    });
  }
  /**
   * Attaches a DOM root element to the view element and enable all observers on that element.
   * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized
   * with the view what means that all child nodes will be removed and replaced with content of the view root.
   *
   * This method also will change view element name as the same as tag name of given dom root.
   * Name is always transformed to lower case.
   *
   * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.
   *
   * @param domRoot DOM root element.
   * @param name Name of the root.
   */
  attachDomRoot(e, t = "main") {
    const i = this.document.getRoot(t);
    i._name = e.tagName.toLowerCase();
    const s = {};
    for (const { name: o, value: a } of Array.from(e.attributes))
      s[o] = a, o === "class" ? this._writer.addClass(a.split(" "), i) : this._writer.setAttribute(o, a, i);
    this._initialDomRootAttributes.set(e, s);
    const r = () => {
      this._writer.setAttribute("contenteditable", (!i.isReadOnly).toString(), i), i.isReadOnly ? this._writer.addClass("ck-read-only", i) : this._writer.removeClass("ck-read-only", i);
    };
    r(), this.domRoots.set(t, e), this.domConverter.bindElements(e, i), this._renderer.markToSync("children", i), this._renderer.markToSync("attributes", i), this._renderer.domDocuments.add(e.ownerDocument), i.on("change:children", (o, a) => this._renderer.markToSync("children", a)), i.on("change:attributes", (o, a) => this._renderer.markToSync("attributes", a)), i.on("change:text", (o, a) => this._renderer.markToSync("text", a)), i.on("change:isReadOnly", () => this.change(r)), i.on("change", () => {
      this._hasChangedSinceTheLastRendering = !0;
    });
    for (const o of this._observers.values())
      o.observe(e, t);
  }
  /**
   * Detaches a DOM root element from the view element and restores its attributes to the state before
   * {@link #attachDomRoot `attachDomRoot()`}.
   *
   * @param name Name of the root to detach.
   */
  detachDomRoot(e) {
    const t = this.domRoots.get(e);
    Array.from(t.attributes).forEach(({ name: s }) => t.removeAttribute(s));
    const i = this._initialDomRootAttributes.get(t);
    for (const s in i)
      t.setAttribute(s, i[s]);
    this.domRoots.delete(e), this.domConverter.unbindDomElement(t);
    for (const s of this._observers.values())
      s.stopObserving(t);
  }
  /**
   * Gets DOM root element.
   *
   * @param name  Name of the root.
   * @returns DOM root element instance.
   */
  getDomRoot(e = "main") {
    return this.domRoots.get(e);
  }
  /**
   * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it
   * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future
   * {@link #domRoots DOM roots}.
   *
   * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only
   * when registered for the first time. This means that features and other components can register a single observer
   * multiple times without caring whether it has been already added or not.
   *
   * @param ObserverConstructor The constructor of an observer to add.
   * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.
   * @returns Added observer instance.
   */
  addObserver(e) {
    let t = this._observers.get(e);
    if (t)
      return t;
    t = new e(this), this._observers.set(e, t);
    for (const [i, s] of this.domRoots)
      t.observe(s, i);
    return t.enable(), t;
  }
  /**
   * Returns observer of the given type or `undefined` if such observer has not been added yet.
   *
   * @param ObserverConstructor The constructor of an observer to get.
   * @returns Observer instance or undefined.
   */
  getObserver(e) {
    return this._observers.get(e);
  }
  /**
   * Disables all added observers.
   */
  disableObservers() {
    for (const e of this._observers.values())
      e.disable();
  }
  /**
   * Enables all added observers.
   */
  enableObservers() {
    for (const e of this._observers.values())
      e.enable();
  }
  /**
   * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the
   * caret, **if not already visible to the user**.
   *
   * **Note**: Calling this method fires the {@link module:engine/view/view~ViewScrollToTheSelectionEvent} event that
   * allows custom behaviors.
   *
   * @param options Additional configuration of the scrolling behavior.
   * @param options.viewportOffset A distance between the DOM selection and the viewport boundary to be maintained
   * while scrolling to the selection (default is 20px). Setting this value to `0` will reveal the selection precisely at
   * the viewport boundary.
   * @param options.ancestorOffset A distance between the DOM selection and scrollable DOM root ancestor(s) to be maintained
   * while scrolling to the selection (default is 20px). Setting this value to `0` will reveal the selection precisely at
   * the scrollable ancestor(s) boundary.
   * @param options.alignToTop When set `true`, the DOM selection will be aligned to the top of the viewport if not already visible
   * (see `forceScroll` to learn more).
   * @param options.forceScroll When set `true`, the DOM selection will be aligned to the top of the viewport and scrollable ancestors
   * whether it is already visible or not. This option will only work when `alignToTop` is `true`.
   */
  scrollToTheSelection({ alignToTop: e, forceScroll: t, viewportOffset: i = 20, ancestorOffset: s = 20 } = {}) {
    const r = this.document.selection.getFirstRange();
    if (!r)
      return;
    const o = st({ alignToTop: e, forceScroll: t, viewportOffset: i, ancestorOffset: s });
    typeof i == "number" && (i = {
      top: i,
      bottom: i,
      left: i,
      right: i
    });
    const a = {
      target: this.domConverter.viewRangeToDom(r),
      viewportOffset: i,
      ancestorOffset: s,
      alignToTop: e,
      forceScroll: t
    };
    this.fire("scrollToTheSelection", a, o), n_(a);
  }
  /**
   * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}
   * that is currently having selection inside.
   */
  focus() {
    if (!this.document.isFocused) {
      const e = this.document.selection.editableElement;
      e && (this.domConverter.focus(e), this.forceRender());
    }
  }
  /**
   * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.
   * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed
   * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows
   * to nest calls one inside another and still performs a single rendering after all those changes are made.
   * It also returns the return value of its callback.
   *
   * ```ts
   * const text = view.change( writer => {
   * 	const newText = writer.createText( 'foo' );
   * 	writer.insert( position1, newText );
   *
   * 	view.change( writer => {
   * 		writer.insert( position2, writer.createText( 'bar' ) );
   * 	} );
   *
   * 	writer.remove( range );
   *
   * 	return newText;
   * } );
   * ```
   *
   * When the outermost change block is done and rendering to the DOM is over the
   * {@link module:engine/view/view~View#event:render `View#render`} event is fired.
   *
   * This method throws a `applying-view-changes-on-rendering` error when
   * the change block is used after rendering to the DOM has started.
   *
   * @param callback Callback function which may modify the view.
   * @returns Value returned by the callback.
   */
  change(e) {
    if (this.isRenderingInProgress || this._postFixersInProgress)
      throw new f("cannot-change-view-tree", this);
    try {
      if (this._ongoingChange)
        return e(this._writer);
      this._ongoingChange = !0;
      const t = e(this._writer);
      return this._ongoingChange = !1, !this._renderingDisabled && this._hasChangedSinceTheLastRendering && (this._postFixersInProgress = !0, this.document._callPostFixers(this._writer), this._postFixersInProgress = !1, this.fire("render")), t;
    } catch (t) {
      /* istanbul ignore next -- @preserve */
      f.rethrowUnexpectedError(t, this);
    }
  }
  /**
   * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are
   * currently in progress, rendering will start after all {@link #change change blocks} are processed.
   *
   * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}
   * block and the view will automatically check whether it needs to render DOM or not.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when
   * trying to re-render when rendering to DOM has already started.
   */
  forceRender() {
    this._hasChangedSinceTheLastRendering = !0, this.getObserver(rr).flush(), this.change(() => {
    });
  }
  /**
   * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.
   */
  destroy() {
    for (const e of this._observers.values())
      e.destroy();
    this.document.destroy(), this.stopListening();
  }
  /**
   * Creates position at the given location. The location can be specified as:
   *
   * * a {@link module:engine/view/position~Position position},
   * * parent element and offset (offset defaults to `0`),
   * * parent element and `'end'` (sets position at the end of that element),
   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).
   *
   * This method is a shortcut to other constructors such as:
   *
   * * {@link #createPositionBefore},
   * * {@link #createPositionAfter},
   *
   * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.
   */
  createPositionAt(e, t) {
    return v._createAt(e, t);
  }
  /**
   * Creates a new position after given view item.
   *
   * @param item View item after which the position should be located.
   */
  createPositionAfter(e) {
    return v._createAfter(e);
  }
  /**
   * Creates a new position before given view item.
   *
   * @param item View item before which the position should be located.
   */
  createPositionBefore(e) {
    return v._createBefore(e);
  }
  /**
   * Creates a range spanning from `start` position to `end` position.
   *
   * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.
   *
   * @param start Start position.
   * @param end End position. If not set, range will be collapsed at `start` position.
   */
  createRange(e, t) {
    return new P(e, t);
  }
  /**
   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.
   */
  createRangeOn(e) {
    return P._createOn(e);
  }
  /**
   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of
   * that element and ends after the last child of that element.
   *
   * @param element Element which is a parent for the range.
   */
  createRangeIn(e) {
    return P._createIn(e);
  }
  createSelection(...e) {
    return new ht(...e);
  }
  /**
   * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.
   * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.
   *
   * @internal
   * @param flag A flag indicates whether the rendering should be disabled.
   */
  _disableRendering(e) {
    this._renderingDisabled = e, e == !1 && this.change(() => {
    });
  }
  /**
   * Renders all changes. In order to avoid triggering the observers (e.g. selection) all observers are disabled
   * before rendering and re-enabled after that.
   */
  _render() {
    this.isRenderingInProgress = !0, this.disableObservers(), this._renderer.render(), this.enableObservers(), this.isRenderingInProgress = !1;
  }
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class gt {
  /* istanbul ignore next -- @preserve */
  is() {
    throw new Error("is() method is abstract");
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let Lt = class extends gt {
  /**
   * Creates a model node.
   *
   * This is an abstract class, so this constructor should not be used directly.
   *
   * @param attrs Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.
   */
  constructor(e) {
    super(), this.parent = null, this._attrs = tt(e);
  }
  /**
   * {@link module:engine/model/document~Document Document} that owns this root element.
   */
  get document() {
    return null;
  }
  /**
   * Index of this node in its parent or `null` if the node has no parent.
   *
   * Accessing this property throws an error if this node's parent element does not contain it.
   * This means that model tree got broken.
   */
  get index() {
    let e;
    if (!this.parent)
      return null;
    if ((e = this.parent.getChildIndex(this)) === null)
      throw new f("model-node-not-found-in-parent", this);
    return e;
  }
  /**
   * Offset at which this node starts in its parent. It is equal to the sum of {@link #offsetSize offsetSize}
   * of all its previous siblings. Equals to `null` if node has no parent.
   *
   * Accessing this property throws an error if this node's parent element does not contain it.
   * This means that model tree got broken.
   */
  get startOffset() {
    let e;
    if (!this.parent)
      return null;
    if ((e = this.parent.getChildStartOffset(this)) === null)
      throw new f("model-node-not-found-in-parent", this);
    return e;
  }
  /**
   * Offset size of this node. Represents how much "offset space" is occupied by the node in it's parent.
   * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position
   * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more
   * than one entity, i.e. {@link module:engine/model/text~Text text node}.
   */
  get offsetSize() {
    return 1;
  }
  /**
   * Offset at which this node ends in it's parent. It is equal to the sum of this node's
   * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.
   * Equals to `null` if the node has no parent.
   */
  get endOffset() {
    return this.parent ? this.startOffset + this.offsetSize : null;
  }
  /**
   * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.
   */
  get nextSibling() {
    const e = this.index;
    return e !== null && this.parent.getChild(e + 1) || null;
  }
  /**
   * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.
   */
  get previousSibling() {
    const e = this.index;
    return e !== null && this.parent.getChild(e - 1) || null;
  }
  /**
   * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part
   * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.
   */
  get root() {
    let e = this;
    for (; e.parent; )
      e = e.parent;
    return e;
  }
  /**
   * Returns `true` if the node is inside a document root that is attached to the document.
   */
  isAttached() {
    return this.parent === null ? !1 : this.root.isAttached();
  }
  /**
   * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,
   * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to
   * create {@link module:engine/model/position~Position Position} instance.
   *
   * ```ts
   * const abc = new Text( 'abc' );
   * const foo = new Text( 'foo' );
   * const h1 = new Element( 'h1', null, new Text( 'header' ) );
   * const p = new Element( 'p', null, [ abc, foo ] );
   * const div = new Element( 'div', null, [ h1, p ] );
   * foo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.
   * h1.getPath(); // Returns [ 0 ].
   * div.getPath(); // Returns [].
   * ```
   */
  getPath() {
    const e = [];
    let t = this;
    for (; t.parent; )
      e.unshift(t.startOffset), t = t.parent;
    return e;
  }
  /**
   * Returns ancestors array of this node.
   *
   * @param options Options object.
   * @param options.includeSelf When set to `true` this node will be also included in parent's array.
   * @param options.parentFirst When set to `true`, array will be sorted from node's parent to root element,
   * otherwise root element will be the first item in the array.
   * @returns Array with ancestors.
   */
  getAncestors(e = {}) {
    const t = [];
    let i = e.includeSelf ? this : this.parent;
    for (; i; )
      t[e.parentFirst ? "push" : "unshift"](i), i = i.parent;
    return t;
  }
  /**
   * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}
   * which is a common ancestor of both nodes.
   *
   * @param node The second node.
   * @param options Options object.
   * @param options.includeSelf When set to `true` both nodes will be considered "ancestors" too.
   * Which means that if e.g. node A is inside B, then their common ancestor will be B.
   */
  getCommonAncestor(e, t = {}) {
    const i = this.getAncestors(t), s = e.getAncestors(t);
    let r = 0;
    for (; i[r] == s[r] && i[r]; )
      r++;
    return r === 0 ? null : i[r - 1];
  }
  /**
   * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,
   * in different {@link module:engine/model/documentfragment~DocumentFragment}s).
   *
   * @param node Node to compare with.
   */
  isBefore(e) {
    if (this == e || this.root !== e.root)
      return !1;
    const t = this.getPath(), i = e.getPath(), s = ce(t, i);
    switch (s) {
      case "prefix":
        return !0;
      case "extension":
        return !1;
      default:
        return t[s] < i[s];
    }
  }
  /**
   * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,
   * in different {@link module:engine/model/documentfragment~DocumentFragment}s).
   *
   * @param node Node to compare with.
   */
  isAfter(e) {
    return this == e || this.root !== e.root ? !1 : !this.isBefore(e);
  }
  /**
   * Checks if the node has an attribute with given key.
   *
   * @param key Key of attribute to check.
   * @returns `true` if attribute with given key is set on node, `false` otherwise.
   */
  hasAttribute(e) {
    return this._attrs.has(e);
  }
  /**
   * Gets an attribute value for given key or `undefined` if that attribute is not set on node.
   *
   * @param key Key of attribute to look for.
   * @returns Attribute value or `undefined`.
   */
  getAttribute(e) {
    return this._attrs.get(e);
  }
  /**
   * Returns iterator that iterates over this node's attributes.
   *
   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.
   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.
   */
  getAttributes() {
    return this._attrs.entries();
  }
  /**
   * Returns iterator that iterates over this node's attribute keys.
   */
  getAttributeKeys() {
    return this._attrs.keys();
  }
  /**
   * Converts `Node` to plain object and returns it.
   *
   * @returns `Node` converted to plain object.
   */
  toJSON() {
    const e = {};
    return this._attrs.size && (e.attributes = Array.from(this._attrs).reduce((t, i) => (t[i[0]] = i[1], t), {})), e;
  }
  /**
   * Creates a copy of this node, that is a node with exactly same attributes, and returns it.
   *
   * @internal
   * @returns Node with same attributes as this node.
   */
  _clone(e) {
    return new this.constructor(this._attrs);
  }
  /**
   * Removes this node from it's parent.
   *
   * @internal
   * @see module:engine/model/writer~Writer#remove
   */
  _remove() {
    this.parent._removeChildren(this.index);
  }
  /**
   * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.
   *
   * @see module:engine/model/writer~Writer#setAttribute
   * @internal
   * @param key Key of attribute to set.
   * @param value Attribute value.
   */
  _setAttribute(e, t) {
    this._attrs.set(e, t);
  }
  /**
   * Removes all attributes from the node and sets given attributes.
   *
   * @see module:engine/model/writer~Writer#setAttributes
   * @internal
   * @param attrs Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.
   */
  _setAttributesTo(e) {
    this._attrs = tt(e);
  }
  /**
   * Removes an attribute with given key from the node.
   *
   * @see module:engine/model/writer~Writer#removeAttribute
   * @internal
   * @param key Key of attribute to remove.
   * @returns `true` if the attribute was set on the element, `false` otherwise.
   */
  _removeAttribute(e) {
    return this._attrs.delete(e);
  }
  /**
   * Removes all attributes from the node.
   *
   * @see module:engine/model/writer~Writer#clearAttributes
   * @internal
   */
  _clearAttributes() {
    this._attrs.clear();
  }
};
Lt.prototype.is = function(n) {
  return n === "node" || n === "model:node";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ti {
  /**
   * Creates an empty node list.
   *
   * @internal
   * @param nodes Nodes contained in this node list.
   */
  constructor(e) {
    this._nodes = [], e && this._insertNodes(0, e);
  }
  /**
   * Iterable interface.
   *
   * Iterates over all nodes contained inside this node list.
   */
  [Symbol.iterator]() {
    return this._nodes[Symbol.iterator]();
  }
  /**
   * Number of nodes contained inside this node list.
   */
  get length() {
    return this._nodes.length;
  }
  /**
   * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.
   */
  get maxOffset() {
    return this._nodes.reduce((e, t) => e + t.offsetSize, 0);
  }
  /**
   * Gets the node at the given index. Returns `null` if incorrect index was passed.
   */
  getNode(e) {
    return this._nodes[e] || null;
  }
  /**
   * Returns an index of the given node. Returns `null` if given node is not inside this node list.
   */
  getNodeIndex(e) {
    const t = this._nodes.indexOf(e);
    return t == -1 ? null : t;
  }
  /**
   * Returns the starting offset of given node. Starting offset is equal to the sum of
   * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.
   */
  getNodeStartOffset(e) {
    const t = this.getNodeIndex(e);
    return t === null ? null : this._nodes.slice(0, t).reduce((i, s) => i + s.offsetSize, 0);
  }
  /**
   * Converts index to offset in node list.
   *
   * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}
   * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.
   */
  indexToOffset(e) {
    if (e == this._nodes.length)
      return this.maxOffset;
    const t = this._nodes[e];
    if (!t)
      throw new f("model-nodelist-index-out-of-bounds", this);
    return this.getNodeStartOffset(t);
  }
  /**
   * Converts offset in node list to index.
   *
   * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}
   * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.
   */
  offsetToIndex(e) {
    let t = 0;
    for (const i of this._nodes) {
      if (e >= t && e < t + i.offsetSize)
        return this.getNodeIndex(i);
      t += i.offsetSize;
    }
    if (t != e)
      throw new f("model-nodelist-offset-out-of-bounds", this, {
        offset: e,
        nodeList: this
      });
    return this.length;
  }
  /**
   * Inserts given nodes at given index.
   *
   * @internal
   * @param index Index at which nodes should be inserted.
   * @param nodes Nodes to be inserted.
   */
  _insertNodes(e, t) {
    for (const i of t)
      if (!(i instanceof Lt))
        throw new f("model-nodelist-insertnodes-not-node", this);
    this._nodes = C_(this._nodes, Array.from(t), e, 0);
  }
  /**
   * Removes one or more nodes starting at the given index.
   *
   * @internal
   * @param indexStart Index of the first node to remove.
   * @param howMany Number of nodes to remove.
   * @returns Array containing removed nodes.
   */
  _removeNodes(e, t = 1) {
    return this._nodes.splice(e, t);
  }
  /**
   * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes
   * are also converted to their plain object representation.
   *
   * @returns `NodeList` instance converted to `Array`.
   */
  toJSON() {
    return this._nodes.map((e) => e.toJSON());
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let j = class or extends Lt {
  /**
   * Creates a text node.
   *
   * **Note:** Constructor of this class shouldn't be used directly in the code.
   * Use the {@link module:engine/model/writer~Writer#createText} method instead.
   *
   * @internal
   * @param data Node's text.
   * @param attrs Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.
   */
  constructor(e, t) {
    super(t), this._data = e || "";
  }
  /**
   * @inheritDoc
   */
  get offsetSize() {
    return this.data.length;
  }
  /**
   * Returns a text data contained in the node.
   */
  get data() {
    return this._data;
  }
  /**
   * Converts `Text` instance to plain object and returns it.
   *
   * @returns`Text` instance converted to plain object.
   */
  toJSON() {
    const e = super.toJSON();
    return e.data = this.data, e;
  }
  /**
   * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.
   *
   * @internal
   * @returns `Text` instance created using given plain object.
   */
  _clone() {
    return new or(this.data, this.getAttributes());
  }
  /**
   * Creates a `Text` instance from given plain object (i.e. parsed JSON string).
   *
   * @param json Plain object to be converted to `Text`.
   * @returns `Text` instance created using given plain object.
   */
  static fromJSON(e) {
    return new or(e.data, e.attributes);
  }
};
j.prototype.is = function(n) {
  return n === "$text" || n === "model:$text" || // This are legacy values kept for backward compatibility.
  n === "text" || n === "model:text" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "node" || n === "model:node";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ie extends gt {
  /**
   * Creates a text proxy.
   *
   * @internal
   * @param textNode Text node which part is represented by this text proxy.
   * @param offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy
   * starts.
   * @param length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.
   */
  constructor(e, t, i) {
    if (super(), this.textNode = e, t < 0 || t > e.offsetSize)
      throw new f("model-textproxy-wrong-offsetintext", this);
    if (i < 0 || t + i > e.offsetSize)
      throw new f("model-textproxy-wrong-length", this);
    this.data = e.data.substring(t, t + i), this.offsetInText = t;
  }
  /**
   * Offset at which this text proxy starts in it's parent.
   *
   * @see module:engine/model/node~Node#startOffset
   */
  get startOffset() {
    return this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;
  }
  /**
   * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.
   *
   * @see module:engine/model/node~Node#offsetSize
   */
  get offsetSize() {
    return this.data.length;
  }
  /**
   * Offset at which this text proxy ends in it's parent.
   *
   * @see module:engine/model/node~Node#endOffset
   */
  get endOffset() {
    return this.startOffset !== null ? this.startOffset + this.offsetSize : null;
  }
  /**
   * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}
   * (`true`) or the whole text node (`false`).
   *
   * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}
   * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to
   * text node size.
   */
  get isPartial() {
    return this.offsetSize !== this.textNode.offsetSize;
  }
  /**
   * Parent of this text proxy, which is same as parent of text node represented by this text proxy.
   */
  get parent() {
    return this.textNode.parent;
  }
  /**
   * Root of this text proxy, which is same as root of text node represented by this text proxy.
   */
  get root() {
    return this.textNode.root;
  }
  /**
   * Gets path to this text proxy.
   *
   * @see module:engine/model/node~Node#getPath
   */
  getPath() {
    const e = this.textNode.getPath();
    return e.length > 0 && (e[e.length - 1] += this.offsetInText), e;
  }
  /**
   * Returns ancestors array of this text proxy.
   *
   * @param options Options object.
   * @param options.includeSelf When set to `true` this text proxy will be also included in parent's array.
   * @param options.parentFirst When set to `true`, array will be sorted from text proxy parent to root element,
   * otherwise root element will be the first item in the array.
   * @returns Array with ancestors.
   */
  getAncestors(e = {}) {
    const t = [];
    let i = e.includeSelf ? this : this.parent;
    for (; i; )
      t[e.parentFirst ? "push" : "unshift"](i), i = i.parent;
    return t;
  }
  /**
   * Checks if this text proxy has an attribute for given key.
   *
   * @param key Key of attribute to check.
   * @returns `true` if attribute with given key is set on text proxy, `false` otherwise.
   */
  hasAttribute(e) {
    return this.textNode.hasAttribute(e);
  }
  /**
   * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.
   *
   * @param key Key of attribute to look for.
   * @returns Attribute value or `undefined`.
   */
  getAttribute(e) {
    return this.textNode.getAttribute(e);
  }
  /**
   * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two
   * items. First one is attribute key and second is attribute value.
   *
   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.
   */
  getAttributes() {
    return this.textNode.getAttributes();
  }
  /**
   * Returns iterator that iterates over this node's attribute keys.
   */
  getAttributeKeys() {
    return this.textNode.getAttributeKeys();
  }
}
Ie.prototype.is = function(n) {
  return n === "$textProxy" || n === "model:$textProxy" || // This are legacy values kept for backward compatibility.
  n === "textProxy" || n === "model:textProxy";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class F extends Lt {
  /**
   * Creates a model element.
   *
   * **Note:** Constructor of this class shouldn't be used directly in the code.
   * Use the {@link module:engine/model/writer~Writer#createElement} method instead.
   *
   * @internal
   * @param name Element's name.
   * @param attrs Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.
   * @param children One or more nodes to be inserted as children of created element.
   */
  constructor(e, t, i) {
    super(t), this._children = new Ti(), this.name = e, i && this._insertChild(0, i);
  }
  /**
   * Number of this element's children.
   */
  get childCount() {
    return this._children.length;
  }
  /**
   * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.
   */
  get maxOffset() {
    return this._children.maxOffset;
  }
  /**
   * Is `true` if there are no nodes inside this element, `false` otherwise.
   */
  get isEmpty() {
    return this.childCount === 0;
  }
  /**
   * Gets the child at the given index.
   */
  getChild(e) {
    return this._children.getNode(e);
  }
  /**
   * Returns an iterator that iterates over all of this element's children.
   */
  getChildren() {
    return this._children[Symbol.iterator]();
  }
  /**
   * Returns an index of the given child node. Returns `null` if given node is not a child of this element.
   *
   * @param node Child node to look for.
   * @returns Child node's index in this element.
   */
  getChildIndex(e) {
    return this._children.getNodeIndex(e);
  }
  /**
   * Returns the starting offset of given child. Starting offset is equal to the sum of
   * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if
   * given node is not a child of this element.
   *
   * @param node Child node to look for.
   * @returns Child node's starting offset.
   */
  getChildStartOffset(e) {
    return this._children.getNodeStartOffset(e);
  }
  /**
   * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is
   * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.
   *
   * ```ts
   * const textNode = new Text( 'foo' );
   * const pElement = new Element( 'p' );
   * const divElement = new Element( [ textNode, pElement ] );
   * divElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.
   * divElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.
   * divElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.
   * divElement.offsetToIndex( 2 ); // Returns 0.
   * divElement.offsetToIndex( 3 ); // Returns 1.
   * divElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.
   * ```
   */
  offsetToIndex(e) {
    return this._children.offsetToIndex(e);
  }
  /**
   * Returns a descendant node by its path relative to this element.
   *
   * ```ts
   * // <this>a<b>c</b></this>
   * this.getNodeByPath( [ 0 ] );     // -> "a"
   * this.getNodeByPath( [ 1 ] );     // -> <b>
   * this.getNodeByPath( [ 1, 0 ] );  // -> "c"
   * ```
   *
   * @param relativePath Path of the node to find, relative to this element.
   */
  getNodeByPath(e) {
    let t = this;
    for (const i of e)
      t = t.getChild(t.offsetToIndex(i));
    return t;
  }
  /**
   * Returns the parent element of the given name. Returns null if the element is not inside the desired parent.
   *
   * @param parentName The name of the parent element to find.
   * @param options Options object.
   * @param options.includeSelf When set to `true` this node will be also included while searching.
   */
  findAncestor(e, t = {}) {
    let i = t.includeSelf ? this : this.parent;
    for (; i; ) {
      if (i.name === e)
        return i;
      i = i.parent;
    }
    return null;
  }
  /**
   * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.
   *
   * @returns `Element` instance converted to plain object.
   */
  toJSON() {
    const e = super.toJSON();
    if (e.name = this.name, this._children.length > 0) {
      e.children = [];
      for (const t of this._children)
        e.children.push(t.toJSON());
    }
    return e;
  }
  /**
   * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.
   * If clone is deep, the original element's children are also cloned. If not, then empty element is returned.
   *
   * @internal
   * @param deep If set to `true` clones element and all its children recursively. When set to `false`,
   * element will be cloned without any child.
   */
  _clone(e = !1) {
    const t = e ? Array.from(this._children).map((i) => i._clone(!0)) : void 0;
    return new F(this.name, this.getAttributes(), t);
  }
  /**
   * {@link module:engine/model/element~Element#_insertChild Inserts} one or more nodes at the end of this element.
   *
   * @see module:engine/model/writer~Writer#append
   * @internal
   * @param nodes Nodes to be inserted.
   */
  _appendChild(e) {
    this._insertChild(this.childCount, e);
  }
  /**
   * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes
   * to this element.
   *
   * @see module:engine/model/writer~Writer#insert
   * @internal
   * @param index Index at which nodes should be inserted.
   * @param items Items to be inserted.
   */
  _insertChild(e, t) {
    const i = xv(t);
    for (const s of i)
      s.parent !== null && s._remove(), s.parent = this;
    this._children._insertNodes(e, i);
  }
  /**
   * Removes one or more nodes starting at the given index and sets
   * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.
   *
   * @see module:engine/model/writer~Writer#remove
   * @internal
   * @param index Index of the first node to remove.
   * @param howMany Number of nodes to remove.
   * @returns Array containing removed nodes.
   */
  _removeChildren(e, t = 1) {
    const i = this._children._removeNodes(e, t);
    for (const s of i)
      s.parent = null;
    return i;
  }
  /**
   * Creates an `Element` instance from given plain object (i.e. parsed JSON string).
   * Converts `Element` children to proper nodes.
   *
   * @param json Plain object to be converted to `Element`.
   * @returns `Element` instance created using given plain object.
   */
  static fromJSON(e) {
    let t;
    if (e.children) {
      t = [];
      for (const i of e.children)
        i.name ? t.push(F.fromJSON(i)) : t.push(j.fromJSON(i));
    }
    return new F(e.name, e.attributes, t);
  }
}
F.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "element" || n === "model:element") : n === "element" || n === "model:element" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "node" || n === "model:node";
};
function xv(n) {
  return typeof n == "string" ? [new j(n)] : (ye(n) || (n = [n]), Array.from(n).map((e) => typeof e == "string" ? new j(e) : e instanceof Ie ? new j(e.data, e.getAttributes()) : e));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Le {
  /**
   * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.
   *
   * @param options Object with configuration.
   */
  constructor(e) {
    if (!e || !e.boundaries && !e.startPosition)
      throw new f("model-tree-walker-no-start-position", null);
    const t = e.direction || "forward";
    if (t != "forward" && t != "backward")
      throw new f("model-tree-walker-unknown-direction", e, { direction: t });
    this.direction = t, this.boundaries = e.boundaries || null, e.startPosition ? this._position = e.startPosition.clone() : this._position = w._createAt(this.boundaries[this.direction == "backward" ? "end" : "start"]), this.position.stickiness = "toNone", this.singleCharacters = !!e.singleCharacters, this.shallow = !!e.shallow, this.ignoreElementEnd = !!e.ignoreElementEnd, this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null, this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null, this._visitedParent = this.position.parent;
  }
  /**
   * Iterable interface.
   *
   * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}
   */
  [Symbol.iterator]() {
    return this;
  }
  /**
   * Iterator position. This is always static position, even if the initial position was a
   * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends
   * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction
   * is `'backward'` position starts from the end.
   */
  get position() {
    return this._position;
  }
  /**
   * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.
   *
   * For example:
   *
   * ```ts
   * walker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>
   * walker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]
   * walker.skip( () => false ); // Do not move the position.
   * ```
   *
   * @param skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should
   * return `true` if the value should be skipped or `false` if not.
   */
  skip(e) {
    let t, i, s, r;
    do
      s = this.position, r = this._visitedParent, { done: t, value: i } = this.next();
    while (!t && e(i));
    t || (this._position = s, this._visitedParent = r);
  }
  /**
   * Gets the next tree walker's value.
   */
  next() {
    return this.direction == "forward" ? this._next() : this._previous();
  }
  /**
   * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.
   */
  _next() {
    const e = this.position, t = this.position.clone(), i = this._visitedParent;
    if (i.parent === null && t.offset === i.maxOffset)
      return { done: !0, value: void 0 };
    if (i === this._boundaryEndParent && t.offset == this.boundaries.end.offset)
      return { done: !0, value: void 0 };
    const s = Pi(t, i), r = s || dh(t, i, s);
    if (r instanceof F) {
      if (!this.shallow)
        t.path.push(0), this._visitedParent = r;
      else {
        if (this.boundaries && this.boundaries.end.isBefore(t))
          return { done: !0, value: void 0 };
        t.offset++;
      }
      return this._position = t, vt("elementStart", r, e, t, 1);
    }
    if (r instanceof j) {
      let o;
      if (this.singleCharacters)
        o = 1;
      else {
        let c = r.endOffset;
        this._boundaryEndParent == i && this.boundaries.end.offset < c && (c = this.boundaries.end.offset), o = c - t.offset;
      }
      const a = t.offset - r.startOffset, l = new Ie(r, a, o);
      return t.offset += o, this._position = t, vt("text", l, e, t, o);
    }
    return t.path.pop(), t.offset++, this._position = t, this._visitedParent = i.parent, this.ignoreElementEnd ? this._next() : vt("elementEnd", i, e, t);
  }
  /**
   * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.
   */
  _previous() {
    const e = this.position, t = this.position.clone(), i = this._visitedParent;
    if (i.parent === null && t.offset === 0)
      return { done: !0, value: void 0 };
    if (i == this._boundaryStartParent && t.offset == this.boundaries.start.offset)
      return { done: !0, value: void 0 };
    const s = t.parent, r = Pi(t, s), o = r || fh(t, s, r);
    if (o instanceof F)
      return t.offset--, this.shallow ? (this._position = t, vt("elementStart", o, e, t, 1)) : (t.path.push(o.maxOffset), this._position = t, this._visitedParent = o, this.ignoreElementEnd ? this._previous() : vt("elementEnd", o, e, t));
    if (o instanceof j) {
      let a;
      if (this.singleCharacters)
        a = 1;
      else {
        let u = o.startOffset;
        this._boundaryStartParent == i && this.boundaries.start.offset > u && (u = this.boundaries.start.offset), a = t.offset - u;
      }
      const l = t.offset - o.startOffset, c = new Ie(o, l - a, a);
      return t.offset -= a, this._position = t, vt("text", c, e, t, a);
    }
    return t.path.pop(), this._position = t, this._visitedParent = i.parent, vt("elementStart", i, e, t, 1);
  }
}
function vt(n, e, t, i, s) {
  return {
    done: !1,
    value: {
      type: n,
      item: e,
      previousPosition: t,
      nextPosition: i,
      length: s
    }
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class w extends gt {
  /**
   * Creates a position.
   *
   * @param root Root of the position.
   * @param path Position path. See {@link module:engine/model/position~Position#path}.
   * @param stickiness Position stickiness. See {@link module:engine/model/position~PositionStickiness}.
   */
  constructor(e, t, i = "toNone") {
    if (super(), !e.is("element") && !e.is("documentFragment"))
      throw new f("model-position-root-invalid", e);
    if (!(t instanceof Array) || t.length === 0)
      throw new f("model-position-path-incorrect-format", e, { path: t });
    e.is("rootElement") ? t = t.slice() : (t = [...e.getPath(), ...t], e = e.root), this.root = e, this.path = t, this.stickiness = i;
  }
  /**
   * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal
   * to the last item in position {@link module:engine/model/position~Position#path path}.
   *
   * @type {Number}
   */
  get offset() {
    return this.path[this.path.length - 1];
  }
  set offset(e) {
    this.path[this.path.length - 1] = e;
  }
  /**
   * Parent element of this position.
   *
   * Keep in mind that `parent` value is calculated when the property is accessed.
   * If {@link module:engine/model/position~Position#path position path}
   * leads to a non-existing element, `parent` property will throw error.
   *
   * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).
   */
  get parent() {
    let e = this.root;
    for (let t = 0; t < this.path.length - 1; t++)
      if (e = e.getChild(e.offsetToIndex(this.path[t])), !e)
        throw new f("model-position-path-incorrect", this, { position: this });
    if (e.is("$text"))
      throw new f("model-position-path-incorrect", this, { position: this });
    return e;
  }
  /**
   * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is
   * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed
   * in text node, position index is equal to the index of that text node.
   */
  get index() {
    return this.parent.offsetToIndex(this.offset);
  }
  /**
   * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this
   * position is not in a text node.
   */
  get textNode() {
    return Pi(this, this.parent);
  }
  /**
   * Node directly after this position or `null` if this position is in text node.
   */
  get nodeAfter() {
    const e = this.parent;
    return dh(this, e, Pi(this, e));
  }
  /**
   * Node directly before this position or `null` if this position is in text node.
   */
  get nodeBefore() {
    const e = this.parent;
    return fh(this, e, Pi(this, e));
  }
  /**
   * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.
   */
  get isAtStart() {
    return this.offset === 0;
  }
  /**
   * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.
   */
  get isAtEnd() {
    return this.offset == this.parent.maxOffset;
  }
  /**
   * Checks whether this position is before or after given position.
   *
   * This method is safe to use it on non-existing positions (for example during operational transformation).
   */
  compareWith(e) {
    if (this.root != e.root)
      return "different";
    const t = ce(this.path, e.path);
    switch (t) {
      case "same":
        return "same";
      case "prefix":
        return "before";
      case "extension":
        return "after";
      default:
        return this.path[t] < e.path[t] ? "before" : "after";
    }
  }
  /**
   * Gets the farthest position which matches the callback using
   * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.
   *
   * For example:
   *
   * ```ts
   * getLastMatchingPosition( value => value.type == 'text' );
   * // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>
   *
   * getLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );
   * // <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>
   *
   * getLastMatchingPosition( value => false );
   * // Do not move the position.
   * ```
   *
   * @param skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should
   * return `true` if the value should be skipped or `false` if not.
   * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.
   *
   * @returns The position after the last item which matches the `skip` callback test.
   */
  getLastMatchingPosition(e, t = {}) {
    t.startPosition = this;
    const i = new Le(t);
    return i.skip(e), i.position;
  }
  /**
   * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}
   * but without the last item.
   *
   * This method is safe to use it on non-existing positions (for example during operational transformation).
   *
   * @returns Path to the parent.
   */
  getParentPath() {
    return this.path.slice(0, -1);
  }
  /**
   * Returns ancestors array of this position, that is this position's parent and its ancestors.
   *
   * @returns Array with ancestors.
   */
  getAncestors() {
    const e = this.parent;
    return e.is("documentFragment") ? [e] : e.getAncestors({ includeSelf: !0 });
  }
  /**
   * Returns the parent element of the given name. Returns null if the position is not inside the desired parent.
   *
   * @param parentName The name of the parent element to find.
   */
  findAncestor(e) {
    const t = this.parent;
    return t.is("element") ? t.findAncestor(e, { includeSelf: !0 }) : null;
  }
  /**
   * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}
   * of these two paths must be identical.
   *
   * This method is safe to use it on non-existing positions (for example during operational transformation).
   *
   * @param position The second position.
   * @returns The common path.
   */
  getCommonPath(e) {
    if (this.root != e.root)
      return [];
    const t = ce(this.path, e.path), i = typeof t == "string" ? Math.min(this.path.length, e.path.length) : t;
    return this.path.slice(0, i);
  }
  /**
   * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}
   * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.
   *
   * @param position The second position.
   */
  getCommonAncestor(e) {
    const t = this.getAncestors(), i = e.getAncestors();
    let s = 0;
    for (; t[s] == i[s] && t[s]; )
      s++;
    return s === 0 ? null : t[s - 1];
  }
  /**
   * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset
   * is shifted by `shift` value (can be a negative value).
   *
   * This method is safe to use it on non-existing positions (for example during operational transformation).
   *
   * @param shift Offset shift. Can be a negative value.
   * @returns Shifted position.
   */
  getShiftedBy(e) {
    const t = this.clone(), i = t.offset + e;
    return t.offset = i < 0 ? 0 : i, t;
  }
  /**
   * Checks whether this position is after given position.
   *
   * This method is safe to use it on non-existing positions (for example during operational transformation).
   *
   * @see module:engine/model/position~Position#isBefore
   * @param  otherPosition Position to compare with.
   * @returns True if this position is after given position.
   */
  isAfter(e) {
    return this.compareWith(e) == "after";
  }
  /**
   * Checks whether this position is before given position.
   *
   * **Note:** watch out when using negation of the value returned by this method, because the negation will also
   * be `true` if positions are in different roots and you might not expect this. You should probably use
   * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your
   * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:
   *
   * ```ts
   * if ( a.isBefore( b ) && c.isAfter( d ) ) {
   * 	// do A.
   * } else {
   * 	// do B.
   * }
   * ```
   *
   * or, if you have only one if-branch:
   *
   * ```ts
   * if ( !( a.isBefore( b ) && c.isAfter( d ) ) {
   * 	// do B.
   * }
   * ```
   *
   * rather than:
   *
   * ```ts
   * if ( !a.isBefore( b ) || && !c.isAfter( d ) ) {
   * 	// do B.
   * } else {
   * 	// do A.
   * }
   * ```
   *
   * This method is safe to use it on non-existing positions (for example during operational transformation).
   *
   * @param otherPosition Position to compare with.
   * @returns True if this position is before given position.
   */
  isBefore(e) {
    return this.compareWith(e) == "before";
  }
  /**
   * Checks whether this position is equal to given position.
   *
   * This method is safe to use it on non-existing positions (for example during operational transformation).
   *
   * @param otherPosition Position to compare with.
   * @returns True if positions are same.
   */
  isEqual(e) {
    return this.compareWith(e) == "same";
  }
  /**
   * Checks whether this position is touching given position. Positions touch when there are no text nodes
   * or empty nodes in a range between them. Technically, those positions are not equal but in many cases
   * they are very similar or even indistinguishable.
   *
   * @param otherPosition Position to compare with.
   * @returns True if positions touch.
   */
  isTouching(e) {
    if (this.root !== e.root)
      return !1;
    const t = Math.min(this.path.length, e.path.length);
    for (let i = 0; i < t; i++) {
      const s = this.path[i] - e.path[i];
      if (s < -1 || s > 1)
        return !1;
      if (s === 1)
        return Oa(e, this, i);
      if (s === -1)
        return Oa(this, e, i);
    }
    return this.path.length === e.path.length ? !0 : this.path.length > e.path.length ? ar(this.path, t) : ar(e.path, t);
  }
  /**
   * Checks if two positions are in the same parent.
   *
   * This method is safe to use it on non-existing positions (for example during operational transformation).
   *
   * @param position Position to compare with.
   * @returns `true` if positions have the same parent, `false` otherwise.
   */
  hasSameParentAs(e) {
    if (this.root !== e.root)
      return !1;
    const t = this.getParentPath(), i = e.getParentPath();
    return ce(t, i) == "same";
  }
  /**
   * Returns a copy of this position that is transformed by given `operation`.
   *
   * The new position's parameters are updated accordingly to the effect of the `operation`.
   *
   * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be
   * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.
   *
   * This method is safe to use it on non-existing positions (for example during operational transformation).
   *
   * @param operation Operation to transform by.
   * @returns Transformed position.
   */
  getTransformedByOperation(e) {
    let t;
    switch (e.type) {
      case "insert":
        t = this._getTransformedByInsertOperation(e);
        break;
      case "move":
      case "remove":
      case "reinsert":
        t = this._getTransformedByMoveOperation(e);
        break;
      case "split":
        t = this._getTransformedBySplitOperation(e);
        break;
      case "merge":
        t = this._getTransformedByMergeOperation(e);
        break;
      default:
        t = w._createAt(this);
        break;
    }
    return t;
  }
  /**
   * Returns a copy of this position transformed by an insert operation.
   *
   * @internal
   */
  _getTransformedByInsertOperation(e) {
    return this._getTransformedByInsertion(e.position, e.howMany);
  }
  /**
   * Returns a copy of this position transformed by a move operation.
   *
   * @internal
   */
  _getTransformedByMoveOperation(e) {
    return this._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany);
  }
  /**
   * Returns a copy of this position transformed by a split operation.
   *
   * @internal
   */
  _getTransformedBySplitOperation(e) {
    const t = e.movedRange;
    return t.containsPosition(this) || t.start.isEqual(this) && this.stickiness == "toNext" ? this._getCombined(e.splitPosition, e.moveTargetPosition) : e.graveyardPosition ? this._getTransformedByMove(e.graveyardPosition, e.insertionPosition, 1) : this._getTransformedByInsertion(e.insertionPosition, 1);
  }
  /**
   * Returns a copy of this position transformed by merge operation.
   *
   * @internal
   */
  _getTransformedByMergeOperation(e) {
    const t = e.movedRange, i = t.containsPosition(this) || t.start.isEqual(this);
    let s;
    return i ? (s = this._getCombined(e.sourcePosition, e.targetPosition), e.sourcePosition.isBefore(e.targetPosition) && (s = s._getTransformedByDeletion(e.deletionPosition, 1))) : this.isEqual(e.deletionPosition) ? s = w._createAt(e.deletionPosition) : s = this._getTransformedByMove(e.deletionPosition, e.graveyardPosition, 1), s;
  }
  /**
   * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.
   * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.
   *
   * @internal
   * @param deletePosition Position before the first removed node.
   * @param howMany How many nodes are removed.
   * @returns Transformed position or `null`.
   */
  _getTransformedByDeletion(e, t) {
    const i = w._createAt(this);
    if (this.root != e.root)
      return i;
    if (ce(e.getParentPath(), this.getParentPath()) == "same") {
      if (e.offset < this.offset) {
        if (e.offset + t > this.offset)
          return null;
        i.offset -= t;
      }
    } else if (ce(e.getParentPath(), this.getParentPath()) == "prefix") {
      const s = e.path.length - 1;
      if (e.offset <= this.path[s]) {
        if (e.offset + t > this.path[s])
          return null;
        i.path[s] -= t;
      }
    }
    return i;
  }
  /**
   * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.
   *
   * @internal
   * @param insertPosition Position where nodes are inserted.
   * @param howMany How many nodes are inserted.
   * @returns Transformed position.
   */
  _getTransformedByInsertion(e, t) {
    const i = w._createAt(this);
    if (this.root != e.root)
      return i;
    if (ce(e.getParentPath(), this.getParentPath()) == "same")
      (e.offset < this.offset || e.offset == this.offset && this.stickiness != "toPrevious") && (i.offset += t);
    else if (ce(e.getParentPath(), this.getParentPath()) == "prefix") {
      const s = e.path.length - 1;
      e.offset <= this.path[s] && (i.path[s] += t);
    }
    return i;
  }
  /**
   * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.
   *
   * @internal
   * @param sourcePosition Position before the first element to move.
   * @param targetPosition Position where moved elements will be inserted.
   * @param howMany How many consecutive nodes to move, starting from `sourcePosition`.
   * @returns Transformed position.
   */
  _getTransformedByMove(e, t, i) {
    if (t = t._getTransformedByDeletion(e, i), e.isEqual(t))
      return w._createAt(this);
    const s = this._getTransformedByDeletion(e, i);
    return s === null || e.isEqual(this) && this.stickiness == "toNext" || e.getShiftedBy(i).isEqual(this) && this.stickiness == "toPrevious" ? this._getCombined(e, t) : s._getTransformedByInsertion(t, i);
  }
  /**
   * Returns a new position that is a combination of this position and given positions.
   *
   * The combined position is a copy of this position transformed by moving a range starting at `source` position
   * to the `target` position. It is expected that this position is inside the moved range.
   *
   * Example:
   *
   * ```ts
   * let original = model.createPositionFromPath( root, [ 2, 3, 1 ] );
   * let source = model.createPositionFromPath( root, [ 2, 2 ] );
   * let target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );
   * original._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`
   * ```
   *
   * Explanation:
   *
   * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position
   * was inside moved nodes and now should point to the new place. The moved nodes will be after
   * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,
   * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we
   * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.
   * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.
   *
   * @internal
   * @param source Beginning of the moved range.
   * @param target Position where the range is moved.
   * @returns Combined position.
   */
  _getCombined(e, t) {
    const i = e.path.length - 1, s = w._createAt(t);
    return s.stickiness = this.stickiness, s.offset = s.offset + this.path[i] - e.offset, s.path = [...s.path, ...this.path.slice(i + 1)], s;
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    return {
      root: this.root.toJSON(),
      path: Array.from(this.path),
      stickiness: this.stickiness
    };
  }
  /**
   * Returns a new position that is equal to current position.
   */
  clone() {
    return new this.constructor(this.root, this.path, this.stickiness);
  }
  /**
   * Creates position at the given location. The location can be specified as:
   *
   * * a {@link module:engine/model/position~Position position},
   * * parent element and offset (offset defaults to `0`),
   * * parent element and `'end'` (sets position at the end of that element),
   * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).
   *
   * This method is a shortcut to other factory methods such as:
   *
   * * {@link module:engine/model/position~Position._createBefore},
   * * {@link module:engine/model/position~Position._createAfter}.
   *
   * @internal
   * @param offset Offset or one of the flags. Used only when the first parameter is a {@link module:engine/model/item~Item model item}.
   * @param stickiness Position stickiness. Used only when the first parameter is a {@link module:engine/model/item~Item model item}.
   */
  static _createAt(e, t, i = "toNone") {
    if (e instanceof w)
      return new w(e.root, e.path, e.stickiness);
    {
      const s = e;
      if (t == "end")
        t = s.maxOffset;
      else {
        if (t == "before")
          return this._createBefore(s, i);
        if (t == "after")
          return this._createAfter(s, i);
        if (t !== 0 && !t)
          throw new f("model-createpositionat-offset-required", [this, e]);
      }
      if (!s.is("element") && !s.is("documentFragment"))
        throw new f("model-position-parent-incorrect", [this, e]);
      const r = s.getPath();
      return r.push(t), new this(s.root, r, i);
    }
  }
  /**
   * Creates a new position, after given {@link module:engine/model/item~Item model item}.
   *
   * @internal
   * @param item Item after which the position should be placed.
   * @param stickiness Position stickiness.
   */
  static _createAfter(e, t) {
    if (!e.parent)
      throw new f("model-position-after-root", [this, e], { root: e });
    return this._createAt(e.parent, e.endOffset, t);
  }
  /**
   * Creates a new position, before the given {@link module:engine/model/item~Item model item}.
   *
   * @internal
   * @param item Item before which the position should be placed.
   * @param stickiness Position stickiness.
   */
  static _createBefore(e, t) {
    if (!e.parent)
      throw new f("model-position-before-root", e, { root: e });
    return this._createAt(e.parent, e.startOffset, t);
  }
  /**
   * Creates a `Position` instance from given plain object (i.e. parsed JSON string).
   *
   * @param json Plain object to be converted to `Position`.
   * @param doc Document object that will be position owner.
   * @returns `Position` instance created using given plain object.
   */
  static fromJSON(e, t) {
    if (e.root === "$graveyard") {
      const i = new w(t.graveyard, e.path);
      return i.stickiness = e.stickiness, i;
    }
    if (!t.getRoot(e.root))
      throw new f("model-position-fromjson-no-root", t, { rootName: e.root });
    return new w(t.getRoot(e.root), e.path, e.stickiness);
  }
}
w.prototype.is = function(n) {
  return n === "position" || n === "model:position";
};
function Pi(n, e) {
  const t = e.getChild(e.offsetToIndex(n.offset));
  return t && t.is("$text") && t.startOffset < n.offset ? t : null;
}
function dh(n, e, t) {
  return t !== null ? null : e.getChild(e.offsetToIndex(n.offset));
}
function fh(n, e, t) {
  return t !== null ? null : e.getChild(e.offsetToIndex(n.offset) - 1);
}
function Oa(n, e, t) {
  return !(t + 1 === n.path.length || !ar(e.path, t + 1) || !Sv(n, t + 1));
}
function ar(n, e) {
  for (; e < n.length; ) {
    if (n[e] !== 0)
      return !1;
    e++;
  }
  return !0;
}
function Sv(n, e) {
  let t = n.parent, i = n.path.length - 1, s = 0;
  for (; i >= e; ) {
    if (n.path[i] + s !== t.maxOffset)
      return !1;
    s = 1, i--, t = t.parent;
  }
  return !0;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class g extends gt {
  /**
   * Creates a range spanning from `start` position to `end` position.
   *
   * @param start The start position.
   * @param end The end position. If not set, the range will be collapsed at the `start` position.
   */
  constructor(e, t) {
    super(), this.start = w._createAt(e), this.end = t ? w._createAt(t) : w._createAt(e), this.start.stickiness = this.isCollapsed ? "toNone" : "toNext", this.end.stickiness = this.isCollapsed ? "toNone" : "toPrevious";
  }
  /**
   * Iterable interface.
   *
   * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns
   * them together with additional information like length or {@link module:engine/model/position~Position positions},
   * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.
   * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range
   * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.
   *
   * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range
   * and `ignoreElementEnd` option set to `true`.
   */
  *[Symbol.iterator]() {
    yield* new Le({ boundaries: this, ignoreElementEnd: !0 });
  }
  /**
   * Describes whether the range is collapsed, that is if {@link #start} and
   * {@link #end} positions are equal.
   */
  get isCollapsed() {
    return this.start.isEqual(this.end);
  }
  /**
   * Describes whether this range is flat, that is if {@link #start} position and
   * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.
   */
  get isFlat() {
    const e = this.start.getParentPath(), t = this.end.getParentPath();
    return ce(e, t) == "same";
  }
  /**
   * Range root element.
   */
  get root() {
    return this.start.root;
  }
  /**
   * Checks whether this range contains given {@link module:engine/model/position~Position position}.
   *
   * @param position Position to check.
   * @returns `true` if given {@link module:engine/model/position~Position position} is contained
   * in this range,`false` otherwise.
   */
  containsPosition(e) {
    return e.isAfter(this.start) && e.isBefore(this.end);
  }
  /**
   * Checks whether this range contains given {@link ~Range range}.
   *
   * @param otherRange Range to check.
   * @param loose Whether the check is loose or strict. If the check is strict (`false`), compared range cannot
   * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or
   * even be equal to this range. Note that collapsed ranges are always compared in strict mode.
   * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.
   */
  containsRange(e, t = !1) {
    e.isCollapsed && (t = !1);
    const i = this.containsPosition(e.start) || t && this.start.isEqual(e.start), s = this.containsPosition(e.end) || t && this.end.isEqual(e.end);
    return i && s;
  }
  /**
   * Checks whether given {@link module:engine/model/item~Item} is inside this range.
   */
  containsItem(e) {
    const t = w._createBefore(e);
    return this.containsPosition(t) || this.start.isEqual(t);
  }
  /**
   * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.
   *
   * @param otherRange Range to compare with.
   * @returns `true` if ranges are equal, `false` otherwise.
   */
  isEqual(e) {
    return this.start.isEqual(e.start) && this.end.isEqual(e.end);
  }
  /**
   * Checks and returns whether this range intersects with given range.
   *
   * @param otherRange Range to compare with.
   * @returns `true` if ranges intersect, `false` otherwise.
   */
  isIntersecting(e) {
    return this.start.isBefore(e.end) && this.end.isAfter(e.start);
  }
  /**
   * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.
   * Returned array contains zero, one or two {@link ~Range ranges}.
   *
   * Examples:
   *
   * ```ts
   * let range = model.createRange(
   * 	model.createPositionFromPath( root, [ 2, 7 ] ),
   * 	model.createPositionFromPath( root, [ 4, 0, 1 ] )
   * );
   * let otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 5 ] ) );
   * let transformed = range.getDifference( otherRange );
   * // transformed array has no ranges because `otherRange` contains `range`
   *
   * otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 3 ] ) );
   * transformed = range.getDifference( otherRange );
   * // transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]
   *
   * otherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 4 ] ) );
   * transformed = range.getDifference( otherRange );
   * // transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]
   * ```
   *
   * @param otherRange Range to differentiate against.
   * @returns The difference between ranges.
   */
  getDifference(e) {
    const t = [];
    return this.isIntersecting(e) ? (this.containsPosition(e.start) && t.push(new g(this.start, e.start)), this.containsPosition(e.end) && t.push(new g(e.end, this.end))) : t.push(new g(this.start, this.end)), t;
  }
  /**
   * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.
   * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.
   *
   * Examples:
   *
   * ```ts
   * let range = model.createRange(
   * 	model.createPositionFromPath( root, [ 2, 7 ] ),
   * 	model.createPositionFromPath( root, [ 4, 0, 1 ] )
   * );
   * let otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 2 ] ) );
   * let transformed = range.getIntersection( otherRange ); // null - ranges have no common part
   *
   * otherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 5 ] ) );
   * transformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]
   * ```
   *
   * @param otherRange Range to check for intersection.
   * @returns A common part of given ranges or `null` if ranges have no common part.
   */
  getIntersection(e) {
    if (this.isIntersecting(e)) {
      let t = this.start, i = this.end;
      return this.containsPosition(e.start) && (t = e.start), this.containsPosition(e.end) && (i = e.end), new g(t, i);
    }
    return null;
  }
  /**
   * Returns a range created by joining this {@link ~Range range} with the given {@link ~Range range}.
   * If ranges have no common part, returns `null`.
   *
   * Examples:
   *
   * ```ts
   * let range = model.createRange(
   * 	model.createPositionFromPath( root, [ 2, 7 ] ),
   * 	model.createPositionFromPath( root, [ 4, 0, 1 ] )
   * );
   * let otherRange = model.createRange(
   * 	model.createPositionFromPath( root, [ 1 ] ),
   * 	model.createPositionFromPath( root, [ 2 ] )
   * );
   * let transformed = range.getJoined( otherRange ); // null - ranges have no common part
   *
   * otherRange = model.createRange(
   * 	model.createPositionFromPath( root, [ 3 ] ),
   * 	model.createPositionFromPath( root, [ 5 ] )
   * );
   * transformed = range.getJoined( otherRange ); // range from [ 2, 7 ] to [ 5 ]
   * ```
   *
   * @param otherRange Range to be joined.
   * @param loose Whether the intersection check is loose or strict. If the check is strict (`false`),
   * ranges are tested for intersection or whether start/end positions are equal. If the check is loose (`true`),
   * compared range is also checked if it's {@link module:engine/model/position~Position#isTouching touching} current range.
   * @returns A sum of given ranges or `null` if ranges have no common part.
   */
  getJoined(e, t = !1) {
    let i = this.isIntersecting(e);
    if (i || (this.start.isBefore(e.start) ? i = t ? this.end.isTouching(e.start) : this.end.isEqual(e.start) : i = t ? e.end.isTouching(this.start) : e.end.isEqual(this.start)), !i)
      return null;
    let s = this.start, r = this.end;
    return e.start.isBefore(s) && (s = e.start), e.end.isAfter(r) && (r = e.end), new g(s, r);
  }
  /**
   * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.
   *
   * See an example of a model structure (`[` and `]` are range boundaries):
   *
   * ```
   * root                                                            root
   *  |- element DIV                         DIV             P2              P3             DIV
   *  |   |- element H                   H        P1        f o o           b a r       H         P4
   *  |   |   |- "fir[st"             fir[st     lorem                               se]cond     ipsum
   *  |   |- element P1
   *  |   |   |- "lorem"                                              ||
   *  |- element P2                                                   ||
   *  |   |- "foo"                                                    VV
   *  |- element P3
   *  |   |- "bar"                                                   root
   *  |- element DIV                         DIV             [P2             P3]             DIV
   *  |   |- element H                   H       [P1]       f o o           b a r        H         P4
   *  |   |   |- "se]cond"            fir[st]    lorem                               [se]cond     ipsum
   *  |   |- element P4
   *  |   |   |- "ipsum"
   * ```
   *
   * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.
   * We are looking for minimal set of flat ranges that contains the same nodes.
   *
   * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:
   *
   * ```
   * ( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = "st"
   * ( [ 0, 1 ], [ 0, 2 ] ) = element P1 ("lorem")
   * ( [ 1 ], [ 3 ] ) = element P2, element P3 ("foobar")
   * ( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = "se"
   * ```
   *
   * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned
   * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range
   * were omitted. Only their parts that were wholly in the range were returned.
   *
   * **Note:** this method is not returning flat ranges that contain no nodes.
   *
   * @returns Array of flat ranges covering this range.
   */
  getMinimalFlatRanges() {
    const e = [], t = this.start.getCommonPath(this.end).length, i = w._createAt(this.start);
    let s = i.parent;
    for (; i.path.length > t + 1; ) {
      const r = s.maxOffset - i.offset;
      r !== 0 && e.push(new g(i, i.getShiftedBy(r))), i.path = i.path.slice(0, -1), i.offset++, s = s.parent;
    }
    for (; i.path.length <= this.end.path.length; ) {
      const r = this.end.path[i.path.length - 1], o = r - i.offset;
      o !== 0 && e.push(new g(i, i.getShiftedBy(o))), i.offset = r, i.path.push(0);
    }
    return e;
  }
  /**
   * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.
   *
   * For example, to iterate over all items in the entire document root:
   *
   * ```ts
   * // Create a range spanning over the entire root content:
   * const range = editor.model.createRangeIn( editor.model.document.getRoot() );
   *
   * // Iterate over all items in this range:
   * for ( const value of range.getWalker() ) {
   * 	console.log( value.item );
   * }
   * ```
   *
   * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.
   */
  getWalker(e = {}) {
    return e.boundaries = this, new Le(e);
  }
  /**
   * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns
   * them.
   *
   * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option
   * set to `true`. However it returns only {@link module:engine/model/item~Item model items},
   * not {@link module:engine/model/treewalker~TreeWalkerValue}.
   *
   * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for
   * a full list of available options.
   *
   * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.
   */
  *getItems(e = {}) {
    e.boundaries = this, e.ignoreElementEnd = !0;
    const t = new Le(e);
    for (const i of t)
      yield i.item;
  }
  /**
   * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or
   * contained in this range.
   *
   * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only
   * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.
   *
   * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for
   * a full list of available options.
   *
   * @param options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.
   */
  *getPositions(e = {}) {
    e.boundaries = this;
    const t = new Le(e);
    yield t.position;
    for (const i of t)
      yield i.nextPosition;
  }
  /**
   * Returns a range that is a result of transforming this range by given `operation`.
   *
   * **Note:** transformation may break one range into multiple ranges (for example, when a part of the range is
   * moved to a different part of document tree). For this reason, an array is returned by this method and it
   * may contain one or more `Range` instances.
   *
   * @param operation Operation to transform range by.
   * @returns Range which is the result of transformation.
   */
  getTransformedByOperation(e) {
    switch (e.type) {
      case "insert":
        return this._getTransformedByInsertOperation(e);
      case "move":
      case "remove":
      case "reinsert":
        return this._getTransformedByMoveOperation(e);
      case "split":
        return [this._getTransformedBySplitOperation(e)];
      case "merge":
        return [this._getTransformedByMergeOperation(e)];
    }
    return [new g(this.start, this.end)];
  }
  /**
   * Returns a range that is a result of transforming this range by multiple `operations`.
   *
   * @see ~Range#getTransformedByOperation
   * @param operations Operations to transform the range by.
   * @returns Range which is the result of transformation.
   */
  getTransformedByOperations(e) {
    const t = [new g(this.start, this.end)];
    for (const i of e)
      for (let s = 0; s < t.length; s++) {
        const r = t[s].getTransformedByOperation(i);
        t.splice(s, 1, ...r), s += r.length - 1;
      }
    for (let i = 0; i < t.length; i++) {
      const s = t[i];
      for (let r = i + 1; r < t.length; r++) {
        const o = t[r];
        (s.containsRange(o) || o.containsRange(s) || s.isEqual(o)) && t.splice(r, 1);
      }
    }
    return t;
  }
  /**
   * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}
   * which is a common ancestor of the range's both ends (in which the entire range is contained).
   */
  getCommonAncestor() {
    return this.start.getCommonAncestor(this.end);
  }
  /**
   * Returns an {@link module:engine/model/element~Element Element} contained by the range.
   * The element will be returned when it is the **only** node within the range and **fully–contained**
   * at the same time.
   */
  getContainedElement() {
    if (this.isCollapsed)
      return null;
    const e = this.start.nodeAfter, t = this.end.nodeBefore;
    return e && e.is("element") && e === t ? e : null;
  }
  /**
   * Converts `Range` to plain object and returns it.
   *
   * @returns `Node` converted to plain object.
   */
  toJSON() {
    return {
      start: this.start.toJSON(),
      end: this.end.toJSON()
    };
  }
  /**
   * Returns a new range that is equal to current range.
   */
  clone() {
    return new this.constructor(this.start, this.end);
  }
  /**
   * Returns a result of transforming a copy of this range by insert operation.
   *
   * One or more ranges may be returned as a result of this transformation.
   *
   * @internal
   */
  _getTransformedByInsertOperation(e, t = !1) {
    return this._getTransformedByInsertion(e.position, e.howMany, t);
  }
  /**
   * Returns a result of transforming a copy of this range by move operation.
   *
   * One or more ranges may be returned as a result of this transformation.
   *
   * @internal
   */
  _getTransformedByMoveOperation(e, t = !1) {
    const i = e.sourcePosition, s = e.howMany, r = e.targetPosition;
    return this._getTransformedByMove(i, r, s, t);
  }
  /**
   * Returns a result of transforming a copy of this range by split operation.
   *
   * Always one range is returned. The transformation is done in a way to not break the range.
   *
   * @internal
   */
  _getTransformedBySplitOperation(e) {
    const t = this.start._getTransformedBySplitOperation(e);
    let i = this.end._getTransformedBySplitOperation(e);
    return this.end.isEqual(e.insertionPosition) && (i = this.end.getShiftedBy(1)), t.root != i.root && (i = this.end.getShiftedBy(-1)), new g(t, i);
  }
  /**
   * Returns a result of transforming a copy of this range by merge operation.
   *
   * Always one range is returned. The transformation is done in a way to not break the range.
   *
   * @internal
   */
  _getTransformedByMergeOperation(e) {
    if (this.start.isEqual(e.targetPosition) && this.end.isEqual(e.deletionPosition))
      return new g(this.start);
    let t = this.start._getTransformedByMergeOperation(e), i = this.end._getTransformedByMergeOperation(e);
    return t.root != i.root && (i = this.end.getShiftedBy(-1)), t.isAfter(i) ? (e.sourcePosition.isBefore(e.targetPosition) ? (t = w._createAt(i), t.offset = 0) : (e.deletionPosition.isEqual(t) || (i = e.deletionPosition), t = e.targetPosition), new g(t, i)) : new g(t, i);
  }
  /**
   * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this
   * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are
   * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.
   *
   * Examples:
   *
   * ```ts
   * let range = model.createRange(
   * 	model.createPositionFromPath( root, [ 2, 7 ] ),
   * 	model.createPositionFromPath( root, [ 4, 0, 1 ] )
   * );
   * let transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 1 ] ), 2 );
   * // transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]
   *
   * transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 4, 0, 0 ] ), 4 );
   * // transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]
   *
   * transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4 );
   * // transformed array has one range, which is equal to original range
   *
   * transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4, true );
   * // transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]
   * ```
   *
   * @internal
   * @param insertPosition Position where nodes are inserted.
   * @param howMany How many nodes are inserted.
   * @param spread Flag indicating whether this range should be spread if insertion
   * was inside the range. Defaults to `false`.
   * @returns Result of the transformation.
   */
  _getTransformedByInsertion(e, t, i = !1) {
    if (i && this.containsPosition(e))
      return [
        new g(this.start, e),
        new g(e.getShiftedBy(t), this.end._getTransformedByInsertion(e, t))
      ];
    {
      const s = new g(this.start, this.end);
      return s.start = s.start._getTransformedByInsertion(e, t), s.end = s.end._getTransformedByInsertion(e, t), [s];
    }
  }
  /**
   * Returns an array containing {@link ~Range ranges} that are a result of transforming this
   * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.
   *
   * @internal
   * @param sourcePosition Position from which nodes are moved.
   * @param targetPosition Position to where nodes are moved.
   * @param howMany How many nodes are moved.
   * @param spread Whether the range should be spread if the move points inside the range.
   * @returns  Result of the transformation.
   */
  _getTransformedByMove(e, t, i, s = !1) {
    if (this.isCollapsed) {
      const h = this.start._getTransformedByMove(e, t, i);
      return [new g(h)];
    }
    const r = g._createFromPositionAndShift(e, i), o = t._getTransformedByDeletion(e, i);
    if (this.containsPosition(t) && !s && (r.containsPosition(this.start) || r.containsPosition(this.end))) {
      const h = this.start._getTransformedByMove(e, t, i), d = this.end._getTransformedByMove(e, t, i);
      return [new g(h, d)];
    }
    let a;
    const l = this.getDifference(r);
    let c = null;
    const u = this.getIntersection(r);
    if (l.length == 1 ? c = new g(l[0].start._getTransformedByDeletion(e, i), l[0].end._getTransformedByDeletion(e, i)) : l.length == 2 && (c = new g(this.start, this.end._getTransformedByDeletion(e, i))), c ? a = c._getTransformedByInsertion(o, i, u !== null || s) : a = [], u) {
      const h = new g(u.start._getCombined(r.start, o), u.end._getCombined(r.start, o));
      a.length == 2 ? a.splice(1, 0, h) : a.push(h);
    }
    return a;
  }
  /**
   * Returns a copy of this range that is transformed by deletion of `howMany` nodes from `deletePosition`.
   *
   * If the deleted range is intersecting with the transformed range, the transformed range will be shrank.
   *
   * If the deleted range contains transformed range, `null` will be returned.
   *
   * @internal
   * @param deletionPosition Position from which nodes are removed.
   * @param howMany How many nodes are removed.
   * @returns Result of the transformation.
   */
  _getTransformedByDeletion(e, t) {
    let i = this.start._getTransformedByDeletion(e, t), s = this.end._getTransformedByDeletion(e, t);
    return i == null && s == null ? null : (i == null && (i = e), s == null && (s = e), new g(i, s));
  }
  /**
   * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by
   * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.
   *
   * @internal
   * @param position Beginning of the range.
   * @param shift How long the range should be.
   */
  static _createFromPositionAndShift(e, t) {
    const i = e, s = e.getShiftedBy(t);
    return t > 0 ? new this(i, s) : new this(s, i);
  }
  /**
   * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of
   * that element and ends after the last child of that element.
   *
   * @internal
   * @param element Element which is a parent for the range.
   */
  static _createIn(e) {
    return new this(w._createAt(e, 0), w._createAt(e, e.maxOffset));
  }
  /**
   * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.
   *
   * @internal
   */
  static _createOn(e) {
    return this._createFromPositionAndShift(w._createBefore(e), e.offsetSize);
  }
  /**
   * Combines all ranges from the passed array into a one range. At least one range has to be passed.
   * Passed ranges must not have common parts.
   *
   * The first range from the array is a reference range. If other ranges start or end on the exactly same position where
   * the reference range, they get combined into one range.
   *
   * ```
   * [  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted
   * [    ]                                       // The result of the function if the first range was a reference range.
   *         [                           ]        // The result of the function if the third-to-seventh range was a reference range.
   *                                        [  ]  // The result of the function if the last range was a reference range.
   * ```
   *
   * @internal
   * @param ranges Ranges to combine.
   * @returns Combined range.
   */
  static _createFromRanges(e) {
    if (e.length === 0)
      throw new f("range-create-from-ranges-empty-array", null);
    if (e.length == 1)
      return e[0].clone();
    const t = e[0];
    e.sort((r, o) => r.start.isAfter(o.start) ? 1 : -1);
    const i = e.indexOf(t), s = new this(t.start, t.end);
    if (i > 0)
      for (let r = i - 1; e[r].end.isEqual(s.start); r++)
        s.start = w._createAt(e[r].start);
    for (let r = i + 1; r < e.length && e[r].start.isEqual(s.end); r++)
      s.end = w._createAt(e[r].end);
    return s;
  }
  /**
   * Creates a `Range` instance from given plain object (i.e. parsed JSON string).
   *
   * @param json Plain object to be converted to `Range`.
   * @param doc Document object that will be range owner.
   * @returns `Range` instance created using given plain object.
   */
  static fromJSON(e, t) {
    return new this(w.fromJSON(e.start, t), w.fromJSON(e.end, t));
  }
}
g.prototype.is = function(n) {
  return n === "range" || n === "model:range";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class mh extends L() {
  /**
   * Creates an instance of the mapper.
   */
  constructor() {
    super(), this._modelToViewMapping = /* @__PURE__ */ new WeakMap(), this._viewToModelMapping = /* @__PURE__ */ new WeakMap(), this._viewToModelLengthCallbacks = /* @__PURE__ */ new Map(), this._markerNameToElements = /* @__PURE__ */ new Map(), this._elementToMarkerNames = /* @__PURE__ */ new Map(), this._deferredBindingRemovals = /* @__PURE__ */ new Map(), this._unboundMarkerNames = /* @__PURE__ */ new Set(), this.on("modelToViewPosition", (e, t) => {
      if (t.viewPosition)
        return;
      const i = this._modelToViewMapping.get(t.modelPosition.parent);
      if (!i)
        throw new f("mapping-model-position-view-parent-not-found", this, { modelPosition: t.modelPosition });
      t.viewPosition = this.findPositionIn(i, t.modelPosition.offset);
    }, { priority: "low" }), this.on("viewToModelPosition", (e, t) => {
      if (t.modelPosition)
        return;
      const i = this.findMappedViewAncestor(t.viewPosition), s = this._viewToModelMapping.get(i), r = this._toModelOffset(t.viewPosition.parent, t.viewPosition.offset, i);
      t.modelPosition = w._createAt(s, r);
    }, { priority: "low" });
  }
  /**
   * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using
   * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and
   * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.
   * The information that elements are bound is also used to translate positions.
   *
   * @param modelElement Model element.
   * @param viewElement View element.
   */
  bindElements(e, t) {
    this._modelToViewMapping.set(e, t), this._viewToModelMapping.set(t, e);
  }
  /**
   * Unbinds the given {@link module:engine/view/element~Element view element} from the map.
   *
   * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding
   * will be removed only if model element is still bound to the passed `viewElement`.
   *
   * This behavior allows for re-binding model element to another view element without fear of losing the new binding
   * when the previously bound view element is unbound.
   *
   * @param viewElement View element to unbind.
   * @param options The options object.
   * @param options.defer Controls whether the binding should be removed immediately or deferred until a
   * {@link #flushDeferredBindings `flushDeferredBindings()`} call.
   */
  unbindViewElement(e, t = {}) {
    const i = this.toModelElement(e);
    if (this._elementToMarkerNames.has(e))
      for (const s of this._elementToMarkerNames.get(e))
        this._unboundMarkerNames.add(s);
    t.defer ? this._deferredBindingRemovals.set(e, e.root) : (this._viewToModelMapping.delete(e), this._modelToViewMapping.get(i) == e && this._modelToViewMapping.delete(i));
  }
  /**
   * Unbinds the given {@link module:engine/model/element~Element model element} from the map.
   *
   * **Note:** the model-to-view binding will be removed, if it existed. However, the corresponding view-to-model binding
   * will be removed only if the view element is still bound to the passed `modelElement`.
   *
   * This behavior lets for re-binding view element to another model element without fear of losing the new binding
   * when the previously bound model element is unbound.
   *
   * @param modelElement Model element to unbind.
   */
  unbindModelElement(e) {
    const t = this.toViewElement(e);
    this._modelToViewMapping.delete(e), this._viewToModelMapping.get(t) == e && this._viewToModelMapping.delete(t);
  }
  /**
   * Binds the given marker name with the given {@link module:engine/view/element~Element view element}. The element
   * will be added to the current set of elements bound with the given marker name.
   *
   * @param element Element to bind.
   * @param name Marker name.
   */
  bindElementToMarker(e, t) {
    const i = this._markerNameToElements.get(t) || /* @__PURE__ */ new Set();
    i.add(e);
    const s = this._elementToMarkerNames.get(e) || /* @__PURE__ */ new Set();
    s.add(t), this._markerNameToElements.set(t, i), this._elementToMarkerNames.set(e, s);
  }
  /**
   * Unbinds an element from given marker name.
   *
   * @param element Element to unbind.
   * @param name Marker name.
   */
  unbindElementFromMarkerName(e, t) {
    const i = this._markerNameToElements.get(t);
    i && (i.delete(e), i.size == 0 && this._markerNameToElements.delete(t));
    const s = this._elementToMarkerNames.get(e);
    s && (s.delete(t), s.size == 0 && this._elementToMarkerNames.delete(e));
  }
  /**
   * Returns all marker names of markers which have changed due to unbinding a view element (so it is assumed that the view element
   * has been removed, moved or renamed) since the last flush. After returning, the marker names list is cleared.
   */
  flushUnboundMarkerNames() {
    const e = Array.from(this._unboundMarkerNames);
    return this._unboundMarkerNames.clear(), e;
  }
  /**
   * Unbinds all deferred binding removals of view elements that in the meantime were not re-attached to some root or document fragment.
   *
   * See: {@link #unbindViewElement `unbindViewElement()`}.
   */
  flushDeferredBindings() {
    for (const [e, t] of this._deferredBindingRemovals)
      e.root == t && this.unbindViewElement(e);
    this._deferredBindingRemovals = /* @__PURE__ */ new Map();
  }
  /**
   * Removes all model to view and view to model bindings.
   */
  clearBindings() {
    this._modelToViewMapping = /* @__PURE__ */ new WeakMap(), this._viewToModelMapping = /* @__PURE__ */ new WeakMap(), this._markerNameToElements = /* @__PURE__ */ new Map(), this._elementToMarkerNames = /* @__PURE__ */ new Map(), this._unboundMarkerNames = /* @__PURE__ */ new Set(), this._deferredBindingRemovals = /* @__PURE__ */ new Map();
  }
  toModelElement(e) {
    return this._viewToModelMapping.get(e);
  }
  toViewElement(e) {
    return this._modelToViewMapping.get(e);
  }
  /**
   * Gets the corresponding model range.
   *
   * @param viewRange View range.
   * @returns Corresponding model range.
   */
  toModelRange(e) {
    return new g(this.toModelPosition(e.start), this.toModelPosition(e.end));
  }
  /**
   * Gets the corresponding view range.
   *
   * @param modelRange Model range.
   * @returns Corresponding view range.
   */
  toViewRange(e) {
    return new P(this.toViewPosition(e.start), this.toViewPosition(e.end));
  }
  /**
   * Gets the corresponding model position.
   *
   * @fires viewToModelPosition
   * @param viewPosition View position.
   * @returns Corresponding model position.
   */
  toModelPosition(e) {
    const t = {
      viewPosition: e,
      mapper: this
    };
    return this.fire("viewToModelPosition", t), t.modelPosition;
  }
  /**
   * Gets the corresponding view position.
   *
   * @fires modelToViewPosition
   * @param modelPosition Model position.
   * @param options Additional options for position mapping process.
   * @param options.isPhantom Should be set to `true` if the model position to map is pointing to a place
   * in model tree which no longer exists. For example, it could be an end of a removed model range.
   * @returns Corresponding view position.
   */
  toViewPosition(e, t = {}) {
    const i = {
      modelPosition: e,
      mapper: this,
      isPhantom: t.isPhantom
    };
    return this.fire("modelToViewPosition", i), i.viewPosition;
  }
  /**
   * Gets all view elements bound to the given marker name.
   *
   * @param name Marker name.
   * @returns View elements bound with the given marker name or `null`
   * if no elements are bound to the given marker name.
   */
  markerNameToElements(e) {
    const t = this._markerNameToElements.get(e);
    if (!t)
      return null;
    const i = /* @__PURE__ */ new Set();
    for (const s of t)
      if (s.is("attributeElement"))
        for (const r of s.getElementsWithSameId())
          i.add(r);
      else
        i.add(s);
    return i;
  }
  /**
   * Registers a callback that evaluates the length in the model of a view element with the given name.
   *
   * The callback is fired with one argument, which is a view element instance. The callback is expected to return
   * a number representing the length of the view element in the model.
   *
   * ```ts
   * // List item in view may contain nested list, which have other list items. In model though,
   * // the lists are represented by flat structure. Because of those differences, length of list view element
   * // may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.
   *
   * function getViewListItemLength( element ) {
   * 	let length = 1;
   *
   * 	for ( let child of element.getChildren() ) {
   * 		if ( child.name == 'ul' || child.name == 'ol' ) {
   * 			for ( let item of child.getChildren() ) {
   * 				length += getViewListItemLength( item );
   * 			}
   * 		}
   * 	}
   *
   * 	return length;
   * }
   *
   * mapper.registerViewToModelLength( 'li', getViewListItemLength );
   * ```
   *
   * @param viewElementName Name of view element for which callback is registered.
   * @param lengthCallback Function return a length of view element instance in model.
   */
  registerViewToModelLength(e, t) {
    this._viewToModelLengthCallbacks.set(e, t);
  }
  /**
   * For the given `viewPosition`, finds and returns the closest ancestor of this position that has a mapping to
   * the model.
   *
   * @param viewPosition Position for which a mapped ancestor should be found.
   */
  findMappedViewAncestor(e) {
    let t = e.parent;
    for (; !this._viewToModelMapping.has(t); )
      t = t.parent;
    return t;
  }
  /**
   * Calculates model offset based on the view position and the block element.
   *
   * Example:
   *
   * ```html
   * <p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5
   * ```
   *
   * Is a sum of:
   *
   * ```html
   * <p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3
   * <p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2
   * ```
   *
   * @param viewParent Position parent.
   * @param viewOffset Position offset.
   * @param viewBlock Block used as a base to calculate offset.
   * @returns Offset in the model.
   */
  _toModelOffset(e, t, i) {
    if (i != e) {
      const r = this._toModelOffset(e.parent, e.index, i), o = this._toModelOffset(e, t, e);
      return r + o;
    }
    if (e.is("$text"))
      return t;
    let s = 0;
    for (let r = 0; r < t; r++)
      s += this.getModelLength(e.getChild(r));
    return s;
  }
  /**
   * Gets the length of the view element in the model.
   *
   * The length is calculated as follows:
   * * if a {@link #registerViewToModelLength length mapping callback} is provided for the given `viewNode`, it is used to
   * evaluate the model length (`viewNode` is used as first and only parameter passed to the callback),
   * * length of a {@link module:engine/view/text~Text text node} is equal to the length of its
   * {@link module:engine/view/text~Text#data data},
   * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,
   * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,
   * * length of a non-mapped {@link module:engine/view/element~Element element} is equal to the length of its children.
   *
   * Examples:
   *
   * ```
   * foo                          -> 3 // Text length is equal to its data length.
   * <p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.
   * <b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.
   * <div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.
   * ```
   *
   * @param viewNode View node.
   * @returns Length of the node in the tree model.
   */
  getModelLength(e) {
    if (this._viewToModelLengthCallbacks.get(e.name))
      return this._viewToModelLengthCallbacks.get(e.name)(e);
    if (this._viewToModelMapping.has(e))
      return 1;
    if (e.is("$text"))
      return e.data.length;
    if (e.is("uiElement"))
      return 0;
    {
      let t = 0;
      for (const i of e.getChildren())
        t += this.getModelLength(i);
      return t;
    }
  }
  /**
   * Finds the position in the view node (or in its children) with the expected model offset.
   *
   * Example:
   *
   * ```
   * <p>fo<b>bar</b>bom</p> -> expected offset: 4
   *
   * findPositionIn( p, 4 ):
   * <p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0
   * <p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2
   * <p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far
   *
   * findPositionIn( b, 4 - ( 5 - 3 ) ):
   * <p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0
   * <p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far
   *
   * findPositionIn( bar, 2 - ( 3 - 3 ) ):
   * We are in the text node so we can simple find the offset.
   * <p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found
   * ```
   *
   * @param viewParent Tree view element in which we are looking for the position.
   * @param expectedOffset Expected offset.
   * @returns Found position.
   */
  findPositionIn(e, t) {
    let i, s = 0, r = 0, o = 0;
    if (e.is("$text"))
      return new v(e, t);
    for (; r < t; )
      i = e.getChild(o), s = this.getModelLength(i), r += s, o++;
    return r == t ? this._moveViewPositionToTextNode(new v(e, o)) : this.findPositionIn(i, t - (r - s));
  }
  /**
   * Because we prefer positions in the text nodes over positions next to text nodes, if the view position was next to a text node,
   * it moves it into the text node instead.
   *
   * ```
   * <p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text
   * <p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node
   * <p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node
   * ```
   *
   * @param viewPosition Position potentially next to the text node.
   * @returns Position in the text node if possible.
   */
  _moveViewPositionToTextNode(e) {
    const t = e.nodeBefore, i = e.nodeAfter;
    return t instanceof q ? new v(t, t.data.length) : i instanceof q ? new v(i, 0) : e;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Iv {
  constructor() {
    this._consumable = /* @__PURE__ */ new Map(), this._textProxyRegistry = /* @__PURE__ */ new Map();
  }
  /**
   * Adds a consumable value to the consumables list and links it with a given model item.
   *
   * ```ts
   * modelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.
   * modelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.
   * modelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.
   * modelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.
   * modelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.
   * ```
   *
   * @param item Model item, range or selection that has the consumable.
   * @param type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.
   * Second colon and everything after will be cut. Passing event name is a safe and good practice.
   */
  add(e, t) {
    t = Qi(t), e instanceof Ie && (e = this._getSymbolForTextProxy(e)), this._consumable.has(e) || this._consumable.set(e, /* @__PURE__ */ new Map()), this._consumable.get(e).set(t, !0);
  }
  /**
   * Removes a given consumable value from a given model item.
   *
   * ```ts
   * modelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.
   * modelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.
   * modelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.
   * modelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.
   * modelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.
   * ```
   *
   * @param item Model item, range or selection from which consumable will be consumed.
   * @param type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.
   * Second colon and everything after will be cut. Passing event name is a safe and good practice.
   * @returns `true` if consumable value was available and was consumed, `false` otherwise.
   */
  consume(e, t) {
    return t = Qi(t), e instanceof Ie && (e = this._getSymbolForTextProxy(e)), this.test(e, t) ? (this._consumable.get(e).set(t, !1), !0) : !1;
  }
  /**
   * Tests whether there is a consumable value of a given type connected with a given model item.
   *
   * ```ts
   * modelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.
   * modelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.
   * modelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.
   * modelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.
   * modelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.
   * ```
   *
   * @param item Model item, range or selection to be tested.
   * @param type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.
   * Second colon and everything after will be cut. Passing event name is a safe and good practice.
   * @returns `null` if such consumable was never added, `false` if the consumable values was
   * already consumed or `true` if it was added and not consumed yet.
   */
  test(e, t) {
    t = Qi(t), e instanceof Ie && (e = this._getSymbolForTextProxy(e));
    const i = this._consumable.get(e);
    if (i === void 0)
      return null;
    const s = i.get(t);
    return s === void 0 ? null : s;
  }
  /**
   * Reverts consuming of a consumable value.
   *
   * ```ts
   * modelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.
   * modelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.
   * modelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.
   * modelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.
   * modelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.
   * ```
   *
   * @param item Model item, range or selection to be reverted.
   * @param type Consumable type.
   * @returns `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has
   * never been added.
   */
  revert(e, t) {
    t = Qi(t), e instanceof Ie && (e = this._getSymbolForTextProxy(e));
    const i = this.test(e, t);
    return i === !1 ? (this._consumable.get(e).set(t, !0), !0) : i === !0 ? !1 : null;
  }
  /**
   * Verifies if all events from the specified group were consumed.
   *
   * @param eventGroup The events group to verify.
   */
  verifyAllConsumed(e) {
    const t = [];
    for (const [i, s] of this._consumable)
      for (const [r, o] of s) {
        const a = r.split(":")[0];
        o && e == a && t.push({
          event: r,
          item: i.name || i.description
        });
      }
    if (t.length)
      throw new f("conversion-model-consumable-not-consumed", null, { items: t });
  }
  /**
   * Gets a unique symbol for the passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that
   * have same parent, same start index and same end index will get the same symbol.
   *
   * Used internally to correctly consume `TextProxy` instances.
   *
   * @internal
   * @param textProxy `TextProxy` instance to get a symbol for.
   * @returns Symbol representing all equal instances of `TextProxy`.
   */
  _getSymbolForTextProxy(e) {
    let t = null;
    const i = this._textProxyRegistry.get(e.startOffset);
    if (i) {
      const s = i.get(e.endOffset);
      s && (t = s.get(e.parent));
    }
    return t || (t = this._addSymbolForTextProxy(e)), t;
  }
  /**
   * Adds a symbol for the given {@link module:engine/model/textproxy~TextProxy} instance.
   *
   * Used internally to correctly consume `TextProxy` instances.
   *
   * @param textProxy Text proxy instance.
   * @returns Symbol generated for given `TextProxy`.
   */
  _addSymbolForTextProxy(e) {
    const t = e.startOffset, i = e.endOffset, s = e.parent, r = Symbol("$textProxy:" + e.data);
    let o, a;
    return o = this._textProxyRegistry.get(t), o || (o = /* @__PURE__ */ new Map(), this._textProxyRegistry.set(t, o)), a = o.get(i), a || (a = /* @__PURE__ */ new Map(), o.set(i, a)), a.set(s, r), r;
  }
}
function Qi(n) {
  const e = n.split(":");
  return e[0] == "insert" ? e[0] : e[0] == "addMarker" || e[0] == "removeMarker" ? n : e.length > 1 ? e[0] + ":" + e[1] : e[0];
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class gh extends L() {
  /**
   * Creates a downcast dispatcher instance.
   *
   * @see module:engine/conversion/downcastdispatcher~DowncastConversionApi
   *
   * @param conversionApi Additional properties for an interface that will be passed to events fired
   * by the downcast dispatcher.
   */
  constructor(e) {
    super(), this._conversionApi = { dispatcher: this, ...e }, this._firedEventsMap = /* @__PURE__ */ new WeakMap();
  }
  /**
   * Converts changes buffered in the given {@link module:engine/model/differ~Differ model differ}
   * and fires conversion events based on it.
   *
   * @fires insert
   * @fires remove
   * @fires attribute
   * @fires addMarker
   * @fires removeMarker
   * @fires reduceChanges
   * @param differ The differ object with buffered changes.
   * @param markers Markers related to the model fragment to convert.
   * @param writer The view writer that should be used to modify the view document.
   */
  convertChanges(e, t, i) {
    const s = this._createConversionApi(i, e.getRefreshedItems());
    for (const o of e.getMarkersToRemove())
      this._convertMarkerRemove(o.name, o.range, s);
    const r = this._reduceChanges(e.getChanges());
    for (const o of r)
      o.type === "insert" ? this._convertInsert(g._createFromPositionAndShift(o.position, o.length), s) : o.type === "reinsert" ? this._convertReinsert(g._createFromPositionAndShift(o.position, o.length), s) : o.type === "remove" ? this._convertRemove(o.position, o.length, o.name, s) : this._convertAttribute(o.range, o.attributeKey, o.attributeOldValue, o.attributeNewValue, s);
    for (const o of s.mapper.flushUnboundMarkerNames()) {
      const a = t.get(o).getRange();
      this._convertMarkerRemove(o, a, s), this._convertMarkerAdd(o, a, s);
    }
    for (const o of e.getMarkersToAdd())
      this._convertMarkerAdd(o.name, o.range, s);
    s.mapper.flushDeferredBindings(), s.consumable.verifyAllConsumed("insert");
  }
  /**
   * Starts a conversion of a model range and the provided markers.
   *
   * @fires insert
   * @fires attribute
   * @fires addMarker
   * @param range The inserted range.
   * @param markers The map of markers that should be down-casted.
   * @param writer The view writer that should be used to modify the view document.
   * @param options Optional options object passed to `convertionApi.options`.
   */
  convert(e, t, i, s = {}) {
    const r = this._createConversionApi(i, void 0, s);
    this._convertInsert(e, r);
    for (const [o, a] of t)
      this._convertMarkerAdd(o, a, r);
    r.consumable.verifyAllConsumed("insert");
  }
  /**
   * Starts the model selection conversion.
   *
   * Fires events for a given {@link module:engine/model/selection~Selection selection} to start the selection conversion.
   *
   * @fires selection
   * @fires addMarker
   * @fires attribute
   * @param selection The selection to convert.
   * @param markers Markers connected with the converted model.
   * @param writer View writer that should be used to modify the view document.
   */
  convertSelection(e, t, i) {
    const s = Array.from(t.getMarkersAtPosition(e.getFirstPosition())), r = this._createConversionApi(i);
    if (this._addConsumablesForSelection(r.consumable, e, s), this.fire("selection", { selection: e }, r), !!e.isCollapsed) {
      for (const o of s) {
        const a = o.getRange();
        if (!Rv(e.getFirstPosition(), o, r.mapper))
          continue;
        const l = {
          item: e,
          markerName: o.name,
          markerRange: a
        };
        r.consumable.test(e, "addMarker:" + o.name) && this.fire(`addMarker:${o.name}`, l, r);
      }
      for (const o of e.getAttributeKeys()) {
        const a = {
          item: e,
          range: e.getFirstRange(),
          attributeKey: o,
          attributeOldValue: null,
          attributeNewValue: e.getAttribute(o)
        };
        r.consumable.test(e, "attribute:" + a.attributeKey) && this.fire(`attribute:${a.attributeKey}:$text`, a, r);
      }
    }
  }
  /**
   * Fires insertion conversion of a range of nodes.
   *
   * For each node in the range, {@link #event:insert `insert` event is fired}. For each attribute on each node,
   * {@link #event:attribute `attribute` event is fired}.
   *
   * @fires insert
   * @fires attribute
   * @param range The inserted range.
   * @param conversionApi The conversion API object.
   * @param options.doNotAddConsumables Whether the ModelConsumable should not get populated
   * for items in the provided range.
   */
  _convertInsert(e, t, i = {}) {
    i.doNotAddConsumables || this._addConsumablesForInsert(t.consumable, Array.from(e));
    for (const s of Array.from(e.getWalker({ shallow: !0 })).map(Ma))
      this._testAndFire("insert", s, t);
  }
  /**
   * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.
   *
   * @param position Position from which node was removed.
   * @param length Offset size of removed node.
   * @param name Name of removed node.
   * @param conversionApi The conversion API object.
   */
  _convertRemove(e, t, i, s) {
    this.fire(`remove:${i}`, { position: e, length: t }, s);
  }
  /**
   * Starts a conversion of an attribute change on a given `range`.
   *
   * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.
   *
   * @fires attribute
   * @param range Changed range.
   * @param key Key of the attribute that has changed.
   * @param oldValue Attribute value before the change or `null` if the attribute has not been set before.
   * @param newValue New attribute value or `null` if the attribute has been removed.
   * @param conversionApi The conversion API object.
   */
  _convertAttribute(e, t, i, s, r) {
    this._addConsumablesForRange(r.consumable, e, `attribute:${t}`);
    for (const o of e) {
      const a = {
        item: o.item,
        range: g._createFromPositionAndShift(o.previousPosition, o.length),
        attributeKey: t,
        attributeOldValue: i,
        attributeNewValue: s
      };
      this._testAndFire(`attribute:${t}`, a, r);
    }
  }
  /**
   * Fires re-insertion conversion (with a `reconversion` flag passed to `insert` events)
   * of a range of elements (only elements on the range depth, without children).
   *
   * For each node in the range on its depth (without children), {@link #event:insert `insert` event} is fired.
   * For each attribute on each node, {@link #event:attribute `attribute` event} is fired.
   *
   * @fires insert
   * @fires attribute
   * @param range The range to reinsert.
   * @param conversionApi The conversion API object.
   */
  _convertReinsert(e, t) {
    const i = Array.from(e.getWalker({ shallow: !0 }));
    this._addConsumablesForInsert(t.consumable, i);
    for (const s of i.map(Ma))
      this._testAndFire("insert", { ...s, reconversion: !0 }, t);
  }
  /**
   * Converts the added marker. Fires the {@link #event:addMarker `addMarker`} event for each item
   * in the marker's range. If the range is collapsed, a single event is dispatched. See the event description for more details.
   *
   * @fires addMarker
   * @param markerName Marker name.
   * @param markerRange The marker range.
   * @param conversionApi The conversion API object.
   */
  _convertMarkerAdd(e, t, i) {
    if (t.root.rootName == "$graveyard")
      return;
    const s = `addMarker:${e}`;
    if (i.consumable.add(t, s), this.fire(s, { markerName: e, markerRange: t }, i), !!i.consumable.consume(t, s)) {
      this._addConsumablesForRange(i.consumable, t, s);
      for (const r of t.getItems()) {
        if (!i.consumable.test(r, s))
          continue;
        const o = { item: r, range: g._createOn(r), markerName: e, markerRange: t };
        this.fire(s, o, i);
      }
    }
  }
  /**
   * Fires the conversion of the marker removal. Fires the {@link #event:removeMarker `removeMarker`} event with the provided data.
   *
   * @fires removeMarker
   * @param markerName Marker name.
   * @param markerRange The marker range.
   * @param conversionApi The conversion API object.
   */
  _convertMarkerRemove(e, t, i) {
    t.root.rootName != "$graveyard" && this.fire(`removeMarker:${e}`, { markerName: e, markerRange: t }, i);
  }
  /**
   * Fires the reduction of changes buffered in the {@link module:engine/model/differ~Differ `Differ`}.
   *
   * Features can replace selected {@link module:engine/model/differ~DiffItem `DiffItem`}s with `reinsert` entries to trigger
   * reconversion. The {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToStructure
   * `DowncastHelpers.elementToStructure()`} is using this event to trigger reconversion.
   *
   * @fires reduceChanges
   */
  _reduceChanges(e) {
    const t = { changes: e };
    return this.fire("reduceChanges", t), t.changes;
  }
  /**
   * Populates provided {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from a given range,
   * assuming that the range has just been inserted to the model.
   *
   * @param consumable The consumable.
   * @param walkerValues The walker values for the inserted range.
   * @returns The values to consume.
   */
  _addConsumablesForInsert(e, t) {
    for (const i of t) {
      const s = i.item;
      if (e.test(s, "insert") === null) {
        e.add(s, "insert");
        for (const r of s.getAttributeKeys())
          e.add(s, "attribute:" + r);
      }
    }
    return e;
  }
  /**
   * Populates provided {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for a given range.
   *
   * @param consumable The consumable.
   * @param range The affected range.
   * @param type Consumable type.
   * @returns The values to consume.
   */
  _addConsumablesForRange(e, t, i) {
    for (const s of t.getItems())
      e.add(s, i);
    return e;
  }
  /**
   * Populates provided {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.
   *
   * @param consumable The consumable.
   * @param selection The selection to create the consumable from.
   * @param markers Markers that contain the selection.
   * @returns The values to consume.
   */
  _addConsumablesForSelection(e, t, i) {
    e.add(t, "selection");
    for (const s of i)
      e.add(t, "addMarker:" + s.name);
    for (const s of t.getAttributeKeys())
      e.add(t, "attribute:" + s);
    return e;
  }
  /**
   * Tests whether given event wasn't already fired and if so, fires it.
   *
   * @fires insert
   * @fires attribute
   * @param type Event type.
   * @param data Event data.
   * @param conversionApi The conversion API object.
   */
  _testAndFire(e, t, i) {
    const s = Vv(e, t), r = t.item.is("$textProxy") ? i.consumable._getSymbolForTextProxy(t.item) : t.item, o = this._firedEventsMap.get(i), a = o.get(r);
    if (!a)
      o.set(r, /* @__PURE__ */ new Set([s]));
    else if (!a.has(s))
      a.add(s);
    else
      return;
    this.fire(s, t, i);
  }
  /**
   * Fires not already fired events for setting attributes on just inserted item.
   *
   * @param item The model item to convert attributes for.
   * @param conversionApi The conversion API object.
   */
  _testAndFireAddAttributes(e, t) {
    const i = {
      item: e,
      range: g._createOn(e)
    };
    for (const s of i.item.getAttributeKeys())
      i.attributeKey = s, i.attributeOldValue = null, i.attributeNewValue = i.item.getAttribute(s), this._testAndFire(`attribute:${s}`, i, t);
  }
  /**
   * Builds an instance of the {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi} from a template and a given
   * {@link module:engine/view/downcastwriter~DowncastWriter `DowncastWriter`} and options object.
   *
   * @param writer View writer that should be used to modify the view document.
   * @param refreshedItems A set of model elements that should not reuse their
   * previous view representations.
   * @param options Optional options passed to `convertionApi.options`.
   * @return The conversion API object.
   */
  _createConversionApi(e, t = /* @__PURE__ */ new Set(), i = {}) {
    const s = {
      ...this._conversionApi,
      consumable: new Iv(),
      writer: e,
      options: i,
      convertItem: (r) => this._convertInsert(g._createOn(r), s),
      convertChildren: (r) => this._convertInsert(g._createIn(r), s, { doNotAddConsumables: !0 }),
      convertAttributes: (r) => this._testAndFireAddAttributes(r, s),
      canReuseView: (r) => !t.has(s.mapper.toModelElement(r))
    };
    return this._firedEventsMap.set(s, /* @__PURE__ */ new Map()), s;
  }
}
function Rv(n, e, t) {
  const i = e.getRange(), s = Array.from(n.getAncestors());
  return s.shift(), s.reverse(), !s.some((o) => {
    if (i.containsItem(o))
      return !!t.toViewElement(o).getCustomProperty("addHighlight");
  });
}
function Vv(n, e) {
  const t = e.item.is("element") ? e.item.name : "$text";
  return `${n}:${t}`;
}
function Ma(n) {
  const e = n.item, t = g._createFromPositionAndShift(n.previousPosition, n.length);
  return {
    item: e,
    range: t
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class _e extends L(gt) {
  /**
   * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}
   * or creates an empty selection if no arguments were passed.
   *
   * ```ts
   * // Creates empty selection without ranges.
   * const selection = writer.createSelection();
   *
   * // Creates selection at the given range.
   * const range = writer.createRange( start, end );
   * const selection = writer.createSelection( range );
   *
   * // Creates selection at the given ranges
   * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];
   * const selection = writer.createSelection( ranges );
   *
   * // Creates selection from the other selection.
   * // Note: It doesn't copy selection attributes.
   * const otherSelection = writer.createSelection();
   * const selection = writer.createSelection( otherSelection );
   *
   * // Creates selection from the given document selection.
   * // Note: It doesn't copy selection attributes.
   * const documentSelection = model.document.selection;
   * const selection = writer.createSelection( documentSelection );
   *
   * // Creates selection at the given position.
   * const position = writer.createPositionFromPath( root, path );
   * const selection = writer.createSelection( position );
   *
   * // Creates selection at the given offset in the given element.
   * const paragraph = writer.createElement( 'paragraph' );
   * const selection = writer.createSelection( paragraph, offset );
   *
   * // Creates a range inside an {@link module:engine/model/element~Element element} which starts before the
   * // first child of that element and ends after the last child of that element.
   * const selection = writer.createSelection( paragraph, 'in' );
   *
   * // Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends
   * // just after the item.
   * const selection = writer.createSelection( paragraph, 'on' );
   * ```
   *
   * Selection's constructor allow passing additional options (`'backward'`) as the last argument.
   *
   * ```ts
   * // Creates backward selection.
   * const selection = writer.createSelection( range, { backward: true } );
   * ```
   *
   * @internal
   */
  constructor(...e) {
    super(), this._lastRangeBackward = !1, this._attrs = /* @__PURE__ */ new Map(), this._ranges = [], e.length && this.setTo(...e);
  }
  /**
   * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection
   * by dragging the mouse, the anchor is where the user pressed the mouse button (the beginning of the selection).
   *
   * Anchor and {@link #focus} define the direction of the selection, which is important
   * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.
   *
   * Anchor is always set to the {@link module:engine/model/range~Range#start start} or
   * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is
   * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.
   *
   * May be set to `null` if there are no ranges in the selection.
   *
   * @see #focus
   */
  get anchor() {
    if (this._ranges.length > 0) {
      const e = this._ranges[this._ranges.length - 1];
      return this._lastRangeBackward ? e.end : e.start;
    }
    return null;
  }
  /**
   * Selection focus. Focus is the position where the selection ends. If a user is making a selection
   * by dragging the mouse, the focus is where the mouse cursor is.
   *
   * May be set to `null` if there are no ranges in the selection.
   *
   * @see #anchor
   */
  get focus() {
    if (this._ranges.length > 0) {
      const e = this._ranges[this._ranges.length - 1];
      return this._lastRangeBackward ? e.start : e.end;
    }
    return null;
  }
  /**
   * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it
   * and it is collapsed.
   */
  get isCollapsed() {
    return this._ranges.length === 1 ? this._ranges[0].isCollapsed : !1;
  }
  /**
   * Returns the number of ranges in the selection.
   */
  get rangeCount() {
    return this._ranges.length;
  }
  /**
   * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.
   */
  get isBackward() {
    return !this.isCollapsed && this._lastRangeBackward;
  }
  /**
   * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,
   * the same number of ranges and all ranges from one selection equal to ranges from the another selection.
   *
   * @param otherSelection Selection to compare with.
   * @returns `true` if selections are equal, `false` otherwise.
   */
  isEqual(e) {
    if (this.rangeCount != e.rangeCount)
      return !1;
    if (this.rangeCount === 0)
      return !0;
    if (!this.anchor.isEqual(e.anchor) || !this.focus.isEqual(e.focus))
      return !1;
    for (const t of this._ranges) {
      let i = !1;
      for (const s of e._ranges)
        if (t.isEqual(s)) {
          i = !0;
          break;
        }
      if (!i)
        return !1;
    }
    return !0;
  }
  /**
   * Returns an iterable object that iterates over copies of selection ranges.
   */
  *getRanges() {
    for (const e of this._ranges)
      yield new g(e.start, e.end);
  }
  /**
   * Returns a copy of the first range in the selection.
   * First range is the one which {@link module:engine/model/range~Range#start start} position
   * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges
   * (not to confuse with the first range added to the selection).
   *
   * Returns `null` if there are no ranges in selection.
   */
  getFirstRange() {
    let e = null;
    for (const t of this._ranges)
      (!e || t.start.isBefore(e.start)) && (e = t);
    return e ? new g(e.start, e.end) : null;
  }
  /**
   * Returns a copy of the last range in the selection.
   * Last range is the one which {@link module:engine/model/range~Range#end end} position
   * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most
   * recently added to the selection).
   *
   * Returns `null` if there are no ranges in selection.
   */
  getLastRange() {
    let e = null;
    for (const t of this._ranges)
      (!e || t.end.isAfter(e.end)) && (e = t);
    return e ? new g(e.start, e.end) : null;
  }
  /**
   * Returns the first position in the selection.
   * First position is the position that {@link module:engine/model/position~Position#isBefore is before}
   * any other position in the selection.
   *
   * Returns `null` if there are no ranges in selection.
   */
  getFirstPosition() {
    const e = this.getFirstRange();
    return e ? e.start.clone() : null;
  }
  /**
   * Returns the last position in the selection.
   * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}
   * any other position in the selection.
   *
   * Returns `null` if there are no ranges in selection.
   */
  getLastPosition() {
    const e = this.getLastRange();
    return e ? e.end.clone() : null;
  }
  /**
   * Sets this selection's ranges and direction to the specified location based on the given
   * {@link module:engine/model/selection~Selectable selectable}.
   *
   * ```ts
   * // Removes all selection's ranges.
   * selection.setTo( null );
   *
   * // Sets selection to the given range.
   * const range = writer.createRange( start, end );
   * selection.setTo( range );
   *
   * // Sets selection to given ranges.
   * const ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];
   * selection.setTo( ranges );
   *
   * // Sets selection to other selection.
   * // Note: It doesn't copy selection attributes.
   * const otherSelection = writer.createSelection();
   * selection.setTo( otherSelection );
   *
   * // Sets selection to the given document selection.
   * // Note: It doesn't copy selection attributes.
   * const documentSelection = new DocumentSelection( doc );
   * selection.setTo( documentSelection );
   *
   * // Sets collapsed selection at the given position.
   * const position = writer.createPositionFromPath( root, path );
   * selection.setTo( position );
   *
   * // Sets collapsed selection at the position of the given node and an offset.
   * selection.setTo( paragraph, offset );
   * ```
   *
   * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of
   * that element and ends after the last child of that element.
   *
   * ```ts
   * selection.setTo( paragraph, 'in' );
   * ```
   *
   * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.
   *
   * ```ts
   * selection.setTo( paragraph, 'on' );
   * ```
   *
   * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.
   *
   * ```ts
   * // Sets backward selection.
   * const selection = writer.createSelection( range, { backward: true } );
   * ```
   */
  setTo(...e) {
    let [t, i, s] = e;
    if (typeof i == "object" && (s = i, i = void 0), t === null)
      this._setRanges([]);
    else if (t instanceof _e)
      this._setRanges(t.getRanges(), t.isBackward);
    else if (t && typeof t.getRanges == "function")
      this._setRanges(t.getRanges(), t.isBackward);
    else if (t instanceof g)
      this._setRanges([t], !!s && !!s.backward);
    else if (t instanceof w)
      this._setRanges([new g(t)]);
    else if (t instanceof Lt) {
      const r = !!s && !!s.backward;
      let o;
      if (i == "in")
        o = g._createIn(t);
      else if (i == "on")
        o = g._createOn(t);
      else if (i !== void 0)
        o = new g(w._createAt(t, i));
      else
        throw new f("model-selection-setto-required-second-parameter", [this, t]);
      this._setRanges([o], r);
    } else if (ye(t))
      this._setRanges(t, s && !!s.backward);
    else
      throw new f("model-selection-setto-not-selectable", [this, t]);
  }
  /**
   * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array
   * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and
   * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.
   *
   * @fires change:range
   * @param newRanges Ranges to set.
   * @param isLastBackward Flag describing if last added range was selected forward - from start to end (`false`)
   * or backward - from end to start (`true`).
   */
  _setRanges(e, t = !1) {
    const i = Array.from(e), s = i.some((r) => {
      if (!(r instanceof g))
        throw new f("model-selection-set-ranges-not-range", [this, e]);
      return this._ranges.every((o) => !o.isEqual(r));
    });
    i.length === this._ranges.length && !s || (this._replaceAllRanges(i), this._lastRangeBackward = !!t, this.fire("change:range", { directChange: !0 }));
  }
  /**
   * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.
   *
   * The location can be specified in the same form as
   * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.
   *
   * @fires change:range
   * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.
   */
  setFocus(e, t) {
    if (this.anchor === null)
      throw new f("model-selection-setfocus-no-ranges", [this, e]);
    const i = w._createAt(e, t);
    if (i.compareWith(this.focus) == "same")
      return;
    const s = this.anchor;
    this._ranges.length && this._popRange(), i.compareWith(s) == "before" ? (this._pushRange(new g(i, s)), this._lastRangeBackward = !0) : (this._pushRange(new g(s, i)), this._lastRangeBackward = !1), this.fire("change:range", { directChange: !0 });
  }
  /**
   * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.
   *
   * @param key Key of attribute to look for.
   * @returns Attribute value or `undefined`.
   */
  getAttribute(e) {
    return this._attrs.get(e);
  }
  /**
   * Returns iterable that iterates over this selection's attributes.
   *
   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.
   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.
   */
  getAttributes() {
    return this._attrs.entries();
  }
  /**
   * Returns iterable that iterates over this selection's attribute keys.
   */
  getAttributeKeys() {
    return this._attrs.keys();
  }
  /**
   * Checks if the selection has an attribute for given key.
   *
   * @param key Key of attribute to check.
   * @returns `true` if attribute with given key is set on selection, `false` otherwise.
   */
  hasAttribute(e) {
    return this._attrs.has(e);
  }
  /**
   * Removes an attribute with given key from the selection.
   *
   * If given attribute was set on the selection, fires the {@link #event:change:range} event with
   * removed attribute key.
   *
   * @fires change:attribute
   * @param key Key of attribute to remove.
   */
  removeAttribute(e) {
    this.hasAttribute(e) && (this._attrs.delete(e), this.fire("change:attribute", { attributeKeys: [e], directChange: !0 }));
  }
  /**
   * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.
   *
   * If the attribute value has changed, fires the {@link #event:change:range} event with
   * the attribute key.
   *
   * @fires change:attribute
   * @param key Key of attribute to set.
   * @param value Attribute value.
   */
  setAttribute(e, t) {
    this.getAttribute(e) !== t && (this._attrs.set(e, t), this.fire("change:attribute", { attributeKeys: [e], directChange: !0 }));
  }
  /**
   * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only
   * one range in the selection, and that range contains exactly one element.
   * Returns `null` if there is no selected element.
   */
  getSelectedElement() {
    return this.rangeCount !== 1 ? null : this.getFirstRange().getContainedElement();
  }
  /**
   * Gets elements of type {@link module:engine/model/schema~Schema#isBlock "block"} touched by the selection.
   *
   * This method's result can be used for example to apply block styling to all blocks covered by this selection.
   *
   * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements
   * but will not return blocks nested in other blocks.
   *
   * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):
   *
   * ```xml
   * <paragraph>[a</paragraph>
   * <blockQuote>
   * 	<paragraph>b</paragraph>
   * </blockQuote>
   * <paragraph>c]d</paragraph>
   * ```
   *
   * In this case the paragraph will also be returned, despite the collapsed selection:
   *
   * ```xml
   * <paragraph>[]a</paragraph>
   * ```
   *
   * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:
   *
   * ```xml
   * [<blockA></blockA>
   * <blockB>
   * 	<blockC></blockC>
   * 	<blockD></blockD>
   * </blockB>
   * <blockE></blockE>]
   * ```
   *
   * If the selection is inside a block all the inner blocks (A & B) are returned:
   *
   * ```xml
   * <block>
   * 	<blockA>[a</blockA>
   * 	<blockB>b]</blockB>
   * </block>
   * ```
   *
   * **Special case**: Selection ignores first and/or last blocks if nothing (from user perspective) is selected in them.
   *
   * ```xml
   * // Selection ends and the beginning of the last block.
   * <paragraph>[a</paragraph>
   * <paragraph>b</paragraph>
   * <paragraph>]c</paragraph> // This block will not be returned
   *
   * // Selection begins at the end of the first block.
   * <paragraph>a[</paragraph> // This block will not be returned
   * <paragraph>b</paragraph>
   * <paragraph>c]</paragraph>
   *
   * // Selection begings at the end of the first block and ends at the beginning of the last block.
   * <paragraph>a[</paragraph> // This block will not be returned
   * <paragraph>b</paragraph>
   * <paragraph>]c</paragraph> // This block will not be returned
   * ```
   */
  *getSelectedBlocks() {
    const e = /* @__PURE__ */ new WeakSet();
    for (const t of this.getRanges()) {
      const i = Ba(t.start, e);
      Mv(i, t) && (yield i);
      for (const r of t.getWalker()) {
        const o = r.item;
        r.type == "elementEnd" && Ov(o, e, t) && (yield o);
      }
      const s = Ba(t.end, e);
      Bv(s, t) && (yield s);
    }
  }
  /**
   * Checks whether the selection contains the entire content of the given element. This means that selection must start
   * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position
   * touching the element's end.
   *
   * By default, this method will check whether the entire content of the selection's current root is selected.
   * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.
   */
  containsEntireContent(e = this.anchor.root) {
    const t = w._createAt(e, 0), i = w._createAt(e, "end");
    return t.isTouching(this.getFirstPosition()) && i.isTouching(this.getLastPosition());
  }
  /**
   * Adds given range to internal {@link #_ranges ranges array}. Throws an error
   * if given range is intersecting with any range that is already stored in this selection.
   */
  _pushRange(e) {
    this._checkRange(e), this._ranges.push(new g(e.start, e.end));
  }
  /**
   * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.
   */
  _checkRange(e) {
    for (let t = 0; t < this._ranges.length; t++)
      if (e.isIntersecting(this._ranges[t]))
        throw new f("model-selection-range-intersects", [this, e], { addedRange: e, intersectingRange: this._ranges[t] });
  }
  /**
   * Replaces all the ranges by the given ones.
   * Uses {@link #_popRange _popRange} and {@link #_pushRange _pushRange} to ensure proper ranges removal and addition.
   */
  _replaceAllRanges(e) {
    this._removeAllRanges();
    for (const t of e)
      this._pushRange(t);
  }
  /**
   * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to
   * ensure proper ranges removal.
   */
  _removeAllRanges() {
    for (; this._ranges.length > 0; )
      this._popRange();
  }
  /**
   * Removes most recently added range from the selection.
   */
  _popRange() {
    this._ranges.pop();
  }
}
_e.prototype.is = function(n) {
  return n === "selection" || n === "model:selection";
};
function ph(n, e) {
  return e.has(n) ? !1 : (e.add(n), n.root.document.model.schema.isBlock(n) && !!n.parent);
}
function Ov(n, e, t) {
  return ph(n, e) && Kr(n, t);
}
function Ba(n, e) {
  const i = n.parent.root.document.model.schema, s = n.parent.getAncestors({ parentFirst: !0, includeSelf: !0 });
  let r = !1;
  const o = s.find((a) => r ? !1 : (r = i.isLimit(a), !r && ph(a, e)));
  return s.forEach((a) => e.add(a)), o;
}
function Kr(n, e) {
  const t = Dv(n);
  return t ? !e.containsRange(g._createOn(t), !0) : !0;
}
function Mv(n, e) {
  return n ? e.isCollapsed || n.isEmpty ? !0 : e.start.isTouching(w._createAt(n, n.maxOffset)) ? !1 : Kr(n, e) : !1;
}
function Bv(n, e) {
  return n ? e.isCollapsed || n.isEmpty ? !0 : e.end.isTouching(w._createAt(n, 0)) ? !1 : Kr(n, e) : !1;
}
function Dv(n) {
  const e = n.root.document.model.schema;
  let t = n.parent;
  for (; t; ) {
    if (e.isBlock(t))
      return t;
    t = t.parent;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class We extends L(g) {
  /**
   * Creates a live range.
   *
   * @see module:engine/model/range~Range
   */
  constructor(e, t) {
    super(e, t), Fv.call(this);
  }
  /**
   * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance
   * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was
   * referring to it).
   */
  detach() {
    this.stopListening();
  }
  /**
   * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.
   */
  toRange() {
    return new g(this.start, this.end);
  }
  /**
   * Creates a `LiveRange` instance that is equal to the given range.
   */
  static fromRange(e) {
    return new We(e.start, e.end);
  }
}
We.prototype.is = function(n) {
  return n === "liveRange" || n === "model:liveRange" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n == "range" || n === "model:range";
};
function Fv() {
  this.listenTo(this.root.document.model, "applyOperation", (n, e) => {
    const t = e[0];
    t.isDocumentOperation && Nv.call(this, t);
  }, { priority: "low" });
}
function Nv(n) {
  const e = this.getTransformedByOperation(n), t = g._createFromRanges(e), i = !t.isEqual(this), s = Lv(this, n);
  let r = null;
  if (i) {
    t.root.rootName == "$graveyard" && (n.type == "remove" ? r = n.sourcePosition : r = n.deletionPosition);
    const o = this.toRange();
    this.start = t.start, this.end = t.end, this.fire("change:range", o, { deletionPosition: r });
  } else
    s && this.fire("change:content", this.toRange(), { deletionPosition: r });
}
function Lv(n, e) {
  switch (e.type) {
    case "insert":
      return n.containsPosition(e.position);
    case "move":
    case "remove":
    case "reinsert":
    case "merge":
      return n.containsPosition(e.sourcePosition) || n.start.isEqual(e.sourcePosition) || n.containsPosition(e.targetPosition);
    case "split":
      return n.containsPosition(e.splitPosition) || n.containsPosition(e.insertionPosition);
  }
  return !1;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Bi = "selection:";
class Ve extends L(gt) {
  /**
   * Creates an empty live selection for given {@link module:engine/model/document~Document}.
   *
   * @param doc Document which owns this selection.
   */
  constructor(e) {
    super(), this._selection = new zv(e), this._selection.delegate("change:range").to(this), this._selection.delegate("change:attribute").to(this), this._selection.delegate("change:marker").to(this);
  }
  /**
   * Describes whether the selection is collapsed. Selection is collapsed when there is exactly one range which is
   * collapsed.
   */
  get isCollapsed() {
    return this._selection.isCollapsed;
  }
  /**
   * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.
   * Together with {@link #focus} they define the direction of selection, which is important
   * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or
   * {@link module:engine/model/range~Range#end end} position of the most recently added range.
   *
   * Is set to `null` if there are no ranges in selection.
   *
   * @see #focus
   */
  get anchor() {
    return this._selection.anchor;
  }
  /**
   * Selection focus. Focus is a position where the selection ends.
   *
   * Is set to `null` if there are no ranges in selection.
   *
   * @see #anchor
   */
  get focus() {
    return this._selection.focus;
  }
  /**
   * Number of ranges in selection.
   */
  get rangeCount() {
    return this._selection.rangeCount;
  }
  /**
   * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to
   * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.
   */
  get hasOwnRange() {
    return this._selection.hasOwnRange;
  }
  /**
   * Specifies whether the {@link #focus}
   * precedes {@link #anchor}.
   *
   * @readonly
   * @type {Boolean}
   */
  get isBackward() {
    return this._selection.isBackward;
  }
  /**
   * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.
   *
   * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.
   */
  get isGravityOverridden() {
    return this._selection.isGravityOverridden;
  }
  /**
   * A collection of selection {@link module:engine/model/markercollection~Marker markers}.
   * Marker is a selection marker when selection range is inside the marker range.
   *
   * **Note**: Only markers from {@link ~DocumentSelection#observeMarkers observed markers groups} are collected.
   */
  get markers() {
    return this._selection.markers;
  }
  /**
   * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.
   *
   * @internal
   */
  get _ranges() {
    return this._selection._ranges;
  }
  /**
   * Returns an iterable that iterates over copies of selection ranges.
   */
  getRanges() {
    return this._selection.getRanges();
  }
  /**
   * Returns the first position in the selection.
   * First position is the position that {@link module:engine/model/position~Position#isBefore is before}
   * any other position in the selection.
   *
   * Returns `null` if there are no ranges in selection.
   */
  getFirstPosition() {
    return this._selection.getFirstPosition();
  }
  /**
   * Returns the last position in the selection.
   * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}
   * any other position in the selection.
   *
   * Returns `null` if there are no ranges in selection.
   */
  getLastPosition() {
    return this._selection.getLastPosition();
  }
  /**
   * Returns a copy of the first range in the selection.
   * First range is the one which {@link module:engine/model/range~Range#start start} position
   * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges
   * (not to confuse with the first range added to the selection).
   *
   * Returns `null` if there are no ranges in selection.
   */
  getFirstRange() {
    return this._selection.getFirstRange();
  }
  /**
   * Returns a copy of the last range in the selection.
   * Last range is the one which {@link module:engine/model/range~Range#end end} position
   * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most
   * recently added to the selection).
   *
   * Returns `null` if there are no ranges in selection.
   */
  getLastRange() {
    return this._selection.getLastRange();
  }
  /**
   * Gets elements of type {@link module:engine/model/schema~Schema#isBlock "block"} touched by the selection.
   *
   * This method's result can be used for example to apply block styling to all blocks covered by this selection.
   *
   * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements
   * but will not return blocks nested in other blocks.
   *
   * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):
   *
   * ```
   * <paragraph>[a</paragraph>
   * <blockQuote>
   * 	<paragraph>b</paragraph>
   * </blockQuote>
   * <paragraph>c]d</paragraph>
   * ```
   *
   * In this case the paragraph will also be returned, despite the collapsed selection:
   *
   * ```
   * <paragraph>[]a</paragraph>
   * ```
   *
   * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:
   *
   * ```
   * [<blockA></blockA>
   * <blockB>
   * 	<blockC></blockC>
   * 	<blockD></blockD>
   * </blockB>
   * <blockE></blockE>]
   * ```
   *
   * If the selection is inside a block all the inner blocks (A & B) are returned:
   *
   * ```
   * <block>
   * 	<blockA>[a</blockA>
   * 	<blockB>b]</blockB>
   * </block>
   * ```
   *
   * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective
   * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.
   *
   * ```
   * <paragraph>[a</paragraph>
   * <paragraph>b</paragraph>
   * <paragraph>]c</paragraph> // this block will not be returned
   * ```
   */
  getSelectedBlocks() {
    return this._selection.getSelectedBlocks();
  }
  /**
   * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only
   * one range in the selection, and that range contains exactly one element.
   * Returns `null` if there is no selected element.
   */
  getSelectedElement() {
    return this._selection.getSelectedElement();
  }
  /**
   * Checks whether the selection contains the entire content of the given element. This means that selection must start
   * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position
   * touching the element's end.
   *
   * By default, this method will check whether the entire content of the selection's current root is selected.
   * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.
   */
  containsEntireContent(e) {
    return this._selection.containsEntireContent(e);
  }
  /**
   * Unbinds all events previously bound by document selection.
   */
  destroy() {
    this._selection.destroy();
  }
  /**
   * Returns iterable that iterates over this selection's attribute keys.
   */
  getAttributeKeys() {
    return this._selection.getAttributeKeys();
  }
  /**
   * Returns iterable that iterates over this selection's attributes.
   *
   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.
   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.
   */
  getAttributes() {
    return this._selection.getAttributes();
  }
  /**
   * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.
   *
   * @param key Key of attribute to look for.
   * @returns Attribute value or `undefined`.
   */
  getAttribute(e) {
    return this._selection.getAttribute(e);
  }
  /**
   * Checks if the selection has an attribute for given key.
   *
   * @param key Key of attribute to check.
   * @returns `true` if attribute with given key is set on selection, `false` otherwise.
   */
  hasAttribute(e) {
    return this._selection.hasAttribute(e);
  }
  /**
   * Refreshes selection attributes and markers according to the current position in the model.
   */
  refresh() {
    this._selection.updateMarkers(), this._selection._updateAttributes(!1);
  }
  /**
   * Registers a marker group prefix or a marker name to be collected in the
   * {@link ~DocumentSelection#markers selection markers collection}.
   *
   * See also {@link module:engine/model/markercollection~MarkerCollection#getMarkersGroup `MarkerCollection#getMarkersGroup()`}.
   *
   * @param prefixOrName The marker group prefix or marker name.
   */
  observeMarkers(e) {
    this._selection.observeMarkers(e);
  }
  /**
   * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.
   * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.
   *
   * The location can be specified in the same form as
   * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.
   *
   * @see module:engine/model/writer~Writer#setSelectionFocus
   * @internal
   * @param offset Offset or one of the flags. Used only when
   * first parameter is a {@link module:engine/model/item~Item model item}.
   */
  _setFocus(e, t) {
    this._selection.setFocus(e, t);
  }
  /**
   * Sets this selection's ranges and direction to the specified location based on the given
   * {@link module:engine/model/selection~Selectable selectable}.
   * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.
   *
   * @see module:engine/model/writer~Writer#setSelection
   * @internal
   */
  _setTo(...e) {
    this._selection.setTo(...e);
  }
  /**
   * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.
   * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.
   *
   * @see module:engine/model/writer~Writer#setSelectionAttribute
   * @internal
   * @param key Key of the attribute to set.
   * @param value Attribute value.
   */
  _setAttribute(e, t) {
    this._selection.setAttribute(e, t);
  }
  /**
   * Removes an attribute with given key from the selection.
   * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}
   * event with removed attribute key.
   * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.
   *
   * @see module:engine/model/writer~Writer#removeSelectionAttribute
   * @internal
   * @param key Key of the attribute to remove.
   */
  _removeAttribute(e) {
    this._selection.removeAttribute(e);
  }
  /**
   * Returns an iterable that iterates through all selection attributes stored in current selection's parent.
   *
   * @internal
   */
  _getStoredAttributes() {
    return this._selection.getStoredAttributes();
  }
  /**
   * Temporarily changes the gravity of the selection from the left to the right.
   *
   * The gravity defines from which direction the selection inherits its attributes. If it's the default left
   * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.
   * This method allows to temporarily override this behavior by forcing the gravity to the right.
   *
   * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry
   * of the process.
   *
   * @see module:engine/model/writer~Writer#overrideSelectionGravity
   * @internal
   * @returns The unique id which allows restoring the gravity.
   */
  _overrideGravity() {
    return this._selection.overrideGravity();
  }
  /**
   * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.
   *
   * Restoring the gravity is only possible using the unique identifier returned by
   * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored
   * the same number of times it was overridden.
   *
   * @see module:engine/model/writer~Writer#restoreSelectionGravity
   * @internal
   * @param uid The unique id returned by {@link #_overrideGravity}.
   */
  _restoreGravity(e) {
    this._selection.restoreGravity(e);
  }
  /**
   * Generates and returns an attribute key for selection attributes store, basing on original attribute key.
   *
   * @internal
   * @param key Attribute key to convert.
   * @returns Converted attribute key, applicable for selection store.
   */
  static _getStoreAttributeKey(e) {
    return Bi + e;
  }
  /**
   * Checks whether the given attribute key is an attribute stored on an element.
   *
   * @internal
   */
  static _isStoreAttributeKey(e) {
    return e.startsWith(Bi);
  }
}
Ve.prototype.is = function(n) {
  return n === "selection" || n == "model:selection" || n == "documentSelection" || n == "model:documentSelection";
};
class zv extends _e {
  /**
   * Creates an empty live selection for given {@link module:engine/model/document~Document}.
   *
   * @param doc Document which owns this selection.
   */
  constructor(e) {
    super(), this.markers = new Ue({ idProperty: "name" }), this._attributePriority = /* @__PURE__ */ new Map(), this._selectionRestorePosition = null, this._hasChangedRange = !1, this._overriddenGravityRegister = /* @__PURE__ */ new Set(), this._observedMarkers = /* @__PURE__ */ new Set(), this._model = e.model, this._document = e, this.listenTo(this._model, "applyOperation", (t, i) => {
      const s = i[0];
      !s.isDocumentOperation || s.type == "marker" || s.type == "rename" || s.type == "noop" || (this._ranges.length == 0 && this._selectionRestorePosition && this._fixGraveyardSelection(this._selectionRestorePosition), this._selectionRestorePosition = null, this._hasChangedRange && (this._hasChangedRange = !1, this.fire("change:range", { directChange: !1 })));
    }, { priority: "lowest" }), this.on("change:range", () => {
      this._validateSelectionRanges(this.getRanges());
    }), this.listenTo(this._model.markers, "update", (t, i, s, r) => {
      this._updateMarker(i, r);
    }), this.listenTo(this._document, "change", (t, i) => {
      $v(this._model, i);
    });
  }
  get isCollapsed() {
    return this._ranges.length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;
  }
  get anchor() {
    return super.anchor || this._document._getDefaultRange().start;
  }
  get focus() {
    return super.focus || this._document._getDefaultRange().end;
  }
  get rangeCount() {
    return this._ranges.length ? this._ranges.length : 1;
  }
  /**
   * Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to
   * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.
   */
  get hasOwnRange() {
    return this._ranges.length > 0;
  }
  /**
   * When set to `true` then selection attributes on node before the caret won't be taken
   * into consideration while updating selection attributes.
   */
  get isGravityOverridden() {
    return !!this._overriddenGravityRegister.size;
  }
  /**
   * Unbinds all events previously bound by live selection.
   */
  destroy() {
    for (let e = 0; e < this._ranges.length; e++)
      this._ranges[e].detach();
    this.stopListening();
  }
  *getRanges() {
    this._ranges.length ? yield* super.getRanges() : yield this._document._getDefaultRange();
  }
  getFirstRange() {
    return super.getFirstRange() || this._document._getDefaultRange();
  }
  getLastRange() {
    return super.getLastRange() || this._document._getDefaultRange();
  }
  setTo(...e) {
    super.setTo(...e), this._updateAttributes(!0), this.updateMarkers();
  }
  setFocus(e, t) {
    super.setFocus(e, t), this._updateAttributes(!0), this.updateMarkers();
  }
  setAttribute(e, t) {
    if (this._setAttribute(e, t)) {
      const i = [e];
      this.fire("change:attribute", { attributeKeys: i, directChange: !0 });
    }
  }
  removeAttribute(e) {
    if (this._removeAttribute(e)) {
      const t = [e];
      this.fire("change:attribute", { attributeKeys: t, directChange: !0 });
    }
  }
  overrideGravity() {
    const e = et();
    return this._overriddenGravityRegister.add(e), this._overriddenGravityRegister.size === 1 && this._updateAttributes(!0), e;
  }
  restoreGravity(e) {
    if (!this._overriddenGravityRegister.has(e))
      throw new f("document-selection-gravity-wrong-restore", this, { uid: e });
    this._overriddenGravityRegister.delete(e), this.isGravityOverridden || this._updateAttributes(!0);
  }
  observeMarkers(e) {
    this._observedMarkers.add(e), this.updateMarkers();
  }
  _replaceAllRanges(e) {
    this._validateSelectionRanges(e), super._replaceAllRanges(e);
  }
  _popRange() {
    this._ranges.pop().detach();
  }
  _pushRange(e) {
    const t = this._prepareRange(e);
    t && this._ranges.push(t);
  }
  _validateSelectionRanges(e) {
    for (const t of e)
      if (!this._document._validateSelectionRange(t))
        throw new f("document-selection-wrong-position", this, { range: t });
  }
  /**
   * Prepares given range to be added to selection. Checks if it is correct,
   * converts it to {@link module:engine/model/liverange~LiveRange LiveRange}
   * and sets listeners listening to the range's change event.
   */
  _prepareRange(e) {
    if (this._checkRange(e), e.root == this._document.graveyard)
      return;
    const t = We.fromRange(e);
    return t.on("change:range", (i, s, r) => {
      if (this._hasChangedRange = !0, t.root == this._document.graveyard) {
        this._selectionRestorePosition = r.deletionPosition;
        const o = this._ranges.indexOf(t);
        this._ranges.splice(o, 1), t.detach();
      }
    }), t;
  }
  updateMarkers() {
    if (!this._observedMarkers.size)
      return;
    const e = [];
    let t = !1;
    for (const s of this._model.markers) {
      const r = s.name.split(":", 1)[0];
      if (!this._observedMarkers.has(r))
        continue;
      const o = s.getRange();
      for (const a of this.getRanges())
        o.containsRange(a, !a.isCollapsed) && e.push(s);
    }
    const i = Array.from(this.markers);
    for (const s of e)
      this.markers.has(s) || (this.markers.add(s), t = !0);
    for (const s of Array.from(this.markers))
      e.includes(s) || (this.markers.remove(s), t = !0);
    t && this.fire("change:marker", { oldMarkers: i, directChange: !1 });
  }
  _updateMarker(e, t) {
    const i = e.name.split(":", 1)[0];
    if (!this._observedMarkers.has(i))
      return;
    let s = !1;
    const r = Array.from(this.markers), o = this.markers.has(e);
    if (!t)
      o && (this.markers.remove(e), s = !0);
    else {
      let a = !1;
      for (const l of this.getRanges())
        if (t.containsRange(l, !l.isCollapsed)) {
          a = !0;
          break;
        }
      a && !o ? (this.markers.add(e), s = !0) : !a && o && (this.markers.remove(e), s = !0);
    }
    s && this.fire("change:marker", { oldMarkers: r, directChange: !1 });
  }
  /**
   * Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.
   */
  _updateAttributes(e) {
    const t = tt(this._getSurroundingAttributes()), i = tt(this.getAttributes());
    if (e)
      this._attributePriority = /* @__PURE__ */ new Map(), this._attrs = /* @__PURE__ */ new Map();
    else
      for (const [r, o] of this._attributePriority)
        o == "low" && (this._attrs.delete(r), this._attributePriority.delete(r));
    this._setAttributesTo(t);
    const s = [];
    for (const [r, o] of this.getAttributes())
      (!i.has(r) || i.get(r) !== o) && s.push(r);
    for (const [r] of i)
      this.hasAttribute(r) || s.push(r);
    s.length > 0 && this.fire("change:attribute", { attributeKeys: s, directChange: !1 });
  }
  /**
   * Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`
   * parameter).
   */
  _setAttribute(e, t, i = !0) {
    const s = i ? "normal" : "low";
    return s == "low" && this._attributePriority.get(e) == "normal" || super.getAttribute(e) === t ? !1 : (this._attrs.set(e, t), this._attributePriority.set(e, s), !0);
  }
  /**
   * Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`
   * parameter).
   *
   * NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will
   * be changed according to `directChange` parameter.
   */
  _removeAttribute(e, t = !0) {
    const i = t ? "normal" : "low";
    return i == "low" && this._attributePriority.get(e) == "normal" || (this._attributePriority.set(e, i), !super.hasAttribute(e)) ? !1 : (this._attrs.delete(e), !0);
  }
  /**
   * Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through
   * `directChange` parameter).
   */
  _setAttributesTo(e) {
    const t = /* @__PURE__ */ new Set();
    for (const [i, s] of this.getAttributes())
      e.get(i) !== s && this._removeAttribute(i, !1);
    for (const [i, s] of e)
      this._setAttribute(i, s, !1) && t.add(i);
    return t;
  }
  /**
   * Returns an iterable that iterates through all selection attributes stored in current selection's parent.
   */
  *getStoredAttributes() {
    const e = this.getFirstPosition().parent;
    if (this.isCollapsed && e.isEmpty)
      for (const t of e.getAttributeKeys())
        t.startsWith(Bi) && (yield [t.substr(Bi.length), e.getAttribute(t)]);
  }
  /**
   * Checks model text nodes that are closest to the selection's first position and returns attributes of first
   * found element. If there are no text nodes in selection's first position parent, it returns selection
   * attributes stored in that parent.
   */
  _getSurroundingAttributes() {
    const e = this.getFirstPosition(), t = this._model.schema;
    let i = null;
    if (this.isCollapsed) {
      const s = e.textNode ? e.textNode : e.nodeBefore, r = e.textNode ? e.textNode : e.nodeAfter;
      if (this.isGravityOverridden || (i = en(s, t)), i || (i = en(r, t)), !this.isGravityOverridden && !i) {
        let o = s;
        for (; o && !i; )
          o = o.previousSibling, i = en(o, t);
      }
      if (!i) {
        let o = r;
        for (; o && !i; )
          o = o.nextSibling, i = en(o, t);
      }
      i || (i = this.getStoredAttributes());
    } else {
      const s = this.getFirstRange();
      for (const r of s) {
        if (r.item.is("element") && t.isObject(r.item))
          break;
        if (r.type == "text") {
          i = r.item.getAttributes();
          break;
        }
      }
    }
    return i;
  }
  /**
   * Fixes the selection after all its ranges got removed.
   * @param deletionPosition Position where the deletion happened.
   */
  _fixGraveyardSelection(e) {
    const t = this._model.schema.getNearestSelectionRange(e);
    t && this._pushRange(t);
  }
}
function en(n, e) {
  if (!n)
    return null;
  if (n instanceof Ie || n instanceof j)
    return n.getAttributes();
  if (!e.isInline(n))
    return null;
  if (!e.isObject(n))
    return [];
  const t = [];
  for (const [i, s] of n.getAttributes())
    e.checkAttribute("$text", i) && t.push([i, s]);
  return t;
}
function $v(n, e) {
  const t = n.document.differ;
  for (const i of t.getChanges()) {
    if (i.type != "insert")
      continue;
    const s = i.position.parent;
    i.length === s.maxOffset && n.enqueueChange(e, (o) => {
      const a = Array.from(s.getAttributeKeys()).filter((l) => l.startsWith(Bi));
      for (const l of a)
        o.removeAttribute(l, s);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class wh {
  /**
   * Creates a conversion helpers instance.
   */
  constructor(e) {
    this._dispatchers = e;
  }
  /**
   * Registers a conversion helper.
   *
   * **Note**: See full usage example in the `{@link module:engine/conversion/conversion~Conversion#for conversion.for()}`
   * method description.
   *
   * @param conversionHelper The function to be called on event.
   */
  add(e) {
    for (const t of this._dispatchers)
      e(t);
    return this;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Hv extends wh {
  /**
   * Model element to view element conversion helper.
   *
   * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.
   *
   * ```ts
   * editor.conversion.for( 'downcast' ).elementToElement( {
   * 	model: 'paragraph',
   * 	view: 'p'
   * } );
   *
   * editor.conversion.for( 'downcast' ).elementToElement( {
   * 	model: 'paragraph',
   * 	view: 'div',
   * 	converterPriority: 'high'
   * } );
   *
   * editor.conversion.for( 'downcast' ).elementToElement( {
   * 	model: 'fancyParagraph',
   * 	view: {
   * 		name: 'p',
   * 		classes: 'fancy'
   * 	}
   * } );
   *
   * editor.conversion.for( 'downcast' ).elementToElement( {
   * 	model: 'heading',
   * 	view: ( modelElement, conversionApi ) => {
   * 		const { writer } = conversionApi;
   *
   * 		return writer.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) );
   * 	}
   * } );
   * ```
   *
   * The element-to-element conversion supports the reconversion mechanism. It can be enabled by using either the `attributes` or
   * the `children` props on a model description. You will find a couple examples below.
   *
   * In order to reconvert an element if any of its direct children have been added or removed, use the `children` property on a `model`
   * description. For example, this model:
   *
   * ```xml
   * <box>
   * 	<paragraph>Some text.</paragraph>
   * </box>
   * ```
   *
   * will be converted into this structure in the view:
   *
   * ```html
   * <div class="box" data-type="single">
   * 	<p>Some text.</p>
   * </div>
   * ```
   *
   * But if more items were inserted in the model:
   *
   * ```xml
   * <box>
   * 	<paragraph>Some text.</paragraph>
   * 	<paragraph>Other item.</paragraph>
   * </box>
   * ```
   *
   * it will be converted into this structure in the view (note the element `data-type` change):
   *
   * ```html
   * <div class="box" data-type="multiple">
   * 	<p>Some text.</p>
   * 	<p>Other item.</p>
   * </div>
   * ```
   *
   * Such a converter would look like this (note that the `paragraph` elements are converted separately):
   *
   * ```ts
   * editor.conversion.for( 'downcast' ).elementToElement( {
   * 	model: {
   * 		name: 'box',
   * 		children: true
   * 	},
   * 	view: ( modelElement, conversionApi ) => {
   * 		const { writer } = conversionApi;
   *
   * 		return writer.createContainerElement( 'div', {
   * 			class: 'box',
   * 			'data-type': modelElement.childCount == 1 ? 'single' : 'multiple'
   * 		} );
   * 	}
   * } );
   * ```
   *
   * In order to reconvert element if any of its attributes have been updated, use the `attributes` property on a `model`
   * description. For example, this model:
   *
   * ```xml
   * <heading level="2">Some text.</heading>
   * ```
   *
   * will be converted into this structure in the view:
   *
   * ```html
   * <h2>Some text.</h2>
   * ```
   *
   * But if the `heading` element's `level` attribute has been updated to `3` for example, then
   * it will be converted into this structure in the view:
   *
   * ```html
   * <h3>Some text.</h3>
   * ```
   *
   * Such a converter would look as follows:
   *
   * ```ts
   * editor.conversion.for( 'downcast' ).elementToElement( {
   * 	model: {
   * 		name: 'heading',
   * 		attributes: 'level'
   * 	},
   * 	view: ( modelElement, conversionApi ) => {
   * 		const { writer } = conversionApi;
   *
   * 		return writer.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) );
   * 	}
   * } );
   * ```
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * You can read more about the element-to-element conversion in the
   * {@glink framework/deep-dive/conversion/downcast downcast conversion} guide.
   *
   * @param config Conversion configuration.
   * @param config.model The description or a name of the model element to convert.
   * @param config.model.attributes The list of attribute names that should be consumed while creating
   * the view element. Note that the view will be reconverted if any of the listed attributes changes.
   * @param config.model.children Specifies whether the view element requires reconversion if the list
   * of the model child nodes changed.
   * @param config.view A view element definition or a function that takes the model element and
   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}
   * as parameters and returns a view container element.
   */
  elementToElement(e) {
    return this.add(oy(e));
  }
  /**
   * The model element to view structure (several elements) conversion helper.
   *
   * This conversion results in creating a view structure with one or more slots defined for the child nodes.
   * For example, a model `<table>` may become this structure in the view:
   *
   * ```html
   * <figure class="table">
   * 	<table>
   * 		<tbody>${ slot for table rows }</tbody>
   * 	</table>
   * </figure>
   * ```
   *
   * The children of the model's `<table>` element will be inserted into the `<tbody>` element.
   * If the `elementToElement()` helper was used, the children would be inserted into the `<figure>`.
   *
   * An example converter that converts the following model structure:
   *
   * ```xml
   * <wrappedParagraph>Some text.</wrappedParagraph>
   * ```
   *
   * into this structure in the view:
   *
   * ```html
   * <div class="wrapper">
   * 	<p>Some text.</p>
   * </div>
   * ```
   *
   * would look like this:
   *
   * ```ts
   * editor.conversion.for( 'downcast' ).elementToStructure( {
   * 	model: 'wrappedParagraph',
   * 	view: ( modelElement, conversionApi ) => {
   * 		const { writer } = conversionApi;
   *
   * 		const wrapperViewElement = writer.createContainerElement( 'div', { class: 'wrapper' } );
   * 		const paragraphViewElement = writer.createContainerElement( 'p' );
   *
   * 		writer.insert( writer.createPositionAt( wrapperViewElement, 0 ), paragraphViewElement );
   * 		writer.insert( writer.createPositionAt( paragraphViewElement, 0 ), writer.createSlot() );
   *
   * 		return wrapperViewElement;
   * 	}
   * } );
   * ```
   *
   * The `createSlot()` function can also take a callback that allows filtering which children of the model element
   * should be converted into this slot.
   *
   * Imagine a table feature where for this model structure:
   *
   * ```xml
   * <table headingRows="1">
   * 	<tableRow> ... table cells 1 ... </tableRow>
   * 	<tableRow> ... table cells 2 ... </tableRow>
   * 	<tableRow> ... table cells 3 ... </tableRow>
   * 	<caption>Caption text</caption>
   * </table>
   * ```
   *
   * we want to generate this view structure:
   *
   * ```html
   * <figure class="table">
   * 	<table>
   * 		<thead>
   * 			<tr> ... table cells 1 ... </tr>
   * 		</thead>
   * 		<tbody>
   * 			<tr> ... table cells 2 ... </tr>
   * 			<tr> ... table cells 3 ... </tr>
   * 		</tbody>
   * 	</table>
   * 	<figcaption>Caption text</figcaption>
   * </figure>
   * ```
   *
   * The converter has to take the `headingRows` attribute into consideration when allocating the `<tableRow>` elements
   * into the `<tbody>` and `<thead>` elements. Hence, we need two slots and need to define proper filter callbacks for them.
   *
   * Additionally, all elements other than `<tableRow>` should be placed outside the `<table>` tag.
   * In the example above, this will handle the table caption.
   *
   * Such a converter would look like this:
   *
   * ```ts
   * editor.conversion.for( 'downcast' ).elementToStructure( {
   * 	model: {
   * 		name: 'table',
   * 		attributes: [ 'headingRows' ]
   * 	},
   * 	view: ( modelElement, conversionApi ) => {
   * 		const { writer } = conversionApi;
   *
   * 		const figureElement = writer.createContainerElement( 'figure', { class: 'table' } );
   * 		const tableElement = writer.createContainerElement( 'table' );
   *
   * 		writer.insert( writer.createPositionAt( figureElement, 0 ), tableElement );
   *
   * 		const headingRows = modelElement.getAttribute( 'headingRows' ) || 0;
   *
   * 		if ( headingRows > 0 ) {
   * 			const tableHead = writer.createContainerElement( 'thead' );
   *
   * 			const headSlot = writer.createSlot( node => node.is( 'element', 'tableRow' ) && node.index < headingRows );
   *
   * 			writer.insert( writer.createPositionAt( tableElement, 'end' ), tableHead );
   * 			writer.insert( writer.createPositionAt( tableHead, 0 ), headSlot );
   * 		}
   *
   * 		if ( headingRows < tableUtils.getRows( table ) ) {
   * 			const tableBody = writer.createContainerElement( 'tbody' );
   *
   * 			const bodySlot = writer.createSlot( node => node.is( 'element', 'tableRow' ) && node.index >= headingRows );
   *
   * 			writer.insert( writer.createPositionAt( tableElement, 'end' ), tableBody );
   * 			writer.insert( writer.createPositionAt( tableBody, 0 ), bodySlot );
   * 		}
   *
   * 		const restSlot = writer.createSlot( node => !node.is( 'element', 'tableRow' ) );
   *
   * 		writer.insert( writer.createPositionAt( figureElement, 'end' ), restSlot );
   *
   * 		return figureElement;
   * 	}
   * } );
   * ```
   *
   * Note: The children of a model element that's being converted must be allocated in the same order in the view
   * in which they are placed in the model.
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.model The description or a name of the model element to convert.
   * @param config.model.name The name of the model element to convert.
   * @param config.model.attributes The list of attribute names that should be consumed while creating
   * the view structure. Note that the view will be reconverted if any of the listed attributes will change.
   * @param config.view A function that takes the model element and
   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as parameters
   * and returns a view container element with slots for model child nodes to be converted into.
   */
  elementToStructure(e) {
    return this.add(ay(e));
  }
  /**
   * Model attribute to view element conversion helper.
   *
   * This conversion results in wrapping view nodes with a view attribute element. For example, a model text node with
   * `"Foo"` as data and the `bold` attribute becomes `<strong>Foo</strong>` in the view.
   *
   * ```ts
   * editor.conversion.for( 'downcast' ).attributeToElement( {
   * 	model: 'bold',
   * 	view: 'strong'
   * } );
   *
   * editor.conversion.for( 'downcast' ).attributeToElement( {
   * 	model: 'bold',
   * 	view: 'b',
   * 	converterPriority: 'high'
   * } );
   *
   * editor.conversion.for( 'downcast' ).attributeToElement( {
   * 	model: 'invert',
   * 	view: {
   * 		name: 'span',
   * 		classes: [ 'font-light', 'bg-dark' ]
   * 	}
   * } );
   *
   * editor.conversion.for( 'downcast' ).attributeToElement( {
   * 	model: {
   * 		key: 'fontSize',
   * 		values: [ 'big', 'small' ]
   * 	},
   * 	view: {
   * 		big: {
   * 			name: 'span',
   * 			styles: {
   * 				'font-size': '1.2em'
   * 			}
   * 		},
   * 		small: {
   * 			name: 'span',
   * 			styles: {
   * 				'font-size': '0.8em'
   * 			}
   * 		}
   * 	}
   * } );
   *
   * editor.conversion.for( 'downcast' ).attributeToElement( {
   * 	model: 'bold',
   * 	view: ( modelAttributeValue, conversionApi ) => {
   * 		const { writer } = conversionApi;
   *
   * 		return writer.createAttributeElement( 'span', {
   * 			style: 'font-weight:' + modelAttributeValue
   * 		} );
   * 	}
   * } );
   *
   * editor.conversion.for( 'downcast' ).attributeToElement( {
   * 	model: {
   * 		key: 'color',
   * 		name: '$text'
   * 	},
   * 	view: ( modelAttributeValue, conversionApi ) => {
   * 		const { writer } = conversionApi;
   *
   * 		return writer.createAttributeElement( 'span', {
   * 			style: 'color:' + modelAttributeValue
   * 		} );
   * 	}
   * } );
   * ```
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array
   * of `String`s with possible values if the model attribute is an enumerable.
   * @param config.view A view element definition or a function
   * that takes the model attribute value and
   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as parameters and returns a view
   * attribute element. If `config.model.values` is given, `config.view` should be an object assigning values from `config.model.values`
   * to view element definitions or functions.
   * @param config.converterPriority Converter priority.
   */
  attributeToElement(e) {
    return this.add(ly(e));
  }
  /**
   * Model attribute to view attribute conversion helper.
   *
   * This conversion results in adding an attribute to a view node, basing on an attribute from a model node. For example,
   * `<imageInline src='foo.jpg'></imageInline>` is converted to `<img src='foo.jpg'></img>`.
   *
   * ```ts
   * editor.conversion.for( 'downcast' ).attributeToAttribute( {
   * 	model: 'source',
   * 	view: 'src'
   * } );
   *
   * editor.conversion.for( 'downcast' ).attributeToAttribute( {
   * 	model: 'source',
   * 	view: 'href',
   * 	converterPriority: 'high'
   * } );
   *
   * editor.conversion.for( 'downcast' ).attributeToAttribute( {
   * 	model: {
   * 		name: 'imageInline',
   * 		key: 'source'
   * 	},
   * 	view: 'src'
   * } );
   *
   * editor.conversion.for( 'downcast' ).attributeToAttribute( {
   * 	model: {
   * 		name: 'styled',
   * 		values: [ 'dark', 'light' ]
   * 	},
   * 	view: {
   * 		dark: {
   * 			key: 'class',
   * 			value: [ 'styled', 'styled-dark' ]
   * 		},
   * 		light: {
   * 			key: 'class',
   * 			value: [ 'styled', 'styled-light' ]
   * 		}
   * 	}
   * } );
   *
   * editor.conversion.for( 'downcast' ).attributeToAttribute( {
   * 	model: 'styled',
   * 	view: modelAttributeValue => ( {
   * 		key: 'class',
   * 		value: 'styled-' + modelAttributeValue
   * 	} )
   * } );
   * ```
   *
   * **Note**: Downcasting to a style property requires providing `value` as an object:
   *
   * ```ts
   * editor.conversion.for( 'downcast' ).attributeToAttribute( {
   * 	model: 'lineHeight',
   * 	view: modelAttributeValue => ( {
   * 		key: 'style',
   * 		value: {
   * 			'line-height': modelAttributeValue,
   * 			'border-bottom': '1px dotted #ba2'
   * 		}
   * 	} )
   * } );
   * ```
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing
   * the attribute key, possible values and, optionally, an element name to convert from.
   * @param config.view A view attribute key, or a `{ key, value }` object or a function that takes the model attribute value and
   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}
   * as parameters and returns a `{ key, value }` object. If the `key` is `'class'`, the `value` can be a `String` or an
   * array of `String`s. If the `key` is `'style'`, the `value` is an object with key-value pairs. In other cases, `value` is a `String`.
   * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to
   * `{ key, value }` objects or a functions.
   * @param config.converterPriority Converter priority.
   */
  attributeToAttribute(e) {
    return this.add(cy(e));
  }
  /**
   * Model marker to view element conversion helper.
   *
   * **Note**: This method should be used mainly for editing the downcast and it is recommended
   * to use the {@link #markerToData `#markerToData()`} helper instead.
   *
   * This helper may produce invalid HTML code (e.g. a span between table cells).
   * It should only be used when you are sure that the produced HTML will be semantically correct.
   *
   * This conversion results in creating a view element on the boundaries of the converted marker. If the converted marker
   * is collapsed, only one element is created. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>`
   * becomes `<p>F<span data-marker="search"></span>oo b<span data-marker="search"></span>ar</p>` in the view.
   *
   * ```ts
   * editor.conversion.for( 'editingDowncast' ).markerToElement( {
   * 	model: 'search',
   * 	view: 'marker-search'
   * } );
   *
   * editor.conversion.for( 'editingDowncast' ).markerToElement( {
   * 	model: 'search',
   * 	view: 'search-result',
   * 	converterPriority: 'high'
   * } );
   *
   * editor.conversion.for( 'editingDowncast' ).markerToElement( {
   * 	model: 'search',
   * 	view: {
   * 		name: 'span',
   * 		attributes: {
   * 			'data-marker': 'search'
   * 		}
   * 	}
   * } );
   *
   * editor.conversion.for( 'editingDowncast' ).markerToElement( {
   * 	model: 'search',
   * 	view: ( markerData, conversionApi ) => {
   * 		const { writer } = conversionApi;
   *
   * 		return writer.createUIElement( 'span', {
   * 			'data-marker': 'search',
   * 			'data-start': markerData.isOpening
   * 		} );
   * 	}
   * } );
   * ```
   *
   * If a function is passed as the `config.view` parameter, it will be used to generate both boundary elements. The function
   * receives the `data` object and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}
   * as a parameters and should return an instance of the
   * {@link module:engine/view/uielement~UIElement view UI element}. The `data` object and
   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi `conversionApi`} are passed from
   * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,
   * the `data.isOpening` parameter is passed, which is set to `true` for the marker start boundary element, and `false` for
   * the marker end boundary element.
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.model The name of the model marker (or model marker group) to convert.
   * @param config.view A view element definition or a function that takes the model marker data and
   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as a parameters
   * and returns a view UI element.
   * @param config.converterPriority Converter priority.
   */
  markerToElement(e) {
    return this.add(uy(e));
  }
  /**
   * Model marker to highlight conversion helper.
   *
   * This conversion results in creating a highlight on view nodes. For this kind of conversion,
   * the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} should be provided.
   *
   * For text nodes, a `<span>` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes
   * in the converted marker range. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>` becomes
   * `<p>F<span class="comment">oo b</span>ar</p>` in the view.
   *
   * {@link module:engine/view/containerelement~ContainerElement} may provide a custom way of handling highlight. Most often,
   * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `<span>`).
   * For example, a model marker set like this:
   * `[<imageInline src="foo.jpg"></imageInline>]` becomes `<img src="foo.jpg" class="comment"></img>` in the view.
   *
   * For container elements, the conversion is two-step. While the converter processes the highlight descriptor and passes it
   * to a container element, it is the container element instance itself that applies values from the highlight descriptor.
   * So, in a sense, the converter takes care of stating what should be applied on what, while the element decides how to apply that.
   *
   * ```ts
   * editor.conversion.for( 'downcast' ).markerToHighlight( { model: 'comment', view: { classes: 'comment' } } );
   *
   * editor.conversion.for( 'downcast' ).markerToHighlight( {
   * 	model: 'comment',
   * 	view: { classes: 'comment' },
   * 	converterPriority: 'high'
   * } );
   *
   * editor.conversion.for( 'downcast' ).markerToHighlight( {
   * 	model: 'comment',
   * 	view: ( data, conversionApi ) => {
   * 		// Assuming that the marker name is in a form of comment:commentType:commentId.
   * 		const [ , commentType, commentId ] = data.markerName.split( ':' );
   *
   * 		return {
   * 			classes: [ 'comment', 'comment-' + commentType ],
   * 			attributes: { 'data-comment-id': commentId }
   * 		};
   * 	}
   * } );
   * ```
   *
   * If a function is passed as the `config.view` parameter, it will be used to generate the highlight descriptor. The function
   * receives the `data` object and {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API}
   * as the parameters and should return a
   * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor}.
   * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.model The name of the model marker (or model marker group) to convert.
   * @param config.view A highlight descriptor that will be used for highlighting or a function that takes the model marker data and
   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as a parameters
   * and returns a highlight descriptor.
   * @param config.converterPriority Converter priority.
   */
  markerToHighlight(e) {
    return this.add(dy(e));
  }
  /**
   * Model marker converter for data downcast.
   *
   * This conversion creates a representation for model marker boundaries in the view:
   *
   * * If the marker boundary is before or after a model element, a view attribute is set on a corresponding view element.
   * * In other cases, a view element with the specified tag name is inserted at the corresponding view position.
   *
   * Typically, the marker names use the `group:uniqueId:otherData` convention. For example: `comment:e34zfk9k2n459df53sjl34:zx32c`.
   * The default configuration for this conversion is that the first part is the `group` part and the rest of
   * the marker name becomes the `name` part.
   *
   * Tag and attribute names and values are generated from the marker name:
   *
   * * The templates for attributes are `data-[group]-start-before="[name]"`, `data-[group]-start-after="[name]"`,
   * `data-[group]-end-before="[name]"` and `data-[group]-end-after="[name]"`.
   * * The templates for view elements are `<[group]-start name="[name]">` and `<[group]-end name="[name]">`.
   *
   * Attributes mark whether the given marker's start or end boundary is before or after the given element.
   * The `data-[group]-start-before` and `data-[group]-end-after` attributes are favored.
   * The other two are used when the former two cannot be used.
   *
   * The conversion configuration can take a function that will generate different group and name parts.
   * If such a function is set as the `config.view` parameter, it is passed a marker name and it is expected to return an object with two
   * properties: `group` and `name`. If the function returns a falsy value, the conversion will not take place.
   *
   * Basic usage:
   *
   * ```ts
   * // Using the default conversion.
   * // In this case, all markers with names starting with 'comment:' will be converted.
   * // The `group` parameter will be set to `comment`.
   * // The `name` parameter will be the rest of the marker name (without the `:`).
   * editor.conversion.for( 'dataDowncast' ).markerToData( {
   * 	model: 'comment'
   * } );
   * ```
   *
   * An example of a view that may be generated by this conversion (assuming a marker with the name `comment:commentId:uid` marked
   * by `[]`):
   *
   * ```
   * // Model:
   * <paragraph>Foo[bar</paragraph>
   * <imageBlock src="abc.jpg"></imageBlock>]
   *
   * // View:
   * <p>Foo<comment-start name="commentId:uid"></comment-start>bar</p>
   * <figure data-comment-end-after="commentId:uid" class="image"><img src="abc.jpg" /></figure>
   * ```
   *
   * In the example above, the comment starts before "bar" and ends after the image.
   *
   * If the `name` part is empty, the following view may be generated:
   *
   * ```html
   * <p>Foo <myMarker-start></myMarker-start>bar</p>
   * <figure data-myMarker-end-after="" class="image"><img src="abc.jpg" /></figure>
   * ```
   *
   * **Note:** A situation where some markers have the `name` part and some do not, is incorrect and should be avoided.
   *
   * Examples where `data-group-start-after` and `data-group-end-before` are used:
   *
   * ```
   * // Model:
   * <blockQuote>[]<paragraph>Foo</paragraph></blockQuote>
   *
   * // View:
   * <blockquote><p data-group-end-before="name" data-group-start-before="name">Foo</p></blockquote>
   * ```
   *
   * Similarly, when a marker is collapsed after the last element:
   *
   * ```
   * // Model:
   * <blockQuote><paragraph>Foo</paragraph>[]</blockQuote>
   *
   * // View:
   * <blockquote><p data-group-end-after="name" data-group-start-after="name">Foo</p></blockquote>
   * ```
   *
   * When there are multiple markers from the same group stored in the same attribute of the same element, their
   * name parts are put together in the attribute value, for example: `data-group-start-before="name1,name2,name3"`.
   *
   * Other examples of usage:
   *
   * ```ts
   * // Using a custom function which is the same as the default conversion:
   * editor.conversion.for( 'dataDowncast' ).markerToData( {
   * 	model: 'comment'
   * 	view: markerName => ( {
   * 		group: 'comment',
   * 		name: markerName.substr( 8 ) // Removes 'comment:' part.
   * 	} )
   * } );
   *
   * // Using the converter priority:
   * editor.conversion.for( 'dataDowncast' ).markerToData( {
   * 	model: 'comment'
   * 	view: markerName => ( {
   * 		group: 'comment',
   * 		name: markerName.substr( 8 ) // Removes 'comment:' part.
   * 	} ),
   * 	converterPriority: 'high'
   * } );
   * ```
   *
   * This kind of conversion is useful for saving data into the database, so it should be used in the data conversion pipeline.
   *
   * See the {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} API guide to learn how to
   * add a converter to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.model The name of the model marker (or the model marker group) to convert.
   * @param config.view A function that takes the model marker name and
   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi downcast conversion API} as the parameters
   * and returns an object with the `group` and `name` properties.
   * @param config.converterPriority Converter priority.
   */
  markerToData(e) {
    return this.add(hy(e));
  }
}
function bh() {
  return (n, e, t) => {
    if (!t.consumable.consume(e.item, n.name))
      return;
    const i = t.writer, s = t.mapper.toViewPosition(e.range.start), r = i.createText(e.item.data);
    i.insert(s, r);
  };
}
function _h() {
  return (n, e, t) => {
    t.convertAttributes(e.item), !e.reconversion && e.item.is("element") && !e.item.isEmpty && t.convertChildren(e.item);
  };
}
function Wv() {
  return (n, e, t) => {
    const i = t.mapper.toViewPosition(e.position), s = e.position.getShiftedBy(e.length), r = t.mapper.toViewPosition(s, { isPhantom: !0 }), o = t.writer.createRange(i, r), a = t.writer.remove(o.getTrimmed());
    for (const l of t.writer.createRangeIn(a).getItems())
      t.mapper.unbindViewElement(l, { defer: !0 });
  };
}
function vh(n, e) {
  const t = n.createAttributeElement("span", e.attributes);
  return e.classes && t._addClass(e.classes), typeof e.priority == "number" && (t._priority = e.priority), t._id = e.id, t;
}
function Uv() {
  return (n, e, t) => {
    const i = e.selection;
    if (i.isCollapsed || !t.consumable.consume(i, "selection"))
      return;
    const s = [];
    for (const r of i.getRanges())
      s.push(t.mapper.toViewRange(r));
    t.writer.setSelection(s, { backward: i.isBackward });
  };
}
function jv() {
  return (n, e, t) => {
    const i = e.selection;
    if (!i.isCollapsed || !t.consumable.consume(i, "selection"))
      return;
    const s = t.writer, r = i.getFirstPosition(), o = t.mapper.toViewPosition(r), a = s.breakAttributes(o);
    s.setSelection(a);
  };
}
function qv() {
  return (n, e, t) => {
    const i = t.writer, s = i.document.selection;
    for (const r of s.getRanges())
      r.isCollapsed && r.end.parent.isAttached() && t.writer.mergeAttributes(r.start);
    i.setSelection(null);
  };
}
function Gv(n) {
  return (e, t, i) => {
    if (!i.consumable.test(t.item, e.name))
      return;
    const s = n(t.attributeOldValue, i, t), r = n(t.attributeNewValue, i, t);
    if (!s && !r)
      return;
    i.consumable.consume(t.item, e.name);
    const o = i.writer, a = o.document.selection;
    if (t.item instanceof _e || t.item instanceof Ve)
      o.wrap(a.getFirstRange(), r);
    else {
      let l = i.mapper.toViewRange(t.range);
      t.attributeOldValue !== null && s && (l = o.unwrap(l, s)), t.attributeNewValue !== null && r && o.wrap(l, r);
    }
  };
}
function Kv(n, e = _y) {
  return (t, i, s) => {
    if (!e(i.item, s.consumable, { preflight: !0 }))
      return;
    const r = n(i.item, s, i);
    if (!r)
      return;
    e(i.item, s.consumable);
    const o = s.mapper.toViewPosition(i.range.start);
    s.mapper.bindElements(i.item, r), s.writer.insert(o, r), s.convertAttributes(i.item), Eh(r, i.item.getChildren(), s, { reconversion: i.reconversion });
  };
}
function Jv(n, e) {
  return (t, i, s) => {
    if (!e(i.item, s.consumable, { preflight: !0 }))
      return;
    const r = /* @__PURE__ */ new Map();
    s.writer._registerSlotFactory(gy(i.item, r, s));
    const o = n(i.item, s, i);
    if (s.writer._clearSlotFactory(), !o)
      return;
    py(i.item, r, s), e(i.item, s.consumable);
    const a = s.mapper.toViewPosition(i.range.start);
    s.mapper.bindElements(i.item, o), s.writer.insert(a, o), s.convertAttributes(i.item), wy(o, r, s, { reconversion: i.reconversion });
  };
}
function Yv(n) {
  return (e, t, i) => {
    t.isOpening = !0;
    const s = n(t, i);
    t.isOpening = !1;
    const r = n(t, i);
    if (!s || !r)
      return;
    const o = t.markerRange;
    if (o.isCollapsed && !i.consumable.consume(o, e.name))
      return;
    for (const c of o)
      if (!i.consumable.consume(c.item, e.name))
        return;
    const a = i.mapper, l = i.writer;
    l.insert(a.toViewPosition(o.start), s), i.mapper.bindElementToMarker(s, t.markerName), o.isCollapsed || (l.insert(a.toViewPosition(o.end), r), i.mapper.bindElementToMarker(r, t.markerName)), e.stop();
  };
}
function Zv() {
  return (n, e, t) => {
    const i = t.mapper.markerNameToElements(e.markerName);
    if (i) {
      for (const s of i)
        t.mapper.unbindElementFromMarkerName(s, e.markerName), t.writer.clear(t.writer.createRangeOn(s), s);
      t.writer.clearClonedElementsGroup(e.markerName), n.stop();
    }
  };
}
function Xv(n) {
  return (e, t, i) => {
    const s = n(t.markerName, i);
    if (!s)
      return;
    const r = t.markerRange;
    i.consumable.consume(r, e.name) && (Da(r, !1, i, t, s), Da(r, !0, i, t, s), e.stop());
  };
}
function Da(n, e, t, i, s) {
  const r = e ? n.start : n.end, o = r.nodeAfter && r.nodeAfter.is("element") ? r.nodeAfter : null, a = r.nodeBefore && r.nodeBefore.is("element") ? r.nodeBefore : null;
  if (o || a) {
    let c, u;
    e && o || !e && !a ? (c = o, u = !0) : (c = a, u = !1);
    const h = t.mapper.toViewElement(c);
    if (h) {
      Qv(h, e, u, t, i, s);
      return;
    }
  }
  const l = t.mapper.toViewPosition(r);
  ey(l, e, t, i, s);
}
function Qv(n, e, t, i, s, r) {
  const o = `data-${r.group}-${e ? "start" : "end"}-${t ? "before" : "after"}`, a = n.hasAttribute(o) ? n.getAttribute(o).split(",") : [];
  a.unshift(r.name), i.writer.setAttribute(o, a.join(","), n), i.mapper.bindElementToMarker(n, s.markerName);
}
function ey(n, e, t, i, s) {
  const r = `${s.group}-${e ? "start" : "end"}`, o = s.name ? { name: s.name } : null, a = t.writer.createUIElement(r, o);
  t.writer.insert(n, a), t.mapper.bindElementToMarker(a, i.markerName);
}
function ty(n) {
  return (e, t, i) => {
    const s = n(t.markerName, i);
    if (!s)
      return;
    const r = i.mapper.markerNameToElements(t.markerName);
    if (!r)
      return;
    for (const a of r)
      i.mapper.unbindElementFromMarkerName(a, t.markerName), a.is("containerElement") ? (o(`data-${s.group}-start-before`, a), o(`data-${s.group}-start-after`, a), o(`data-${s.group}-end-before`, a), o(`data-${s.group}-end-after`, a)) : i.writer.clear(i.writer.createRangeOn(a), a);
    i.writer.clearClonedElementsGroup(t.markerName), e.stop();
    function o(a, l) {
      if (l.hasAttribute(a)) {
        const c = new Set(l.getAttribute(a).split(","));
        c.delete(s.name), c.size == 0 ? i.writer.removeAttribute(a, l) : i.writer.setAttribute(a, Array.from(c).join(","), l);
      }
    }
  };
}
function iy(n) {
  return (e, t, i) => {
    if (!i.consumable.test(t.item, e.name))
      return;
    const s = n(t.attributeOldValue, i, t), r = n(t.attributeNewValue, i, t);
    if (!s && !r)
      return;
    i.consumable.consume(t.item, e.name);
    const o = i.mapper.toViewElement(t.item), a = i.writer;
    if (!o)
      throw new f("conversion-attribute-to-attribute-on-text", i.dispatcher, t);
    if (t.attributeOldValue !== null && s)
      if (s.key == "class") {
        const l = Q(s.value);
        for (const c of l)
          a.removeClass(c, o);
      } else if (s.key == "style") {
        const l = Object.keys(s.value);
        for (const c of l)
          a.removeStyle(c, o);
      } else
        a.removeAttribute(s.key, o);
    if (t.attributeNewValue !== null && r)
      if (r.key == "class") {
        const l = Q(r.value);
        for (const c of l)
          a.addClass(c, o);
      } else if (r.key == "style") {
        const l = Object.keys(r.value);
        for (const c of l)
          a.setStyle(c, r.value[c], o);
      } else
        a.setAttribute(r.key, r.value, o);
  };
}
function ny(n) {
  return (e, t, i) => {
    if (!t.item || !(t.item instanceof _e || t.item instanceof Ve) && !t.item.is("$textProxy"))
      return;
    const s = Jr(n, t, i);
    if (!s || !i.consumable.consume(t.item, e.name))
      return;
    const r = i.writer, o = vh(r, s), a = r.document.selection;
    if (t.item instanceof _e || t.item instanceof Ve)
      r.wrap(a.getFirstRange(), o);
    else {
      const l = i.mapper.toViewRange(t.range), c = r.wrap(l, o);
      for (const u of c.getItems())
        if (u.is("attributeElement") && u.isSimilar(o)) {
          i.mapper.bindElementToMarker(u, t.markerName);
          break;
        }
    }
  };
}
function sy(n) {
  return (e, t, i) => {
    if (!t.item || !(t.item instanceof F))
      return;
    const s = Jr(n, t, i);
    if (!s || !i.consumable.test(t.item, e.name))
      return;
    const r = i.mapper.toViewElement(t.item);
    if (r && r.getCustomProperty("addHighlight")) {
      i.consumable.consume(t.item, e.name);
      for (const a of g._createIn(t.item))
        i.consumable.consume(a.item, e.name);
      r.getCustomProperty("addHighlight")(r, s, i.writer), i.mapper.bindElementToMarker(r, t.markerName);
    }
  };
}
function ry(n) {
  return (e, t, i) => {
    if (t.markerRange.isCollapsed)
      return;
    const s = Jr(n, t, i);
    if (!s)
      return;
    const r = vh(i.writer, s), o = i.mapper.markerNameToElements(t.markerName);
    if (o) {
      for (const a of o)
        i.mapper.unbindElementFromMarkerName(a, t.markerName), a.is("attributeElement") ? i.writer.unwrap(i.writer.createRangeOn(a), r) : a.getCustomProperty("removeHighlight")(a, s.id, i.writer);
      i.writer.clearClonedElementsGroup(t.markerName), e.stop();
    }
  };
}
function oy(n) {
  const e = yh(n.model), t = Di(n.view, "container");
  return e.attributes.length && (e.children = !0), (i) => {
    i.on(`insert:${e.name}`, Kv(t, Ah(e)), { priority: n.converterPriority || "normal" }), (e.children || e.attributes.length) && i.on("reduceChanges", Ch(e), { priority: "low" });
  };
}
function ay(n) {
  const e = yh(n.model), t = Di(n.view, "container");
  return e.children = !0, (i) => {
    if (i._conversionApi.schema.checkChild(e.name, "$text"))
      throw new f("conversion-element-to-structure-disallowed-text", i, { elementName: e.name });
    i.on(`insert:${e.name}`, Jv(t, Ah(e)), { priority: n.converterPriority || "normal" }), i.on("reduceChanges", Ch(e), { priority: "low" });
  };
}
function ly(n) {
  n = st(n);
  let e = n.model;
  typeof e == "string" && (e = { key: e });
  let t = `attribute:${e.key}`;
  if (e.name && (t += ":" + e.name), e.values)
    for (const s of e.values)
      n.view[s] = Di(n.view[s], "attribute");
  else
    n.view = Di(n.view, "attribute");
  const i = kh(n);
  return (s) => {
    s.on(t, Gv(i), { priority: n.converterPriority || "normal" });
  };
}
function cy(n) {
  n = st(n);
  let e = n.model;
  typeof e == "string" && (e = { key: e });
  let t = `attribute:${e.key}`;
  if (e.name && (t += ":" + e.name), e.values)
    for (const s of e.values)
      n.view[s] = Fa(n.view[s]);
  else
    n.view = Fa(n.view);
  const i = kh(n);
  return (s) => {
    s.on(t, iy(i), { priority: n.converterPriority || "normal" });
  };
}
function uy(n) {
  const e = Di(n.view, "ui");
  return (t) => {
    t.on(`addMarker:${n.model}`, Yv(e), { priority: n.converterPriority || "normal" }), t.on(`removeMarker:${n.model}`, Zv(), { priority: n.converterPriority || "normal" });
  };
}
function hy(n) {
  n = st(n);
  const e = n.model;
  let t = n.view;
  return t || (t = (i) => ({
    group: e,
    name: i.substr(n.model.length + 1)
  })), (i) => {
    i.on(`addMarker:${e}`, Xv(t), { priority: n.converterPriority || "normal" }), i.on(`removeMarker:${e}`, ty(t), { priority: n.converterPriority || "normal" });
  };
}
function dy(n) {
  return (e) => {
    e.on(`addMarker:${n.model}`, ny(n.view), { priority: n.converterPriority || "normal" }), e.on(`addMarker:${n.model}`, sy(n.view), { priority: n.converterPriority || "normal" }), e.on(`removeMarker:${n.model}`, ry(n.view), { priority: n.converterPriority || "normal" });
  };
}
function yh(n) {
  return typeof n == "string" && (n = { name: n }), n.attributes ? Array.isArray(n.attributes) || (n.attributes = [n.attributes]) : n.attributes = [], n.children = !!n.children, n;
}
function Di(n, e) {
  return typeof n == "function" ? n : (t, i) => fy(n, i, e);
}
function fy(n, e, t) {
  typeof n == "string" && (n = { name: n });
  let i;
  const s = e.writer, r = Object.assign({}, n.attributes);
  if (t == "container")
    i = s.createContainerElement(n.name, r);
  else if (t == "attribute") {
    const o = {
      priority: n.priority || Tt.DEFAULT_PRIORITY
    };
    i = s.createAttributeElement(n.name, r, o);
  } else
    i = s.createUIElement(n.name, r);
  if (n.styles) {
    const o = Object.keys(n.styles);
    for (const a of o)
      s.setStyle(a, n.styles[a], i);
  }
  if (n.classes) {
    const o = n.classes;
    if (typeof o == "string")
      s.addClass(o, i);
    else
      for (const a of o)
        s.addClass(a, i);
  }
  return i;
}
function kh(n) {
  return n.model.values ? (e, t, i) => {
    const s = n.view[e];
    return s ? s(e, t, i) : null;
  } : n.view;
}
function Fa(n) {
  return typeof n == "string" ? (e) => ({ key: n, value: e }) : typeof n == "object" ? n.value ? () => n : (e) => ({ key: n.key, value: e }) : n;
}
function Jr(n, e, t) {
  const i = typeof n == "function" ? n(e, t) : n;
  return i ? (i.priority || (i.priority = 10), i.id || (i.id = e.markerName), i) : null;
}
function my(n) {
  return (e, t) => {
    if (!e.is("element", n.name))
      return !1;
    if (t.type == "attribute") {
      if (n.attributes.includes(t.attributeKey))
        return !0;
    } else {
      /* istanbul ignore else: This is always true because otherwise it would not register a reducer callback. -- @preserve */
      if (n.children)
        return !0;
    }
    return !1;
  };
}
function Ch(n) {
  const e = my(n);
  return (t, i) => {
    const s = [];
    i.reconvertedElements || (i.reconvertedElements = /* @__PURE__ */ new Set());
    for (const r of i.changes) {
      const o = r.type == "attribute" ? r.range.start.nodeAfter : r.position.parent;
      if (!o || !e(o, r)) {
        s.push(r);
        continue;
      }
      if (!i.reconvertedElements.has(o)) {
        i.reconvertedElements.add(o);
        const a = w._createBefore(o);
        let l = s.length;
        for (let c = s.length - 1; c >= 0; c--) {
          const u = s[c], d = (u.type == "attribute" ? u.range.start : u.position).compareWith(a);
          if (d == "before" || u.type == "remove" && d == "same")
            break;
          l = c;
        }
        s.splice(l, 0, {
          type: "remove",
          name: o.name,
          position: a,
          length: 1
        }, {
          type: "reinsert",
          name: o.name,
          position: a,
          length: 1
        });
      }
    }
    i.changes = s;
  };
}
function Ah(n) {
  return (e, t, i = {}) => {
    const s = ["insert"];
    for (const r of n.attributes)
      e.hasAttribute(r) && s.push(`attribute:${r}`);
    return s.every((r) => t.test(e, r)) ? (i.preflight || s.forEach((r) => t.consume(e, r)), !0) : !1;
  };
}
function gy(n, e, t) {
  return (i, s) => {
    const r = i.createContainerElement("$slot");
    let o = null;
    if (s === "children")
      o = Array.from(n.getChildren());
    else if (typeof s == "function")
      o = Array.from(n.getChildren()).filter((a) => s(a));
    else
      throw new f("conversion-slot-mode-unknown", t.dispatcher, { modeOrFilter: s });
    return e.set(r, o), r;
  };
}
function py(n, e, t) {
  const i = Array.from(e.values()).flat(), s = new Set(i);
  if (s.size != i.length)
    throw new f("conversion-slot-filter-overlap", t.dispatcher, { element: n });
  if (s.size != n.childCount)
    throw new f("conversion-slot-filter-incomplete", t.dispatcher, { element: n });
}
function wy(n, e, t, i) {
  t.mapper.on("modelToViewPosition", o, { priority: "highest" });
  let s = null, r = null;
  for ([s, r] of e)
    Eh(n, r, t, i), t.writer.move(t.writer.createRangeIn(s), t.writer.createPositionBefore(s)), t.writer.remove(s);
  t.mapper.off("modelToViewPosition", o);
  function o(a, l) {
    const c = l.modelPosition.nodeAfter, u = r.indexOf(c);
    u < 0 || (l.viewPosition = l.mapper.findPositionIn(s, u));
  }
}
function Eh(n, e, t, i) {
  for (const s of e)
    by(n.root, s, t, i) || t.convertItem(s);
}
function by(n, e, t, i) {
  const { writer: s, mapper: r } = t;
  if (!i.reconversion)
    return !1;
  const o = r.toViewElement(e);
  return !o || o.root == n || !t.canReuseView(o) ? !1 : (s.move(s.createRangeOn(o), r.toViewPosition(w._createBefore(e))), !0);
}
function _y(n, e, { preflight: t } = {}) {
  return t ? e.test(n, "insert") : e.consume(n, "insert");
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Th(n) {
  const { schema: e, document: t } = n.model;
  for (const i of t.getRootNames()) {
    const s = t.getRoot(i);
    if (s.isEmpty && !e.checkChild(s, "$text") && e.checkChild(s, "paragraph"))
      return n.insertElement("paragraph", s), !0;
  }
  return !1;
}
function Ph(n, e, t) {
  const i = t.createContext(n);
  return !(!t.checkChild(i, "paragraph") || !t.checkChild(i.push("paragraph"), e));
}
function xh(n, e) {
  const t = e.createElement("paragraph");
  return e.insert(t, n), e.createPositionAt(t, 0);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class vy extends wh {
  /**
   * View element to model element conversion helper.
   *
   * This conversion results in creating a model element. For example,
   * view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.
   *
   * Keep in mind that the element will be inserted only if it is allowed
   * by {@link module:engine/model/schema~Schema schema} configuration.
   *
   * ```ts
   * editor.conversion.for( 'upcast' ).elementToElement( {
   * 	view: 'p',
   * 	model: 'paragraph'
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToElement( {
   * 	view: 'p',
   * 	model: 'paragraph',
   * 	converterPriority: 'high'
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToElement( {
   * 	view: {
   * 		name: 'p',
   * 		classes: 'fancy'
   * 	},
   * 	model: 'fancyParagraph'
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToElement( {
   * 	view: {
   * 		name: 'p',
   * 		classes: 'heading'
   * 	},
   * 	model: ( viewElement, conversionApi ) => {
   * 		const modelWriter = conversionApi.writer;
   *
   * 		return modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );
   * 	}
   * } );
   * ```
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.view Pattern matching all view elements which should be converted. If not set, the converter
   * will fire for every view element.
   * @param config.model Name of the model element, a model element instance or a function that takes a view element
   * and {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API}
   * and returns a model element. The model element will be inserted in the model.
   * @param config.converterPriority Converter priority.
   */
  elementToElement(e) {
    return this.add(Sh(e));
  }
  /**
   * View element to model attribute conversion helper.
   *
   * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes
   * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.
   *
   * This helper is meant to set a model attribute on all the elements that are inside the converted element:
   *
   * ```
   * <strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold="true">Foo</$text></paragraph>
   * ```
   *
   * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).
   * Even though `<strong>` is over `<p>` element, `bold="true"` was added to the text. See
   * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute} for comparison.
   *
   * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.
   *
   * ```ts
   * editor.conversion.for( 'upcast' ).elementToAttribute( {
   * 	view: 'strong',
   * 	model: 'bold'
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToAttribute( {
   * 	view: 'strong',
   * 	model: 'bold',
   * 	converterPriority: 'high'
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToAttribute( {
   * 	view: {
   * 		name: 'span',
   * 		classes: 'bold'
   * 	},
   * 	model: 'bold'
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToAttribute( {
   * 	view: {
   * 		name: 'span',
   * 		classes: [ 'styled', 'styled-dark' ]
   * 	},
   * 	model: {
   * 		key: 'styled',
   * 		value: 'dark'
   * 	}
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToAttribute( {
   * 	view: {
   * 		name: 'span',
   * 		styles: {
   * 			'font-size': /[\s\S]+/
   * 		}
   * 	},
   * 	model: {
   * 		key: 'fontSize',
   * 		value: ( viewElement, conversionApi ) => {
   * 			const fontSize = viewElement.getStyle( 'font-size' );
   * 			const value = fontSize.substr( 0, fontSize.length - 2 );
   *
   * 			if ( value <= 10 ) {
   * 				return 'small';
   * 			} else if ( value > 12 ) {
   * 				return 'big';
   * 			}
   *
   * 			return null;
   * 		}
   * 	}
   * } );
   * ```
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.view Pattern matching all view elements which should be converted.
   * @param config.model Model attribute key or an object with `key` and `value` properties, describing
   * the model attribute. `value` property may be set as a function that takes a view element and
   * {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API} and returns the value.
   * If `String` is given, the model attribute value will be set to `true`.
   * @param config.converterPriority Converter priority. Defaults to `low`.
   */
  elementToAttribute(e) {
    return this.add(Cy(e));
  }
  /**
   * View attribute to model attribute conversion helper.
   *
   * This conversion results in setting an attribute on a model node. For example, view `<img src="foo.jpg"></img>` becomes
   * `<imageBlock source="foo.jpg"></imageBlock>` in the model.
   *
   * This helper is meant to convert view attributes from view elements which got converted to the model, so the view attribute
   * is set only on the corresponding model node:
   *
   * ```
   * <div class="dark"><div>foo</div></div>    -->    <div dark="true"><div>foo</div></div>
   * ```
   *
   * Above, `class="dark"` attribute is added only to the `<div>` elements that has it. This is in contrary to
   * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute} which sets attributes for
   * all the children in the model:
   *
   * ```
   * <strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold="true">Foo</$text></paragraph>
   * ```
   *
   * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).
   * Even though `<strong>` is over `<p>` element, `bold="true"` was added to the text.
   *
   * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.
   *
   * ```ts
   * editor.conversion.for( 'upcast' ).attributeToAttribute( {
   * 	view: 'src',
   * 	model: 'source'
   * } );
   *
   * editor.conversion.for( 'upcast' ).attributeToAttribute( {
   * 	view: { key: 'src' },
   * 	model: 'source'
   * } );
   *
   * editor.conversion.for( 'upcast' ).attributeToAttribute( {
   * 	view: { key: 'src' },
   * 	model: 'source',
   * 	converterPriority: 'normal'
   * } );
   *
   * editor.conversion.for( 'upcast' ).attributeToAttribute( {
   * 	view: {
   * 		key: 'data-style',
   * 		value: /[\s\S]+/
   * 	},
   * 	model: 'styled'
   * } );
   *
   * editor.conversion.for( 'upcast' ).attributeToAttribute( {
   * 	view: {
   * 		name: 'img',
   * 		key: 'class',
   * 		value: 'styled-dark'
   * 	},
   * 	model: {
   * 		key: 'styled',
   * 		value: 'dark'
   * 	}
   * } );
   *
   * editor.conversion.for( 'upcast' ).attributeToAttribute( {
   * 	view: {
   * 		key: 'class',
   * 		value: /styled-[\S]+/
   * 	},
   * 	model: {
   * 		key: 'styled'
   * 		value: ( viewElement, conversionApi ) => {
   * 			const regexp = /styled-([\S]+)/;
   * 			const match = viewElement.getAttribute( 'class' ).match( regexp );
   *
   * 			return match[ 1 ];
   * 		}
   * 	}
   * } );
   * ```
   *
   * Converting styles works a bit differently as it requires `view.styles` to be an object and by default
   * a model attribute will be set to `true` by such a converter. You can set the model attribute to any value by providing the `value`
   * callback that returns the desired value.
   *
   * ```ts
   * // Default conversion of font-weight style will result in setting bold attribute to true.
   * editor.conversion.for( 'upcast' ).attributeToAttribute( {
   * 	view: {
   * 		styles: {
   * 			'font-weight': 'bold'
   * 		}
   * 	},
   * 	model: 'bold'
   * } );
   *
   * // This converter will pass any style value to the `lineHeight` model attribute.
   * editor.conversion.for( 'upcast' ).attributeToAttribute( {
   * 	view: {
   * 		styles: {
   * 			'line-height': /[\s\S]+/
   * 		}
   * 	},
   * 	model: {
   * 		key: 'lineHeight',
   * 		value: ( viewElement, conversionApi ) => viewElement.getStyle( 'line-height' )
   * 	}
   * } );
   * ```
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.view Specifies which view attribute will be converted. If a `String` is passed,
   * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,
   * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`
   * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,
   * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.
   * @param config.model Model attribute key or an object with `key` and `value` properties, describing
   * the model attribute. `value` property may be set as a function that takes a view element and
   * {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API} and returns the value.
   * If `String` is given, the model attribute value will be same as view attribute value.
   * @param config.converterPriority Converter priority. Defaults to `low`.
   */
  attributeToAttribute(e) {
    return this.add(Ay(e));
  }
  /**
   * View element to model marker conversion helper.
   *
   * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:
   * `<p>Fo<span data-marker="comment" data-comment-id="7"></span>o</p><p>B<span data-marker="comment" data-comment-id="7"></span>ar</p>`,
   * after the conversion is done, the marker will be available in
   * {@link module:engine/model/model~Model#markers model document markers}.
   *
   * **Note**: When this helper is used in the data upcast in combination with
   * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToData `#markerToData()`} in the data downcast,
   * then invalid HTML code (e.g. a span between table cells) may be produced by the latter converter.
   *
   * In most of the cases, the {@link #dataToMarker} should be used instead.
   *
   * ```ts
   * editor.conversion.for( 'upcast' ).elementToMarker( {
   * 	view: 'marker-search',
   * 	model: 'search'
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToMarker( {
   * 	view: 'marker-search',
   * 	model: 'search',
   * 	converterPriority: 'high'
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToMarker( {
   * 	view: 'marker-search',
   * 	model: ( viewElement, conversionApi ) => 'comment:' + viewElement.getAttribute( 'data-comment-id' )
   * } );
   *
   * editor.conversion.for( 'upcast' ).elementToMarker( {
   * 	view: {
   * 		name: 'span',
   * 		attributes: {
   * 			'data-marker': 'search'
   * 		}
   * 	},
   * 	model: 'search'
   * } );
   * ```
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.view Pattern matching all view elements which should be converted.
   * @param config.model Name of the model marker, or a function that takes a view element and returns
   * a model marker name.
   * @param config.converterPriority Converter priority.
   */
  elementToMarker(e) {
    return this.add(Ey(e));
  }
  /**
   * View-to-model marker conversion helper.
   *
   * Converts view data created by {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToData `#markerToData()`}
   * back to a model marker.
   *
   * This converter looks for specific view elements and view attributes that mark marker boundaries. See
   * {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToData `#markerToData()`} to learn what view data
   * is expected by this converter.
   *
   * The `config.view` property is equal to the marker group name to convert.
   *
   * By default, this converter creates markers with the `group:name` name convention (to match the default `markerToData` conversion).
   *
   * The conversion configuration can take a function that will generate a marker name.
   * If such function is set as the `config.model` parameter, it is passed the `name` part from the view element or attribute and it is
   * expected to return a string with the marker name.
   *
   * Basic usage:
   *
   * ```ts
   * // Using the default conversion.
   * // In this case, all markers from the `comment` group will be converted.
   * // The conversion will look for `<comment-start>` and `<comment-end>` tags and
   * // `data-comment-start-before`, `data-comment-start-after`,
   * // `data-comment-end-before` and `data-comment-end-after` attributes.
   * editor.conversion.for( 'upcast' ).dataToMarker( {
   * 	view: 'comment'
   * } );
   * ```
   *
   * An example of a model that may be generated by this conversion:
   *
   * ```
   * // View:
   * <p>Foo<comment-start name="commentId:uid"></comment-start>bar</p>
   * <figure data-comment-end-after="commentId:uid" class="image"><img src="abc.jpg" /></figure>
   *
   * // Model:
   * <paragraph>Foo[bar</paragraph>
   * <imageBlock src="abc.jpg"></imageBlock>]
   * ```
   *
   * Where `[]` are boundaries of a marker that will receive the `comment:commentId:uid` name.
   *
   * Other examples of usage:
   *
   * ```ts
   * // Using a custom function which is the same as the default conversion:
   * editor.conversion.for( 'upcast' ).dataToMarker( {
   * 	view: 'comment',
   * 	model: ( name, conversionApi ) => 'comment:' + name,
   * } );
   *
   * // Using the converter priority:
   * editor.conversion.for( 'upcast' ).dataToMarker( {
   * 	view: 'comment',
   * 	model: ( name, conversionApi ) => 'comment:' + name,
   * 	converterPriority: 'high'
   * } );
   * ```
   *
   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter
   * to the conversion process.
   *
   * @param config Conversion configuration.
   * @param config.view The marker group name to convert.
   * @param config.model A function that takes the `name` part from the view element or attribute and
   * {@link module:engine/conversion/upcastdispatcher~UpcastConversionApi upcast conversion API} and returns the marker name.
   * @param config.converterPriority Converter priority.
   */
  dataToMarker(e) {
    return this.add(Ty(e));
  }
}
function Na() {
  return (n, e, t) => {
    if (!e.modelRange && t.consumable.consume(e.viewItem, { name: !0 })) {
      const { modelRange: i, modelCursor: s } = t.convertChildren(e.viewItem, e.modelCursor);
      e.modelRange = i, e.modelCursor = s;
    }
  };
}
function yy() {
  return (n, e, { schema: t, consumable: i, writer: s }) => {
    let r = e.modelCursor;
    if (!i.test(e.viewItem))
      return;
    if (!t.checkChild(r, "$text")) {
      if (!Ph(r, "$text", t) || e.viewItem.data.trim().length == 0)
        return;
      const a = r.nodeBefore;
      r = xh(r, s), a && a.is("element", "$marker") && (s.move(s.createRangeOn(a), r), r = s.createPositionAfter(a));
    }
    i.consume(e.viewItem);
    const o = s.createText(e.viewItem.data);
    s.insert(o, r), e.modelRange = s.createRange(r, r.getShiftedBy(o.offsetSize)), e.modelCursor = e.modelRange.end;
  };
}
function ky(n, e) {
  return (t, i) => {
    const s = i.newSelection, r = [];
    for (const a of s.getRanges())
      r.push(e.toModelRange(a));
    const o = n.createSelection(r, { backward: s.isBackward });
    o.isEqual(n.document.selection) || n.change((a) => {
      a.setSelection(o);
    });
  };
}
function Sh(n) {
  n = st(n);
  const e = lr(n), t = Yr(n.view), i = t ? `element:${t}` : "element";
  return (s) => {
    s.on(i, e, { priority: n.converterPriority || "normal" });
  };
}
function Cy(n) {
  n = st(n), Ih(n);
  const e = Rh(n, !1), t = Yr(n.view), i = t ? `element:${t}` : "element";
  return (s) => {
    s.on(i, e, { priority: n.converterPriority || "low" });
  };
}
function Ay(n) {
  n = st(n);
  let e = null;
  (typeof n.view == "string" || n.view.key) && (e = Sy(n)), Ih(n, e);
  const t = Rh(n, !0);
  return (i) => {
    i.on("element", t, { priority: n.converterPriority || "low" });
  };
}
function Ey(n) {
  const e = Vy(n.model);
  return Sh({ ...n, model: e });
}
function Ty(n) {
  n = st(n), n.model || (n.model = (s) => s ? n.view + ":" + s : n.view);
  const e = {
    view: n.view,
    model: n.model
  }, t = lr(La(e, "start")), i = lr(La(e, "end"));
  return (s) => {
    s.on(`element:${n.view}-start`, t, { priority: n.converterPriority || "normal" }), s.on(`element:${n.view}-end`, i, { priority: n.converterPriority || "normal" });
    const r = ve.low, o = ve.highest, a = ve.get(n.converterPriority) / o;
    s.on("element", Py(e), { priority: r + a });
  };
}
function Py(n) {
  return (e, t, i) => {
    const s = `data-${n.view}`;
    if (!i.consumable.test(t.viewItem, { attributes: s + "-end-after" }) && !i.consumable.test(t.viewItem, { attributes: s + "-start-after" }) && !i.consumable.test(t.viewItem, { attributes: s + "-end-before" }) && !i.consumable.test(t.viewItem, { attributes: s + "-start-before" }))
      return;
    t.modelRange || Object.assign(t, i.convertChildren(t.viewItem, t.modelCursor)), i.consumable.consume(t.viewItem, { attributes: s + "-end-after" }) && r(t.modelRange.end, t.viewItem.getAttribute(s + "-end-after").split(",")), i.consumable.consume(t.viewItem, { attributes: s + "-start-after" }) && r(t.modelRange.end, t.viewItem.getAttribute(s + "-start-after").split(",")), i.consumable.consume(t.viewItem, { attributes: s + "-end-before" }) && r(t.modelRange.start, t.viewItem.getAttribute(s + "-end-before").split(",")), i.consumable.consume(t.viewItem, { attributes: s + "-start-before" }) && r(t.modelRange.start, t.viewItem.getAttribute(s + "-start-before").split(","));
    function r(o, a) {
      for (const l of a) {
        const c = n.model(l, i), u = i.writer.createElement("$marker", { "data-name": c });
        i.writer.insert(u, o), t.modelCursor.isEqual(o) ? t.modelCursor = t.modelCursor.getShiftedBy(1) : t.modelCursor = t.modelCursor._getTransformedByInsertion(o, 1), t.modelRange = t.modelRange._getTransformedByInsertion(o, 1)[0];
      }
    }
  };
}
function Yr(n) {
  return typeof n == "string" ? n : typeof n == "object" && typeof n.name == "string" ? n.name : null;
}
function lr(n) {
  const e = new ri(n.view);
  return (t, i, s) => {
    const r = e.match(i.viewItem);
    if (!r)
      return;
    const o = r.match;
    if (o.name = !0, !s.consumable.test(i.viewItem, o))
      return;
    const a = xy(n.model, i.viewItem, s);
    a && s.safeInsert(a, i.modelCursor) && (s.consumable.consume(i.viewItem, o), s.convertChildren(i.viewItem, a), s.updateConversionResult(a, i));
  };
}
function xy(n, e, t) {
  return n instanceof Function ? n(e, t) : t.writer.createElement(n);
}
function Sy(n) {
  typeof n.view == "string" && (n.view = { key: n.view });
  const e = n.view.key;
  let t;
  if (e == "class" || e == "style")
    t = {
      [e == "class" ? "classes" : "styles"]: n.view.value
    };
  else {
    const i = typeof n.view.value > "u" ? /[\s\S]*/ : n.view.value;
    t = {
      attributes: {
        [e]: i
      }
    };
  }
  return n.view.name && (t.name = n.view.name), n.view = t, e;
}
function Ih(n, e = null) {
  const t = e === null ? !0 : (r) => r.getAttribute(e), i = typeof n.model != "object" ? n.model : n.model.key, s = typeof n.model != "object" || typeof n.model.value > "u" ? t : n.model.value;
  n.model = { key: i, value: s };
}
function Rh(n, e) {
  const t = new ri(n.view);
  return (i, s, r) => {
    if (!s.modelRange && e)
      return;
    const o = t.match(s.viewItem);
    if (!o || (Iy(n.view, s.viewItem) ? o.match.name = !0 : delete o.match.name, !r.consumable.test(s.viewItem, o.match)))
      return;
    const a = n.model.key, l = typeof n.model.value == "function" ? n.model.value(s.viewItem, r) : n.model.value;
    if (l === null)
      return;
    s.modelRange || Object.assign(s, r.convertChildren(s.viewItem, s.modelCursor)), Ry(s.modelRange, { key: a, value: l }, e, r) && (r.consumable.test(s.viewItem, { name: !0 }) && (o.match.name = !0), r.consumable.consume(s.viewItem, o.match));
  };
}
function Iy(n, e) {
  const t = typeof n == "function" ? n(e) : n;
  return typeof t == "object" && !Yr(t) ? !1 : !t.classes && !t.attributes && !t.styles;
}
function Ry(n, e, t, i) {
  let s = !1;
  for (const r of Array.from(n.getItems({ shallow: t })))
    i.schema.checkAttribute(r, e.key) && (s = !0, !r.hasAttribute(e.key) && i.writer.setAttribute(e.key, e.value, r));
  return s;
}
function Vy(n) {
  return (e, t) => {
    const i = typeof n == "string" ? n : n(e, t);
    return t.writer.createElement("$marker", { "data-name": i });
  };
}
function La(n, e) {
  const t = (i, s) => {
    const r = i.getAttribute("name"), o = n.model(r, s);
    return s.writer.createElement("$marker", { "data-name": o });
  };
  return {
    // Upcast <markerGroup-start> and <markerGroup-end> elements.
    view: `${n.view}-${e}`,
    model: t
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Oy(n) {
  n.document.registerPostFixer((e) => My(e, n));
}
function My(n, e) {
  const t = e.document.selection, i = e.schema, s = [];
  let r = !1;
  for (const o of t.getRanges()) {
    const a = Vh(o, i);
    a && !a.isEqual(o) ? (s.push(a), r = !0) : s.push(o);
  }
  return r && n.setSelection(Ny(s), { backward: t.isBackward }), !1;
}
function Vh(n, e) {
  return n.isCollapsed ? By(n, e) : Dy(n, e);
}
function By(n, e) {
  const t = n.start, i = e.getNearestSelectionRange(t);
  if (!i) {
    const r = t.getAncestors().reverse().find((o) => e.isObject(o));
    return r ? g._createOn(r) : null;
  }
  if (!i.isCollapsed)
    return i;
  const s = i.start;
  return t.isEqual(s) ? null : new g(s);
}
function Dy(n, e) {
  const { start: t, end: i } = n, s = e.checkChild(t, "$text"), r = e.checkChild(i, "$text"), o = e.getLimitElement(t), a = e.getLimitElement(i);
  if (o === a) {
    if (s && r)
      return null;
    if (Fy(t, i, e)) {
      const h = t.nodeAfter && e.isSelectable(t.nodeAfter) ? null : e.getNearestSelectionRange(t, "forward"), m = i.nodeBefore && e.isSelectable(i.nodeBefore) ? null : e.getNearestSelectionRange(i, "backward"), p = h ? h.start : t, b = m ? m.end : i;
      return new g(p, b);
    }
  }
  const l = o && !o.is("rootElement"), c = a && !a.is("rootElement");
  if (l || c) {
    const u = t.nodeAfter && i.nodeBefore && t.nodeAfter.parent === i.nodeBefore.parent, h = l && (!u || !$a(t.nodeAfter, e)), d = c && (!u || !$a(i.nodeBefore, e));
    let m = t, p = i;
    return h && (m = w._createBefore(za(o, e))), d && (p = w._createAfter(za(a, e))), new g(m, p);
  }
  return null;
}
function za(n, e) {
  let t = n, i = t;
  for (; e.isLimit(i) && i.parent; )
    t = i, i = i.parent;
  return t;
}
function Fy(n, e, t) {
  const i = n.nodeAfter && !t.isLimit(n.nodeAfter) || t.checkChild(n, "$text"), s = e.nodeBefore && !t.isLimit(e.nodeBefore) || t.checkChild(e, "$text");
  return i || s;
}
function Ny(n) {
  const e = [...n], t = /* @__PURE__ */ new Set();
  let i = 1;
  for (; i < e.length; ) {
    const r = e[i], o = e.slice(0, i);
    for (const [a, l] of o.entries())
      if (!t.has(a)) {
        if (r.isEqual(l))
          t.add(a);
        else if (r.isIntersecting(l)) {
          t.add(a), t.add(i);
          const c = r.getJoined(l);
          e.push(c);
        }
      }
    i++;
  }
  return e.filter((r, o) => !t.has(o));
}
function $a(n, e) {
  return n && e.isSelectable(n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ly extends H() {
  /**
   * Creates an editing controller instance.
   *
   * @param model Editing model.
   * @param stylesProcessor The styles processor instance.
   */
  constructor(e, t) {
    super(), this.model = e, this.view = new Pv(t), this.mapper = new mh(), this.downcastDispatcher = new gh({
      mapper: this.mapper,
      schema: e.schema
    });
    const i = this.model.document, s = i.selection, r = this.model.markers;
    this.listenTo(this.model, "_beforeChanges", () => {
      this.view._disableRendering(!0);
    }, { priority: "highest" }), this.listenTo(this.model, "_afterChanges", () => {
      this.view._disableRendering(!1);
    }, { priority: "lowest" }), this.listenTo(i, "change", () => {
      this.view.change((o) => {
        this.downcastDispatcher.convertChanges(i.differ, r, o), this.downcastDispatcher.convertSelection(s, r, o);
      });
    }, { priority: "low" }), this.listenTo(this.view.document, "selectionChange", ky(this.model, this.mapper)), this.listenTo(this.view.document, "beforeinput", zy(this.mapper, this.model.schema, this.view), { priority: "high" }), this.downcastDispatcher.on("insert:$text", bh(), { priority: "lowest" }), this.downcastDispatcher.on("insert", _h(), { priority: "lowest" }), this.downcastDispatcher.on("remove", Wv(), { priority: "low" }), this.downcastDispatcher.on("selection", qv(), { priority: "high" }), this.downcastDispatcher.on("selection", Uv(), { priority: "low" }), this.downcastDispatcher.on("selection", jv(), { priority: "low" }), this.view.document.roots.bindTo(this.model.document.roots).using((o) => {
      if (o.rootName == "$graveyard")
        return null;
      const a = new Xu(this.view.document, o.name);
      return a.rootName = o.rootName, this.mapper.bindElements(o, a), a;
    });
  }
  /**
   * Removes all event listeners attached to the `EditingController`. Destroys all objects created
   * by `EditingController` that need to be destroyed.
   */
  destroy() {
    this.view.destroy(), this.stopListening();
  }
  /**
   * Calling this method will refresh the marker by triggering the downcast conversion for it.
   *
   * Reconverting the marker is useful when you want to change its {@link module:engine/view/element~Element view element}
   * without changing any marker data. For instance:
   *
   * ```ts
   * let isCommentActive = false;
   *
   * model.conversion.markerToHighlight( {
   * 	model: 'comment',
   * 	view: data => {
   * 		const classes = [ 'comment-marker' ];
   *
   * 		if ( isCommentActive ) {
   * 			classes.push( 'comment-marker--active' );
   * 		}
   *
   * 		return { classes };
   * 	}
   * } );
   *
   * // ...
   *
   * // Change the property that indicates if marker is displayed as active or not.
   * isCommentActive = true;
   *
   * // Reconverting will downcast and synchronize the marker with the new isCommentActive state value.
   * editor.editing.reconvertMarker( 'comment' );
   * ```
   *
   * **Note**: If you want to reconvert a model item, use {@link #reconvertItem} instead.
   *
   * @param markerOrName Name of a marker to update, or a marker instance.
   */
  reconvertMarker(e) {
    const t = typeof e == "string" ? e : e.name, i = this.model.markers.get(t);
    if (!i)
      throw new f("editingcontroller-reconvertmarker-marker-not-exist", this, { markerName: t });
    this.model.change(() => {
      this.model.markers._refresh(i);
    });
  }
  /**
   * Calling this method will downcast a model item on demand (by requesting a refresh in the {@link module:engine/model/differ~Differ}).
   *
   * You can use it if you want the view representation of a specific item updated as a response to external modifications. For instance,
   * when the view structure depends not only on the associated model data but also on some external state.
   *
   * **Note**: If you want to reconvert a model marker, use {@link #reconvertMarker} instead.
   *
   * @param item Item to refresh.
   */
  reconvertItem(e) {
    this.model.change(() => {
      this.model.document.differ._refreshItem(e);
    });
  }
}
function zy(n, e, t) {
  return (i, s) => {
    if (!(t.document.isComposing && !S.isAndroid))
      for (let r = 0; r < s.targetRanges.length; r++) {
        const o = s.targetRanges[r], a = n.toModelRange(o), l = Vh(a, e);
        !l || l.isEqual(a) || (s.targetRanges[r] = n.toViewRange(l));
      }
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class xi {
  constructor() {
    this._consumables = /* @__PURE__ */ new Map();
  }
  add(e, t) {
    let i;
    if (e.is("$text") || e.is("documentFragment")) {
      this._consumables.set(e, !0);
      return;
    }
    this._consumables.has(e) ? i = this._consumables.get(e) : (i = new $y(e), this._consumables.set(e, i)), i.add(t);
  }
  /**
   * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or
   * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.
   * It returns `true` when all items included in method's call can be consumed. Returns `false` when
   * first already consumed item is found and `null` when first non-consumable item is found.
   *
   * ```ts
   * viewConsumable.test( p, { name: true } ); // Tests element's name.
   * viewConsumable.test( p, { attributes: 'name' } ); // Tests attribute.
   * viewConsumable.test( p, { classes: 'foobar' } ); // Tests class.
   * viewConsumable.test( p, { styles: 'color' } ); // Tests style.
   * viewConsumable.test( p, { attributes: 'name', styles: 'color' } ); // Tests attribute and style.
   * viewConsumable.test( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.
   * viewConsumable.test( textNode ); // Tests text node.
   * viewConsumable.test( docFragment ); // Tests document fragment.
   * ```
   *
   * Testing classes and styles as attribute will test if all added classes/styles can be consumed.
   *
   * ```ts
   * viewConsumable.test( p, { attributes: 'class' } ); // Tests if all added classes can be consumed.
   * viewConsumable.test( p, { attributes: 'style' } ); // Tests if all added styles can be consumed.
   * ```
   *
   * @param consumables Used only if first parameter is {@link module:engine/view/element~Element view element} instance.
   * @param consumables.name If set to true element's name will be included.
   * @param consumables.attributes Attribute name or array of attribute names.
   * @param consumables.classes Class name or array of class names.
   * @param consumables.styles Style name or array of style names.
   * @returns Returns `true` when all items included in method's call can be consumed. Returns `false`
   * when first already consumed item is found and `null` when first non-consumable item is found.
   */
  test(e, t) {
    const i = this._consumables.get(e);
    return i === void 0 ? null : e.is("$text") || e.is("documentFragment") ? i : i.test(t);
  }
  /**
   * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or
   * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.
   * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.
   *
   * ```ts
   * viewConsumable.consume( p, { name: true } ); // Consumes element's name.
   * viewConsumable.consume( p, { attributes: 'name' } ); // Consumes element's attribute.
   * viewConsumable.consume( p, { classes: 'foobar' } ); // Consumes element's class.
   * viewConsumable.consume( p, { styles: 'color' } ); // Consumes element's style.
   * viewConsumable.consume( p, { attributes: 'name', styles: 'color' } ); // Consumes attribute and style.
   * viewConsumable.consume( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.
   * viewConsumable.consume( textNode ); // Consumes text node.
   * viewConsumable.consume( docFragment ); // Consumes document fragment.
   * ```
   *
   * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.
   *
   * ```ts
   * viewConsumable.consume( p, { attributes: 'class' } ); // Consume only if all added classes can be consumed.
   * viewConsumable.consume( p, { attributes: 'style' } ); // Consume only if all added styles can be consumed.
   * ```
   *
   * @param consumables Used only if first parameter is {@link module:engine/view/element~Element view element} instance.
   * @param consumables.name If set to true element's name will be included.
   * @param consumables.attributes Attribute name or array of attribute names.
   * @param consumables.classes Class name or array of class names.
   * @param consumables.styles Style name or array of style names.
   * @returns Returns `true` when all items included in method's call can be consumed,
   * otherwise returns `false`.
   */
  consume(e, t) {
    return this.test(e, t) ? (e.is("$text") || e.is("documentFragment") ? this._consumables.set(e, !1) : this._consumables.get(e).consume(t), !0) : !1;
  }
  /**
   * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or
   * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.
   * Method does not revert items that were never previously added for consumption, even if they are included in
   * method's call.
   *
   * ```ts
   * viewConsumable.revert( p, { name: true } ); // Reverts element's name.
   * viewConsumable.revert( p, { attributes: 'name' } ); // Reverts element's attribute.
   * viewConsumable.revert( p, { classes: 'foobar' } ); // Reverts element's class.
   * viewConsumable.revert( p, { styles: 'color' } ); // Reverts element's style.
   * viewConsumable.revert( p, { attributes: 'name', styles: 'color' } ); // Reverts attribute and style.
   * viewConsumable.revert( p, { classes: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.
   * viewConsumable.revert( textNode ); // Reverts text node.
   * viewConsumable.revert( docFragment ); // Reverts document fragment.
   * ```
   *
   * Reverting classes and styles as attribute will revert all classes/styles that were previously added for
   * consumption.
   *
   * ```ts
   * viewConsumable.revert( p, { attributes: 'class' } ); // Reverts all classes added for consumption.
   * viewConsumable.revert( p, { attributes: 'style' } ); // Reverts all styles added for consumption.
   * ```
   *
   * @param consumables Used only if first parameter is {@link module:engine/view/element~Element view element} instance.
   * @param consumables.name If set to true element's name will be included.
   * @param consumables.attributes Attribute name or array of attribute names.
   * @param consumables.classes Class name or array of class names.
   * @param consumables.styles Style name or array of style names.
   */
  revert(e, t) {
    const i = this._consumables.get(e);
    i !== void 0 && (e.is("$text") || e.is("documentFragment") ? this._consumables.set(e, !0) : i.revert(t));
  }
  /**
   * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include
   * element's name and all its attributes, classes and styles.
   */
  static consumablesFromElement(e) {
    const t = {
      element: e,
      name: !0,
      attributes: [],
      classes: [],
      styles: []
    }, i = e.getAttributeKeys();
    for (const o of i)
      o == "style" || o == "class" || t.attributes.push(o);
    const s = e.getClassNames();
    for (const o of s)
      t.classes.push(o);
    const r = e.getStyleNames();
    for (const o of r)
      t.styles.push(o);
    return t;
  }
  /**
   * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from
   * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.
   * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.
   *
   * @param from View node or document fragment from which `ViewConsumable` will be created.
   * @param instance If provided, given `ViewConsumable` instance will be used
   * to add all consumables. It will be returned instead of a new instance.
   */
  static createFrom(e, t) {
    if (t || (t = new xi()), e.is("$text"))
      return t.add(e), t;
    e.is("element") && t.add(e, xi.consumablesFromElement(e)), e.is("documentFragment") && t.add(e);
    for (const i of e.getChildren())
      t = xi.createFrom(i, t);
    return t;
  }
}
const tn = ["attributes", "classes", "styles"];
class $y {
  /**
   * Creates ViewElementConsumables instance.
   *
   * @param from View node or document fragment from which `ViewElementConsumables` is being created.
   */
  constructor(e) {
    this.element = e, this._canConsumeName = null, this._consumables = {
      attributes: /* @__PURE__ */ new Map(),
      styles: /* @__PURE__ */ new Map(),
      classes: /* @__PURE__ */ new Map()
    };
  }
  /**
   * Adds consumable parts of the {@link module:engine/view/element~Element view element}.
   * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and
   * styles still could be consumed):
   *
   * ```ts
   * consumables.add( { name: true } );
   * ```
   *
   * Attributes classes and styles:
   *
   * ```ts
   * consumables.add( { attributes: 'title', classes: 'foo', styles: 'color' } );
   * consumables.add( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );
   * ```
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`
   * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.
   *
   * @param consumables Object describing which parts of the element can be consumed.
   * @param consumables.name If set to `true` element's name will be added as consumable.
   * @param consumables.attributes Attribute name or array of attribute names to add as consumable.
   * @param consumables.classes Class name or array of class names to add as consumable.
   * @param consumables.styles Style name or array of style names to add as consumable.
   */
  add(e) {
    e.name && (this._canConsumeName = !0);
    for (const t of tn)
      t in e && this._add(t, e[t]);
  }
  /**
   * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.
   *
   * Element's name can be tested:
   *
   * ```ts
   * consumables.test( { name: true } );
   * ```
   *
   * Attributes classes and styles:
   *
   * ```ts
   * consumables.test( { attributes: 'title', classes: 'foo', styles: 'color' } );
   * consumables.test( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );
   * ```
   *
   * @param consumables Object describing which parts of the element should be tested.
   * @param consumables.name If set to `true` element's name will be tested.
   * @param consumables.attributes Attribute name or array of attribute names to test.
   * @param consumables.classes Class name or array of class names to test.
   * @param consumables.styles Style name or array of style names to test.
   * @returns `true` when all tested items can be consumed, `null` when even one of the items
   * was never marked for consumption and `false` when even one of the items was already consumed.
   */
  test(e) {
    if (e.name && !this._canConsumeName)
      return this._canConsumeName;
    for (const t of tn)
      if (t in e) {
        const i = this._test(t, e[t]);
        if (i !== !0)
          return i;
      }
    return !0;
  }
  /**
   * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item
   * is already consumed - it consumes all consumable items provided.
   * Element's name can be consumed:
   *
   * ```ts
   * consumables.consume( { name: true } );
   * ```
   *
   * Attributes classes and styles:
   *
   * ```ts
   * consumables.consume( { attributes: 'title', classes: 'foo', styles: 'color' } );
   * consumables.consume( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );
   * ```
   *
   * @param consumables Object describing which parts of the element should be consumed.
   * @param consumables.name If set to `true` element's name will be consumed.
   * @param consumables.attributes Attribute name or array of attribute names to consume.
   * @param consumables.classes Class name or array of class names to consume.
   * @param consumables.styles Style name or array of style names to consume.
   */
  consume(e) {
    e.name && (this._canConsumeName = !1);
    for (const t of tn)
      t in e && this._consume(t, e[t]);
  }
  /**
   * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.
   * Element's name can be reverted:
   *
   * ```ts
   * consumables.revert( { name: true } );
   * ```
   *
   * Attributes classes and styles:
   *
   * ```ts
   * consumables.revert( { attributes: 'title', classes: 'foo', styles: 'color' } );
   * consumables.revert( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );
   * ```
   *
   * @param consumables Object describing which parts of the element should be reverted.
   * @param consumables.name If set to `true` element's name will be reverted.
   * @param consumables.attributes Attribute name or array of attribute names to revert.
   * @param consumables.classes Class name or array of class names to revert.
   * @param consumables.styles Style name or array of style names to revert.
   */
  revert(e) {
    e.name && (this._canConsumeName = !0);
    for (const t of tn)
      t in e && this._revert(t, e[t]);
  }
  /**
   * Helper method that adds consumables of a given type: attribute, class or style.
   *
   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`
   * type is provided - it should be handled separately by providing actual style/class type.
   *
   * @param type Type of the consumable item: `attributes`, `classes` or `styles`.
   * @param item Consumable item or array of items.
   */
  _add(e, t) {
    const i = he(t) ? t : [t], s = this._consumables[e];
    for (const r of i) {
      if (e === "attributes" && (r === "class" || r === "style"))
        throw new f("viewconsumable-invalid-attribute", this);
      if (s.set(r, !0), e === "styles")
        for (const o of this.element.document.stylesProcessor.getRelatedStyles(r))
          s.set(o, !0);
    }
  }
  /**
   * Helper method that tests consumables of a given type: attribute, class or style.
   *
   * @param type Type of the consumable item: `attributes`, `classes` or `styles`.
   * @param item Consumable item or array of items.
   * @returns Returns `true` if all items can be consumed, `null` when one of the items cannot be
   * consumed and `false` when one of the items is already consumed.
   */
  _test(e, t) {
    const i = he(t) ? t : [t], s = this._consumables[e];
    for (const r of i)
      if (e === "attributes" && (r === "class" || r === "style")) {
        const o = r == "class" ? "classes" : "styles", a = this._test(o, [...this._consumables[o].keys()]);
        if (a !== !0)
          return a;
      } else {
        const o = s.get(r);
        if (o === void 0)
          return null;
        if (!o)
          return !1;
      }
    return !0;
  }
  /**
   * Helper method that consumes items of a given type: attribute, class or style.
   *
   * @param type Type of the consumable item: `attributes`, `classes` or `styles`.
   * @param item Consumable item or array of items.
   */
  _consume(e, t) {
    const i = he(t) ? t : [t], s = this._consumables[e];
    for (const r of i)
      if (e === "attributes" && (r === "class" || r === "style")) {
        const o = r == "class" ? "classes" : "styles";
        this._consume(o, [...this._consumables[o].keys()]);
      } else if (s.set(r, !1), e == "styles")
        for (const o of this.element.document.stylesProcessor.getRelatedStyles(r))
          s.set(o, !1);
  }
  /**
   * Helper method that reverts items of a given type: attribute, class or style.
   *
   * @param type Type of the consumable item: `attributes`, `classes` or , `styles`.
   * @param item Consumable item or array of items.
   */
  _revert(e, t) {
    const i = he(t) ? t : [t], s = this._consumables[e];
    for (const r of i)
      if (e === "attributes" && (r === "class" || r === "style")) {
        const o = r == "class" ? "classes" : "styles";
        this._revert(o, [...this._consumables[o].keys()]);
      } else
        s.get(r) === !1 && s.set(r, !0);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Hy extends H() {
  /**
   * Creates a schema instance.
   */
  constructor() {
    super(), this._sourceDefinitions = {}, this._attributeProperties = {}, this.decorate("checkChild"), this.decorate("checkAttribute"), this.on("checkAttribute", (e, t) => {
      t[0] = new xt(t[0]);
    }, { priority: "highest" }), this.on("checkChild", (e, t) => {
      t[0] = new xt(t[0]), t[1] = this.getDefinition(t[1]);
    }, { priority: "highest" });
  }
  /**
   * Registers a schema item. Can only be called once for every item name.
   *
   * ```ts
   * schema.register( 'paragraph', {
   * 	inheritAllFrom: '$block'
   * } );
   * ```
   */
  register(e, t) {
    if (this._sourceDefinitions[e])
      throw new f("schema-cannot-register-item-twice", this, {
        itemName: e
      });
    this._sourceDefinitions[e] = [
      Object.assign({}, t)
    ], this._clearCache();
  }
  /**
   * Extends a {@link #register registered} item's definition.
   *
   * Extending properties such as `allowIn` will add more items to the existing properties,
   * while redefining properties such as `isBlock` will override the previously defined ones.
   *
   * ```ts
   * schema.register( 'foo', {
   * 	allowIn: '$root',
   * 	isBlock: true;
   * } );
   * schema.extend( 'foo', {
   * 	allowIn: 'blockQuote',
   * 	isBlock: false
   * } );
   *
   * schema.getDefinition( 'foo' );
   * //	{
   * //		allowIn: [ '$root', 'blockQuote' ],
   * // 		isBlock: false
   * //	}
   * ```
   */
  extend(e, t) {
    if (!this._sourceDefinitions[e])
      throw new f("schema-cannot-extend-missing-item", this, {
        itemName: e
      });
    this._sourceDefinitions[e].push(Object.assign({}, t)), this._clearCache();
  }
  /**
   * Returns data of all registered items.
   *
   * This method should normally be used for reflection purposes (e.g. defining a clone of a certain element,
   * checking a list of all block elements, etc).
   * Use specific methods (such as {@link #checkChild `checkChild()`} or {@link #isLimit `isLimit()`})
   * in other cases.
   */
  getDefinitions() {
    return this._compiledDefinitions || this._compile(), this._compiledDefinitions;
  }
  /**
   * Returns a definition of the given item or `undefined` if an item is not registered.
   *
   * This method should normally be used for reflection purposes (e.g. defining a clone of a certain element,
   * checking a list of all block elements, etc).
   * Use specific methods (such as {@link #checkChild `checkChild()`} or {@link #isLimit `isLimit()`})
   * in other cases.
   */
  getDefinition(e) {
    let t;
    return typeof e == "string" ? t = e : "is" in e && (e.is("$text") || e.is("$textProxy")) ? t = "$text" : t = e.name, this.getDefinitions()[t];
  }
  /**
   * Returns `true` if the given item is registered in the schema.
   *
   * ```ts
   * schema.isRegistered( 'paragraph' ); // -> true
   * schema.isRegistered( editor.model.document.getRoot() ); // -> true
   * schema.isRegistered( 'foo' ); // -> false
   * ```
   */
  isRegistered(e) {
    return !!this.getDefinition(e);
  }
  /**
   * Returns `true` if the given item is defined to be
   * a block by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.
   *
   * ```ts
   * schema.isBlock( 'paragraph' ); // -> true
   * schema.isBlock( '$root' ); // -> false
   *
   * const paragraphElement = writer.createElement( 'paragraph' );
   * schema.isBlock( paragraphElement ); // -> true
   * ```
   *
   * See the {@glink framework/deep-dive/schema#block-elements Block elements} section of
   * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.
   */
  isBlock(e) {
    const t = this.getDefinition(e);
    return !!(t && t.isBlock);
  }
  /**
   * Returns `true` if the given item should be treated as a limit element.
   *
   * It considers an item to be a limit element if its
   * {@link module:engine/model/schema~SchemaItemDefinition}'s
   * {@link module:engine/model/schema~SchemaItemDefinition#isLimit `isLimit`} or
   * {@link module:engine/model/schema~SchemaItemDefinition#isObject `isObject`} property
   * was set to `true`.
   *
   * ```ts
   * schema.isLimit( 'paragraph' ); // -> false
   * schema.isLimit( '$root' ); // -> true
   * schema.isLimit( editor.model.document.getRoot() ); // -> true
   * schema.isLimit( 'imageBlock' ); // -> true
   * ```
   *
   * See the {@glink framework/deep-dive/schema#limit-elements Limit elements} section of
   * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.
   */
  isLimit(e) {
    const t = this.getDefinition(e);
    return t ? !!(t.isLimit || t.isObject) : !1;
  }
  /**
   * Returns `true` if the given item should be treated as an object element.
   *
   * It considers an item to be an object element if its
   * {@link module:engine/model/schema~SchemaItemDefinition}'s
   * {@link module:engine/model/schema~SchemaItemDefinition#isObject `isObject`} property
   * was set to `true`.
   *
   * ```ts
   * schema.isObject( 'paragraph' ); // -> false
   * schema.isObject( 'imageBlock' ); // -> true
   *
   * const imageElement = writer.createElement( 'imageBlock' );
   * schema.isObject( imageElement ); // -> true
   * ```
   *
   * See the {@glink framework/deep-dive/schema#object-elements Object elements} section of
   * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.
   */
  isObject(e) {
    const t = this.getDefinition(e);
    return t ? !!(t.isObject || t.isLimit && t.isSelectable && t.isContent) : !1;
  }
  /**
   * Returns `true` if the given item is defined to be
   * an inline element by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isInline` property.
   *
   * ```ts
   * schema.isInline( 'paragraph' ); // -> false
   * schema.isInline( 'softBreak' ); // -> true
   *
   * const text = writer.createText( 'foo' );
   * schema.isInline( text ); // -> true
   * ```
   *
   * See the {@glink framework/deep-dive/schema#inline-elements Inline elements} section of
   * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.
   */
  isInline(e) {
    const t = this.getDefinition(e);
    return !!(t && t.isInline);
  }
  /**
   * Returns `true` if the given item is defined to be
   * a selectable element by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isSelectable` property.
   *
   * ```ts
   * schema.isSelectable( 'paragraph' ); // -> false
   * schema.isSelectable( 'heading1' ); // -> false
   * schema.isSelectable( 'imageBlock' ); // -> true
   * schema.isSelectable( 'tableCell' ); // -> true
   *
   * const text = writer.createText( 'foo' );
   * schema.isSelectable( text ); // -> false
   * ```
   *
   * See the {@glink framework/deep-dive/schema#selectable-elements Selectable elements section} of
   * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.
   */
  isSelectable(e) {
    const t = this.getDefinition(e);
    return t ? !!(t.isSelectable || t.isObject) : !1;
  }
  /**
   * Returns `true` if the given item is defined to be
   * a content by the {@link module:engine/model/schema~SchemaItemDefinition}'s `isContent` property.
   *
   * ```ts
   * schema.isContent( 'paragraph' ); // -> false
   * schema.isContent( 'heading1' ); // -> false
   * schema.isContent( 'imageBlock' ); // -> true
   * schema.isContent( 'horizontalLine' ); // -> true
   *
   * const text = writer.createText( 'foo' );
   * schema.isContent( text ); // -> true
   * ```
   *
   * See the {@glink framework/deep-dive/schema#content-elements Content elements section} of
   * the {@glink framework/deep-dive/schema Schema deep-dive} guide for more details.
   */
  isContent(e) {
    const t = this.getDefinition(e);
    return t ? !!(t.isContent || t.isObject) : !1;
  }
  /**
   * Checks whether the given node (`child`) can be a child of the given context.
   *
   * ```ts
   * schema.checkChild( model.document.getRoot(), paragraph ); // -> false
   *
   * schema.register( 'paragraph', {
   * 	allowIn: '$root'
   * } );
   * schema.checkChild( model.document.getRoot(), paragraph ); // -> true
   * ```
   *
   * Note: When verifying whether the given node can be a child of the given context, the
   * schema also verifies the entire context &mdash; from its root to its last element. Therefore, it is possible
   * for `checkChild()` to return `false` even though the context's last element can contain the checked child.
   * It happens if one of the context's elements does not allow its child.
   *
   * @fires checkChild
   * @param context The context in which the child will be checked.
   * @param def The child to check.
   */
  checkChild(e, t) {
    return t ? this._checkContextMatch(t, e) : !1;
  }
  /**
   * Checks whether the given attribute can be applied in the given context (on the last
   * item of the context).
   *
   * ```ts
   * schema.checkAttribute( textNode, 'bold' ); // -> false
   *
   * schema.extend( '$text', {
   * 	allowAttributes: 'bold'
   * } );
   * schema.checkAttribute( textNode, 'bold' ); // -> true
   * ```
   *
   * @fires checkAttribute
   * @param context The context in which the attribute will be checked.
   */
  checkAttribute(e, t) {
    const i = this.getDefinition(e.last);
    return i ? i.allowAttributes.includes(t) : !1;
  }
  /**
   * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).
   *
   * In other words &mdash; whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.
   *
   * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}
   * will be valid.
   *
   * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the
   * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.
   *
   * @param positionOrBaseElement The position or base element to which the `elementToMerge` will be merged.
   * @param elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.
   */
  checkMerge(e, t) {
    if (e instanceof w) {
      const i = e.nodeBefore, s = e.nodeAfter;
      if (!(i instanceof F))
        throw new f("schema-check-merge-no-element-before", this);
      if (!(s instanceof F))
        throw new f("schema-check-merge-no-element-after", this);
      return this.checkMerge(i, s);
    }
    for (const i of t.getChildren())
      if (!this.checkChild(e, i))
        return !1;
    return !0;
  }
  /**
   * Allows registering a callback to the {@link #checkChild} method calls.
   *
   * Callbacks allow you to implement rules which are not otherwise possible to achieve
   * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.
   * For example, by using this method you can disallow elements in specific contexts.
   *
   * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,
   * you can use that event instead.
   *
   * Example:
   *
   * ```ts
   * // Disallow heading1 directly inside a blockQuote.
   * schema.addChildCheck( ( context, childDefinition ) => {
   * 	if ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {
   * 		return false;
   * 	}
   * } );
   * ```
   *
   * Which translates to:
   *
   * ```ts
   * schema.on( 'checkChild', ( evt, args ) => {
   * 	const context = args[ 0 ];
   * 	const childDefinition = args[ 1 ];
   *
   * 	if ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {
   * 		// Prevent next listeners from being called.
   * 		evt.stop();
   * 		// Set the checkChild()'s return value.
   * 		evt.return = false;
   * 	}
   * }, { priority: 'high' } );
   * ```
   *
   * @param callback The callback to be called. It is called with two parameters:
   * {@link module:engine/model/schema~SchemaContext} (context) instance and
   * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).
   * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return
   * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.
   */
  addChildCheck(e) {
    this.on("checkChild", (t, [i, s]) => {
      if (!s)
        return;
      const r = e(i, s);
      typeof r == "boolean" && (t.stop(), t.return = r);
    }, { priority: "high" });
  }
  /**
   * Allows registering a callback to the {@link #checkAttribute} method calls.
   *
   * Callbacks allow you to implement rules which are not otherwise possible to achieve
   * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.
   * For example, by using this method you can disallow attribute if node to which it is applied
   * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).
   *
   * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,
   * you can use that event instead.
   *
   * Example:
   *
   * ```ts
   * // Disallow bold on $text inside heading1.
   * schema.addAttributeCheck( ( context, attributeName ) => {
   * 	if ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {
   * 		return false;
   * 	}
   * } );
   * ```
   *
   * Which translates to:
   *
   * ```ts
   * schema.on( 'checkAttribute', ( evt, args ) => {
   * 	const context = args[ 0 ];
   * 	const attributeName = args[ 1 ];
   *
   * 	if ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {
   * 		// Prevent next listeners from being called.
   * 		evt.stop();
   * 		// Set the checkAttribute()'s return value.
   * 		evt.return = false;
   * 	}
   * }, { priority: 'high' } );
   * ```
   *
   * @param callback The callback to be called. It is called with two parameters:
   * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.
   * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return
   * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.
   */
  addAttributeCheck(e) {
    this.on("checkAttribute", (t, [i, s]) => {
      const r = e(i, s);
      typeof r == "boolean" && (t.stop(), t.return = r);
    }, { priority: "high" });
  }
  /**
   * This method allows assigning additional metadata to the model attributes. For example,
   * {@link module:engine/model/schema~AttributeProperties `AttributeProperties#isFormatting` property} is
   * used to mark formatting attributes (like `bold` or `italic`).
   *
   * ```ts
   * // Mark bold as a formatting attribute.
   * schema.setAttributeProperties( 'bold', {
   * 	isFormatting: true
   * } );
   *
   * // Override code not to be considered a formatting markup.
   * schema.setAttributeProperties( 'code', {
   * 	isFormatting: false
   * } );
   * ```
   *
   * Properties are not limited to members defined in the
   * {@link module:engine/model/schema~AttributeProperties `AttributeProperties` type} and you can also use custom properties:
   *
   * ```ts
   * schema.setAttributeProperties( 'blockQuote', {
   * 	customProperty: 'value'
   * } );
   * ```
   *
   * Subsequent calls with the same attribute will extend its custom properties:
   *
   * ```ts
   * schema.setAttributeProperties( 'blockQuote', {
   * 	one: 1
   * } );
   *
   * schema.setAttributeProperties( 'blockQuote', {
   * 	two: 2
   * } );
   *
   * console.log( schema.getAttributeProperties( 'blockQuote' ) );
   * // Logs: { one: 1, two: 2 }
   * ```
   *
   * @param attributeName A name of the attribute to receive the properties.
   * @param properties A dictionary of properties.
   */
  setAttributeProperties(e, t) {
    this._attributeProperties[e] = Object.assign(this.getAttributeProperties(e), t);
  }
  /**
   * Returns properties associated with a given model attribute. See {@link #setAttributeProperties `setAttributeProperties()`}.
   *
   * @param attributeName A name of the attribute.
   */
  getAttributeProperties(e) {
    return this._attributeProperties[e] || {};
  }
  /**
   * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire
   * selection/range/position or the root otherwise.
   *
   * @param selectionOrRangeOrPosition The selection/range/position to check.
   * @returns The lowest limit element containing the entire `selectionOrRangeOrPosition`.
   */
  getLimitElement(e) {
    let t;
    for (e instanceof w ? t = e.parent : t = (e instanceof g ? [e] : Array.from(e.getRanges())).reduce((s, r) => {
      const o = r.getCommonAncestor();
      return s ? s.getCommonAncestor(o, { includeSelf: !0 }) : o;
    }, null); !this.isLimit(t) && t.parent; )
      t = t.parent;
    return t;
  }
  /**
   * Checks whether the attribute is allowed in selection:
   *
   * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,
   * * if the selection is collapsed, then checks if on the selection position there's a text with the
   * specified attribute allowed.
   *
   * @param selection Selection which will be checked.
   * @param attribute The name of the attribute to check.
   */
  checkAttributeInSelection(e, t) {
    if (e.isCollapsed) {
      const s = [
        ...e.getFirstPosition().getAncestors(),
        new j("", e.getAttributes())
      ];
      return this.checkAttribute(s, t);
    } else {
      const i = e.getRanges();
      for (const s of i)
        for (const r of s)
          if (this.checkAttribute(r.item, t))
            return !0;
    }
    return !1;
  }
  /**
   * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).
   *
   * @param ranges Ranges to be validated.
   * @param attribute The name of the attribute to check.
   * @returns Ranges in which the attribute is allowed.
   */
  *getValidRanges(e, t) {
    e = s2(e);
    for (const i of e)
      yield* this._getValidRangesForRange(i, t);
  }
  /**
   * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is
   * nearest to that `position` and is a correct range for selection.
   *
   * The correct selection range might be collapsed when it is located in a position where the text node can be placed.
   * Non-collapsed range is returned when selection can be placed around element marked as an "object" in
   * the {@link module:engine/model/schema~Schema schema}.
   *
   * Direction of searching for the nearest correct selection range can be specified as:
   *
   * * `both` - searching will be performed in both ways,
   * * `forward` - searching will be performed only forward,
   * * `backward` - searching will be performed only backward.
   *
   * When valid selection range cannot be found, `null` is returned.
   *
   * @param position Reference position where new selection range should be looked for.
   * @param direction Search direction.
   * @returns Nearest selection range or `null` if one cannot be found.
   */
  getNearestSelectionRange(e, t = "both") {
    if (this.checkChild(e, "$text"))
      return new g(e);
    let i, s;
    const r = e.getAncestors().reverse().find((o) => this.isLimit(o)) || e.root;
    (t == "both" || t == "backward") && (i = new Le({
      boundaries: g._createIn(r),
      startPosition: e,
      direction: "backward"
    })), (t == "both" || t == "forward") && (s = new Le({
      boundaries: g._createIn(r),
      startPosition: e
    }));
    for (const o of n2(i, s)) {
      const a = o.walker == i ? "elementEnd" : "elementStart", l = o.value;
      if (l.type == a && this.isObject(l.item))
        return g._createOn(l.item);
      if (this.checkChild(l.nextPosition, "$text"))
        return new g(l.nextPosition);
    }
    return null;
  }
  /**
   * Tries to find position ancestors that allow to insert a given node.
   * It starts searching from the given position and goes node by node to the top of the model tree
   * as long as a {@link module:engine/model/schema~Schema#isLimit limit element}, an
   * {@link module:engine/model/schema~Schema#isObject object element} or a topmost ancestor is not reached.
   *
   * @param position The position that the search will start from.
   * @param node The node for which an allowed parent should be found or its name.
   * @returns Allowed parent or null if nothing was found.
   */
  findAllowedParent(e, t) {
    let i = e.parent;
    for (; i; ) {
      if (this.checkChild(i, t))
        return i;
      if (this.isLimit(i))
        return null;
      i = i.parent;
    }
    return null;
  }
  /**
   * Sets attributes allowed by the schema on a given node.
   *
   * @param node A node to set attributes on.
   * @param attributes Attributes keys and values.
   * @param writer An instance of the model writer.
   */
  setAllowedAttributes(e, t, i) {
    const s = i.model;
    for (const [r, o] of Object.entries(t))
      s.schema.checkAttribute(e, r) && i.setAttribute(r, o, e);
  }
  /**
   * Removes attributes disallowed by the schema.
   *
   * @param nodes Nodes that will be filtered.
   */
  removeDisallowedAttributes(e, t) {
    for (const i of e)
      if (i.is("$text"))
        Ha(this, i, t);
      else {
        const r = g._createIn(i).getPositions();
        for (const o of r) {
          const a = o.nodeBefore || o.parent;
          Ha(this, a, t);
        }
      }
  }
  /**
   * Gets attributes of a node that have a given property.
   *
   * @param node Node to get attributes from.
   * @param propertyName Name of the property that attribute must have to return it.
   * @param propertyValue Desired value of the property that we want to check.
   * When `undefined` attributes will be returned if they have set a given property no matter what the value is. If specified it will
   * return attributes which given property's value is equal to this parameter.
   * @returns Object with attributes' names as key and attributes' values as value.
   */
  getAttributesWithProperty(e, t, i) {
    const s = {};
    for (const [r, o] of e.getAttributes()) {
      const a = this.getAttributeProperties(r);
      a[t] !== void 0 && (i === void 0 || i === a[t]) && (s[r] = o);
    }
    return s;
  }
  /**
   * Creates an instance of the schema context.
   */
  createContext(e) {
    return new xt(e);
  }
  _clearCache() {
    this._compiledDefinitions = null;
  }
  _compile() {
    const e = {}, t = this._sourceDefinitions, i = Object.keys(t);
    for (const s of i)
      e[s] = Wy(t[s], s);
    for (const s of i)
      Uy(e, s);
    for (const s of i)
      jy(e, s);
    for (const s of i)
      qy(e, s);
    for (const s of i)
      Gy(e, s), Ky(e, s);
    for (const s of i)
      Jy(e, s), Yy(e, s), Zy(e, s);
    this._compiledDefinitions = e;
  }
  _checkContextMatch(e, t, i = t.length - 1) {
    const s = t.getItem(i);
    if (e.allowIn.includes(s.name)) {
      if (i == 0)
        return !0;
      {
        const r = this.getDefinition(s);
        return this._checkContextMatch(r, t, i - 1);
      }
    } else
      return !1;
  }
  /**
   * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges
   * inside the given range on which the attribute can be applied.
   *
   * This is a helper function for {@link ~Schema#getValidRanges}.
   *
   * @param range The range to process.
   * @param attribute The name of the attribute to check.
   * @returns Ranges in which the attribute is allowed.
   */
  *_getValidRangesForRange(e, t) {
    let i = e.start, s = e.start;
    for (const r of e.getItems({ shallow: !0 }))
      r.is("element") && (yield* this._getValidRangesForRange(g._createIn(r), t)), this.checkAttribute(r, t) || (i.isEqual(s) || (yield new g(i, s)), i = w._createAfter(r)), s = w._createAfter(r);
    i.isEqual(s) || (yield new g(i, s));
  }
}
class xt {
  /**
   * Creates an instance of the context.
   */
  constructor(e) {
    if (e instanceof xt)
      return e;
    let t;
    typeof e == "string" ? t = [e] : Array.isArray(e) ? t = e : t = e.getAncestors({ includeSelf: !0 }), this._items = t.map(i2);
  }
  /**
   * The number of items.
   */
  get length() {
    return this._items.length;
  }
  /**
   * The last item (the lowest node).
   */
  get last() {
    return this._items[this._items.length - 1];
  }
  /**
   * Iterable interface.
   *
   * Iterates over all context items.
   */
  [Symbol.iterator]() {
    return this._items[Symbol.iterator]();
  }
  /**
   * Returns a new schema context instance with an additional item.
   *
   * Item can be added as:
   *
   * ```ts
   * const context = new SchemaContext( [ '$root' ] );
   *
   * // An element.
   * const fooElement = writer.createElement( 'fooElement' );
   * const newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]
   *
   * // A text node.
   * const text = writer.createText( 'foobar' );
   * const newContext = context.push( text ); // [ '$root', '$text' ]
   *
   * // A string (element name).
   * const newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]
   * ```
   *
   * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item
   * (without ancestors).
   *
   * @param item An item that will be added to the current context.
   * @returns A new schema context instance with an additional item.
   */
  push(e) {
    const t = new xt([e]);
    return t._items = [...this._items, ...t._items], t;
  }
  /**
   * Gets an item on the given index.
   */
  getItem(e) {
    return this._items[e];
  }
  /**
   * Returns the names of items.
   */
  *getNames() {
    yield* this._items.map((e) => e.name);
  }
  /**
   * Checks whether the context ends with the given nodes.
   *
   * ```ts
   * const ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );
   *
   * ctx.endsWith( '$text' ); // -> true
   * ctx.endsWith( 'paragraph $text' ); // -> true
   * ctx.endsWith( '$root' ); // -> false
   * ctx.endsWith( 'paragraph' ); // -> false
   * ```
   */
  endsWith(e) {
    return Array.from(this.getNames()).join(" ").endsWith(e);
  }
  /**
   * Checks whether the context starts with the given nodes.
   *
   * ```ts
   * const ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );
   *
   * ctx.endsWith( '$root' ); // -> true
   * ctx.endsWith( '$root paragraph' ); // -> true
   * ctx.endsWith( '$text' ); // -> false
   * ctx.endsWith( 'paragraph' ); // -> false
   * ```
   */
  startsWith(e) {
    return Array.from(this.getNames()).join(" ").startsWith(e);
  }
}
function Wy(n, e) {
  const t = {
    name: e,
    allowIn: [],
    allowContentOf: [],
    allowWhere: [],
    allowAttributes: [],
    allowAttributesOf: [],
    allowChildren: [],
    inheritTypesFrom: []
  };
  return Xy(n, t), yt(n, t, "allowIn"), yt(n, t, "allowContentOf"), yt(n, t, "allowWhere"), yt(n, t, "allowAttributes"), yt(n, t, "allowAttributesOf"), yt(n, t, "allowChildren"), yt(n, t, "inheritTypesFrom"), Qy(n, t), t;
}
function Uy(n, e) {
  const t = n[e];
  for (const i of t.allowChildren) {
    const s = n[i];
    s && s.allowIn.push(e);
  }
  t.allowChildren.length = 0;
}
function jy(n, e) {
  for (const t of n[e].allowContentOf)
    n[t] && e2(n, t).forEach((s) => {
      s.allowIn.push(e);
    });
  delete n[e].allowContentOf;
}
function qy(n, e) {
  for (const t of n[e].allowWhere) {
    const i = n[t];
    if (i) {
      const s = i.allowIn;
      n[e].allowIn.push(...s);
    }
  }
  delete n[e].allowWhere;
}
function Gy(n, e) {
  for (const t of n[e].allowAttributesOf) {
    const i = n[t];
    if (i) {
      const s = i.allowAttributes;
      n[e].allowAttributes.push(...s);
    }
  }
  delete n[e].allowAttributesOf;
}
function Ky(n, e) {
  const t = n[e];
  for (const i of t.inheritTypesFrom) {
    const s = n[i];
    if (s) {
      const r = Object.keys(s).filter((o) => o.startsWith("is"));
      for (const o of r)
        o in t || (t[o] = s[o]);
    }
  }
  delete t.inheritTypesFrom;
}
function Jy(n, e) {
  const t = n[e], i = t.allowIn.filter((s) => n[s]);
  t.allowIn = Array.from(new Set(i));
}
function Yy(n, e) {
  const t = n[e];
  for (const i of t.allowIn)
    n[i].allowChildren.push(e);
}
function Zy(n, e) {
  const t = n[e];
  t.allowAttributes = Array.from(new Set(t.allowAttributes));
}
function Xy(n, e) {
  for (const t of n) {
    const i = Object.keys(t).filter((s) => s.startsWith("is"));
    for (const s of i)
      e[s] = !!t[s];
  }
}
function yt(n, e, t) {
  for (const i of n) {
    const s = i[t];
    typeof s == "string" ? e[t].push(s) : Array.isArray(s) && e[t].push(...s);
  }
}
function Qy(n, e) {
  for (const t of n) {
    const i = t.inheritAllFrom;
    i && (e.allowContentOf.push(i), e.allowWhere.push(i), e.allowAttributesOf.push(i), e.inheritTypesFrom.push(i));
  }
}
function e2(n, e) {
  const t = n[e];
  return t2(n).filter((i) => i.allowIn.includes(t.name));
}
function t2(n) {
  return Object.keys(n).map((e) => n[e]);
}
function i2(n) {
  return typeof n == "string" || n.is("documentFragment") ? {
    name: typeof n == "string" ? n : "$documentFragment",
    *getAttributeKeys() {
    },
    getAttribute() {
    }
  } : {
    // '$text' means text nodes and text proxies.
    name: n.is("element") ? n.name : "$text",
    *getAttributeKeys() {
      yield* n.getAttributeKeys();
    },
    getAttribute(e) {
      return n.getAttribute(e);
    }
  };
}
function* n2(n, e) {
  let t = !1;
  for (; !t; ) {
    if (t = !0, n) {
      const i = n.next();
      i.done || (t = !1, yield {
        walker: n,
        value: i.value
      });
    }
    if (e) {
      const i = e.next();
      i.done || (t = !1, yield {
        walker: e,
        value: i.value
      });
    }
  }
}
function* s2(n) {
  for (const e of n)
    yield* e.getMinimalFlatRanges();
}
function Ha(n, e, t) {
  for (const i of e.getAttributeKeys())
    n.checkAttribute(e, i) || t.removeAttribute(i, e);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class r2 extends L() {
  /**
   * Creates an upcast dispatcher that operates using the passed API.
   *
   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi
   * @param conversionApi Additional properties for an interface that will be passed to events fired
   * by the upcast dispatcher.
   */
  constructor(e) {
    super(), this._splitParts = /* @__PURE__ */ new Map(), this._cursorParents = /* @__PURE__ */ new Map(), this._modelCursor = null, this._emptyElementsToKeep = /* @__PURE__ */ new Set(), this.conversionApi = {
      ...e,
      consumable: null,
      writer: null,
      store: null,
      convertItem: (t, i) => this._convertItem(t, i),
      convertChildren: (t, i) => this._convertChildren(t, i),
      safeInsert: (t, i) => this._safeInsert(t, i),
      updateConversionResult: (t, i) => this._updateConversionResult(t, i),
      // Advanced API - use only if custom position handling is needed.
      splitToAllowedParent: (t, i) => this._splitToAllowedParent(t, i),
      getSplitParts: (t) => this._getSplitParts(t),
      keepEmptyElement: (t) => this._keepEmptyElement(t)
    };
  }
  /**
   * Starts the conversion process. The entry point for the conversion.
   *
   * @fires element
   * @fires text
   * @fires documentFragment
   * @param viewElement The part of the view to be converted.
   * @param writer An instance of the model writer.
   * @param context Elements will be converted according to this context.
   * @returns Model data that is the result of the conversion process
   * wrapped in `DocumentFragment`. Converted marker elements will be set as the document fragment's
   * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.
   */
  convert(e, t, i = ["$root"]) {
    this.fire("viewCleanup", e), this._modelCursor = a2(i, t), this.conversionApi.writer = t, this.conversionApi.consumable = xi.createFrom(e), this.conversionApi.store = {};
    const { modelRange: s } = this._convertItem(e, this._modelCursor), r = t.createDocumentFragment();
    if (s) {
      this._removeEmptyElements();
      for (const o of Array.from(this._modelCursor.parent.getChildren()))
        t.append(o, r);
      r.markers = o2(r, t);
    }
    return this._modelCursor = null, this._splitParts.clear(), this._cursorParents.clear(), this._emptyElementsToKeep.clear(), this.conversionApi.writer = null, this.conversionApi.store = null, r;
  }
  /**
   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertItem
   */
  _convertItem(e, t) {
    const i = { viewItem: e, modelCursor: t, modelRange: null };
    if (e.is("element") ? this.fire(`element:${e.name}`, i, this.conversionApi) : e.is("$text") ? this.fire("text", i, this.conversionApi) : this.fire("documentFragment", i, this.conversionApi), i.modelRange && !(i.modelRange instanceof g))
      throw new f("view-conversion-dispatcher-incorrect-result", this);
    return { modelRange: i.modelRange, modelCursor: i.modelCursor };
  }
  /**
   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertChildren
   */
  _convertChildren(e, t) {
    let i = t.is("position") ? t : w._createAt(t, 0);
    const s = new g(i);
    for (const r of Array.from(e.getChildren())) {
      const o = this._convertItem(r, i);
      o.modelRange instanceof g && (s.end = o.modelRange.end, i = o.modelCursor);
    }
    return { modelRange: s, modelCursor: i };
  }
  /**
   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#safeInsert
   */
  _safeInsert(e, t) {
    const i = this._splitToAllowedParent(e, t);
    return i ? (this.conversionApi.writer.insert(e, i.position), !0) : !1;
  }
  /**
   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#updateConversionResult
   */
  _updateConversionResult(e, t) {
    const i = this._getSplitParts(e), s = this.conversionApi.writer;
    t.modelRange || (t.modelRange = s.createRange(s.createPositionBefore(e), s.createPositionAfter(i[i.length - 1])));
    const r = this._cursorParents.get(e);
    r ? t.modelCursor = s.createPositionAt(r, 0) : t.modelCursor = t.modelRange.end;
  }
  /**
   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#splitToAllowedParent
   */
  _splitToAllowedParent(e, t) {
    const { schema: i, writer: s } = this.conversionApi;
    let r = i.findAllowedParent(t, e);
    if (r) {
      if (r === t.parent)
        return { position: t };
      this._modelCursor.parent.getAncestors().includes(r) && (r = null);
    }
    if (!r)
      return Ph(t, e, i) ? {
        position: xh(t, s)
      } : null;
    const o = this.conversionApi.writer.split(t, r), a = [];
    for (const c of o.range.getWalker())
      if (c.type == "elementEnd")
        a.push(c.item);
      else {
        const u = a.pop(), h = c.item;
        this._registerSplitPair(u, h);
      }
    const l = o.range.end.parent;
    return this._cursorParents.set(e, l), {
      position: o.position,
      cursorParent: l
    };
  }
  /**
   * Registers that a `splitPart` element is a split part of the `originalPart` element.
   *
   * The data set by this method is used by {@link #_getSplitParts} and {@link #_removeEmptyElements}.
   */
  _registerSplitPair(e, t) {
    this._splitParts.has(e) || this._splitParts.set(e, [e]);
    const i = this._splitParts.get(e);
    this._splitParts.set(t, i), i.push(t);
  }
  /**
   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#getSplitParts
   */
  _getSplitParts(e) {
    let t;
    return this._splitParts.has(e) ? t = this._splitParts.get(e) : t = [e], t;
  }
  /**
   * Mark an element that were created during the splitting to not get removed on conversion end even if it is empty.
   */
  _keepEmptyElement(e) {
    this._emptyElementsToKeep.add(e);
  }
  /**
   * Checks if there are any empty elements created while splitting and removes them.
   *
   * This method works recursively to re-check empty elements again after at least one element was removed in the initial call,
   * as some elements might have become empty after other empty elements were removed from them.
   */
  _removeEmptyElements() {
    let e = !1;
    for (const t of this._splitParts.keys())
      t.isEmpty && !this._emptyElementsToKeep.has(t) && (this.conversionApi.writer.remove(t), this._splitParts.delete(t), e = !0);
    e && this._removeEmptyElements();
  }
}
function o2(n, e) {
  const t = /* @__PURE__ */ new Set(), i = /* @__PURE__ */ new Map(), s = g._createIn(n).getItems();
  for (const r of s)
    r.is("element", "$marker") && t.add(r);
  for (const r of t) {
    const o = r.getAttribute("data-name"), a = e.createPositionBefore(r);
    i.has(o) ? i.get(o).end = a.clone() : i.set(o, new g(a.clone())), e.remove(r);
  }
  return i;
}
function a2(n, e) {
  let t;
  for (const i of new xt(n)) {
    const s = {};
    for (const o of i.getAttributeKeys())
      s[o] = i.getAttribute(o);
    const r = e.createElement(i.name, s);
    t && e.insert(r, t), t = w._createAt(r, 0);
  }
  return t;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class l2 {
  /**
   * Returns an HTML string created from the document fragment.
   */
  getHtml(e) {
    const i = document.implementation.createHTMLDocument("").createElement("div");
    return i.appendChild(e), i.innerHTML;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class c2 {
  /**
   * Creates a new instance of the HTML data processor class.
   *
   * @param document The view document instance.
   */
  constructor(e) {
    this.skipComments = !0, this.domParser = new DOMParser(), this.domConverter = new lh(e, { renderingMode: "data" }), this.htmlWriter = new l2();
  }
  /**
   * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}
   * to data format &mdash; in this case to an HTML string.
   *
   * @returns HTML string.
   */
  toData(e) {
    const t = this.domConverter.viewToDom(e);
    return this.htmlWriter.getHtml(t);
  }
  /**
   * Converts the provided HTML string to a view tree.
   *
   * @param data An HTML string.
   * @returns A converted view element.
   */
  toView(e) {
    const t = this._toDom(e);
    return this.domConverter.domToView(t, { skipComments: this.skipComments });
  }
  /**
   * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data
   * and not processed during the conversion from the DOM to the view elements.
   *
   * The raw data can be later accessed by a
   * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `"$rawContent"`.
   *
   * @param pattern Pattern matching all view elements whose content should be treated as raw data.
   */
  registerRawContentMatcher(e) {
    this.domConverter.registerRawContentMatcher(e);
  }
  /**
   * If the processor is set to use marked fillers, it will insert `&nbsp;` fillers wrapped in `<span>` elements
   * (`<span data-cke-filler="true">&nbsp;</span>`) instead of regular `&nbsp;` characters.
   *
   * This mode allows for a more precise handling of the block fillers (so they do not leak into the editor content) but
   * bloats the editor data with additional markup.
   *
   * This mode may be required by some features and will be turned on by them automatically.
   *
   * @param type Whether to use the default or the marked `&nbsp;` block fillers.
   */
  useFillerType(e) {
    this.domConverter.blockFillerMode = e == "marked" ? "markedNbsp" : "nbsp";
  }
  /**
   * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from
   * the provided data.
   */
  _toDom(e) {
    e.match(/<(?:html|body|head|meta)(?:\s[^>]*)?>/i) || (e = `<body>${e}</body>`);
    const t = this.domParser.parseFromString(e, "text/html"), i = t.createDocumentFragment(), s = t.body.childNodes;
    for (; s.length > 0; )
      i.appendChild(s[0]);
    return i;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class u2 extends L() {
  /**
   * Creates a data controller instance.
   *
   * @param model Data model.
   * @param stylesProcessor The styles processor instance.
   */
  constructor(e, t) {
    super(), this.model = e, this.mapper = new mh(), this.downcastDispatcher = new gh({
      mapper: this.mapper,
      schema: e.schema
    }), this.downcastDispatcher.on("insert:$text", bh(), { priority: "lowest" }), this.downcastDispatcher.on("insert", _h(), { priority: "lowest" }), this.upcastDispatcher = new r2({
      schema: e.schema
    }), this.viewDocument = new th(t), this.stylesProcessor = t, this.htmlProcessor = new c2(this.viewDocument), this.processor = this.htmlProcessor, this._viewWriter = new nh(this.viewDocument), this.upcastDispatcher.on("text", yy(), { priority: "lowest" }), this.upcastDispatcher.on("element", Na(), { priority: "lowest" }), this.upcastDispatcher.on("documentFragment", Na(), { priority: "lowest" }), H().prototype.decorate.call(this, "init"), H().prototype.decorate.call(this, "set"), H().prototype.decorate.call(this, "get"), H().prototype.decorate.call(this, "toView"), H().prototype.decorate.call(this, "toModel"), this.on("init", () => {
      this.fire("ready");
    }, { priority: "lowest" }), this.on("ready", () => {
      this.model.enqueueChange({ isUndoable: !1 }, Th);
    }, { priority: "lowest" });
  }
  /**
   * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and
   * formatted by the {@link #processor data processor}.
   *
   * A warning is logged when you try to retrieve data for a detached root, as most probably this is a mistake. A detached root should
   * be treated like it is removed, and you should not save its data. Note, that the detached root data is always an empty string.
   *
   * @fires get
   * @param options Additional configuration for the retrieved data. `DataController` provides two optional
   * properties: `rootName` and `trim`. Other properties of this object are specified by various editor features.
   * @param options.rootName Root name. Default 'main'.
   * @param options.trim Whether returned data should be trimmed. This option is set to `empty` by default,
   * which means whenever editor content is considered empty, an empty string will be returned. To turn off trimming completely
   * use `'none'`. In such cases the exact content will be returned (for example a `<p>&nbsp;</p>` for an empty editor).
   * @returns Output data.
   */
  get(e = {}) {
    const { rootName: t = "main", trim: i = "empty" } = e;
    if (!this._checkIfRootsExists([t]))
      throw new f("datacontroller-get-non-existent-root", this);
    const s = this.model.document.getRoot(t);
    return s.isAttached() || G("datacontroller-get-detached-root", this), i === "empty" && !this.model.hasContent(s, { ignoreWhitespaces: !0 }) ? "" : this.stringify(s, e);
  }
  /**
   * Returns the content of the given {@link module:engine/model/element~Element model's element} or
   * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters
   * attached to the {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.
   *
   * @param modelElementOrFragment The element whose content will be stringified.
   * @param options Additional configuration passed to the conversion process.
   * @returns Output data.
   */
  stringify(e, t = {}) {
    const i = this.toView(e, t);
    return this.processor.toData(i);
  }
  /**
   * Returns the content of the given {@link module:engine/model/element~Element model element} or
   * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast
   * converters attached to {@link #downcastDispatcher} into a
   * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.
   *
   * @fires toView
   * @param modelElementOrFragment Element or document fragment whose content will be converted.
   * @param options Additional configuration that will be available through the
   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi#options} during the conversion process.
   * @returns Output view DocumentFragment.
   */
  toView(e, t = {}) {
    const i = this.viewDocument, s = this._viewWriter;
    this.mapper.clearBindings();
    const r = g._createIn(e), o = new Pt(i);
    this.mapper.bindElements(e, o);
    const a = e.is("documentFragment") ? e.markers : h2(e);
    return this.downcastDispatcher.convert(r, a, s, t), o;
  }
  /**
   * Sets the initial input data parsed by the {@link #processor data processor} and
   * converted by the {@link #upcastDispatcher view-to-model converters}.
   * Initial data can be only set to a document whose {@link module:engine/model/document~Document#version} is equal 0.
   *
   * **Note** This method is {@link module:utils/observablemixin~Observable#decorate decorated} which is
   * used by e.g. collaborative editing plugin that syncs remote data on init.
   *
   * When data is passed as a string, it is initialized on the default `main` root:
   *
   * ```ts
   * dataController.init( '<p>Foo</p>' ); // Initializes data on the `main` root only, as no other is specified.
   * ```
   *
   * To initialize data on a different root or multiple roots at once, an object containing `rootName` - `data` pairs should be passed:
   *
   * ```ts
   * dataController.init( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Initializes data on both the `main` and `title` roots.
   * ```
   *
   * @fires init
   * @param data Input data as a string or an object containing the `rootName` - `data`
   * pairs to initialize data on multiple roots at once.
   * @returns Promise that is resolved after the data is set on the editor.
   */
  init(e) {
    if (this.model.document.version)
      throw new f("datacontroller-init-document-not-empty", this);
    let t = {};
    if (typeof e == "string" ? t.main = e : t = e, !this._checkIfRootsExists(Object.keys(t)))
      throw new f("datacontroller-init-non-existent-root", this);
    return this.model.enqueueChange({ isUndoable: !1 }, (i) => {
      for (const s of Object.keys(t)) {
        const r = this.model.document.getRoot(s);
        i.insert(this.parse(t[s], r), r, 0);
      }
    }), Promise.resolve();
  }
  /**
   * Sets the input data parsed by the {@link #processor data processor} and
   * converted by the {@link #upcastDispatcher view-to-model converters}.
   * This method can be used any time to replace existing editor data with the new one without clearing the
   * {@link module:engine/model/document~Document#history document history}.
   *
   * This method also creates a batch with all the changes applied. If all you need is to parse data, use
   * the {@link #parse} method.
   *
   * When data is passed as a string it is set on the default `main` root:
   *
   * ```ts
   * dataController.set( '<p>Foo</p>' ); // Sets data on the `main` root, as no other is specified.
   * ```
   *
   * To set data on a different root or multiple roots at once, an object containing `rootName` - `data` pairs should be passed:
   *
   * ```ts
   * dataController.set( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Sets data on the `main` and `title` roots as specified.
   * ```
   *
   * To set the data with a preserved undo stack and add the change to the undo stack, set `{ isUndoable: true }` as a `batchType` option.
   *
   * ```ts
   * dataController.set( '<p>Foo</p>', { batchType: { isUndoable: true } } );
   * ```
   *
   * @fires set
   * @param data Input data as a string or an object containing the `rootName` - `data`
   * pairs to set data on multiple roots at once.
   * @param options Options for setting data.
   * @param options.batchType The batch type that will be used to create a batch for the changes applied by this method.
   * By default, the batch will be set as {@link module:engine/model/batch~Batch#isUndoable not undoable} and the undo stack will be
   * cleared after the new data is applied (all undo steps will be removed). If the batch type `isUndoable` flag is be set to `true`,
   * the undo stack will be preserved instead and not cleared when new data is applied.
   */
  set(e, t = {}) {
    let i = {};
    if (typeof e == "string" ? i.main = e : i = e, !this._checkIfRootsExists(Object.keys(i)))
      throw new f("datacontroller-set-non-existent-root", this);
    this.model.enqueueChange(t.batchType || {}, (s) => {
      s.setSelection(null), s.removeSelectionAttribute(this.model.document.selection.getAttributeKeys());
      for (const r of Object.keys(i)) {
        const o = this.model.document.getRoot(r);
        s.remove(s.createRangeIn(o)), s.insert(this.parse(i[r], o), o, 0);
      }
    });
  }
  /**
   * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters
   * attached to the {@link #upcastDispatcher}.
   *
   * @see #set
   * @param data Data to parse.
   * @param context Base context in which the view will be converted to the model.
   * See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.
   * @returns Parsed data.
   */
  parse(e, t = "$root") {
    const i = this.processor.toView(e);
    return this.toModel(i, t);
  }
  /**
   * Returns the result of the given {@link module:engine/view/element~Element view element} or
   * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the
   * {@link #upcastDispatcher view-to-model converters}, wrapped by {@link module:engine/model/documentfragment~DocumentFragment}.
   *
   * When marker elements were converted during the conversion process, it will be set as a document fragment's
   * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.
   *
   * @fires toModel
   * @param viewElementOrFragment The element or document fragment whose content will be converted.
   * @param context Base context in which the view will be converted to the model.
   * See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.
   * @returns Output document fragment.
   */
  toModel(e, t = "$root") {
    return this.model.change((i) => this.upcastDispatcher.convert(e, i, t));
  }
  /**
   * Adds the style processor normalization rules.
   *
   * You can implement your own rules as well as use one of the available processor rules:
   *
   * * background: {@link module:engine/view/styles/background~addBackgroundRules}
   * * border: {@link module:engine/view/styles/border~addBorderRules}
   * * margin: {@link module:engine/view/styles/margin~addMarginRules}
   * * padding: {@link module:engine/view/styles/padding~addPaddingRules}
   */
  addStyleProcessorRules(e) {
    e(this.stylesProcessor);
  }
  /**
   * Registers a {@link module:engine/view/matcher~MatcherPattern} on an {@link #htmlProcessor htmlProcessor}
   * and a {@link #processor processor} for view elements whose content should be treated as raw data
   * and not processed during the conversion from DOM to view elements.
   *
   * The raw data can be later accessed by the {@link module:engine/view/element~Element#getCustomProperty view element custom property}
   * `"$rawContent"`.
   *
   * @param pattern Pattern matching all view elements whose content should be treated as a raw data.
   */
  registerRawContentMatcher(e) {
    this.processor && this.processor !== this.htmlProcessor && this.processor.registerRawContentMatcher(e), this.htmlProcessor.registerRawContentMatcher(e);
  }
  /**
   * Removes all event listeners set by the DataController.
   */
  destroy() {
    this.stopListening();
  }
  /**
   * Checks whether all provided root names are actually existing editor roots.
   *
   * @param rootNames Root names to check.
   * @returns Whether all provided root names are existing editor roots.
   */
  _checkIfRootsExists(e) {
    for (const t of e)
      if (!this.model.document.getRoot(t))
        return !1;
    return !0;
  }
}
function h2(n) {
  const e = [], t = n.root.document;
  if (!t)
    return /* @__PURE__ */ new Map();
  const i = g._createIn(n);
  for (const s of t.model.markers) {
    const r = s.getRange(), o = r.isCollapsed, a = r.start.isEqual(i.start) || r.end.isEqual(i.end);
    if (o && a)
      e.push([s.name, r]);
    else {
      const l = i.getIntersection(r);
      l && e.push([s.name, l]);
    }
  }
  return e.sort(([s, r], [o, a]) => {
    if (r.end.compareWith(a.start) !== "after")
      return 1;
    if (r.start.compareWith(a.end) !== "before")
      return -1;
    switch (r.start.compareWith(a.start)) {
      case "before":
        return 1;
      case "after":
        return -1;
      default:
        switch (r.end.compareWith(a.end)) {
          case "before":
            return 1;
          case "after":
            return -1;
          default:
            return o.localeCompare(s);
        }
    }
  }), new Map(e);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class d2 {
  /**
   * Creates a new conversion instance.
   */
  constructor(e, t) {
    this._helpers = /* @__PURE__ */ new Map(), this._downcast = Q(e), this._createConversionHelpers({ name: "downcast", dispatchers: this._downcast, isDowncast: !0 }), this._upcast = Q(t), this._createConversionHelpers({ name: "upcast", dispatchers: this._upcast, isDowncast: !1 });
  }
  /**
   * Define an alias for registered dispatcher.
   *
   * ```ts
   * const conversion = new Conversion(
   * 	[ dataDowncastDispatcher, editingDowncastDispatcher ],
   * 	upcastDispatcher
   * );
   *
   * conversion.addAlias( 'dataDowncast', dataDowncastDispatcher );
   * ```
   *
   * @param alias An alias of a dispatcher.
   * @param dispatcher Dispatcher which should have an alias.
   */
  addAlias(e, t) {
    const i = this._downcast.includes(t);
    if (!this._upcast.includes(t) && !i)
      throw new f("conversion-add-alias-dispatcher-not-registered", this);
    this._createConversionHelpers({ name: e, dispatchers: [t], isDowncast: i });
  }
  /**
   * Provides a chainable API to assign converters to a conversion dispatchers group.
   *
   * If the given group name has not been registered, the
   * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.
   *
   * You can use conversion helpers available directly in the `for()` chain or your custom ones via
   * the {@link module:engine/conversion/conversionhelpers~ConversionHelpers#add `add()`} method.
   *
   * # Using built-in conversion helpers
   *
   * The `for()` chain comes with a set of conversion helpers which you can use like this:
   *
   * ```ts
   * editor.conversion.for( 'downcast' )
   * 	.elementToElement( config1 )        // Adds an element-to-element downcast converter.
   * 	.attributeToElement( config2 );     // Adds an attribute-to-element downcast converter.
   *
   * editor.conversion.for( 'upcast' )
   * 	.elementToAttribute( config3 );     // Adds an element-to-attribute upcast converter.
   * ```
   *
   * Refer to the documentation of built-in conversion helpers to learn about their configuration options.
   *
   * * downcast (model-to-view) conversion helpers:
   *
   *	* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`},
   *	* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement `attributeToElement()`},
   *	* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToAttribute `attributeToAttribute()`}.
   *	* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToElement `markerToElement()`}.
   *	* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToHighlight `markerToHighlight()`}.
   *
   * * upcast (view-to-model) conversion helpers:
   *
   *	* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToElement `elementToElement()`},
   *	* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute `elementToAttribute()`},
   *	* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute `attributeToAttribute()`}.
   *	* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToMarker `elementToMarker()`}.
   *
   * # Using custom conversion helpers
   *
   * If you need to implement an atypical converter, you can do so by calling:
   *
   * ```ts
   * editor.conversion.for( direction ).add( customHelper );
   * ```
   *
   * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that
   * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.
   *
   * Example:
   *
   * ```ts
   * editor.conversion.for( 'upcast' ).add( dispatcher => {
   * 	dispatcher.on( 'element:a',  ( evt, data, conversionApi ) => {
   * 		// Do something with a view <a> element.
   * 	} );
   * } );
   * ```
   *
   * Refer to the documentation of {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}
   * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} to learn how to write
   * custom converters.
   *
   * @param groupName The name of dispatchers group to add the converters to.
   */
  for(e) {
    if (!this._helpers.has(e))
      throw new f("conversion-for-unknown-group", this);
    return this._helpers.get(e);
  }
  /**
   * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).
   * For example, the model `<paragraph>Foo</paragraph>` is turned into `<p>Foo</p>` in the view.
   *
   * ```ts
   * // A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).
   * editor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );
   *
   * // Override other converters by specifying a converter definition with a higher priority.
   * editor.conversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );
   *
   * // View specified as an object instead of a string.
   * editor.conversion.elementToElement( {
   * 	model: 'fancyParagraph',
   * 	view: {
   * 		name: 'p',
   * 		classes: 'fancy'
   * 	}
   * } );
   *
   * // Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.
   * editor.conversion.elementToElement( {
   * 	model: 'paragraph',
   * 	view: 'p',
   * 	upcastAlso: [
   * 		'div',
   * 		{
   * 			// Any element with the `display: block` style.
   * 			styles: {
   * 				display: 'block'
   * 			}
   * 		}
   * 	]
   * } );
   *
   * // `upcastAlso` set as callback enables a conversion of a wide range of different view elements.
   * editor.conversion.elementToElement( {
   * 	model: 'heading',
   * 	view: 'h2',
   * 	// Convert "heading-like" paragraphs to headings.
   * 	upcastAlso: viewElement => {
   * 		const fontSize = viewElement.getStyle( 'font-size' );
   *
   * 		if ( !fontSize ) {
   * 			return null;
   * 		}
   *
   * 		const match = fontSize.match( /(\d+)\s*px/ );
   *
   * 		if ( !match ) {
   * 			return null;
   * 		}
   *
   * 		const size = Number( match[ 1 ] );
   *
   * 		if ( size > 26 ) {
   * 			// Returned value can be an object with the matched properties.
   * 			// These properties will be "consumed" during the conversion.
   * 			// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.
   *
   * 			return { name: true, styles: [ 'font-size' ] };
   * 		}
   *
   * 		return null;
   * 	}
   * } );
   * ```
   *
   * `definition.model` is a `String` with a model element name to convert from or to.
   *
   * @param definition The converter definition.
   */
  elementToElement(e) {
    this.for("downcast").elementToElement(e);
    for (const { model: t, view: i } of ms(e))
      this.for("upcast").elementToElement({
        model: t,
        view: i,
        converterPriority: e.converterPriority
      });
  }
  /**
   * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).
   * For example, a model text node with `"Foo"` as data and the `bold` attribute will be turned to `<strong>Foo</strong>` in the view.
   *
   * ```ts
   * // A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).
   * editor.conversion.attributeToElement( { model: 'bold', view: 'strong' } );
   *
   * // Override other converters by specifying a converter definition with a higher priority.
   * editor.conversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );
   *
   * // View specified as an object instead of a string.
   * editor.conversion.attributeToElement( {
   * 	model: 'bold',
   * 	view: {
   * 		name: 'span',
   * 		classes: 'bold'
   * 	}
   * } );
   *
   * // Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.
   * // The same attribute on different elements may then be handled by a different converter.
   * editor.conversion.attributeToElement( {
   * 	model: {
   * 		key: 'textDecoration',
   * 		values: [ 'underline', 'lineThrough' ],
   * 		name: '$text'
   * 	},
   * 	view: {
   * 		underline: {
   * 			name: 'span',
   * 			styles: {
   * 				'text-decoration': 'underline'
   * 			}
   * 		},
   * 		lineThrough: {
   * 			name: 'span',
   * 			styles: {
   * 				'text-decoration': 'line-through'
   * 			}
   * 		}
   * 	}
   * } );
   *
   * // Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.
   * editor.conversion.attributeToElement( {
   * 	model: 'bold',
   * 	view: 'strong',
   * 	upcastAlso: [
   * 		'b',
   * 		{
   * 			name: 'span',
   * 			classes: 'bold'
   * 		},
   * 		{
   * 			name: 'span',
   * 			styles: {
   * 				'font-weight': 'bold'
   * 			}
   * 		},
   * 		viewElement => {
   * 			const fontWeight = viewElement.getStyle( 'font-weight' );
   *
   * 			if ( viewElement.is( 'element', 'span' ) && fontWeight && /\d+/.test() && Number( fontWeight ) > 500 ) {
   * 				// Returned value can be an object with the matched properties.
   * 				// These properties will be "consumed" during the conversion.
   * 				// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.
   *
   * 				return {
   * 					name: true,
   * 					styles: [ 'font-weight' ]
   * 				};
   * 			}
   * 		}
   * 	]
   * } );
   *
   * // Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).
   * // `upcastAlso` set as callback enables a conversion of a wide range of different view elements.
   * editor.conversion.attributeToElement( {
   * 	model: {
   * 		key: 'fontSize',
   * 		values: [ 'big', 'small' ]
   * 	},
   * 	view: {
   * 		big: {
   * 			name: 'span',
   * 			styles: {
   * 				'font-size': '1.2em'
   * 			}
   * 		},
   * 		small: {
   * 			name: 'span',
   * 			styles: {
   * 				'font-size': '0.8em'
   * 			}
   * 		}
   * 	},
   * 	upcastAlso: {
   * 		big: viewElement => {
   * 			const fontSize = viewElement.getStyle( 'font-size' );
   *
   * 			if ( !fontSize ) {
   * 				return null;
   * 			}
   *
   * 			const match = fontSize.match( /(\d+)\s*px/ );
   *
   * 			if ( !match ) {
   * 				return null;
   * 			}
   *
   * 			const size = Number( match[ 1 ] );
   *
   * 			if ( viewElement.is( 'element', 'span' ) && size > 10 ) {
   * 				// Returned value can be an object with the matched properties.
   * 				// These properties will be "consumed" during the conversion.
   * 				// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.
   *
   * 				return { name: true, styles: [ 'font-size' ] };
   * 			}
   *
   * 			return null;
   * 		},
   * 		small: viewElement => {
   * 			const fontSize = viewElement.getStyle( 'font-size' );
   *
   * 			if ( !fontSize ) {
   * 				return null;
   * 			}
   *
   * 			const match = fontSize.match( /(\d+)\s*px/ );
   *
   * 			if ( !match ) {
   * 				return null;
   * 			}
   *
   * 			const size = Number( match[ 1 ] );
   *
   * 			if ( viewElement.is( 'element', 'span' ) && size < 10 ) {
   * 				// Returned value can be an object with the matched properties.
   * 				// These properties will be "consumed" during the conversion.
   * 				// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.
   *
   * 				return { name: true, styles: [ 'font-size' ] };
   * 			}
   *
   * 			return null;
   * 		}
   * 	}
   * } );
   * ```
   *
   * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object
   * describing the attribute key and value to convert or a `String` specifying just the attribute key (in such a case
   * `value` is set to `true`).
   *
   * @param definition The converter definition.
   */
  attributeToElement(e) {
    this.for("downcast").attributeToElement(e);
    for (const { model: t, view: i } of ms(e))
      this.for("upcast").elementToAttribute({
        view: i,
        model: t,
        converterPriority: e.converterPriority
      });
  }
  /**
   * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa). For example,
   * `<imageBlock src='foo.jpg'></imageBlock>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).
   * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.
   * To convert the text attributes,
   * the {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}should be set up.
   *
   * ```ts
   * // A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).
   * editor.conversion.attributeToAttribute( { model: 'source', view: 'src' } );
   *
   * // Attribute values are strictly specified.
   * editor.conversion.attributeToAttribute( {
   * 	model: {
   * 		name: 'imageInline',
   * 		key: 'aside',
   * 		values: [ 'aside' ]
   * 	},
   * 	view: {
   * 		aside: {
   * 			name: 'img',
   * 			key: 'class',
   * 			value: [ 'aside', 'half-size' ]
   * 		}
   * 	}
   * } );
   *
   * // Set the style attribute.
   * editor.conversion.attributeToAttribute( {
   * 	model: {
   * 		name: 'imageInline',
   * 		key: 'aside',
   * 		values: [ 'aside' ]
   * 	},
   * 	view: {
   * 		aside: {
   * 			name: 'img',
   * 			key: 'style',
   * 			value: {
   * 				float: 'right',
   * 				width: '50%',
   * 				margin: '5px'
   * 			}
   * 		}
   * 	}
   * } );
   *
   * // Conversion from and to a model attribute key whose value is an enum (`align=right|center`).
   * // Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.
   * editor.conversion.attributeToAttribute( {
   * 	model: {
   * 		key: 'align',
   * 		values: [ 'right', 'center' ]
   * 	},
   * 	view: {
   * 		right: {
   * 			key: 'class',
   * 			value: 'align-right'
   * 		},
   * 		center: {
   * 			key: 'class',
   * 			value: 'align-center'
   * 		}
   * 	},
   * 	upcastAlso: {
   * 		right: {
   * 			styles: {
   * 				'text-align': 'right'
   * 			}
   * 		},
   * 		center: {
   * 			styles: {
   * 				'text-align': 'center'
   * 			}
   * 		}
   * 	}
   * } );
   * ```
   *
   * The `definition.model` parameter specifies which model attribute should be converted from and to.
   * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.
   * The `key` property is the model attribute key to convert from and to.
   * The `values` are the possible model attribute values. If the `values` parameter is not set, the model attribute value
   * will be the same as the view attribute value.
   * If `name` is set, the conversion will be set up only for model elements with the given name.
   *
   * The `definition.view` parameter specifies which view attribute should be converted from and to.
   * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.
   * The `key` property is the view attribute key to convert from and to.
   * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be
   * the same as the model attribute value.
   * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.
   * If `key` is `'style'`, `value` is an object with key-value pairs.
   * In other cases, `value` is a `String`.
   * If `name` is set, the conversion will be set up only for model elements with the given name.
   * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`
   * to `{ key, value, [ name ] }` objects.
   *
   * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.
   * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`
   * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.
   *
   * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should
   * be given in both parameters.
   *
   * @param definition The converter definition.
   * @param definition.model The model attribute to convert from and to.
   * @param definition.view The view attribute to convert from and to.
   * @param definition.upcastAlso Any view element matching `definition.upcastAlso` will also be converted to the given model attribute.
   * `definition.upcastAlso` is used only if `config.model.values` is specified.
   */
  attributeToAttribute(e) {
    this.for("downcast").attributeToAttribute(e);
    for (const { model: t, view: i } of ms(e))
      this.for("upcast").attributeToAttribute({
        view: i,
        model: t
      });
  }
  /**
   * Creates and caches conversion helpers for given dispatchers group.
   *
   * @param options.name Group name.
   */
  _createConversionHelpers({ name: e, dispatchers: t, isDowncast: i }) {
    if (this._helpers.has(e))
      throw new f("conversion-group-exists", this);
    const s = i ? new Hv(t) : new vy(t);
    this._helpers.set(e, s);
  }
}
function* ms(n) {
  if (n.model.values)
    for (const e of n.model.values) {
      const t = { key: n.model.key, value: e }, i = n.view[e], s = n.upcastAlso ? n.upcastAlso[e] : void 0;
      yield* Wa(t, i, s);
    }
  else
    yield* Wa(n.model, n.view, n.upcastAlso);
}
function* Wa(n, e, t) {
  if (yield { model: n, view: e }, t)
    for (const i of Q(t))
      yield { model: n, view: i };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ce {
  /**
   * Base operation constructor.
   *
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation
   * can be applied or `null` if the operation operates on detached (non-document) tree.
   */
  constructor(e) {
    this.baseVersion = e, this.isDocumentOperation = this.baseVersion !== null, this.batch = null;
  }
  /**
   * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws
   * an error if operation is not valid.
   *
   * @internal
   */
  _validate() {
  }
  /**
   * Custom toJSON method to solve child-parent circular dependencies.
   *
   * @returns Clone of this object with the operation property replaced with string.
   */
  toJSON() {
    const e = Object.assign({}, this);
    return e.__className = this.constructor.className, delete e.batch, delete e.isDocumentOperation, e;
  }
  /**
   * Name of the operation class used for serialization.
   */
  static get className() {
    return "Operation";
  }
  /**
   * Creates `Operation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param doc Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    return new this(e.baseVersion);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Zr(n, e) {
  const t = Mh(e), i = t.reduce((o, a) => o + a.offsetSize, 0), s = n.parent;
  Li(n);
  const r = n.index;
  return s._insertChild(r, t), Ni(s, r + t.length), Ni(s, r), new g(n, n.getShiftedBy(i));
}
function Oh(n) {
  if (!n.isFlat)
    throw new f("operation-utils-remove-range-not-flat", this);
  const e = n.start.parent;
  Li(n.start), Li(n.end);
  const t = e._removeChildren(n.start.index, n.end.index - n.start.index);
  return Ni(e, n.start.index), t;
}
function Fi(n, e) {
  if (!n.isFlat)
    throw new f("operation-utils-move-range-not-flat", this);
  const t = Oh(n);
  return e = e._getTransformedByDeletion(n.start, n.end.offset - n.start.offset), Zr(e, t);
}
function f2(n, e, t) {
  Li(n.start), Li(n.end);
  for (const i of n.getItems({ shallow: !0 })) {
    const s = i.is("$textProxy") ? i.textNode : i;
    t !== null ? s._setAttribute(e, t) : s._removeAttribute(e), Ni(s.parent, s.index);
  }
  Ni(n.end.parent, n.end.index);
}
function Mh(n) {
  const e = [];
  function t(i) {
    if (typeof i == "string")
      e.push(new j(i));
    else if (i instanceof Ie)
      e.push(new j(i.data, i.getAttributes()));
    else if (i instanceof Lt)
      e.push(i);
    else if (ye(i))
      for (const s of i)
        t(s);
  }
  t(n);
  for (let i = 1; i < e.length; i++) {
    const s = e[i], r = e[i - 1];
    s instanceof j && r instanceof j && Bh(s, r) && (e.splice(i - 1, 2, new j(r.data + s.data, r.getAttributes())), i--);
  }
  return e;
}
function Ni(n, e) {
  const t = n.getChild(e - 1), i = n.getChild(e);
  if (t && i && t.is("$text") && i.is("$text") && Bh(t, i)) {
    const s = new j(t.data + i.data, t.getAttributes());
    n._removeChildren(e - 1, 2), n._insertChild(e - 1, s);
  }
}
function Li(n) {
  const e = n.textNode, t = n.parent;
  if (e) {
    const i = n.offset - e.startOffset, s = e.index;
    t._removeChildren(s, 1);
    const r = new j(e.data.substr(0, i), e.getAttributes()), o = new j(e.data.substr(i), e.getAttributes());
    t._insertChild(s, [r, o]);
  }
}
function Bh(n, e) {
  const t = n.getAttributes(), i = e.getAttributes();
  for (const s of t) {
    if (s[1] !== e.getAttribute(s[0]))
      return !1;
    i.next();
  }
  return i.next().done;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class O extends Ce {
  /**
   * Creates a move operation.
   *
   * @param sourcePosition Position before the first {@link module:engine/model/item~Item model item} to move.
   * @param howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at
   * `sourcePosition` with offset shifted by `howMany`.
   * @param targetPosition Position at which moved nodes will be inserted.
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation
   * can be applied or `null` if the operation operates on detached (non-document) tree.
   */
  constructor(e, t, i, s) {
    super(s), this.sourcePosition = e.clone(), this.sourcePosition.stickiness = "toNext", this.howMany = t, this.targetPosition = i.clone(), this.targetPosition.stickiness = "toNone";
  }
  /**
   * @inheritDoc
   */
  get type() {
    return this.targetPosition.root.rootName == "$graveyard" ? "remove" : this.sourcePosition.root.rootName == "$graveyard" ? "reinsert" : "move";
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    return [
      g._createFromPositionAndShift(this.sourcePosition, this.howMany),
      g._createFromPositionAndShift(this.targetPosition, 0)
    ];
  }
  /**
   * Creates and returns an operation that has the same parameters as this operation.
   */
  clone() {
    return new O(this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion);
  }
  /**
   * Returns the start position of the moved range after it got moved. This may be different than
   * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved
   * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}
   * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.
   *
   * ```
   *  vv              vv
   * abcdefg ===> adefbcg
   *      ^          ^
   *      targetPos  movedRangeStart
   *      offset 6   offset 4
   *```
   */
  getMovedRangeStart() {
    return this.targetPosition._getTransformedByDeletion(this.sourcePosition, this.howMany);
  }
  /**
   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.
   */
  getReversed() {
    const e = this.sourcePosition._getTransformedByInsertion(this.targetPosition, this.howMany);
    return new O(this.getMovedRangeStart(), this.howMany, e, this.baseVersion + 1);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _validate() {
    const e = this.sourcePosition.parent, t = this.targetPosition.parent, i = this.sourcePosition.offset, s = this.targetPosition.offset;
    if (i + this.howMany > e.maxOffset)
      throw new f("move-operation-nodes-do-not-exist", this);
    if (e === t && i < s && s < i + this.howMany)
      throw new f("move-operation-range-into-itself", this);
    if (this.sourcePosition.root == this.targetPosition.root && ce(this.sourcePosition.getParentPath(), this.targetPosition.getParentPath()) == "prefix") {
      const r = this.sourcePosition.path.length - 1;
      if (this.targetPosition.path[r] >= i && this.targetPosition.path[r] < i + this.howMany)
        throw new f("move-operation-node-into-itself", this);
    }
  }
  /**
   * @inheritDoc
   * @internal
   */
  _execute() {
    Fi(g._createFromPositionAndShift(this.sourcePosition, this.howMany), this.targetPosition);
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    const e = super.toJSON();
    return e.sourcePosition = this.sourcePosition.toJSON(), e.targetPosition = this.targetPosition.toJSON(), e;
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "MoveOperation";
  }
  /**
   * Creates `MoveOperation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    const i = w.fromJSON(e.sourcePosition, t), s = w.fromJSON(e.targetPosition, t);
    return new this(i, e.howMany, s, e.baseVersion);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class se extends Ce {
  /**
   * Creates an insert operation.
   *
   * @param position Position of insertion.
   * @param nodes The list of nodes to be inserted.
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation
   * can be applied or `null` if the operation operates on detached (non-document) tree.
   */
  constructor(e, t, i) {
    super(i), this.position = e.clone(), this.position.stickiness = "toNone", this.nodes = new Ti(Mh(t)), this.shouldReceiveAttributes = !1;
  }
  /**
   * @inheritDoc
   */
  get type() {
    return "insert";
  }
  /**
   * Total offset size of inserted nodes.
   */
  get howMany() {
    return this.nodes.maxOffset;
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    return this.position.clone();
  }
  /**
   * Creates and returns an operation that has the same parameters as this operation.
   */
  clone() {
    const e = new Ti([...this.nodes].map((i) => i._clone(!0))), t = new se(this.position, e, this.baseVersion);
    return t.shouldReceiveAttributes = this.shouldReceiveAttributes, t;
  }
  /**
   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.
   */
  getReversed() {
    const e = this.position.root.document.graveyard, t = new w(e, [0]);
    return new O(this.position, this.nodes.maxOffset, t, this.baseVersion + 1);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _validate() {
    const e = this.position.parent;
    if (!e || e.maxOffset < this.position.offset)
      throw new f("insert-operation-position-invalid", this);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _execute() {
    const e = this.nodes;
    this.nodes = new Ti([...e].map((t) => t._clone(!0))), Zr(this.position, e);
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    const e = super.toJSON();
    return e.position = this.position.toJSON(), e.nodes = this.nodes.toJSON(), e;
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "InsertOperation";
  }
  /**
   * Creates `InsertOperation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    const i = [];
    for (const r of e.nodes)
      r.name ? i.push(F.fromJSON(r)) : i.push(j.fromJSON(r));
    const s = new se(w.fromJSON(e.position, t), i, e.baseVersion);
    return s.shouldReceiveAttributes = e.shouldReceiveAttributes, s;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class N extends Ce {
  /**
   * Creates a split operation.
   *
   * @param splitPosition Position at which an element should be split.
   * @param howMany Total offset size of elements that are in the split element after `position`.
   * @param insertionPosition Position at which the clone of split element (or element from graveyard) will be inserted.
   * @param graveyardPosition Position in the graveyard root before the element which
   * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation
   * can be applied or `null` if the operation operates on detached (non-document) tree.
   */
  constructor(e, t, i, s, r) {
    super(r), this.splitPosition = e.clone(), this.splitPosition.stickiness = "toNext", this.howMany = t, this.insertionPosition = i, this.graveyardPosition = s ? s.clone() : null, this.graveyardPosition && (this.graveyardPosition.stickiness = "toNext");
  }
  /**
   * @inheritDoc
   */
  get type() {
    return "split";
  }
  /**
   * Position inside the new clone of a split element.
   *
   * This is a position where nodes that are after the split position will be moved to.
   */
  get moveTargetPosition() {
    const e = this.insertionPosition.path.slice();
    return e.push(0), new w(this.insertionPosition.root, e);
  }
  /**
   * Artificial range that contains all the nodes from the split element that will be moved to the new element.
   * The range starts at {@link #splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.
   */
  get movedRange() {
    const e = this.splitPosition.getShiftedBy(Number.POSITIVE_INFINITY);
    return new g(this.splitPosition, e);
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    const e = [
      g._createFromPositionAndShift(this.splitPosition, 0),
      g._createFromPositionAndShift(this.insertionPosition, 0)
    ];
    return this.graveyardPosition && e.push(g._createFromPositionAndShift(this.graveyardPosition, 0)), e;
  }
  /**
   * Creates and returns an operation that has the same parameters as this operation.
   *
   * @returns Clone of this operation.
   */
  clone() {
    return new N(this.splitPosition, this.howMany, this.insertionPosition, this.graveyardPosition, this.baseVersion);
  }
  /**
   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.
   */
  getReversed() {
    const e = this.splitPosition.root.document.graveyard, t = new w(e, [0]);
    return new Z(this.moveTargetPosition, this.howMany, this.splitPosition, t, this.baseVersion + 1);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _validate() {
    const e = this.splitPosition.parent, t = this.splitPosition.offset;
    if (!e || e.maxOffset < t)
      throw new f("split-operation-position-invalid", this);
    if (e.parent) {
      if (this.howMany != e.maxOffset - this.splitPosition.offset)
        throw new f("split-operation-how-many-invalid", this);
      if (this.graveyardPosition && !this.graveyardPosition.nodeAfter)
        throw new f("split-operation-graveyard-position-invalid", this);
    } else
      throw new f("split-operation-split-in-root", this);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _execute() {
    const e = this.splitPosition.parent;
    if (this.graveyardPosition)
      Fi(g._createFromPositionAndShift(this.graveyardPosition, 1), this.insertionPosition);
    else {
      const i = e._clone();
      Zr(this.insertionPosition, i);
    }
    const t = new g(w._createAt(e, this.splitPosition.offset), w._createAt(e, e.maxOffset));
    Fi(t, this.moveTargetPosition);
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    const e = super.toJSON();
    return e.splitPosition = this.splitPosition.toJSON(), e.insertionPosition = this.insertionPosition.toJSON(), this.graveyardPosition && (e.graveyardPosition = this.graveyardPosition.toJSON()), e;
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "SplitOperation";
  }
  /**
   * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion
   * position is after the split element.
   */
  static getInsertionPosition(e) {
    const t = e.path.slice(0, -1);
    return t[t.length - 1]++, new w(e.root, t, "toPrevious");
  }
  /**
   * Creates `SplitOperation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    const i = w.fromJSON(e.splitPosition, t), s = w.fromJSON(e.insertionPosition, t), r = e.graveyardPosition ? w.fromJSON(e.graveyardPosition, t) : null;
    return new this(i, e.howMany, s, r, e.baseVersion);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Z extends Ce {
  /**
   * Creates a merge operation.
   *
   * @param sourcePosition Position inside the merged element. All nodes from that
   * element after that position will be moved to {@link #targetPosition}.
   * @param howMany Summary offset size of nodes which will be moved from the merged element to the new parent.
   * @param targetPosition Position which the nodes from the merged elements will be moved to.
   * @param graveyardPosition Position in graveyard to which the merged element will be moved.
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation
   * can be applied or `null` if the operation operates on detached (non-document) tree.
   */
  constructor(e, t, i, s, r) {
    super(r), this.sourcePosition = e.clone(), this.sourcePosition.stickiness = "toPrevious", this.howMany = t, this.targetPosition = i.clone(), this.targetPosition.stickiness = "toNext", this.graveyardPosition = s.clone();
  }
  /**
   * @inheritDoc
   */
  get type() {
    return "merge";
  }
  /**
   * Position before the merged element (which will be deleted).
   */
  get deletionPosition() {
    return new w(this.sourcePosition.root, this.sourcePosition.path.slice(0, -1));
  }
  /**
   * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.
   * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.
   */
  get movedRange() {
    const e = this.sourcePosition.getShiftedBy(Number.POSITIVE_INFINITY);
    return new g(this.sourcePosition, e);
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    const e = this.sourcePosition.parent;
    return [
      g._createOn(e),
      // These could be positions but `Selectable` type only supports `Iterable<Range>`.
      g._createFromPositionAndShift(this.targetPosition, 0),
      g._createFromPositionAndShift(this.graveyardPosition, 0)
    ];
  }
  /**
   * Creates and returns an operation that has the same parameters as this operation.
   */
  clone() {
    return new Z(this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion);
  }
  /**
   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.
   */
  getReversed() {
    const e = this.targetPosition._getTransformedByMergeOperation(this), t = this.sourcePosition.path.slice(0, -1), i = new w(this.sourcePosition.root, t)._getTransformedByMergeOperation(this);
    return new N(e, this.howMany, i, this.graveyardPosition, this.baseVersion + 1);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _validate() {
    const e = this.sourcePosition.parent, t = this.targetPosition.parent;
    if (e.parent)
      if (t.parent) {
        if (this.howMany != e.maxOffset)
          throw new f("merge-operation-how-many-invalid", this);
      } else
        throw new f("merge-operation-target-position-invalid", this);
    else
      throw new f("merge-operation-source-position-invalid", this);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _execute() {
    const e = this.sourcePosition.parent, t = g._createIn(e);
    Fi(t, this.targetPosition), Fi(g._createOn(e), this.graveyardPosition);
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    const e = super.toJSON();
    return e.sourcePosition = e.sourcePosition.toJSON(), e.targetPosition = e.targetPosition.toJSON(), e.graveyardPosition = e.graveyardPosition.toJSON(), e;
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "MergeOperation";
  }
  /**
   * Creates `MergeOperation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    const i = w.fromJSON(e.sourcePosition, t), s = w.fromJSON(e.targetPosition, t), r = w.fromJSON(e.graveyardPosition, t);
    return new this(i, e.howMany, s, r, e.baseVersion);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ge extends Ce {
  /**
   * @param name Marker name.
   * @param oldRange Marker range before the change.
   * @param newRange Marker range after the change.
   * @param markers Marker collection on which change should be executed.
   * @param affectsData Specifies whether the marker operation affects the data produced by the data pipeline
   * (is persisted in the editor's data).
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation
   * can be applied or `null` if the operation operates on detached (non-document) tree.
   */
  constructor(e, t, i, s, r, o) {
    super(o), this.name = e, this.oldRange = t ? t.clone() : null, this.newRange = i ? i.clone() : null, this.affectsData = r, this._markers = s;
  }
  /**
   * @inheritDoc
   */
  get type() {
    return "marker";
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    const e = [];
    return this.oldRange && e.push(this.oldRange.clone()), this.newRange && (this.oldRange ? e.push(...this.newRange.getDifference(this.oldRange)) : e.push(this.newRange.clone())), e;
  }
  /**
   * Creates and returns an operation that has the same parameters as this operation.
   */
  clone() {
    return new ge(this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion);
  }
  /**
   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.
   */
  getReversed() {
    return new ge(this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _execute() {
    this.newRange ? this._markers._set(this.name, this.newRange, !0, this.affectsData) : this._markers._remove(this.name);
  }
  /**
   * @inheritDoc
   * @internal
   */
  toJSON() {
    const e = super.toJSON();
    return this.oldRange && (e.oldRange = this.oldRange.toJSON()), this.newRange && (e.newRange = this.newRange.toJSON()), delete e._markers, e;
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "MarkerOperation";
  }
  /**
   * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    return new ge(e.name, e.oldRange ? g.fromJSON(e.oldRange, t) : null, e.newRange ? g.fromJSON(e.newRange, t) : null, t.model.markers, e.affectsData, e.baseVersion);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ee extends Ce {
  /**
   * Creates an operation that changes, removes or adds attributes.
   *
   * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not
   * have an attribute with the same key as the added attribute.
   *
   * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range
   * must have an attribute with that key added.
   *
   * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in
   * operation's ranges must already have an attribute with given key and `oldValue` as value
   *
   * @param range Range on which the operation should be applied. Must be a flat range.
   * @param key Key of an attribute to change or remove.
   * @param oldValue Old value of the attribute with given key or `null`, if attribute was not set before.
   * @param newValue New value of the attribute with given key or `null`, if operation should remove attribute.
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation
   * can be applied or `null` if the operation operates on detached (non-document) tree.
   */
  constructor(e, t, i, s, r) {
    super(r), this.range = e.clone(), this.key = t, this.oldValue = i === void 0 ? null : i, this.newValue = s === void 0 ? null : s;
  }
  /**
   * @inheritDoc
   */
  get type() {
    return this.oldValue === null ? "addAttribute" : this.newValue === null ? "removeAttribute" : "changeAttribute";
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    return this.range.clone();
  }
  /**
   * Creates and returns an operation that has the same parameters as this operation.
   */
  clone() {
    return new ee(this.range, this.key, this.oldValue, this.newValue, this.baseVersion);
  }
  /**
   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.
   */
  getReversed() {
    return new ee(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1);
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    const e = super.toJSON();
    return e.range = this.range.toJSON(), e;
  }
  /**
   * @inheritDoc
   * @internal
   */
  _validate() {
    if (!this.range.isFlat)
      throw new f("attribute-operation-range-not-flat", this);
    for (const e of this.range.getItems({ shallow: !0 })) {
      if (this.oldValue !== null && !vn(e.getAttribute(this.key), this.oldValue))
        throw new f("attribute-operation-wrong-old-value", this, { item: e, key: this.key, value: this.oldValue });
      if (this.oldValue === null && this.newValue !== null && e.hasAttribute(this.key))
        throw new f("attribute-operation-attribute-exists", this, { node: e, key: this.key });
    }
  }
  /**
   * @inheritDoc
   * @internal
   */
  _execute() {
    vn(this.oldValue, this.newValue) || f2(this.range, this.key, this.newValue);
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "AttributeOperation";
  }
  /**
   * Creates `AttributeOperation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    return new ee(g.fromJSON(e.range, t), e.key, e.oldValue, e.newValue, e.baseVersion);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ie extends Ce {
  get type() {
    return "noop";
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    return null;
  }
  /**
   * Creates and returns an operation that has the same parameters as this operation.
   */
  clone() {
    return new ie(this.baseVersion);
  }
  /**
   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.
   */
  getReversed() {
    return new ie(this.baseVersion + 1);
  }
  /** @internal */
  _execute() {
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "NoOperation";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class pe extends Ce {
  /**
   * Creates an operation that changes element's name.
   *
   * @param position Position before an element to change.
   * @param oldName Current name of the element.
   * @param newName New name for the element.
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation
   * can be applied or `null` if the operation operates on detached (non-document) tree.
   */
  constructor(e, t, i, s) {
    super(s), this.position = e, this.position.stickiness = "toNext", this.oldName = t, this.newName = i;
  }
  /**
   * @inheritDoc
   */
  get type() {
    return "rename";
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    return this.position.nodeAfter;
  }
  /**
   * Creates and returns an operation that has the same parameters as this operation.
   *
   * @returns Clone of this operation.
   */
  clone() {
    return new pe(this.position.clone(), this.oldName, this.newName, this.baseVersion);
  }
  /**
   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.
   */
  getReversed() {
    return new pe(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _validate() {
    const e = this.position.nodeAfter;
    if (e instanceof F) {
      if (e.name !== this.oldName)
        throw new f("rename-operation-wrong-name", this);
    } else
      throw new f("rename-operation-wrong-position", this);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _execute() {
    const e = this.position.nodeAfter;
    e.name = this.newName;
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    const e = super.toJSON();
    return e.position = this.position.toJSON(), e;
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "RenameOperation";
  }
  /**
   * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    return new pe(w.fromJSON(e.position, t), e.oldName, e.newName, e.baseVersion);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ze extends Ce {
  /**
   * Creates an operation that changes, removes or adds attributes on root element.
   *
   * @see module:engine/model/operation/attributeoperation~AttributeOperation
   * @param root Root element to change.
   * @param key Key of an attribute to change or remove.
   * @param oldValue Old value of the attribute with given key or `null`, if attribute was not set before.
   * @param newValue New value of the attribute with given key or `null`, if operation should remove attribute.
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation
   * can be applied or `null` if the operation operates on detached (non-document) tree.
   */
  constructor(e, t, i, s, r) {
    super(r), this.root = e, this.key = t, this.oldValue = i === void 0 ? null : i, this.newValue = s === void 0 ? null : s;
  }
  /**
   * @inheritDoc
   */
  get type() {
    return this.oldValue === null ? "addRootAttribute" : this.newValue === null ? "removeRootAttribute" : "changeRootAttribute";
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    return this.root;
  }
  /**
   * Creates and returns an operation that has the same parameters as this operation.
   *
   * @returns Clone of this operation.
   */
  clone() {
    return new Ze(this.root, this.key, this.oldValue, this.newValue, this.baseVersion);
  }
  /**
   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.
   */
  getReversed() {
    return new Ze(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _validate() {
    if (this.root != this.root.root || this.root.is("documentFragment"))
      throw new f("rootattribute-operation-not-a-root", this, { root: this.root, key: this.key });
    if (this.oldValue !== null && this.root.getAttribute(this.key) !== this.oldValue)
      throw new f("rootattribute-operation-wrong-old-value", this, { root: this.root, key: this.key });
    if (this.oldValue === null && this.newValue !== null && this.root.hasAttribute(this.key))
      throw new f("rootattribute-operation-attribute-exists", this, { root: this.root, key: this.key });
  }
  /**
   * @inheritDoc
   * @internal
   */
  _execute() {
    this.newValue !== null ? this.root._setAttribute(this.key, this.newValue) : this.root._removeAttribute(this.key);
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    const e = super.toJSON();
    return e.root = this.root.toJSON(), e;
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "RootAttributeOperation";
  }
  /**
   * Creates `RootAttributeOperation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    if (!t.getRoot(e.root))
      throw new f("rootattribute-operation-fromjson-no-root", this, { rootName: e.root });
    return new Ze(t.getRoot(e.root), e.key, e.oldValue, e.newValue, e.baseVersion);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class $e extends Ce {
  /**
   * Creates an operation that creates or removes a root element.
   *
   * @param rootName Root name to create or detach.
   * @param elementName Root element name.
   * @param isAdd Specifies whether the operation adds (`true`) or detaches the root (`false`).
   * @param document Document which owns the root.
   * @param baseVersion Document {@link module:engine/model/document~Document#version} on which operation can be applied.
   */
  constructor(e, t, i, s, r) {
    if (super(r), this.rootName = e, this.elementName = t, this.isAdd = i, this._document = s, !this._document.getRoot(this.rootName)) {
      const o = this._document.createRoot(this.elementName, this.rootName);
      o._isAttached = !1;
    }
  }
  /**
   * @inheritDoc
   */
  get type() {
    return this.isAdd ? "addRoot" : "detachRoot";
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    return this._document.getRoot(this.rootName);
  }
  /**
   * @inheritDoc
   */
  clone() {
    return new $e(this.rootName, this.elementName, this.isAdd, this._document, this.baseVersion);
  }
  /**
   * @inheritDoc
   */
  getReversed() {
    return new $e(this.rootName, this.elementName, !this.isAdd, this._document, this.baseVersion + 1);
  }
  /**
   * @inheritDoc
   */
  _validate() {
    const e = this._document.getRoot(this.rootName);
    if (e.isAttached() && this.isAdd)
      throw new f("root-operation-root-attached", this);
    if (!e.isAttached() && !this.isAdd)
      throw new f("root-operation-root-detached", this);
  }
  /**
   * @inheritDoc
   */
  _execute() {
    this._document.getRoot(this.rootName)._isAttached = this.isAdd;
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    const e = super.toJSON();
    return delete e._document, e;
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "RootOperation";
  }
  /**
   * Creates `RootOperation` object from deserialized object, i.e. from parsed JSON string.
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    return new $e(e.rootName, e.elementName, e.isAdd, t, e.baseVersion);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Se = {};
Se[ee.className] = ee;
Se[se.className] = se;
Se[ge.className] = ge;
Se[O.className] = O;
Se[ie.className] = ie;
Se[Ce.className] = Ce;
Se[pe.className] = pe;
Se[Ze.className] = Ze;
Se[$e.className] = $e;
Se[N.className] = N;
Se[Z.className] = Z;
class m2 {
  /**
   * Creates an operation instance from a JSON object (parsed JSON string).
   *
   * @param json Deserialized JSON object.
   * @param document Document on which this operation will be applied.
   */
  static fromJSON(e, t) {
    return Se[e.__className].fromJSON(e, t);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const cr = /* @__PURE__ */ new Map();
function V(n, e, t) {
  let i = cr.get(n);
  i || (i = /* @__PURE__ */ new Map(), cr.set(n, i)), i.set(e, t);
}
function g2(n, e) {
  const t = cr.get(n);
  return t && t.has(e) ? t.get(e) : p2;
}
function p2(n) {
  return [n];
}
function Ua(n, e, t = {}) {
  const i = g2(n.constructor, e.constructor);
  try {
    return n = n.clone(), i(n, e, t);
  } catch (s) {
    throw s;
  }
}
function w2(n, e, t) {
  n = n.slice(), e = e.slice();
  const i = new b2(t.document, t.useRelations, t.forceWeakRemove);
  i.setOriginalOperations(n), i.setOriginalOperations(e);
  const s = i.originalOperations;
  if (n.length == 0 || e.length == 0)
    return { operationsA: n, operationsB: e, originalOperations: s };
  const r = /* @__PURE__ */ new WeakMap();
  for (const l of n)
    r.set(l, 0);
  const o = {
    nextBaseVersionA: n[n.length - 1].baseVersion + 1,
    nextBaseVersionB: e[e.length - 1].baseVersion + 1,
    originalOperationsACount: n.length,
    originalOperationsBCount: e.length
  };
  let a = 0;
  for (; a < n.length; ) {
    const l = n[a], c = r.get(l);
    if (c == e.length) {
      a++;
      continue;
    }
    const u = e[c], h = Ua(l, u, i.getContext(l, u, !0)), d = Ua(u, l, i.getContext(u, l, !1));
    i.updateRelation(l, u), i.setOriginalOperations(h, l), i.setOriginalOperations(d, u);
    for (const m of h)
      r.set(m, c + d.length);
    n.splice(a, 1, ...h), e.splice(c, 1, ...d);
  }
  if (t.padWithNoOps) {
    const l = n.length - o.originalOperationsACount, c = e.length - o.originalOperationsBCount;
    qa(n, c - l), qa(e, l - c);
  }
  return ja(n, o.nextBaseVersionB), ja(e, o.nextBaseVersionA), { operationsA: n, operationsB: e, originalOperations: s };
}
class b2 {
  /**
   * Creates `ContextFactory` instance.
   *
   * @param document Document which the operations change.
   * @param useRelations Whether during transformation relations should be used (used during undo for
   * better conflict resolution).
   * @param forceWeakRemove If set to `false`, remove operation will be always stronger than move operation,
   * so the removed nodes won't end up back in the document root. When set to `true`, context data will be used.
   */
  constructor(e, t, i = !1) {
    this.originalOperations = /* @__PURE__ */ new Map(), this._history = e.history, this._useRelations = t, this._forceWeakRemove = !!i, this._relations = /* @__PURE__ */ new Map();
  }
  /**
   * Sets "original operation" for given operations.
   *
   * During transformation process, operations are cloned, then changed, then processed again, sometimes broken into two
   * or multiple operations. When gathering additional data it is important that all operations can be somehow linked
   * so a cloned and transformed "version" still kept track of the data assigned earlier to it.
   *
   * The original operation object will be used as such an universal linking id. Throughout the transformation process
   * all cloned operations will refer to "the original operation" when storing and reading additional data.
   *
   * If `takeFrom` is not set, each operation from `operations` array will be assigned itself as "the original operation".
   * This should be used as an initialization step.
   *
   * If `takeFrom` is set, each operation from `operations` will be assigned the same original operation as assigned
   * for `takeFrom` operation. This should be used to update original operations. It should be used in a way that
   * `operations` are the result of `takeFrom` transformation to ensure proper "original operation propagation".
   */
  setOriginalOperations(e, t = null) {
    const i = t ? this.originalOperations.get(t) : null;
    for (const s of e)
      this.originalOperations.set(s, i || s);
  }
  /**
   * Saves a relation between operations `opA` and `opB`.
   *
   * Relations are then later used to help solve conflicts when operations are transformed.
   */
  updateRelation(e, t) {
    if (e instanceof O)
      t instanceof Z ? e.targetPosition.isEqual(t.sourcePosition) || t.movedRange.containsPosition(e.targetPosition) ? this._setRelation(e, t, "insertAtSource") : e.targetPosition.isEqual(t.deletionPosition) ? this._setRelation(e, t, "insertBetween") : e.targetPosition.isAfter(t.sourcePosition) && this._setRelation(e, t, "moveTargetAfter") : t instanceof O && (e.targetPosition.isEqual(t.sourcePosition) || e.targetPosition.isBefore(t.sourcePosition) ? this._setRelation(e, t, "insertBefore") : this._setRelation(e, t, "insertAfter"));
    else if (e instanceof N) {
      if (t instanceof Z)
        e.splitPosition.isBefore(t.sourcePosition) && this._setRelation(e, t, "splitBefore");
      else if (t instanceof O)
        if (e.splitPosition.isEqual(t.sourcePosition) || e.splitPosition.isBefore(t.sourcePosition))
          this._setRelation(e, t, "splitBefore");
        else {
          const i = g._createFromPositionAndShift(t.sourcePosition, t.howMany);
          if (e.splitPosition.hasSameParentAs(t.sourcePosition) && i.containsPosition(e.splitPosition)) {
            const s = i.end.offset - e.splitPosition.offset, r = e.splitPosition.offset - i.start.offset;
            this._setRelation(e, t, { howMany: s, offset: r });
          }
        }
    } else if (e instanceof Z)
      t instanceof Z ? (e.targetPosition.isEqual(t.sourcePosition) || this._setRelation(e, t, "mergeTargetNotMoved"), e.sourcePosition.isEqual(t.targetPosition) && this._setRelation(e, t, "mergeSourceNotMoved"), e.sourcePosition.isEqual(t.sourcePosition) && this._setRelation(e, t, "mergeSameElement")) : t instanceof N && e.sourcePosition.isEqual(t.splitPosition) && this._setRelation(e, t, "splitAtSource");
    else if (e instanceof ge) {
      const i = e.newRange;
      if (!i)
        return;
      if (t instanceof O) {
        const s = g._createFromPositionAndShift(t.sourcePosition, t.howMany), r = s.containsPosition(i.start) || s.start.isEqual(i.start), o = s.containsPosition(i.end) || s.end.isEqual(i.end);
        (r || o) && !s.containsRange(i) && this._setRelation(e, t, {
          side: r ? "left" : "right",
          path: r ? i.start.path.slice() : i.end.path.slice()
        });
      } else if (t instanceof Z) {
        const s = i.start.isEqual(t.targetPosition), r = i.start.isEqual(t.deletionPosition), o = i.end.isEqual(t.deletionPosition), a = i.end.isEqual(t.sourcePosition);
        (s || r || o || a) && this._setRelation(e, t, {
          wasInLeftElement: s,
          wasStartBeforeMergedElement: r,
          wasEndBeforeMergedElement: o,
          wasInRightElement: a
        });
      }
    }
  }
  /**
   * Evaluates and returns contextual information about two given operations `opA` and `opB` which are about to be transformed.
   */
  getContext(e, t, i) {
    return {
      aIsStrong: i,
      aWasUndone: this._wasUndone(e),
      bWasUndone: this._wasUndone(t),
      abRelation: this._useRelations ? this._getRelation(e, t) : null,
      baRelation: this._useRelations ? this._getRelation(t, e) : null,
      forceWeakRemove: this._forceWeakRemove
    };
  }
  /**
   * Returns whether given operation `op` has already been undone.
   *
   * Information whether an operation was undone gives more context when making a decision when two operations are in conflict.
   */
  _wasUndone(e) {
    const t = this.originalOperations.get(e);
    return t.wasUndone || this._history.isUndoneOperation(t);
  }
  /**
   * Returns a relation between `opA` and an operation which is undone by `opB`. This can be `String` value if a relation
   * was set earlier or `null` if there was no relation between those operations.
   *
   * This is a little tricky to understand, so let's compare it to `ContextFactory#_wasUndone`.
   *
   * When `wasUndone( opB )` is used, we check if the `opB` has already been undone. It is obvious, that the
   * undoing operation must happen after the undone operation. So, essentially, we have `opB`, we take document history,
   * we look forward in the future and ask if in that future `opB` was undone.
   *
   * Relations is a backward process to `wasUndone()`.
   *
   * Long story short - using relations is asking what happened in the past. Looking back. This time we have an undoing
   * operation `opB` which has undone some other operation. When there is a transformation `opA` x `opB` and there is
   * a conflict to solve and `opB` is an undoing operation, we can look back in the history and see what was a relation
   * between `opA` and the operation which `opB` undone. Basing on that relation from the past, we can now make
   * a better decision when resolving a conflict between two operations, because we know more about the context of
   * those two operations.
   *
   * This is why this function does not return a relation directly between `opA` and `opB` because we need to look
   * back to search for a meaningful contextual information.
   */
  _getRelation(e, t) {
    const i = this.originalOperations.get(t), s = this._history.getUndoneOperation(i);
    if (!s)
      return null;
    const r = this.originalOperations.get(e), o = this._relations.get(r);
    return o && o.get(s) || null;
  }
  /**
   * Helper function for `ContextFactory#updateRelations`.
   */
  _setRelation(e, t, i) {
    const s = this.originalOperations.get(e), r = this.originalOperations.get(t);
    let o = this._relations.get(s);
    o || (o = /* @__PURE__ */ new Map(), this._relations.set(s, o)), o.set(r, i);
  }
}
function ja(n, e) {
  for (const t of n)
    t.baseVersion = e++;
}
function qa(n, e) {
  for (let t = 0; t < e; t++)
    n.push(new ie(0));
}
V(ee, ee, (n, e, t) => {
  if (n.key === e.key && n.range.start.hasSameParentAs(e.range.start)) {
    const i = n.range.getDifference(e.range).map((r) => new ee(r, n.key, n.oldValue, n.newValue, 0)), s = n.range.getIntersection(e.range);
    return s && t.aIsStrong && i.push(new ee(s, e.key, e.newValue, n.newValue, 0)), i.length == 0 ? [new ie(0)] : i;
  } else
    return [n];
});
V(ee, se, (n, e) => {
  if (n.range.start.hasSameParentAs(e.position) && n.range.containsPosition(e.position)) {
    const i = n.range._getTransformedByInsertion(e.position, e.howMany, !e.shouldReceiveAttributes).map((s) => new ee(s, n.key, n.oldValue, n.newValue, n.baseVersion));
    if (e.shouldReceiveAttributes) {
      const s = Dh(e, n.key, n.oldValue);
      s && i.unshift(s);
    }
    return i;
  }
  return n.range = n.range._getTransformedByInsertion(e.position, e.howMany, !1)[0], [n];
});
function Dh(n, e, t) {
  const s = n.nodes.getNode(0).getAttribute(e);
  if (s == t)
    return null;
  const r = new g(n.position, n.position.getShiftedBy(n.howMany));
  return new ee(r, e, s, t, 0);
}
V(ee, Z, (n, e) => {
  const t = [];
  n.range.start.hasSameParentAs(e.deletionPosition) && (n.range.containsPosition(e.deletionPosition) || n.range.start.isEqual(e.deletionPosition)) && t.push(g._createFromPositionAndShift(e.graveyardPosition, 1));
  const i = n.range._getTransformedByMergeOperation(e);
  return i.isCollapsed || t.push(i), t.map((s) => new ee(s, n.key, n.oldValue, n.newValue, n.baseVersion));
});
V(ee, O, (n, e) => _2(n.range, e).map((i) => new ee(i, n.key, n.oldValue, n.newValue, n.baseVersion)));
function _2(n, e) {
  const t = g._createFromPositionAndShift(e.sourcePosition, e.howMany);
  let i = null, s = [];
  t.containsRange(n, !0) ? i = n : n.start.hasSameParentAs(t.start) ? (s = n.getDifference(t), i = n.getIntersection(t)) : s = [n];
  const r = [];
  for (let o of s) {
    o = o._getTransformedByDeletion(e.sourcePosition, e.howMany);
    const a = e.getMovedRangeStart(), l = o.start.hasSameParentAs(a), c = o._getTransformedByInsertion(a, e.howMany, l);
    r.push(...c);
  }
  return i && r.push(i._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany, !1)[0]), r;
}
V(ee, N, (n, e) => {
  if (n.range.end.isEqual(e.insertionPosition))
    return e.graveyardPosition || n.range.end.offset++, [n];
  if (n.range.start.hasSameParentAs(e.splitPosition) && n.range.containsPosition(e.splitPosition)) {
    const t = n.clone();
    return t.range = new g(e.moveTargetPosition.clone(), n.range.end._getCombined(e.splitPosition, e.moveTargetPosition)), n.range.end = e.splitPosition.clone(), n.range.end.stickiness = "toPrevious", [n, t];
  }
  return n.range = n.range._getTransformedBySplitOperation(e), [n];
});
V(se, ee, (n, e) => {
  const t = [n];
  if (n.shouldReceiveAttributes && n.position.hasSameParentAs(e.range.start) && e.range.containsPosition(n.position)) {
    const i = Dh(n, e.key, e.newValue);
    i && t.push(i);
  }
  return t;
});
V(se, se, (n, e, t) => n.position.isEqual(e.position) && t.aIsStrong ? [n] : (n.position = n.position._getTransformedByInsertOperation(e), [n]));
V(se, O, (n, e) => (n.position = n.position._getTransformedByMoveOperation(e), [n]));
V(se, N, (n, e) => (n.position = n.position._getTransformedBySplitOperation(e), [n]));
V(se, Z, (n, e) => (n.position = n.position._getTransformedByMergeOperation(e), [n]));
V(ge, se, (n, e) => (n.oldRange && (n.oldRange = n.oldRange._getTransformedByInsertOperation(e)[0]), n.newRange && (n.newRange = n.newRange._getTransformedByInsertOperation(e)[0]), [n]));
V(ge, ge, (n, e, t) => {
  if (n.name == e.name)
    if (t.aIsStrong)
      n.oldRange = e.newRange ? e.newRange.clone() : null;
    else
      return [new ie(0)];
  return [n];
});
V(ge, Z, (n, e) => (n.oldRange && (n.oldRange = n.oldRange._getTransformedByMergeOperation(e)), n.newRange && (n.newRange = n.newRange._getTransformedByMergeOperation(e)), [n]));
V(ge, O, (n, e, t) => {
  if (n.oldRange && (n.oldRange = g._createFromRanges(n.oldRange._getTransformedByMoveOperation(e))), n.newRange) {
    if (t.abRelation) {
      const i = g._createFromRanges(n.newRange._getTransformedByMoveOperation(e));
      if (t.abRelation.side == "left" && e.targetPosition.isEqual(n.newRange.start))
        return n.newRange.end = i.end, n.newRange.start.path = t.abRelation.path, [n];
      if (t.abRelation.side == "right" && e.targetPosition.isEqual(n.newRange.end))
        return n.newRange.start = i.start, n.newRange.end.path = t.abRelation.path, [n];
    }
    n.newRange = g._createFromRanges(n.newRange._getTransformedByMoveOperation(e));
  }
  return [n];
});
V(ge, N, (n, e, t) => {
  if (n.oldRange && (n.oldRange = n.oldRange._getTransformedBySplitOperation(e)), n.newRange) {
    if (t.abRelation) {
      const i = n.newRange._getTransformedBySplitOperation(e);
      return n.newRange.start.isEqual(e.splitPosition) && t.abRelation.wasStartBeforeMergedElement ? n.newRange.start = w._createAt(e.insertionPosition) : n.newRange.start.isEqual(e.splitPosition) && !t.abRelation.wasInLeftElement && (n.newRange.start = w._createAt(e.moveTargetPosition)), n.newRange.end.isEqual(e.splitPosition) && t.abRelation.wasInRightElement ? n.newRange.end = w._createAt(e.moveTargetPosition) : n.newRange.end.isEqual(e.splitPosition) && t.abRelation.wasEndBeforeMergedElement ? n.newRange.end = w._createAt(e.insertionPosition) : n.newRange.end = i.end, [n];
    }
    n.newRange = n.newRange._getTransformedBySplitOperation(e);
  }
  return [n];
});
V(Z, se, (n, e) => (n.sourcePosition.hasSameParentAs(e.position) && (n.howMany += e.howMany), n.sourcePosition = n.sourcePosition._getTransformedByInsertOperation(e), n.targetPosition = n.targetPosition._getTransformedByInsertOperation(e), [n]));
V(Z, Z, (n, e, t) => {
  if (n.sourcePosition.isEqual(e.sourcePosition) && n.targetPosition.isEqual(e.targetPosition))
    if (t.bWasUndone) {
      const i = e.graveyardPosition.path.slice();
      return i.push(0), n.sourcePosition = new w(e.graveyardPosition.root, i), n.howMany = 0, [n];
    } else
      return [new ie(0)];
  if (n.sourcePosition.isEqual(e.sourcePosition) && !n.targetPosition.isEqual(e.targetPosition) && !t.bWasUndone && t.abRelation != "splitAtSource") {
    const i = n.targetPosition.root.rootName == "$graveyard", s = e.targetPosition.root.rootName == "$graveyard";
    if (s && !i || !(i && !s) && t.aIsStrong) {
      const l = e.targetPosition._getTransformedByMergeOperation(e), c = n.targetPosition._getTransformedByMergeOperation(e);
      return [new O(l, n.howMany, c, 0)];
    } else
      return [new ie(0)];
  }
  return n.sourcePosition.hasSameParentAs(e.targetPosition) && (n.howMany += e.howMany), n.sourcePosition = n.sourcePosition._getTransformedByMergeOperation(e), n.targetPosition = n.targetPosition._getTransformedByMergeOperation(e), (!n.graveyardPosition.isEqual(e.graveyardPosition) || !t.aIsStrong) && (n.graveyardPosition = n.graveyardPosition._getTransformedByMergeOperation(e)), [n];
});
V(Z, O, (n, e, t) => {
  const i = g._createFromPositionAndShift(e.sourcePosition, e.howMany);
  return e.type == "remove" && !t.bWasUndone && !t.forceWeakRemove && n.deletionPosition.hasSameParentAs(e.sourcePosition) && i.containsPosition(n.sourcePosition) ? [new ie(0)] : (n.sourcePosition.hasSameParentAs(e.targetPosition) && (n.howMany += e.howMany), n.sourcePosition.hasSameParentAs(e.sourcePosition) && (n.howMany -= e.howMany), n.sourcePosition = n.sourcePosition._getTransformedByMoveOperation(e), n.targetPosition = n.targetPosition._getTransformedByMoveOperation(e), n.graveyardPosition.isEqual(e.targetPosition) || (n.graveyardPosition = n.graveyardPosition._getTransformedByMoveOperation(e)), [n]);
});
V(Z, N, (n, e, t) => {
  if (e.graveyardPosition && (n.graveyardPosition = n.graveyardPosition._getTransformedByDeletion(e.graveyardPosition, 1), n.deletionPosition.isEqual(e.graveyardPosition) && (n.howMany = e.howMany)), n.targetPosition.isEqual(e.splitPosition)) {
    const i = e.howMany != 0, s = e.graveyardPosition && n.deletionPosition.isEqual(e.graveyardPosition);
    if (i || s || t.abRelation == "mergeTargetNotMoved")
      return n.sourcePosition = n.sourcePosition._getTransformedBySplitOperation(e), [n];
  }
  if (n.sourcePosition.isEqual(e.splitPosition)) {
    if (t.abRelation == "mergeSourceNotMoved")
      return n.howMany = 0, n.targetPosition = n.targetPosition._getTransformedBySplitOperation(e), [n];
    if (t.abRelation == "mergeSameElement" || n.sourcePosition.offset > 0)
      return n.sourcePosition = e.moveTargetPosition.clone(), n.targetPosition = n.targetPosition._getTransformedBySplitOperation(e), [n];
  }
  return n.sourcePosition.hasSameParentAs(e.splitPosition) && (n.howMany = e.splitPosition.offset), n.sourcePosition = n.sourcePosition._getTransformedBySplitOperation(e), n.targetPosition = n.targetPosition._getTransformedBySplitOperation(e), [n];
});
V(O, se, (n, e) => {
  const i = g._createFromPositionAndShift(n.sourcePosition, n.howMany)._getTransformedByInsertOperation(e, !1)[0];
  return n.sourcePosition = i.start, n.howMany = i.end.offset - i.start.offset, n.targetPosition.isEqual(e.position) || (n.targetPosition = n.targetPosition._getTransformedByInsertOperation(e)), [n];
});
V(O, O, (n, e, t) => {
  const i = g._createFromPositionAndShift(n.sourcePosition, n.howMany), s = g._createFromPositionAndShift(e.sourcePosition, e.howMany);
  let r = t.aIsStrong, o = !t.aIsStrong;
  t.abRelation == "insertBefore" || t.baRelation == "insertAfter" ? o = !0 : (t.abRelation == "insertAfter" || t.baRelation == "insertBefore") && (o = !1);
  let a;
  if (n.targetPosition.isEqual(e.targetPosition) && o ? a = n.targetPosition._getTransformedByDeletion(e.sourcePosition, e.howMany) : a = n.targetPosition._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany), Ga(n, e) && Ga(e, n))
    return [e.getReversed()];
  if (i.containsPosition(e.targetPosition) && i.containsRange(s, !0))
    return i.start = i.start._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany), i.end = i.end._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany), Qt([i], a);
  if (s.containsPosition(n.targetPosition) && s.containsRange(i, !0))
    return i.start = i.start._getCombined(e.sourcePosition, e.getMovedRangeStart()), i.end = i.end._getCombined(e.sourcePosition, e.getMovedRangeStart()), Qt([i], a);
  const u = ce(n.sourcePosition.getParentPath(), e.sourcePosition.getParentPath());
  if (u == "prefix" || u == "extension")
    return i.start = i.start._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany), i.end = i.end._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany), Qt([i], a);
  n.type == "remove" && e.type != "remove" && !t.aWasUndone && !t.forceWeakRemove ? r = !0 : n.type != "remove" && e.type == "remove" && !t.bWasUndone && !t.forceWeakRemove && (r = !1);
  const h = [], d = i.getDifference(s);
  for (const p of d) {
    p.start = p.start._getTransformedByDeletion(e.sourcePosition, e.howMany), p.end = p.end._getTransformedByDeletion(e.sourcePosition, e.howMany);
    const b = ce(p.start.getParentPath(), e.getMovedRangeStart().getParentPath()) == "same", C = p._getTransformedByInsertion(e.getMovedRangeStart(), e.howMany, b);
    h.push(...C);
  }
  const m = i.getIntersection(s);
  return m !== null && r && (m.start = m.start._getCombined(e.sourcePosition, e.getMovedRangeStart()), m.end = m.end._getCombined(e.sourcePosition, e.getMovedRangeStart()), h.length === 0 ? h.push(m) : h.length == 1 ? s.start.isBefore(i.start) || s.start.isEqual(i.start) ? h.unshift(m) : h.push(m) : h.splice(1, 0, m)), h.length === 0 ? [new ie(n.baseVersion)] : Qt(h, a);
});
V(O, N, (n, e, t) => {
  let i = n.targetPosition.clone();
  (!n.targetPosition.isEqual(e.insertionPosition) || !e.graveyardPosition || t.abRelation == "moveTargetAfter") && (i = n.targetPosition._getTransformedBySplitOperation(e));
  const s = g._createFromPositionAndShift(n.sourcePosition, n.howMany);
  if (s.end.isEqual(e.insertionPosition))
    return e.graveyardPosition || n.howMany++, n.targetPosition = i, [n];
  if (s.start.hasSameParentAs(e.splitPosition) && s.containsPosition(e.splitPosition)) {
    let a = new g(e.splitPosition, s.end);
    a = a._getTransformedBySplitOperation(e);
    const l = [
      new g(s.start, e.splitPosition),
      a
    ];
    return Qt(l, i);
  }
  n.targetPosition.isEqual(e.splitPosition) && t.abRelation == "insertAtSource" && (i = e.moveTargetPosition), n.targetPosition.isEqual(e.insertionPosition) && t.abRelation == "insertBetween" && (i = n.targetPosition);
  const o = [s._getTransformedBySplitOperation(e)];
  if (e.graveyardPosition) {
    const a = s.start.isEqual(e.graveyardPosition) || s.containsPosition(e.graveyardPosition);
    n.howMany > 1 && a && !t.aWasUndone && o.push(g._createFromPositionAndShift(e.insertionPosition, 1));
  }
  return Qt(o, i);
});
V(O, Z, (n, e, t) => {
  const i = g._createFromPositionAndShift(n.sourcePosition, n.howMany);
  if (e.deletionPosition.hasSameParentAs(n.sourcePosition) && i.containsPosition(e.sourcePosition)) {
    if (n.type == "remove" && !t.forceWeakRemove) {
      if (!t.aWasUndone) {
        const o = [];
        let a = e.graveyardPosition.clone(), l = e.targetPosition._getTransformedByMergeOperation(e);
        n.howMany > 1 && (o.push(new O(n.sourcePosition, n.howMany - 1, n.targetPosition, 0)), a = a._getTransformedByMove(n.sourcePosition, n.targetPosition, n.howMany - 1), l = l._getTransformedByMove(n.sourcePosition, n.targetPosition, n.howMany - 1));
        const c = e.deletionPosition._getCombined(n.sourcePosition, n.targetPosition), u = new O(a, 1, c, 0), h = u.getMovedRangeStart().path.slice();
        h.push(0);
        const d = new w(u.targetPosition.root, h);
        l = l._getTransformedByMove(a, c, 1);
        const m = new O(l, e.howMany, d, 0);
        return o.push(u), o.push(m), o;
      }
    } else if (n.howMany == 1)
      return t.bWasUndone ? (n.sourcePosition = e.graveyardPosition.clone(), n.targetPosition = n.targetPosition._getTransformedByMergeOperation(e), [n]) : [new ie(0)];
  }
  const r = g._createFromPositionAndShift(n.sourcePosition, n.howMany)._getTransformedByMergeOperation(e);
  return n.sourcePosition = r.start, n.howMany = r.end.offset - r.start.offset, n.targetPosition = n.targetPosition._getTransformedByMergeOperation(e), [n];
});
V(pe, se, (n, e) => (n.position = n.position._getTransformedByInsertOperation(e), [n]));
V(pe, Z, (n, e) => n.position.isEqual(e.deletionPosition) ? (n.position = e.graveyardPosition.clone(), n.position.stickiness = "toNext", [n]) : (n.position = n.position._getTransformedByMergeOperation(e), [n]));
V(pe, O, (n, e) => (n.position = n.position._getTransformedByMoveOperation(e), [n]));
V(pe, pe, (n, e, t) => {
  if (n.position.isEqual(e.position))
    if (t.aIsStrong)
      n.oldName = e.newName;
    else
      return [new ie(0)];
  return [n];
});
V(pe, N, (n, e) => {
  const t = n.position.path, i = e.splitPosition.getParentPath();
  if (ce(t, i) == "same" && !e.graveyardPosition) {
    const s = new pe(n.position.getShiftedBy(1), n.oldName, n.newName, 0);
    return [n, s];
  }
  return n.position = n.position._getTransformedBySplitOperation(e), [n];
});
V(Ze, Ze, (n, e, t) => {
  if (n.root === e.root && n.key === e.key) {
    if (!t.aIsStrong || n.newValue === e.newValue)
      return [new ie(0)];
    n.oldValue = e.newValue;
  }
  return [n];
});
V($e, $e, (n, e, t) => n.rootName === e.rootName && n.isAdd === e.isAdd && !t.bWasUndone ? [new ie(0)] : [n]);
V(N, se, (n, e) => (n.splitPosition.hasSameParentAs(e.position) && n.splitPosition.offset < e.position.offset && (n.howMany += e.howMany), n.splitPosition = n.splitPosition._getTransformedByInsertOperation(e), n.insertionPosition = n.insertionPosition._getTransformedByInsertOperation(e), [n]));
V(N, Z, (n, e, t) => {
  if (!n.graveyardPosition && !t.bWasUndone && n.splitPosition.hasSameParentAs(e.sourcePosition)) {
    const i = e.graveyardPosition.path.slice();
    i.push(0);
    const s = new w(e.graveyardPosition.root, i), r = N.getInsertionPosition(new w(e.graveyardPosition.root, i)), o = new N(s, 0, r, null, 0);
    return n.splitPosition = n.splitPosition._getTransformedByMergeOperation(e), n.insertionPosition = N.getInsertionPosition(n.splitPosition), n.graveyardPosition = o.insertionPosition.clone(), n.graveyardPosition.stickiness = "toNext", [o, n];
  }
  return n.splitPosition.hasSameParentAs(e.deletionPosition) && !n.splitPosition.isAfter(e.deletionPosition) && n.howMany--, n.splitPosition.hasSameParentAs(e.targetPosition) && (n.howMany += e.howMany), n.splitPosition = n.splitPosition._getTransformedByMergeOperation(e), n.insertionPosition = N.getInsertionPosition(n.splitPosition), n.graveyardPosition && (n.graveyardPosition = n.graveyardPosition._getTransformedByMergeOperation(e)), [n];
});
V(N, O, (n, e, t) => {
  const i = g._createFromPositionAndShift(e.sourcePosition, e.howMany);
  if (n.graveyardPosition) {
    const r = i.start.isEqual(n.graveyardPosition) || i.containsPosition(n.graveyardPosition);
    if (!t.bWasUndone && r) {
      const o = n.splitPosition._getTransformedByMoveOperation(e), a = n.graveyardPosition._getTransformedByMoveOperation(e), l = a.path.slice();
      l.push(0);
      const c = new w(a.root, l);
      return [new O(o, n.howMany, c, 0)];
    }
    n.graveyardPosition = n.graveyardPosition._getTransformedByMoveOperation(e);
  }
  const s = n.splitPosition.isEqual(e.targetPosition);
  if (s && (t.baRelation == "insertAtSource" || t.abRelation == "splitBefore"))
    return n.howMany += e.howMany, n.splitPosition = n.splitPosition._getTransformedByDeletion(e.sourcePosition, e.howMany), n.insertionPosition = N.getInsertionPosition(n.splitPosition), [n];
  if (s && t.abRelation && t.abRelation.howMany) {
    const { howMany: r, offset: o } = t.abRelation;
    return n.howMany += r, n.splitPosition = n.splitPosition.getShiftedBy(o), [n];
  }
  if (n.splitPosition.hasSameParentAs(e.sourcePosition) && i.containsPosition(n.splitPosition)) {
    const r = e.howMany - (n.splitPosition.offset - e.sourcePosition.offset);
    return n.howMany -= r, n.splitPosition.hasSameParentAs(e.targetPosition) && n.splitPosition.offset < e.targetPosition.offset && (n.howMany += e.howMany), n.splitPosition = e.sourcePosition.clone(), n.insertionPosition = N.getInsertionPosition(n.splitPosition), [n];
  }
  return e.sourcePosition.isEqual(e.targetPosition) || (n.splitPosition.hasSameParentAs(e.sourcePosition) && n.splitPosition.offset <= e.sourcePosition.offset && (n.howMany -= e.howMany), n.splitPosition.hasSameParentAs(e.targetPosition) && n.splitPosition.offset < e.targetPosition.offset && (n.howMany += e.howMany)), n.splitPosition.stickiness = "toNone", n.splitPosition = n.splitPosition._getTransformedByMoveOperation(e), n.splitPosition.stickiness = "toNext", n.graveyardPosition ? n.insertionPosition = n.insertionPosition._getTransformedByMoveOperation(e) : n.insertionPosition = N.getInsertionPosition(n.splitPosition), [n];
});
V(N, N, (n, e, t) => {
  if (n.splitPosition.isEqual(e.splitPosition)) {
    if (!n.graveyardPosition && !e.graveyardPosition)
      return [new ie(0)];
    if (n.graveyardPosition && e.graveyardPosition && n.graveyardPosition.isEqual(e.graveyardPosition))
      return [new ie(0)];
    if (t.abRelation == "splitBefore")
      return n.howMany = 0, n.graveyardPosition = n.graveyardPosition._getTransformedBySplitOperation(e), [n];
  }
  if (n.graveyardPosition && e.graveyardPosition && n.graveyardPosition.isEqual(e.graveyardPosition)) {
    const i = n.splitPosition.root.rootName == "$graveyard", s = e.splitPosition.root.rootName == "$graveyard";
    if (s && !i || !(i && !s) && t.aIsStrong) {
      const l = [];
      return e.howMany && l.push(new O(e.moveTargetPosition, e.howMany, e.splitPosition, 0)), n.howMany && l.push(new O(n.splitPosition, n.howMany, n.moveTargetPosition, 0)), l;
    } else
      return [new ie(0)];
  }
  if (n.graveyardPosition && (n.graveyardPosition = n.graveyardPosition._getTransformedBySplitOperation(e)), n.splitPosition.isEqual(e.insertionPosition) && t.abRelation == "splitBefore")
    return n.howMany++, [n];
  if (e.splitPosition.isEqual(n.insertionPosition) && t.baRelation == "splitBefore") {
    const i = e.insertionPosition.path.slice();
    i.push(0);
    const s = new w(e.insertionPosition.root, i), r = new O(n.insertionPosition, 1, s, 0);
    return [n, r];
  }
  return n.splitPosition.hasSameParentAs(e.splitPosition) && n.splitPosition.offset < e.splitPosition.offset && (n.howMany -= e.howMany), n.splitPosition = n.splitPosition._getTransformedBySplitOperation(e), n.insertionPosition = N.getInsertionPosition(n.splitPosition), [n];
});
function Ga(n, e) {
  return n.targetPosition._getTransformedByDeletion(e.sourcePosition, e.howMany) === null;
}
function Qt(n, e) {
  const t = [];
  for (let i = 0; i < n.length; i++) {
    const s = n[i], r = new O(s.start, s.end.offset - s.start.offset, e, 0);
    t.push(r);
    for (let o = i + 1; o < n.length; o++)
      n[o] = n[o]._getTransformedByMove(r.sourcePosition, r.targetPosition, r.howMany)[0];
    e = e._getTransformedByMove(r.sourcePosition, r.targetPosition, r.howMany);
  }
  return t;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class re extends L(w) {
  /**
   * Creates a live position.
   *
   * @see module:engine/model/position~Position
   */
  constructor(e, t, i = "toNone") {
    if (super(e, t, i), !this.root.is("rootElement"))
      throw new f("model-liveposition-root-not-rootelement", e);
    v2.call(this);
  }
  /**
   * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance
   * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was
   * referring to it).
   */
  detach() {
    this.stopListening();
  }
  /**
   * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.
   */
  toPosition() {
    return new w(this.root, this.path.slice(), this.stickiness);
  }
  /**
   * Creates a `LivePosition` instance that is equal to position.
   */
  static fromPosition(e, t) {
    return new this(e.root, e.path.slice(), t || e.stickiness);
  }
}
re.prototype.is = function(n) {
  return n === "livePosition" || n === "model:livePosition" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n == "position" || n === "model:position";
};
function v2() {
  this.listenTo(this.root.document.model, "applyOperation", (n, e) => {
    const t = e[0];
    t.isDocumentOperation && y2.call(this, t);
  }, { priority: "low" });
}
function y2(n) {
  const e = this.getTransformedByOperation(n);
  if (!this.isEqual(e)) {
    const t = this.toPosition();
    this.path = e.path, this.root = e.root, this.fire("change", t);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ht {
  /**
   * Creates a batch instance.
   *
   * @see module:engine/model/model~Model#enqueueChange
   * @see module:engine/model/model~Model#change
   * @param type A set of flags that specify the type of the batch. Batch type can alter how some of the features work
   * when encountering a given `Batch` instance (for example, when a feature listens to applied operations).
   */
  constructor(e = {}) {
    typeof e == "string" && (e = e === "transparent" ? { isUndoable: !1 } : {}, G("batch-constructor-deprecated-string-type"));
    const { isUndoable: t = !0, isLocal: i = !0, isUndo: s = !1, isTyping: r = !1 } = e;
    this.operations = [], this.isUndoable = t, this.isLocal = i, this.isUndo = s, this.isTyping = r;
  }
  /**
   * The type of the batch.
   *
   * **This property has been deprecated and is always set to the `'default'` value.**
   *
   * It can be one of the following values:
   * * `'default'` &ndash; All "normal" batches. This is the most commonly used type.
   * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing
   * changes.
   *
   * @deprecated
   */
  get type() {
    return G("batch-type-deprecated"), "default";
  }
  /**
   * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.
   * If there are no operations in the batch or neither operation has the base version set, it returns `null`.
   */
  get baseVersion() {
    for (const e of this.operations)
      if (e.baseVersion !== null)
        return e.baseVersion;
    return null;
  }
  /**
   * Adds an operation to the batch instance.
   *
   * @param operation An operation to add.
   * @returns The added operation.
   */
  addOperation(e) {
    return e.batch = this, this.operations.push(e), e;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class k2 {
  /**
   * Creates a `Differ` instance.
   *
   * @param markerCollection Model's marker collection.
   */
  constructor(e) {
    this._changesInElement = /* @__PURE__ */ new Map(), this._elementSnapshots = /* @__PURE__ */ new Map(), this._changedMarkers = /* @__PURE__ */ new Map(), this._changedRoots = /* @__PURE__ */ new Map(), this._changeCount = 0, this._cachedChanges = null, this._cachedChangesWithGraveyard = null, this._refreshedItems = /* @__PURE__ */ new Set(), this._markerCollection = e;
  }
  /**
   * Informs whether there are any changes buffered in `Differ`.
   */
  get isEmpty() {
    return this._changesInElement.size == 0 && this._changedMarkers.size == 0 && this._changedRoots.size == 0;
  }
  /**
   * Buffers the given operation. An operation has to be buffered before it is executed.
   *
   * @param operationToBuffer An operation to buffer.
   */
  bufferOperation(e) {
    const t = e;
    switch (t.type) {
      case "insert": {
        if (this._isInInsertedElement(t.position.parent))
          return;
        this._markInsert(t.position.parent, t.position.offset, t.nodes.maxOffset);
        break;
      }
      case "addAttribute":
      case "removeAttribute":
      case "changeAttribute": {
        for (const i of t.range.getItems({ shallow: !0 }))
          this._isInInsertedElement(i.parent) || this._markAttribute(i);
        break;
      }
      case "remove":
      case "move":
      case "reinsert": {
        if (t.sourcePosition.isEqual(t.targetPosition) || t.sourcePosition.getShiftedBy(t.howMany).isEqual(t.targetPosition))
          return;
        const i = this._isInInsertedElement(t.sourcePosition.parent), s = this._isInInsertedElement(t.targetPosition.parent);
        i || this._markRemove(t.sourcePosition.parent, t.sourcePosition.offset, t.howMany), s || this._markInsert(t.targetPosition.parent, t.getMovedRangeStart().offset, t.howMany);
        break;
      }
      case "rename": {
        if (this._isInInsertedElement(t.position.parent))
          return;
        this._markRemove(t.position.parent, t.position.offset, 1), this._markInsert(t.position.parent, t.position.offset, 1);
        const i = g._createFromPositionAndShift(t.position, 1);
        for (const s of this._markerCollection.getMarkersIntersectingRange(i)) {
          const r = s.getData();
          this.bufferMarkerChange(s.name, r, r);
        }
        break;
      }
      case "split": {
        const i = t.splitPosition.parent;
        this._isInInsertedElement(i) || this._markRemove(i, t.splitPosition.offset, t.howMany), this._isInInsertedElement(t.insertionPosition.parent) || this._markInsert(t.insertionPosition.parent, t.insertionPosition.offset, 1), t.graveyardPosition && this._markRemove(t.graveyardPosition.parent, t.graveyardPosition.offset, 1);
        break;
      }
      case "merge": {
        const i = t.sourcePosition.parent;
        this._isInInsertedElement(i.parent) || this._markRemove(i.parent, i.startOffset, 1);
        const s = t.graveyardPosition.parent;
        this._markInsert(s, t.graveyardPosition.offset, 1);
        const r = t.targetPosition.parent;
        this._isInInsertedElement(r) || this._markInsert(r, t.targetPosition.offset, i.maxOffset);
        break;
      }
      case "detachRoot":
      case "addRoot": {
        this._bufferRootStateChange(t.rootName, t.isAdd);
        break;
      }
      case "addRootAttribute":
      case "removeRootAttribute":
      case "changeRootAttribute": {
        const i = t.root.rootName;
        this._bufferRootAttributeChange(i, t.key, t.oldValue, t.newValue);
        break;
      }
    }
    this._cachedChanges = null;
  }
  /**
   * Buffers a marker change.
   *
   * @param markerName The name of the marker that changed.
   * @param oldMarkerData Marker data before the change.
   * @param newMarkerData Marker data after the change.
   */
  bufferMarkerChange(e, t, i) {
    const s = this._changedMarkers.get(e);
    s ? (s.newMarkerData = i, s.oldMarkerData.range == null && i.range == null && this._changedMarkers.delete(e)) : this._changedMarkers.set(e, {
      newMarkerData: i,
      oldMarkerData: t
    });
  }
  /**
   * Returns all markers that should be removed as a result of buffered changes.
   *
   * @returns Markers to remove. Each array item is an object containing the `name` and `range` properties.
   */
  getMarkersToRemove() {
    const e = [];
    for (const [t, i] of this._changedMarkers)
      i.oldMarkerData.range != null && e.push({ name: t, range: i.oldMarkerData.range });
    return e;
  }
  /**
   * Returns all markers which should be added as a result of buffered changes.
   *
   * @returns Markers to add. Each array item is an object containing the `name` and `range` properties.
   */
  getMarkersToAdd() {
    const e = [];
    for (const [t, i] of this._changedMarkers)
      i.newMarkerData.range != null && e.push({ name: t, range: i.newMarkerData.range });
    return e;
  }
  /**
   * Returns all markers which changed.
   */
  getChangedMarkers() {
    return Array.from(this._changedMarkers).map(([e, t]) => ({
      name: e,
      data: {
        oldRange: t.oldMarkerData.range,
        newRange: t.newMarkerData.range
      }
    }));
  }
  /**
   * Checks whether some of the buffered changes affect the editor data.
   *
   * Types of changes which affect the editor data:
   *
   * * model structure changes,
   * * attribute changes,
   * * a root is added or detached,
   * * changes of markers which were defined as `affectsData`,
   * * changes of markers' `affectsData` property.
   */
  hasDataChanges() {
    if (this._changesInElement.size > 0 || this._changedRoots.size > 0)
      return !0;
    for (const { newMarkerData: e, oldMarkerData: t } of this._changedMarkers.values()) {
      if (e.affectsData !== t.affectsData)
        return !0;
      if (e.affectsData) {
        const i = e.range && !t.range, s = !e.range && t.range, r = e.range && t.range && !e.range.isEqual(t.range);
        if (i || s || r)
          return !0;
      }
    }
    return !1;
  }
  /**
   * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}
   * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.
   *
   * The diff set is returned as an array of {@link module:engine/model/differ~DiffItem diff items}, each describing a change done
   * on the model. The items are sorted by the position on which the change happened. If a position
   * {@link module:engine/model/position~Position#isBefore is before} another one, it will be on an earlier index in the diff set.
   *
   * **Note**: Elements inside inserted element will not have a separate diff item, only the top most element change will be reported.
   *
   * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the
   * previous {@link #getChanges} call, the next call will return the cached value.
   *
   * @param options Additional options.
   * @param options.includeChangesInGraveyard If set to `true`, also changes that happened
   * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.
   * @returns Diff between the old and the new model tree state.
   */
  getChanges(e = {}) {
    if (this._cachedChanges)
      return e.includeChangesInGraveyard ? this._cachedChangesWithGraveyard.slice() : this._cachedChanges.slice();
    let t = [];
    for (const i of this._changesInElement.keys()) {
      const s = this._changesInElement.get(i).sort((u, h) => u.offset === h.offset ? u.type != h.type ? u.type == "remove" ? -1 : 1 : 0 : u.offset < h.offset ? -1 : 1), r = this._elementSnapshots.get(i), o = Ka(i.getChildren()), a = C2(r.length, s);
      let l = 0, c = 0;
      for (const u of a)
        if (u === "i")
          t.push(this._getInsertDiff(i, l, o[l])), l++;
        else if (u === "r")
          t.push(this._getRemoveDiff(i, l, r[c])), c++;
        else if (u === "a") {
          const h = o[l].attributes, d = r[c].attributes;
          let m;
          if (o[l].name == "$text")
            m = new g(w._createAt(i, l), w._createAt(i, l + 1));
          else {
            const p = i.offsetToIndex(l);
            m = new g(w._createAt(i, l), w._createAt(i.getChild(p), 0));
          }
          t.push(...this._getAttributesDiff(m, d, h)), l++, c++;
        } else
          l++, c++;
    }
    t.sort((i, s) => i.position.root != s.position.root ? i.position.root.rootName < s.position.root.rootName ? -1 : 1 : i.position.isEqual(s.position) ? i.changeCount - s.changeCount : i.position.isBefore(s.position) ? -1 : 1);
    for (let i = 1, s = 0; i < t.length; i++) {
      const r = t[s], o = t[i], a = r.type == "remove" && o.type == "remove" && r.name == "$text" && o.name == "$text" && r.position.isEqual(o.position), l = r.type == "insert" && o.type == "insert" && r.name == "$text" && o.name == "$text" && r.position.parent == o.position.parent && r.position.offset + r.length == o.position.offset, c = r.type == "attribute" && o.type == "attribute" && r.position.parent == o.position.parent && r.range.isFlat && o.range.isFlat && r.position.offset + r.length == o.position.offset && r.attributeKey == o.attributeKey && r.attributeOldValue == o.attributeOldValue && r.attributeNewValue == o.attributeNewValue;
      a || l || c ? (r.length++, c && (r.range.end = r.range.end.getShiftedBy(1)), t[i] = null) : s = i;
    }
    t = t.filter((i) => i);
    for (const i of t)
      delete i.changeCount, i.type == "attribute" && (delete i.position, delete i.length);
    return this._changeCount = 0, this._cachedChangesWithGraveyard = t, this._cachedChanges = t.filter(A2), e.includeChangesInGraveyard ? this._cachedChangesWithGraveyard.slice() : this._cachedChanges.slice();
  }
  /**
   * Returns all roots that have changed (either were attached, or detached, or their attributes changed).
   *
   * @returns Diff between the old and the new roots state.
   */
  getChangedRoots() {
    return Array.from(this._changedRoots.values()).map((e) => {
      const t = { ...e };
      return t.state !== void 0 && delete t.attributes, t;
    });
  }
  /**
   * Returns a set of model items that were marked to get refreshed.
   */
  getRefreshedItems() {
    return new Set(this._refreshedItems);
  }
  /**
   * Resets `Differ`. Removes all buffered changes.
   */
  reset() {
    this._changesInElement.clear(), this._elementSnapshots.clear(), this._changedMarkers.clear(), this._changedRoots.clear(), this._refreshedItems = /* @__PURE__ */ new Set(), this._cachedChanges = null;
  }
  /**
   * Buffers the root state change after the root was attached or detached
   */
  _bufferRootStateChange(e, t) {
    if (!this._changedRoots.has(e)) {
      this._changedRoots.set(e, { name: e, state: t ? "attached" : "detached" });
      return;
    }
    const i = this._changedRoots.get(e);
    i.state !== void 0 ? (delete i.state, i.attributes === void 0 && this._changedRoots.delete(e)) : i.state = t ? "attached" : "detached";
  }
  /**
   * Buffers a root attribute change.
   */
  _bufferRootAttributeChange(e, t, i, s) {
    const r = this._changedRoots.get(e) || { name: e }, o = r.attributes || {};
    if (o[t]) {
      const a = o[t];
      s === a.oldValue ? delete o[t] : a.newValue = s;
    } else
      o[t] = { oldValue: i, newValue: s };
    Object.entries(o).length === 0 ? (delete r.attributes, r.state === void 0 && this._changedRoots.delete(e)) : (r.attributes = o, this._changedRoots.set(e, r));
  }
  /**
   * Marks the given `item` in differ to be "refreshed". It means that the item will be marked as removed and inserted
   * in the differ changes set, so it will be effectively re-converted when the differ changes are handled by a dispatcher.
   *
   * @internal
   * @param item Item to refresh.
   */
  _refreshItem(e) {
    if (this._isInInsertedElement(e.parent))
      return;
    this._markRemove(e.parent, e.startOffset, e.offsetSize), this._markInsert(e.parent, e.startOffset, e.offsetSize), this._refreshedItems.add(e);
    const t = g._createOn(e);
    for (const i of this._markerCollection.getMarkersIntersectingRange(t)) {
      const s = i.getData();
      this.bufferMarkerChange(i.name, s, s);
    }
    this._cachedChanges = null;
  }
  /**
   * Saves and handles an insert change.
   */
  _markInsert(e, t, i) {
    const s = { type: "insert", offset: t, howMany: i, count: this._changeCount++ };
    this._markChange(e, s);
  }
  /**
   * Saves and handles a remove change.
   */
  _markRemove(e, t, i) {
    const s = { type: "remove", offset: t, howMany: i, count: this._changeCount++ };
    this._markChange(e, s), this._removeAllNestedChanges(e, t, i);
  }
  /**
   * Saves and handles an attribute change.
   */
  _markAttribute(e) {
    const t = { type: "attribute", offset: e.startOffset, howMany: e.offsetSize, count: this._changeCount++ };
    this._markChange(e.parent, t);
  }
  /**
   * Saves and handles a model change.
   */
  _markChange(e, t) {
    this._makeSnapshot(e);
    const i = this._getChangesForElement(e);
    this._handleChange(t, i), i.push(t);
    for (let s = 0; s < i.length; s++)
      i[s].howMany < 1 && (i.splice(s, 1), s--);
  }
  /**
   * Gets an array of changes that have already been saved for a given element.
   */
  _getChangesForElement(e) {
    let t;
    return this._changesInElement.has(e) ? t = this._changesInElement.get(e) : (t = [], this._changesInElement.set(e, t)), t;
  }
  /**
   * Saves a children snapshot for a given element.
   */
  _makeSnapshot(e) {
    this._elementSnapshots.has(e) || this._elementSnapshots.set(e, Ka(e.getChildren()));
  }
  /**
   * For a given newly saved change, compares it with a change already done on the element and modifies the incoming
   * change and/or the old change.
   *
   * @param inc Incoming (new) change.
   * @param changes An array containing all the changes done on that element.
   */
  _handleChange(e, t) {
    e.nodesToHandle = e.howMany;
    for (const i of t) {
      const s = e.offset + e.howMany, r = i.offset + i.howMany;
      if (e.type == "insert" && (i.type == "insert" && (e.offset <= i.offset ? i.offset += e.howMany : e.offset < r && (i.howMany += e.nodesToHandle, e.nodesToHandle = 0)), i.type == "remove" && e.offset < i.offset && (i.offset += e.howMany), i.type == "attribute")) {
        if (e.offset <= i.offset)
          i.offset += e.howMany;
        else if (e.offset < r) {
          const o = i.howMany;
          i.howMany = e.offset - i.offset, t.unshift({
            type: "attribute",
            offset: s,
            howMany: o - i.howMany,
            count: this._changeCount++
          });
        }
      }
      if (e.type == "remove") {
        if (i.type == "insert") {
          if (s <= i.offset)
            i.offset -= e.howMany;
          else if (s <= r)
            if (e.offset < i.offset) {
              const o = s - i.offset;
              i.offset = e.offset, i.howMany -= o, e.nodesToHandle -= o;
            } else
              i.howMany -= e.nodesToHandle, e.nodesToHandle = 0;
          else if (e.offset <= i.offset)
            e.nodesToHandle -= i.howMany, i.howMany = 0;
          else if (e.offset < r) {
            const o = r - e.offset;
            i.howMany -= o, e.nodesToHandle -= o;
          }
        }
        if (i.type == "remove" && (s <= i.offset ? i.offset -= e.howMany : e.offset < i.offset && (e.nodesToHandle += i.howMany, i.howMany = 0)), i.type == "attribute") {
          if (s <= i.offset)
            i.offset -= e.howMany;
          else if (e.offset < i.offset) {
            const o = s - i.offset;
            i.offset = e.offset, i.howMany -= o;
          } else if (e.offset < r)
            if (s <= r) {
              const o = i.howMany;
              i.howMany = e.offset - i.offset;
              const a = o - i.howMany - e.nodesToHandle;
              t.unshift({
                type: "attribute",
                offset: e.offset,
                howMany: a,
                count: this._changeCount++
              });
            } else
              i.howMany -= r - e.offset;
        }
      }
      if (e.type == "attribute") {
        if (i.type == "insert")
          if (e.offset < i.offset && s > i.offset) {
            if (s > r) {
              const o = {
                type: "attribute",
                offset: r,
                howMany: s - r,
                count: this._changeCount++
              };
              this._handleChange(o, t), t.push(o);
            }
            e.nodesToHandle = i.offset - e.offset, e.howMany = e.nodesToHandle;
          } else
            e.offset >= i.offset && e.offset < r && (s > r ? (e.nodesToHandle = s - r, e.offset = r) : e.nodesToHandle = 0);
        if (i.type == "remove" && e.offset < i.offset && s > i.offset) {
          const o = {
            type: "attribute",
            offset: i.offset,
            howMany: s - i.offset,
            count: this._changeCount++
          };
          this._handleChange(o, t), t.push(o), e.nodesToHandle = i.offset - e.offset, e.howMany = e.nodesToHandle;
        }
        i.type == "attribute" && (e.offset >= i.offset && s <= r ? (e.nodesToHandle = 0, e.howMany = 0, e.offset = 0) : e.offset <= i.offset && s >= r && (i.howMany = 0));
      }
    }
    e.howMany = e.nodesToHandle, delete e.nodesToHandle;
  }
  /**
   * Returns an object with a single insert change description.
   *
   * @param parent The element in which the change happened.
   * @param offset The offset at which change happened.
   * @param elementSnapshot The snapshot of the removed element a character.
   * @returns The diff item.
   */
  _getInsertDiff(e, t, i) {
    return {
      type: "insert",
      position: w._createAt(e, t),
      name: i.name,
      attributes: new Map(i.attributes),
      length: 1,
      changeCount: this._changeCount++
    };
  }
  /**
   * Returns an object with a single remove change description.
   *
   * @param parent The element in which change happened.
   * @param offset The offset at which change happened.
   * @param elementSnapshot The snapshot of the removed element a character.
   * @returns The diff item.
   */
  _getRemoveDiff(e, t, i) {
    return {
      type: "remove",
      position: w._createAt(e, t),
      name: i.name,
      attributes: new Map(i.attributes),
      length: 1,
      changeCount: this._changeCount++
    };
  }
  /**
   * Returns an array of objects where each one is a single attribute change description.
   *
   * @param range The range where the change happened.
   * @param oldAttributes A map, map iterator or compatible object that contains attributes before the change.
   * @param newAttributes A map, map iterator or compatible object that contains attributes after the change.
   * @returns An array containing one or more diff items.
   */
  _getAttributesDiff(e, t, i) {
    const s = [];
    i = new Map(i);
    for (const [r, o] of t) {
      const a = i.has(r) ? i.get(r) : null;
      a !== o && s.push({
        type: "attribute",
        position: e.start,
        range: e.clone(),
        length: 1,
        attributeKey: r,
        attributeOldValue: o,
        attributeNewValue: a,
        changeCount: this._changeCount++
      }), i.delete(r);
    }
    for (const [r, o] of i)
      s.push({
        type: "attribute",
        position: e.start,
        range: e.clone(),
        length: 1,
        attributeKey: r,
        attributeOldValue: null,
        attributeNewValue: o,
        changeCount: this._changeCount++
      });
    return s;
  }
  /**
   * Checks whether given element or any of its parents is an element that is buffered as an inserted element.
   */
  _isInInsertedElement(e) {
    const t = e.parent;
    if (!t)
      return !1;
    const i = this._changesInElement.get(t), s = e.startOffset;
    if (i) {
      for (const r of i)
        if (r.type == "insert" && s >= r.offset && s < r.offset + r.howMany)
          return !0;
    }
    return this._isInInsertedElement(t);
  }
  /**
   * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`
   * and `howMany`.
   */
  _removeAllNestedChanges(e, t, i) {
    const s = new g(w._createAt(e, t), w._createAt(e, t + i));
    for (const r of s.getItems({ shallow: !0 }))
      r.is("element") && (this._elementSnapshots.delete(r), this._changesInElement.delete(r), this._removeAllNestedChanges(r, 0, r.maxOffset));
  }
}
function Ka(n) {
  const e = [];
  for (const t of n)
    if (t.is("$text"))
      for (let i = 0; i < t.data.length; i++)
        e.push({
          name: "$text",
          attributes: new Map(t.getAttributes())
        });
    else
      e.push({
        name: t.name,
        attributes: new Map(t.getAttributes())
      });
  return e;
}
function C2(n, e) {
  const t = [];
  let i = 0, s = 0;
  for (const r of e) {
    if (r.offset > i) {
      for (let o = 0; o < r.offset - i; o++)
        t.push("e");
      s += r.offset - i;
    }
    if (r.type == "insert") {
      for (let o = 0; o < r.howMany; o++)
        t.push("i");
      i = r.offset + r.howMany;
    } else if (r.type == "remove") {
      for (let o = 0; o < r.howMany; o++)
        t.push("r");
      i = r.offset, s += r.howMany;
    } else
      t.push(..."a".repeat(r.howMany).split("")), i = r.offset + r.howMany, s += r.howMany;
  }
  if (s < n)
    for (let r = 0; r < n - s - i; r++)
      t.push("e");
  return t;
}
function A2(n) {
  const e = "position" in n && n.position.root.rootName == "$graveyard", t = "range" in n && n.range.root.rootName == "$graveyard";
  return !e && !t;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class E2 {
  constructor() {
    this._operations = [], this._undoPairs = /* @__PURE__ */ new Map(), this._undoneOperations = /* @__PURE__ */ new Set(), this._baseVersionToOperationIndex = /* @__PURE__ */ new Map(), this._version = 0, this._gaps = /* @__PURE__ */ new Map();
  }
  /**
   * The version of the last operation in the history.
   *
   * The history version is incremented automatically when a new operation is added to the history.
   * Setting the version manually should be done only in rare circumstances when a gap is planned
   * between history versions. When doing so, a gap will be created and the history will accept adding
   * an operation with base version equal to the new history version.
   */
  get version() {
    return this._version;
  }
  set version(e) {
    this._operations.length && e > this._version + 1 && this._gaps.set(this._version, e), this._version = e;
  }
  /**
   * The last history operation.
   */
  get lastOperation() {
    return this._operations[this._operations.length - 1];
  }
  /**
   * Adds an operation to the history and increments the history version.
   *
   * The operation's base version should be equal to the history version. Otherwise an error is thrown.
   */
  addOperation(e) {
    if (e.baseVersion !== this.version)
      throw new f("model-document-history-addoperation-incorrect-version", this, {
        operation: e,
        historyVersion: this.version
      });
    this._operations.push(e), this._version++, this._baseVersionToOperationIndex.set(e.baseVersion, this._operations.length - 1);
  }
  /**
   * Returns operations from the given range of operation base versions that were added to the history.
   *
   * Note that there may be gaps in operations base versions.
   *
   * @param fromBaseVersion Base version from which operations should be returned (inclusive).
   * @param toBaseVersion Base version up to which operations should be returned (exclusive).
   * @returns History operations for the given range, in chronological order.
   */
  getOperations(e, t = this.version) {
    if (!this._operations.length)
      return [];
    const i = this._operations[0];
    e === void 0 && (e = i.baseVersion);
    let s = t - 1;
    for (const [a, l] of this._gaps)
      e > a && e < l && (e = l), s > a && s < l && (s = a - 1);
    if (s < i.baseVersion || e > this.lastOperation.baseVersion)
      return [];
    let r = this._baseVersionToOperationIndex.get(e);
    r === void 0 && (r = 0);
    let o = this._baseVersionToOperationIndex.get(s);
    return o === void 0 && (o = this._operations.length - 1), this._operations.slice(
      r,
      // The `toIndex` should be included in the returned operations, so add `1`.
      o + 1
    );
  }
  /**
   * Returns operation from the history that bases on given `baseVersion`.
   *
   * @param baseVersion Base version of the operation to get.
   * @returns Operation with given base version or `undefined` if there is no such operation in history.
   */
  getOperation(e) {
    const t = this._baseVersionToOperationIndex.get(e);
    if (t !== void 0)
      return this._operations[t];
  }
  /**
   * Marks in history that one operation is an operation that is undoing the other operation. By marking operation this way,
   * history is keeping more context information about operations, which helps in operational transformation.
   *
   * @param undoneOperation Operation which is undone by `undoingOperation`.
   * @param undoingOperation Operation which undoes `undoneOperation`.
   */
  setOperationAsUndone(e, t) {
    this._undoPairs.set(t, e), this._undoneOperations.add(e);
  }
  /**
   * Checks whether given `operation` is undoing any other operation.
   *
   * @param operation Operation to check.
   * @returns `true` if given `operation` is undoing any other operation, `false` otherwise.
   */
  isUndoingOperation(e) {
    return this._undoPairs.has(e);
  }
  /**
   * Checks whether given `operation` has been undone by any other operation.
   *
   * @param operation Operation to check.
   * @returns `true` if given `operation` has been undone any other operation, `false` otherwise.
   */
  isUndoneOperation(e) {
    return this._undoneOperations.has(e);
  }
  /**
   * For given `undoingOperation`, returns the operation which has been undone by it.
   *
   * @returns Operation that has been undone by given `undoingOperation` or `undefined`
   * if given `undoingOperation` is not undoing any other operation.
   */
  getUndoneOperation(e) {
    return this._undoPairs.get(e);
  }
  /**
   * Resets the history of operations.
   */
  reset() {
    this._version = 0, this._undoPairs = /* @__PURE__ */ new Map(), this._operations = [], this._undoneOperations = /* @__PURE__ */ new Set(), this._gaps = /* @__PURE__ */ new Map(), this._baseVersionToOperationIndex = /* @__PURE__ */ new Map();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class En extends F {
  /**
   * Creates root element.
   *
   * @param document Document that is an owner of this root.
   * @param name Node name.
   * @param rootName Unique root name used to identify this root element by {@link module:engine/model/document~Document}.
   */
  constructor(e, t, i = "main") {
    super(t), this._isAttached = !0, this._document = e, this.rootName = i;
  }
  /**
   * {@link module:engine/model/document~Document Document} that owns this root element.
   */
  get document() {
    return this._document;
  }
  /**
   * Informs if the root element is currently attached to the document, or not.
   *
   * A detached root is equivalent to being removed and cannot contain any children or markers.
   *
   * By default, a newly added root is attached. It can be detached using
   * {@link module:engine/model/writer~Writer#detachRoot `Writer#detachRoot`}. A detached root can be re-attached again using
   * {@link module:engine/model/writer~Writer#addRoot `Writer#addRoot`}.
   */
  isAttached() {
    return this._isAttached;
  }
  /**
   * Converts `RootElement` instance to `string` containing its name.
   *
   * @returns `RootElement` instance converted to `string`.
   */
  toJSON() {
    return this.rootName;
  }
}
En.prototype.is = function(n, e) {
  return e ? e === this.name && (n === "rootElement" || n === "model:rootElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "element" || n === "model:element") : n === "rootElement" || n === "model:rootElement" || // From super.is(). This is highly utilised method and cannot call super. See ckeditor/ckeditor5#6529.
  n === "element" || n === "model:element" || n === "node" || n === "model:node";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const gs = "$graveyard";
class T2 extends L() {
  /**
   * Creates an empty document instance with no {@link #roots} (other than
   * the {@link #graveyard graveyard root}).
   */
  constructor(e) {
    super(), this.model = e, this.history = new E2(), this.selection = new Ve(this), this.roots = new Ue({ idProperty: "rootName" }), this.differ = new k2(e.markers), this.isReadOnly = !1, this._postFixers = /* @__PURE__ */ new Set(), this._hasSelectionChangedFromTheLastChangeBlock = !1, this.createRoot("$root", gs), this.listenTo(e, "applyOperation", (t, i) => {
      const s = i[0];
      s.isDocumentOperation && this.differ.bufferOperation(s);
    }, { priority: "high" }), this.listenTo(e, "applyOperation", (t, i) => {
      const s = i[0];
      s.isDocumentOperation && this.history.addOperation(s);
    }, { priority: "low" }), this.listenTo(this.selection, "change", () => {
      this._hasSelectionChangedFromTheLastChangeBlock = !0;
    }), this.listenTo(e.markers, "update", (t, i, s, r, o) => {
      const a = { ...i.getData(), range: r };
      this.differ.bufferMarkerChange(i.name, o, a), s === null && i.on("change", (l, c) => {
        const u = i.getData();
        this.differ.bufferMarkerChange(i.name, { ...u, range: c }, u);
      });
    }), this.registerPostFixer((t) => {
      let i = !1;
      for (const s of this.roots)
        !s.isAttached() && !s.isEmpty && (t.remove(t.createRangeIn(s)), i = !0);
      for (const s of this.model.markers)
        s.getRange().root.isAttached() || (t.removeMarker(s), i = !0);
      return i;
    });
  }
  /**
   * The document version. Every applied operation increases the version number. It is used to
   * ensure that operations are applied on a proper document version.
   *
   * This property is equal to {@link module:engine/model/history~History#version `model.Document#history#version`}.
   *
   * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,
   * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyoperation-wrong-version} error is thrown.
   */
  get version() {
    return this.history.version;
  }
  set version(e) {
    this.history.version = e;
  }
  /**
   * The graveyard tree root. A document always has a graveyard root that stores removed nodes.
   */
  get graveyard() {
    return this.getRoot(gs);
  }
  /**
   * Creates a new root.
   *
   * **Note:** do not use this method after the editor has been initialized! If you want to dynamically add a root, use
   * {@link module:engine/model/writer~Writer#addRoot `model.Writer#addRoot`} instead.
   *
   * @param elementName The element name. Defaults to `'$root'` which also has some basic schema defined
   * (e.g. `$block` elements are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.
   * @param rootName A unique root name.
   * @returns The created root.
   */
  createRoot(e = "$root", t = "main") {
    if (this.roots.get(t))
      throw new f("model-document-createroot-name-exists", this, { name: t });
    const i = new En(this, e, t);
    return this.roots.add(i), i;
  }
  /**
   * Removes all event listeners set by the document instance.
   */
  destroy() {
    this.selection.destroy(), this.stopListening();
  }
  /**
   * Returns a root by its name.
   *
   * Detached roots are returned by this method. This is to be able to operate on the detached root (for example, to be able to create
   * a position inside such a root for undo feature purposes).
   *
   * @param name The root name of the root to return.
   * @returns The root registered under a given name or `null` when there is no root with the given name.
   */
  getRoot(e = "main") {
    return this.roots.get(e);
  }
  /**
   * Returns an array with names of all roots added to the document (except the {@link #graveyard graveyard root}).
   *
   * Detached roots **are not** returned by this method by default. This is to make sure that all features or algorithms that operate
   * on the document data know which roots are still a part of the document and should be processed.
   *
   * @param includeDetached Specified whether detached roots should be returned as well.
   * @returns Roots names.
   */
  getRootNames(e = !1) {
    return Array.from(this.roots).filter((t) => t.rootName != gs && (e || t.isAttached())).map((t) => t.rootName);
  }
  /**
   * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features
   * will operate on a correct model state.
   *
   * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after
   * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but
   * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made
   * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should
   * not be fixed in the new document tree state.
   *
   * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the
   * executed changes block. Thanks to that, all changes done by the callback will be added to the same
   * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent
   * for the user.
   *
   * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the
   * callback should add an empty paragraph so that the editor is never empty:
   *
   * ```ts
   * document.registerPostFixer( writer => {
   * 	const changes = document.differ.getChanges();
   *
   * 	// Check if the changes lead to an empty root in the editor.
   * 	for ( const entry of changes ) {
   * 		if ( entry.type == 'remove' && entry.position.root.isEmpty ) {
   * 			writer.insertElement( 'paragraph', entry.position.root, 0 );
   *
   * 			// It is fine to return early, even if multiple roots would need to be fixed.
   * 			// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.
   * 			return true;
   * 		}
   * 	}
   *
   * 	return false;
   * } );
   * ```
   */
  registerPostFixer(e) {
    this._postFixers.add(e);
  }
  /**
   * A custom `toJSON()` method to solve child-parent circular dependencies.
   *
   * @returns A clone of this object with the document property changed to a string.
   */
  toJSON() {
    const e = Tu(this);
    return e.selection = "[engine.model.DocumentSelection]", e.model = "[engine.model.Model]", e;
  }
  /**
   * Check if there were any changes done on document, and if so, call post-fixers,
   * fire `change` event for features and conversion and then reset the differ.
   * Fire `change:data` event when at least one operation or buffered marker changes the data.
   *
   * @internal
   * @fires change
   * @fires change:data
   * @param writer The writer on which post-fixers will be called.
   */
  _handleChangeBlock(e) {
    this._hasDocumentChangedFromTheLastChangeBlock() && (this._callPostFixers(e), this.selection.refresh(), this.differ.hasDataChanges() ? this.fire("change:data", e.batch) : this.fire("change", e.batch), this.selection.refresh(), this.differ.reset()), this._hasSelectionChangedFromTheLastChangeBlock = !1;
  }
  /**
   * Returns whether there is a buffered change or if the selection has changed from the last
   * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block}
   * or {@link module:engine/model/model~Model#change `change()` block}.
   *
   * @returns Returns `true` if document has changed from the last `change()` or `enqueueChange()` block.
   */
  _hasDocumentChangedFromTheLastChangeBlock() {
    return !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock;
  }
  /**
   * Returns the default root for this document which is either the first root that was added to the document using
   * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.
   *
   * @returns The default root for this document.
   */
  _getDefaultRoot() {
    for (const e of this.roots)
      if (e !== this.graveyard)
        return e;
    return this.graveyard;
  }
  /**
   * Returns the default range for this selection. The default range is a collapsed range that starts and ends
   * at the beginning of this selection's document {@link #_getDefaultRoot default root}.
   *
   * @internal
   */
  _getDefaultRange() {
    const e = this._getDefaultRoot(), t = this.model, i = t.schema, s = t.createPositionFromPath(e, [0]);
    return i.getNearestSelectionRange(s) || t.createRange(s);
  }
  /**
   * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for
   * the {@link #selection document's selection}.
   *
   * @internal
   * @param range A range to check.
   * @returns `true` if `range` is valid, `false` otherwise.
   */
  _validateSelectionRange(e) {
    return Ja(e.start) && Ja(e.end);
  }
  /**
   * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.
   *
   * @param writer The writer on which post-fixer callbacks will be called.
   */
  _callPostFixers(e) {
    let t = !1;
    do
      for (const i of this._postFixers)
        if (this.selection.refresh(), t = i(e), t)
          break;
    while (t);
  }
}
function Ja(n) {
  const e = n.textNode;
  if (e) {
    const t = e.data, i = n.offset - e.startOffset;
    return !Hr(t, i) && !Wr(t, i);
  }
  return !0;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class P2 extends L() {
  constructor() {
    super(...arguments), this._markers = /* @__PURE__ */ new Map();
  }
  /**
   * Iterable interface.
   *
   * Iterates over all {@link ~Marker markers} added to the collection.
   */
  [Symbol.iterator]() {
    return this._markers.values();
  }
  /**
   * Checks if given {@link ~Marker marker} or marker name is in the collection.
   *
   * @param markerOrName Name of marker or marker instance to check.
   * @returns `true` if marker is in the collection, `false` otherwise.
   */
  has(e) {
    const t = e instanceof Jt ? e.name : e;
    return this._markers.has(t);
  }
  /**
   * Returns {@link ~Marker marker} with given `markerName`.
   *
   * @param markerName Name of marker to get.
   * @returns Marker with given name or `null` if such marker was
   * not added to the collection.
   */
  get(e) {
    return this._markers.get(e) || null;
  }
  /**
   * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given
   * {@link module:engine/model/range~Range range}.
   *
   * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in
   * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired
   * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}
   * flag has changed.
   *
   * @internal
   * @fires update
   * @param markerOrName Name of marker to set or marker instance to update.
   * @param range Marker range.
   * @param managedUsingOperations Specifies whether the marker is managed using operations.
   * @param affectsData Specifies whether the marker affects the data produced by the data pipeline
   * (is persisted in the editor's data).
   * @returns `Marker` instance which was added or updated.
   */
  _set(e, t, i = !1, s = !1) {
    const r = e instanceof Jt ? e.name : e;
    if (r.includes(","))
      throw new f("markercollection-incorrect-marker-name", this);
    const o = this._markers.get(r);
    if (o) {
      const c = o.getData(), u = o.getRange();
      let h = !1;
      return u.isEqual(t) || (o._attachLiveRange(We.fromRange(t)), h = !0), i != o.managedUsingOperations && (o._managedUsingOperations = i, h = !0), typeof s == "boolean" && s != o.affectsData && (o._affectsData = s, h = !0), h && this.fire(`update:${r}`, o, u, t, c), o;
    }
    const a = We.fromRange(t), l = new Jt(r, a, i, s);
    return this._markers.set(r, l), this.fire(`update:${r}`, l, null, t, { ...l.getData(), range: null }), l;
  }
  /**
   * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.
   *
   * @internal
   * @fires update
   * @param markerOrName Marker or name of a marker to remove.
   * @returns `true` if marker was found and removed, `false` otherwise.
   */
  _remove(e) {
    const t = e instanceof Jt ? e.name : e, i = this._markers.get(t);
    return i ? (this._markers.delete(t), this.fire(`update:${t}`, i, i.getRange(), null, i.getData()), this._destroyMarker(i), !0) : !1;
  }
  /**
   * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}
   * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast
   * conversion} for the marker.
   *
   * @internal
   * @fires update
   * @param markerOrName Marker or name of a marker to refresh.
   */
  _refresh(e) {
    const t = e instanceof Jt ? e.name : e, i = this._markers.get(t);
    if (!i)
      throw new f("markercollection-refresh-marker-not-exists", this);
    const s = i.getRange();
    this.fire(`update:${t}`, i, s, s, i.getData());
  }
  /**
   * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.
   */
  *getMarkersAtPosition(e) {
    for (const t of this)
      t.getRange().containsPosition(e) && (yield t);
  }
  /**
   * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.
   */
  *getMarkersIntersectingRange(e) {
    for (const t of this)
      t.getRange().getIntersection(e) !== null && (yield t);
  }
  /**
   * Destroys marker collection and all markers inside it.
   */
  destroy() {
    for (const e of this._markers.values())
      this._destroyMarker(e);
    this._markers = null, this.stopListening();
  }
  /**
   * Iterates over all markers that starts with given `prefix`.
   *
   * ```ts
   * const markerFooA = markersCollection.set( 'foo:a', rangeFooA );
   * const markerFooB = markersCollection.set( 'foo:b', rangeFooB );
   * const markerBarA = markersCollection.set( 'bar:a', rangeBarA );
   * const markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );
   * Array.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]
   * Array.from( markersCollection.getMarkersGroup( 'a' ) ); // []
   * ```
   */
  *getMarkersGroup(e) {
    for (const t of this._markers.values())
      t.name.startsWith(e + ":") && (yield t);
  }
  /**
   * Destroys the marker.
   */
  _destroyMarker(e) {
    e.stopListening(), e._detachLiveRange();
  }
}
class Jt extends L(gt) {
  /**
   * Creates a marker instance.
   *
   * @param name Marker name.
   * @param liveRange Range marked by the marker.
   * @param managedUsingOperations Specifies whether the marker is managed using operations.
   * @param affectsData Specifies whether the marker affects the data produced by the data pipeline (is persisted in the editor's data).
   */
  constructor(e, t, i, s) {
    super(), this.name = e, this._liveRange = this._attachLiveRange(t), this._managedUsingOperations = i, this._affectsData = s;
  }
  /**
   * A value indicating if the marker is managed using operations.
   * See {@link ~Marker marker class description} to learn more about marker types.
   * See {@link module:engine/model/writer~Writer#addMarker}.
   */
  get managedUsingOperations() {
    if (!this._liveRange)
      throw new f("marker-destroyed", this);
    return this._managedUsingOperations;
  }
  /**
   * A value indicating if the marker changes the data.
   */
  get affectsData() {
    if (!this._liveRange)
      throw new f("marker-destroyed", this);
    return this._affectsData;
  }
  /**
   * Returns the marker data (properties defining the marker).
   */
  getData() {
    return {
      range: this.getRange(),
      affectsData: this.affectsData,
      managedUsingOperations: this.managedUsingOperations
    };
  }
  /**
   * Returns current marker start position.
   */
  getStart() {
    if (!this._liveRange)
      throw new f("marker-destroyed", this);
    return this._liveRange.start.clone();
  }
  /**
   * Returns current marker end position.
   */
  getEnd() {
    if (!this._liveRange)
      throw new f("marker-destroyed", this);
    return this._liveRange.end.clone();
  }
  /**
   * Returns a range that represents the current state of the marker.
   *
   * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a
   * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only
   * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}
   * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every
   * time there is a need to read marker properties. This will guarantee that the marker has not been removed and
   * that it's data is up-to-date.
   */
  getRange() {
    if (!this._liveRange)
      throw new f("marker-destroyed", this);
    return this._liveRange.toRange();
  }
  /**
   * Binds new live range to the marker and detach the old one if is attached.
   *
   * @internal
   * @param liveRange Live range to attach
   * @returns Attached live range.
   */
  _attachLiveRange(e) {
    return this._liveRange && this._detachLiveRange(), e.delegate("change:range").to(this), e.delegate("change:content").to(this), this._liveRange = e, e;
  }
  /**
   * Unbinds and destroys currently attached live range.
   *
   * @internal
   */
  _detachLiveRange() {
    this._liveRange.stopDelegating("change:range", this), this._liveRange.stopDelegating("change:content", this), this._liveRange.detach(), this._liveRange = null;
  }
}
Jt.prototype.is = function(n) {
  return n === "marker" || n === "model:marker";
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class x2 extends Ce {
  /**
   * Creates an insert operation.
   *
   * @param sourcePosition Position before the first {@link module:engine/model/item~Item model item} to move.
   * @param howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at
   * `sourcePosition` with offset shifted by `howMany`.
   */
  constructor(e, t) {
    super(null), this.sourcePosition = e.clone(), this.howMany = t;
  }
  /**
   * @inheritDoc
   */
  get type() {
    return "detach";
  }
  /**
   * @inheritDoc
   */
  get affectedSelectable() {
    return null;
  }
  /**
   * @inheritDoc
   */
  toJSON() {
    const e = super.toJSON();
    return e.sourcePosition = this.sourcePosition.toJSON(), e;
  }
  /**
   * @inheritDoc
   * @internal
   */
  _validate() {
    if (this.sourcePosition.root.document)
      throw new f("detach-operation-on-document-node", this);
  }
  /**
   * @inheritDoc
   * @internal
   */
  _execute() {
    Oh(g._createFromPositionAndShift(this.sourcePosition, this.howMany));
  }
  /**
   * @inheritDoc
   */
  static get className() {
    return "DetachOperation";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ye extends gt {
  /**
   * Creates an empty `DocumentFragment`.
   *
   * **Note:** Constructor of this class shouldn't be used directly in the code.
   * Use the {@link module:engine/model/writer~Writer#createDocumentFragment} method instead.
   *
   * @internal
   * @param children Nodes to be contained inside the `DocumentFragment`.
   */
  constructor(e) {
    super(), this.markers = /* @__PURE__ */ new Map(), this._children = new Ti(), e && this._insertChild(0, e);
  }
  /**
   * Returns an iterator that iterates over all nodes contained inside this document fragment.
   */
  [Symbol.iterator]() {
    return this.getChildren();
  }
  /**
   * Number of this document fragment's children.
   */
  get childCount() {
    return this._children.length;
  }
  /**
   * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.
   */
  get maxOffset() {
    return this._children.maxOffset;
  }
  /**
   * Is `true` if there are no nodes inside this document fragment, `false` otherwise.
   */
  get isEmpty() {
    return this.childCount === 0;
  }
  /**
   * Artificial next sibling. Returns `null`. Added for compatibility reasons.
   */
  get nextSibling() {
    return null;
  }
  /**
   * Artificial previous sibling. Returns `null`. Added for compatibility reasons.
   */
  get previousSibling() {
    return null;
  }
  /**
   * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.
   */
  get root() {
    return this;
  }
  /**
   * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.
   */
  get parent() {
    return null;
  }
  /**
   * Artificial owner of `DocumentFragment`. Returns `null`. Added for compatibility reasons.
   */
  get document() {
    return null;
  }
  /**
   * Returns `false` as `DocumentFragment` by definition is not attached to a document. Added for compatibility reasons.
   */
  isAttached() {
    return !1;
  }
  /**
   * Returns empty array. Added for compatibility reasons.
   */
  getAncestors() {
    return [];
  }
  /**
   * Gets the child at the given index. Returns `null` if incorrect index was passed.
   *
   * @param index Index of child.
   * @returns Child node.
   */
  getChild(e) {
    return this._children.getNode(e);
  }
  /**
   * Returns an iterator that iterates over all of this document fragment's children.
   */
  getChildren() {
    return this._children[Symbol.iterator]();
  }
  /**
   * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.
   *
   * @param node Child node to look for.
   * @returns Child node's index.
   */
  getChildIndex(e) {
    return this._children.getNodeIndex(e);
  }
  /**
   * Returns the starting offset of given child. Starting offset is equal to the sum of
   * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if
   * given node is not a child of this document fragment.
   *
   * @param node Child node to look for.
   * @returns Child node's starting offset.
   */
  getChildStartOffset(e) {
    return this._children.getNodeStartOffset(e);
  }
  /**
   * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.
   */
  getPath() {
    return [];
  }
  /**
   * Returns a descendant node by its path relative to this element.
   *
   * ```ts
   * // <this>a<b>c</b></this>
   * this.getNodeByPath( [ 0 ] );     // -> "a"
   * this.getNodeByPath( [ 1 ] );     // -> <b>
   * this.getNodeByPath( [ 1, 0 ] );  // -> "c"
   * ```
   *
   * @param relativePath Path of the node to find, relative to this element.
   */
  getNodeByPath(e) {
    let t = this;
    for (const i of e)
      t = t.getChild(t.offsetToIndex(i));
    return t;
  }
  /**
   * Converts offset "position" to index "position".
   *
   * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is
   * too high, returns index after last child.
   *
   * ```ts
   * const textNode = new Text( 'foo' );
   * const pElement = new Element( 'p' );
   * const docFrag = new DocumentFragment( [ textNode, pElement ] );
   * docFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.
   * docFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.
   * docFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.
   * docFrag.offsetToIndex( 2 ); // Returns 0.
   * docFrag.offsetToIndex( 3 ); // Returns 1.
   * docFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.
   * ```
   *
   * @param offset Offset to look for.
   * @returns Index of a node that occupies given offset.
   */
  offsetToIndex(e) {
    return this._children.offsetToIndex(e);
  }
  /**
   * Converts `DocumentFragment` instance to plain object and returns it.
   * Takes care of converting all of this document fragment's children.
   *
   * @returns `DocumentFragment` instance converted to plain object.
   */
  toJSON() {
    const e = [];
    for (const t of this._children)
      e.push(t.toJSON());
    return e;
  }
  /**
   * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).
   * Converts `DocumentFragment` children to proper nodes.
   *
   * @param json Plain object to be converted to `DocumentFragment`.
   * @returns `DocumentFragment` instance created using given plain object.
   */
  static fromJSON(e) {
    const t = [];
    for (const i of e)
      i.name ? t.push(F.fromJSON(i)) : t.push(j.fromJSON(i));
    return new Ye(t);
  }
  /**
   * {@link #_insertChild Inserts} one or more nodes at the end of this document fragment.
   *
   * @internal
   * @param items Items to be inserted.
   */
  _appendChild(e) {
    this._insertChild(this.childCount, e);
  }
  /**
   * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes
   * to this document fragment.
   *
   * @internal
   * @param index Index at which nodes should be inserted.
   * @param items Items to be inserted.
   */
  _insertChild(e, t) {
    const i = S2(t);
    for (const s of i)
      s.parent !== null && s._remove(), s.parent = this;
    this._children._insertNodes(e, i);
  }
  /**
   * Removes one or more nodes starting at the given index
   * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.
   *
   * @internal
   * @param index Index of the first node to remove.
   * @param howMany Number of nodes to remove.
   * @returns Array containing removed nodes.
   */
  _removeChildren(e, t = 1) {
    const i = this._children._removeNodes(e, t);
    for (const s of i)
      s.parent = null;
    return i;
  }
}
Ye.prototype.is = function(n) {
  return n === "documentFragment" || n === "model:documentFragment";
};
function S2(n) {
  return typeof n == "string" ? [new j(n)] : (ye(n) || (n = [n]), Array.from(n).map((e) => typeof e == "string" ? new j(e) : e instanceof Ie ? new j(e.data, e.getAttributes()) : e));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class I2 {
  /**
   * Creates a writer instance.
   *
   * **Note:** It is not recommended to use it directly. Use {@link module:engine/model/model~Model#change `Model#change()`} or
   * {@link module:engine/model/model~Model#enqueueChange `Model#enqueueChange()`} instead.
   *
   * @internal
   */
  constructor(e, t) {
    this.model = e, this.batch = t;
  }
  /**
   * Creates a new {@link module:engine/model/text~Text text node}.
   *
   * ```ts
   * writer.createText( 'foo' );
   * writer.createText( 'foo', { bold: true } );
   * ```
   *
   * @param data Text data.
   * @param attributes Text attributes.
   * @returns {module:engine/model/text~Text} Created text node.
   */
  createText(e, t) {
    return new j(e, t);
  }
  /**
   * Creates a new {@link module:engine/model/element~Element element}.
   *
   * ```ts
   * writer.createElement( 'paragraph' );
   * writer.createElement( 'paragraph', { alignment: 'center' } );
   * ```
   *
   * @param name Name of the element.
   * @param attributes Elements attributes.
   * @returns Created element.
   */
  createElement(e, t) {
    return new F(e, t);
  }
  /**
   * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.
   *
   * @returns Created document fragment.
   */
  createDocumentFragment() {
    return new Ye();
  }
  /**
   * Creates a copy of the element and returns it. Created element has the same name and attributes as the original element.
   * If clone is deep, the original element's children are also cloned. If not, then empty element is returned.
   *
   * @param element The element to clone.
   * @param deep If set to `true` clones element and all its children recursively. When set to `false`,
   * element will be cloned without any child.
   */
  cloneElement(e, t = !0) {
    return e._clone(t);
  }
  /**
   * Inserts item on given position.
   *
   * ```ts
   * const paragraph = writer.createElement( 'paragraph' );
   * writer.insert( paragraph, position );
   * ```
   *
   * Instead of using position you can use parent and offset:
   *
   * ```ts
   * const text = writer.createText( 'foo' );
   * writer.insert( text, paragraph, 5 );
   * ```
   *
   * You can also use `end` instead of the offset to insert at the end:
   *
   * ```ts
   * const text = writer.createText( 'foo' );
   * writer.insert( text, paragraph, 'end' );
   * ```
   *
   * Or insert before or after another element:
   *
   * ```ts
   * const paragraph = writer.createElement( 'paragraph' );
   * writer.insert( paragraph, anotherParagraph, 'after' );
   * ```
   *
   * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.
   *
   * Note that if the item already has parent it will be removed from the previous parent.
   *
   * Note that you cannot re-insert a node from a document to a different document or a document fragment. In this case,
   * `model-writer-insert-forbidden-move` is thrown.
   *
   * If you want to move {@link module:engine/model/range~Range range} instead of an
   * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.
   *
   * **Note:** For a paste-like content insertion mechanism see
   * {@link module:engine/model/model~Model#insertContent `model.insertContent()`}.
   *
   * @param item Item or document fragment to insert.
   * @param offset Offset or one of the flags. Used only when second parameter is a {@link module:engine/model/item~Item model item}.
   */
  insert(e, t, i = 0) {
    if (this._assertWriterUsedCorrectly(), e instanceof j && e.data == "")
      return;
    const s = w._createAt(t, i);
    if (e.parent)
      if (Xa(e.root, s.root)) {
        this.move(g._createOn(e), s);
        return;
      } else {
        if (e.root.document)
          throw new f("model-writer-insert-forbidden-move", this);
        this.remove(e);
      }
    const r = s.root.document ? s.root.document.version : null, o = new se(s, e, r);
    if (e instanceof j && (o.shouldReceiveAttributes = !0), this.batch.addOperation(o), this.model.applyOperation(o), e instanceof Ye)
      for (const [a, l] of e.markers) {
        const c = w._createAt(l.root, 0), h = { range: new g(l.start._getCombined(c, s), l.end._getCombined(c, s)), usingOperation: !0, affectsData: !0 };
        this.model.markers.has(a) ? this.updateMarker(a, h) : this.addMarker(a, h);
      }
  }
  insertText(e, t, i, s) {
    t instanceof Ye || t instanceof F || t instanceof w ? this.insert(this.createText(e), t, i) : this.insert(this.createText(e, t), i, s);
  }
  insertElement(e, t, i, s) {
    t instanceof Ye || t instanceof F || t instanceof w ? this.insert(this.createElement(e), t, i) : this.insert(this.createElement(e, t), i, s);
  }
  /**
   * Inserts item at the end of the given parent.
   *
   * ```ts
   * const paragraph = writer.createElement( 'paragraph' );
   * writer.append( paragraph, root );
   * ```
   *
   * Note that if the item already has parent it will be removed from the previous parent.
   *
   * If you want to move {@link module:engine/model/range~Range range} instead of an
   * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.
   *
   * @param item Item or document fragment to insert.
   */
  append(e, t) {
    this.insert(e, t, "end");
  }
  appendText(e, t, i) {
    t instanceof Ye || t instanceof F ? this.insert(this.createText(e), t, "end") : this.insert(this.createText(e, t), i, "end");
  }
  appendElement(e, t, i) {
    t instanceof Ye || t instanceof F ? this.insert(this.createElement(e), t, "end") : this.insert(this.createElement(e, t), i, "end");
  }
  /**
   * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}
   * or on a {@link module:engine/model/range~Range range}.
   *
   * @param key Attribute key.
   * @param value Attribute new value.
   * @param itemOrRange Model item or range on which the attribute will be set.
   */
  setAttribute(e, t, i) {
    if (this._assertWriterUsedCorrectly(), i instanceof g) {
      const s = i.getMinimalFlatRanges();
      for (const r of s)
        Ya(this, e, t, r);
    } else
      Za(this, e, t, i);
  }
  /**
   * Sets values of attributes on a {@link module:engine/model/item~Item model item}
   * or on a {@link module:engine/model/range~Range range}.
   *
   * ```ts
   * writer.setAttributes( {
   * 	bold: true,
   * 	italic: true
   * }, range );
   * ```
   *
   * @param attributes Attributes keys and values.
   * @param itemOrRange Model item or range on which the attributes will be set.
   */
  setAttributes(e, t) {
    for (const [i, s] of tt(e))
      this.setAttribute(i, s, t);
  }
  /**
   * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}
   * or from a {@link module:engine/model/range~Range range}.
   *
   * @param key Attribute key.
   * @param itemOrRange Model item or range from which the attribute will be removed.
   */
  removeAttribute(e, t) {
    if (this._assertWriterUsedCorrectly(), t instanceof g) {
      const i = t.getMinimalFlatRanges();
      for (const s of i)
        Ya(this, e, null, s);
    } else
      Za(this, e, null, t);
  }
  /**
   * Removes all attributes from all elements in the range or from the given item.
   *
   * @param itemOrRange Model item or range from which all attributes will be removed.
   */
  clearAttributes(e) {
    this._assertWriterUsedCorrectly();
    const t = (i) => {
      for (const s of i.getAttributeKeys())
        this.removeAttribute(s, i);
    };
    if (!(e instanceof g))
      t(e);
    else
      for (const i of e.getItems())
        t(i);
  }
  /**
   * Moves all items in the source range to the target position.
   *
   * ```ts
   * writer.move( sourceRange, targetPosition );
   * ```
   *
   * Instead of the target position you can use parent and offset or define that range should be moved to the end
   * or before or after chosen item:
   *
   * ```ts
   * // Moves all items in the range to the paragraph at offset 5:
   * writer.move( sourceRange, paragraph, 5 );
   * // Moves all items in the range to the end of a blockquote:
   * writer.move( sourceRange, blockquote, 'end' );
   * // Moves all items in the range to a position after an image:
   * writer.move( sourceRange, image, 'after' );
   * ```
   *
   * These parameters work the same way as {@link #createPositionAt `writer.createPositionAt()`}.
   *
   * Note that items can be moved only within the same tree. It means that you can move items within the same root
   * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},
   * but you can not move items from document fragment to the document or from one detached element to another. Use
   * {@link module:engine/model/writer~Writer#insert} in such cases.
   *
   * @param range Source range.
   * @param offset Offset or one of the flags. Used only when second parameter is a {@link module:engine/model/item~Item model item}.
   */
  move(e, t, i) {
    if (this._assertWriterUsedCorrectly(), !(e instanceof g))
      throw new f("writer-move-invalid-range", this);
    if (!e.isFlat)
      throw new f("writer-move-range-not-flat", this);
    const s = w._createAt(t, i);
    if (s.isEqual(e.start))
      return;
    if (this._addOperationForAffectedMarkers("move", e), !Xa(e.root, s.root))
      throw new f("writer-move-different-document", this);
    const r = e.root.document ? e.root.document.version : null, o = new O(e.start, e.end.offset - e.start.offset, s, r);
    this.batch.addOperation(o), this.model.applyOperation(o);
  }
  /**
   * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.
   *
   * @param itemOrRange Model item or range to remove.
   */
  remove(e) {
    this._assertWriterUsedCorrectly();
    const i = (e instanceof g ? e : g._createOn(e)).getMinimalFlatRanges().reverse();
    for (const s of i)
      this._addOperationForAffectedMarkers("move", s), R2(s.start, s.end.offset - s.start.offset, this.batch, this.model);
  }
  /**
   * Merges two siblings at the given position.
   *
   * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or
   * `writer-merge-no-element-after` error will be thrown.
   *
   * @param position Position between merged elements.
   */
  merge(e) {
    this._assertWriterUsedCorrectly();
    const t = e.nodeBefore, i = e.nodeAfter;
    if (this._addOperationForAffectedMarkers("merge", e), !(t instanceof F))
      throw new f("writer-merge-no-element-before", this);
    if (!(i instanceof F))
      throw new f("writer-merge-no-element-after", this);
    e.root.document ? this._merge(e) : this._mergeDetached(e);
  }
  /**
   * Shortcut for {@link module:engine/model/model~Model#createPositionFromPath `Model#createPositionFromPath()`}.
   *
   * @param root Root of the position.
   * @param path Position path. See {@link module:engine/model/position~Position#path}.
   * @param stickiness Position stickiness. See {@link module:engine/model/position~PositionStickiness}.
   */
  createPositionFromPath(e, t, i) {
    return this.model.createPositionFromPath(e, t, i);
  }
  /**
   * Shortcut for {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}.
   *
   * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.
   */
  createPositionAt(e, t) {
    return this.model.createPositionAt(e, t);
  }
  /**
   * Shortcut for {@link module:engine/model/model~Model#createPositionAfter `Model#createPositionAfter()`}.
   *
   * @param item Item after which the position should be placed.
   */
  createPositionAfter(e) {
    return this.model.createPositionAfter(e);
  }
  /**
   * Shortcut for {@link module:engine/model/model~Model#createPositionBefore `Model#createPositionBefore()`}.
   *
   * @param item Item after which the position should be placed.
   */
  createPositionBefore(e) {
    return this.model.createPositionBefore(e);
  }
  /**
   * Shortcut for {@link module:engine/model/model~Model#createRange `Model#createRange()`}.
   *
   * @param start Start position.
   * @param end End position. If not set, range will be collapsed at `start` position.
   */
  createRange(e, t) {
    return this.model.createRange(e, t);
  }
  /**
   * Shortcut for {@link module:engine/model/model~Model#createRangeIn `Model#createRangeIn()`}.
   *
   * @param element Element which is a parent for the range.
   */
  createRangeIn(e) {
    return this.model.createRangeIn(e);
  }
  /**
   * Shortcut for {@link module:engine/model/model~Model#createRangeOn `Model#createRangeOn()`}.
   *
   * @param element Element which is a parent for the range.
   */
  createRangeOn(e) {
    return this.model.createRangeOn(e);
  }
  createSelection(...e) {
    return this.model.createSelection(...e);
  }
  /**
   * Performs merge action in a detached tree.
   *
   * @param position Position between merged elements.
   */
  _mergeDetached(e) {
    const t = e.nodeBefore, i = e.nodeAfter;
    this.move(g._createIn(i), w._createAt(t, "end")), this.remove(i);
  }
  /**
   * Performs merge action in a non-detached tree.
   *
   * @param position Position between merged elements.
   */
  _merge(e) {
    const t = w._createAt(e.nodeBefore, "end"), i = w._createAt(e.nodeAfter, 0), s = e.root.document.graveyard, r = new w(s, [0]), o = e.root.document.version, a = new Z(i, e.nodeAfter.maxOffset, t, r, o);
    this.batch.addOperation(a), this.model.applyOperation(a);
  }
  /**
   * Renames the given element.
   *
   * @param element The element to rename.
   * @param newName New element name.
   */
  rename(e, t) {
    if (this._assertWriterUsedCorrectly(), !(e instanceof F))
      throw new f("writer-rename-not-element-instance", this);
    const i = e.root.document ? e.root.document.version : null, s = new pe(w._createBefore(e), e.name, t, i);
    this.batch.addOperation(s), this.model.applyOperation(s);
  }
  /**
   * Splits elements starting from the given position and going to the top of the model tree as long as given
   * `limitElement` is reached. When `limitElement` is not defined then only the parent of the given position will be split.
   *
   * The element needs to have a parent. It cannot be a root element nor a document fragment.
   * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.
   *
   * @param position Position of split.
   * @param limitElement Stop splitting when this element will be reached.
   * @returns Split result with properties:
   * * `position` - Position between split elements.
   * * `range` - Range that stars from the end of the first split element and ends at the beginning of the first copy element.
   */
  split(e, t) {
    this._assertWriterUsedCorrectly();
    let i = e.parent;
    if (!i.parent)
      throw new f("writer-split-element-no-parent", this);
    if (t || (t = i.parent), !e.parent.getAncestors({ includeSelf: !0 }).includes(t))
      throw new f("writer-split-invalid-limit-element", this);
    let s, r;
    do {
      const o = i.root.document ? i.root.document.version : null, a = i.maxOffset - e.offset, l = N.getInsertionPosition(e), c = new N(e, a, l, null, o);
      this.batch.addOperation(c), this.model.applyOperation(c), !s && !r && (s = i, r = e.parent.nextSibling), e = this.createPositionAfter(e.parent), i = e.parent;
    } while (i !== t);
    return {
      position: e,
      range: new g(w._createAt(s, "end"), w._createAt(r, 0))
    };
  }
  /**
   * Wraps the given range with the given element or with a new element (if a string was passed).
   *
   * **Note:** range to wrap should be a "flat range" (see {@link module:engine/model/range~Range#isFlat `Range#isFlat`}).
   * If not, an error will be thrown.
   *
   * @param range Range to wrap.
   * @param elementOrString Element or name of element to wrap the range with.
   */
  wrap(e, t) {
    if (this._assertWriterUsedCorrectly(), !e.isFlat)
      throw new f("writer-wrap-range-not-flat", this);
    const i = t instanceof F ? t : new F(t);
    if (i.childCount > 0)
      throw new f("writer-wrap-element-not-empty", this);
    if (i.parent !== null)
      throw new f("writer-wrap-element-attached", this);
    this.insert(i, e.start);
    const s = new g(e.start.getShiftedBy(1), e.end.getShiftedBy(1));
    this.move(s, w._createAt(i, 0));
  }
  /**
   * Unwraps children of the given element – all its children are moved before it and then the element is removed.
   * Throws error if you try to unwrap an element which does not have a parent.
   *
   * @param element Element to unwrap.
   */
  unwrap(e) {
    if (this._assertWriterUsedCorrectly(), e.parent === null)
      throw new f("writer-unwrap-element-no-parent", this);
    this.move(g._createIn(e), this.createPositionAfter(e)), this.remove(e);
  }
  /**
   * Adds a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks
   * changes in the document and updates its range automatically, when model tree changes.
   *
   * As the first parameter you can set marker name.
   *
   * The required `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See
   * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between
   * markers managed by operations and not-managed by operations.
   *
   * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be
   * `true` when the marker change changes the data returned by the
   * {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.
   * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.
   * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.
   *
   * Create marker directly base on marker's name:
   *
   * ```ts
   * addMarker( markerName, { range, usingOperation: false } );
   * ```
   *
   * Create marker using operation:
   *
   * ```ts
   * addMarker( markerName, { range, usingOperation: true } );
   * ```
   *
   * Create marker that affects the editor data:
   *
   * ```ts
   * addMarker( markerName, { range, usingOperation: false, affectsData: true } );
   * ```
   *
   * Note: For efficiency reasons, it's best to create and keep as little markers as possible.
   *
   * @see module:engine/model/markercollection~Marker
   * @param name Name of a marker to create - must be unique.
   * @param options.usingOperation Flag indicating that the marker should be added by MarkerOperation.
   * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.
   * @param options.range Marker range.
   * @param options.affectsData Flag indicating that the marker changes the editor data.
   * @returns Marker that was set.
   */
  addMarker(e, t) {
    if (this._assertWriterUsedCorrectly(), !t || typeof t.usingOperation != "boolean")
      throw new f("writer-addmarker-no-usingoperation", this);
    const i = t.usingOperation, s = t.range, r = t.affectsData === void 0 ? !1 : t.affectsData;
    if (this.model.markers.has(e))
      throw new f("writer-addmarker-marker-exists", this);
    if (!s)
      throw new f("writer-addmarker-no-range", this);
    return i ? (vi(this, e, null, s, r), this.model.markers.get(e)) : this.model.markers._set(e, s, i, r);
  }
  /**
   * Adds, updates or refreshes a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks
   * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the
   * marker's range directly using this method.
   *
   * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique
   * name is created and returned.
   *
   * **Note**: If you want to change the {@link module:engine/view/element~Element view element} of the marker while its data in the model
   * remains the same, use the dedicated {@link module:engine/controller/editingcontroller~EditingController#reconvertMarker} method.
   *
   * The `options.usingOperation` parameter lets you change if the marker should be managed by operations or not. See
   * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between
   * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.
   *
   * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be
   * `true` when the marker change changes the data returned by
   * the {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.
   * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.
   * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.
   *
   * Update marker directly base on marker's name:
   *
   * ```ts
   * updateMarker( markerName, { range } );
   * ```
   *
   * Update marker using operation:
   *
   * ```ts
   * updateMarker( marker, { range, usingOperation: true } );
   * updateMarker( markerName, { range, usingOperation: true } );
   * ```
   *
   * Change marker's option (start using operations to manage it):
   *
   * ```ts
   * updateMarker( marker, { usingOperation: true } );
   * ```
   *
   * Change marker's option (inform the engine, that the marker does not affect the data anymore):
   *
   * ```ts
   * updateMarker( markerName, { affectsData: false } );
   * ```
   *
   * @see module:engine/model/markercollection~Marker
   * @param markerOrName Name of a marker to update, or a marker instance.
   * @param options If options object is not defined then marker will be refreshed by triggering
   * downcast conversion for this marker with the same data.
   * @param options.range Marker range to update.
   * @param options.usingOperation Flag indicated whether the marker should be added by MarkerOperation.
   * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.
   * @param options.affectsData Flag indicating that the marker changes the editor data.
   */
  updateMarker(e, t) {
    this._assertWriterUsedCorrectly();
    const i = typeof e == "string" ? e : e.name, s = this.model.markers.get(i);
    if (!s)
      throw new f("writer-updatemarker-marker-not-exists", this);
    if (!t) {
      G("writer-updatemarker-reconvert-using-editingcontroller", { markerName: i }), this.model.markers._refresh(s);
      return;
    }
    const r = typeof t.usingOperation == "boolean", o = typeof t.affectsData == "boolean", a = o ? t.affectsData : s.affectsData;
    if (!r && !t.range && !o)
      throw new f("writer-updatemarker-wrong-options", this);
    const l = s.getRange(), c = t.range ? t.range : l;
    if (r && t.usingOperation !== s.managedUsingOperations) {
      t.usingOperation ? vi(this, i, null, c, a) : (vi(this, i, l, null, a), this.model.markers._set(i, c, void 0, a));
      return;
    }
    s.managedUsingOperations ? vi(this, i, l, c, a) : this.model.markers._set(i, c, void 0, a);
  }
  /**
   * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.
   * The marker is removed accordingly to how it has been created, so if the marker was created using operation,
   * it will be destroyed using operation.
   *
   * @param markerOrName Marker or marker name to remove.
   */
  removeMarker(e) {
    this._assertWriterUsedCorrectly();
    const t = typeof e == "string" ? e : e.name;
    if (!this.model.markers.has(t))
      throw new f("writer-removemarker-no-marker", this);
    const i = this.model.markers.get(t);
    if (!i.managedUsingOperations) {
      this.model.markers._remove(t);
      return;
    }
    const s = i.getRange();
    vi(this, t, s, null, i.affectsData);
  }
  /**
   * Adds a new root to the document (or re-attaches a {@link #detachRoot detached root}).
   *
   * Throws an error, if trying to add a root that is already added and attached.
   *
   * @param rootName Name of the added root.
   * @param elementName The element name. Defaults to `'$root'` which also has some basic schema defined
   * (e.g. `$block` elements are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.
   * @returns The added root element.
   */
  addRoot(e, t = "$root") {
    this._assertWriterUsedCorrectly();
    const i = this.model.document.getRoot(e);
    if (i && i.isAttached())
      throw new f("writer-addroot-root-exists", this);
    const s = this.model.document, r = new $e(e, t, !0, s, s.version);
    return this.batch.addOperation(r), this.model.applyOperation(r), this.model.document.getRoot(e);
  }
  /**
   * Detaches the root from the document.
   *
   * All content and markers are removed from the root upon detaching. New content and new markers cannot be added to the root, as long
   * as it is detached.
   *
   * A root cannot be fully removed from the document, it can be only detached. A root is permanently removed only after you
   * re-initialize the editor and do not specify the root in the initial data.
   *
   * A detached root can be re-attached using {@link #addRoot}.
   *
   * Throws an error if the root does not exist or the root is already detached.
   *
   * @param rootOrName Name of the detached root.
   */
  detachRoot(e) {
    this._assertWriterUsedCorrectly();
    const t = typeof e == "string" ? this.model.document.getRoot(e) : e;
    if (!t || !t.isAttached())
      throw new f("writer-detachroot-no-root", this);
    for (const r of this.model.markers)
      r.getRange().root === t && this.removeMarker(r);
    for (const r of t.getAttributeKeys())
      this.removeAttribute(r, t);
    this.remove(this.createRangeIn(t));
    const i = this.model.document, s = new $e(t.rootName, t.name, !1, i, i.version);
    this.batch.addOperation(s), this.model.applyOperation(s);
  }
  setSelection(...e) {
    this._assertWriterUsedCorrectly(), this.model.document.selection._setTo(...e);
  }
  /**
   * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.
   *
   * The location can be specified in the same form as
   * {@link #createPositionAt `writer.createPositionAt()`} parameters.
   *
   * @param itemOrPosition
   * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.
   */
  setSelectionFocus(e, t) {
    this._assertWriterUsedCorrectly(), this.model.document.selection._setFocus(e, t);
  }
  setSelectionAttribute(e, t) {
    if (this._assertWriterUsedCorrectly(), typeof e == "string")
      this._setSelectionAttribute(e, t);
    else
      for (const [i, s] of tt(e))
        this._setSelectionAttribute(i, s);
  }
  /**
   * Removes attribute(s) with given key(s) from the selection.
   *
   * Remove one attribute:
   *
   * ```ts
   * writer.removeSelectionAttribute( 'italic' );
   * ```
   *
   * Remove multiple attributes:
   *
   * ```ts
   * writer.removeSelectionAttribute( [ 'italic', 'bold' ] );
   * ```
   *
   * @param keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.
   */
  removeSelectionAttribute(e) {
    if (this._assertWriterUsedCorrectly(), typeof e == "string")
      this._removeSelectionAttribute(e);
    else
      for (const t of e)
        this._removeSelectionAttribute(t);
  }
  /**
   * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}
   * of the selection from left to right.
   *
   * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,
   * then the selection (after being moved by the user) inherits attributes from its left-hand side.
   * This method allows to temporarily override this behavior by forcing the gravity to the right.
   *
   * For the following model fragment:
   *
   * ```xml
   * <$text bold="true" linkHref="url">bar[]</$text><$text bold="true">biz</$text>
   * ```
   *
   * * Default gravity: selection will have the `bold` and `linkHref` attributes.
   * * Overridden gravity: selection will have `bold` attribute.
   *
   * **Note**: It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry
   * of the process.
   *
   * @returns The unique id which allows restoring the gravity.
   */
  overrideSelectionGravity() {
    return this.model.document.selection._overrideGravity();
  }
  /**
   * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.
   *
   * Restoring the gravity is only possible using the unique identifier returned by
   * {@link ~Writer#overrideSelectionGravity}. Note that the gravity remains overridden as long as won't be restored
   * the same number of times it was overridden.
   *
   * @param uid The unique id returned by {@link ~Writer#overrideSelectionGravity}.
   */
  restoreSelectionGravity(e) {
    this.model.document.selection._restoreGravity(e);
  }
  /**
   * @param key Key of the attribute to remove.
   * @param value Attribute value.
   */
  _setSelectionAttribute(e, t) {
    const i = this.model.document.selection;
    if (i.isCollapsed && i.anchor.parent.isEmpty) {
      const s = Ve._getStoreAttributeKey(e);
      this.setAttribute(s, t, i.anchor.parent);
    }
    i._setAttribute(e, t);
  }
  /**
   * @param key Key of the attribute to remove.
   */
  _removeSelectionAttribute(e) {
    const t = this.model.document.selection;
    if (t.isCollapsed && t.anchor.parent.isEmpty) {
      const i = Ve._getStoreAttributeKey(e);
      this.removeAttribute(i, t.anchor.parent);
    }
    t._removeAttribute(e);
  }
  /**
   * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.
   */
  _assertWriterUsedCorrectly() {
    if (this.model._currentWriter !== this)
      throw new f("writer-incorrect-use", this);
  }
  /**
   * For given action `type` and `positionOrRange` where the action happens, this function finds all affected markers
   * and applies a marker operation with the new marker range equal to the current range. Thanks to this, the marker range
   * can be later correctly processed during undo.
   *
   * @param type Writer action type.
   * @param positionOrRange Position or range where the writer action happens.
   */
  _addOperationForAffectedMarkers(e, t) {
    for (const i of this.model.markers) {
      if (!i.managedUsingOperations)
        continue;
      const s = i.getRange();
      let r = !1;
      if (e === "move") {
        const o = t;
        r = o.containsPosition(s.start) || o.start.isEqual(s.start) || o.containsPosition(s.end) || o.end.isEqual(s.end);
      } else {
        const o = t, a = o.nodeBefore, l = o.nodeAfter, c = s.start.parent == a && s.start.isAtEnd, u = s.end.parent == l && s.end.offset == 0, h = s.end.nodeAfter == l, d = s.start.nodeAfter == l;
        r = c || u || h || d;
      }
      r && this.updateMarker(i.name, { range: s });
    }
  }
}
function Ya(n, e, t, i) {
  const s = n.model, r = s.document;
  let o = i.start, a, l, c;
  for (const h of i.getWalker({ shallow: !0 }))
    c = h.item.getAttribute(e), a && l != c && (l != t && u(), o = a), a = h.nextPosition, l = c;
  a instanceof w && a != o && l != t && u();
  function u() {
    const h = new g(o, a), d = h.root.document ? r.version : null, m = new ee(h, e, l, t, d);
    n.batch.addOperation(m), s.applyOperation(m);
  }
}
function Za(n, e, t, i) {
  const s = n.model, r = s.document, o = i.getAttribute(e);
  let a, l;
  if (o != t) {
    if (i.root === i) {
      const u = i.document ? r.version : null;
      l = new Ze(i, e, o, t, u);
    } else {
      a = new g(w._createBefore(i), n.createPositionAfter(i));
      const u = a.root.document ? r.version : null;
      l = new ee(a, e, o, t, u);
    }
    n.batch.addOperation(l), s.applyOperation(l);
  }
}
function vi(n, e, t, i, s) {
  const r = n.model, o = r.document, a = new ge(e, t, i, r.markers, !!s, o.version);
  n.batch.addOperation(a), r.applyOperation(a);
}
function R2(n, e, t, i) {
  let s;
  if (n.root.document) {
    const r = i.document, o = new w(r.graveyard, [0]);
    s = new O(n, e, o, r.version);
  } else
    s = new x2(n, e);
  t.addOperation(s), i.applyOperation(s);
}
function Xa(n, e) {
  return n === e || n instanceof En && e instanceof En;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function V2(n, e, t = {}) {
  if (e.isCollapsed)
    return;
  const i = e.getFirstRange();
  if (i.root.rootName == "$graveyard")
    return;
  const s = n.schema;
  n.change((r) => {
    if (!t.doNotResetEntireContent && $2(s, e)) {
      z2(r, e);
      return;
    }
    const o = {};
    if (!t.doNotAutoparagraph) {
      const c = e.getSelectedElement();
      c && Object.assign(o, s.getAttributesWithProperty(c, "copyOnReplace", !0));
    }
    const [a, l] = O2(i);
    a.isTouching(l) || r.remove(r.createRange(a, l)), t.leaveUnmerged || (B2(r, a, l), s.removeDisallowedAttributes(a.parent.getChildren(), r)), zh(r, e, a), !t.doNotAutoparagraph && N2(s, a) && Lh(r, a, e, o), a.detach(), l.detach();
  });
}
function O2(n) {
  const e = n.root.document.model, t = n.start;
  let i = n.end;
  if (e.hasContent(n, { ignoreMarkers: !0 })) {
    const s = M2(i);
    if (s && i.isTouching(e.createPositionAt(s, 0))) {
      const r = e.createSelection(n);
      e.modifySelection(r, { direction: "backward" });
      const o = r.getLastPosition(), a = e.createRange(o, i);
      e.hasContent(a, { ignoreMarkers: !0 }) || (i = o);
    }
  }
  return [
    re.fromPosition(t, "toPrevious"),
    re.fromPosition(i, "toNext")
  ];
}
function M2(n) {
  const e = n.parent, t = e.root.document.model.schema, i = e.getAncestors({ parentFirst: !0, includeSelf: !0 });
  for (const s of i) {
    if (t.isLimit(s))
      return null;
    if (t.isBlock(s))
      return s;
  }
}
function B2(n, e, t) {
  const i = n.model;
  if (!Xr(n.model.schema, e, t))
    return;
  const [s, r] = F2(e, t);
  !s || !r || (!i.hasContent(s, { ignoreMarkers: !0 }) && i.hasContent(r, { ignoreMarkers: !0 }) ? Nh(n, e, t, s.parent) : Fh(n, e, t, s.parent));
}
function Fh(n, e, t, i) {
  const s = e.parent, r = t.parent;
  if (!(s == i || r == i)) {
    for (e = n.createPositionAfter(s), t = n.createPositionBefore(r), t.isEqual(e) || n.insert(r, e), n.merge(e); t.parent.isEmpty; ) {
      const o = t.parent;
      t = n.createPositionBefore(o), n.remove(o);
    }
    Xr(n.model.schema, e, t) && Fh(n, e, t, i);
  }
}
function Nh(n, e, t, i) {
  const s = e.parent, r = t.parent;
  if (!(s == i || r == i)) {
    for (e = n.createPositionAfter(s), t = n.createPositionBefore(r), t.isEqual(e) || n.insert(s, t); e.parent.isEmpty; ) {
      const o = e.parent;
      e = n.createPositionBefore(o), n.remove(o);
    }
    t = n.createPositionBefore(r), D2(n, t), Xr(n.model.schema, e, t) && Nh(n, e, t, i);
  }
}
function D2(n, e) {
  const t = e.nodeBefore, i = e.nodeAfter;
  t.name != i.name && n.rename(t, i.name), n.clearAttributes(t), n.setAttributes(Object.fromEntries(i.getAttributes()), t), n.merge(e);
}
function Xr(n, e, t) {
  const i = e.parent, s = t.parent;
  return i == s || n.isLimit(i) || n.isLimit(s) ? !1 : L2(e, t, n);
}
function F2(n, e) {
  const t = n.getAncestors(), i = e.getAncestors();
  let s = 0;
  for (; t[s] && t[s] == i[s]; )
    s++;
  return [t[s], i[s]];
}
function N2(n, e) {
  const t = n.checkChild(e, "$text"), i = n.checkChild(e, "paragraph");
  return !t && i;
}
function L2(n, e, t) {
  const i = new g(n, e);
  for (const s of i.getWalker())
    if (t.isLimit(s.item))
      return !1;
  return !0;
}
function Lh(n, e, t, i = {}) {
  const s = n.createElement("paragraph");
  n.model.schema.setAllowedAttributes(s, i, n), n.insert(s, e), zh(n, t, n.createPositionAt(s, 0));
}
function z2(n, e) {
  const t = n.model.schema.getLimitElement(e);
  n.remove(n.createRangeIn(t)), Lh(n, n.createPositionAt(t, 0), e);
}
function $2(n, e) {
  const t = n.getLimitElement(e);
  if (!e.containsEntireContent(t))
    return !1;
  const i = e.getFirstRange();
  return i.start.parent == i.end.parent ? !1 : n.checkChild(t, "paragraph");
}
function zh(n, e, t) {
  e instanceof Ve ? n.setSelection(t) : e.setTo(t);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function H2(n, e) {
  return n.change((t) => {
    const i = t.createDocumentFragment(), s = e.getFirstRange();
    if (!s || s.isCollapsed)
      return i;
    const r = s.start.root, o = s.start.getCommonPath(s.end), a = r.getNodeByPath(o);
    let l;
    s.start.parent == s.end.parent ? l = s : l = t.createRange(t.createPositionAt(a, s.start.path[o.length]), t.createPositionAt(a, s.end.path[o.length] + 1));
    const c = l.end.offset - l.start.offset;
    for (const u of l.getItems({ shallow: !0 }))
      u.is("$textProxy") ? t.appendText(u.data, u.getAttributes(), i) : t.append(t.cloneElement(u, !0), i);
    if (l != s) {
      const u = s._getTransformedByMove(l.start, t.createPositionAt(i, 0), c)[0], h = t.createRange(t.createPositionAt(i, 0), u.start), d = t.createRange(u.end, t.createPositionAt(i, "end"));
      Qa(d, t), Qa(h, t);
    }
    return i;
  });
}
function Qa(n, e) {
  const t = [];
  Array.from(n.getItems({ direction: "backward" })).map((i) => e.createRangeOn(i)).filter((i) => (i.start.isAfter(n.start) || i.start.isEqual(n.start)) && (i.end.isBefore(n.end) || i.end.isEqual(n.end))).forEach((i) => {
    t.push(i.start.parent), e.remove(i);
  }), t.forEach((i) => {
    let s = i;
    for (; s.parent && s.isEmpty; ) {
      const r = e.createRangeOn(s);
      s = s.parent, e.remove(r);
    }
  });
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function W2(n, e, t) {
  return n.change((i) => {
    const s = t || n.document.selection;
    s.isCollapsed || n.deleteContent(s, { doNotAutoparagraph: !0 });
    const r = new U2(n, i, s.anchor), o = [];
    let a;
    if (e.is("documentFragment")) {
      if (e.markers.size) {
        const u = [];
        for (const [h, d] of e.markers) {
          const { start: m, end: p } = d, b = m.isEqual(p);
          u.push({ position: m, name: h, isCollapsed: b }, { position: p, name: h, isCollapsed: b });
        }
        u.sort(({ position: h }, { position: d }) => h.isBefore(d) ? 1 : -1);
        for (const { position: h, name: d, isCollapsed: m } of u) {
          let p = null, b = null;
          const C = h.parent === e && h.isAtStart, T = h.parent === e && h.isAtEnd;
          !C && !T ? (p = i.createElement("$marker"), i.insert(p, h)) : m && (b = C ? "start" : "end"), o.push({
            name: d,
            element: p,
            collapsed: b
          });
        }
      }
      a = e.getChildren();
    } else
      a = [e];
    r.handleNodes(a);
    let l = r.getSelectionRange();
    if (e.is("documentFragment") && o.length) {
      const u = l ? We.fromRange(l) : null, h = {};
      for (let d = o.length - 1; d >= 0; d--) {
        const { name: m, element: p, collapsed: b } = o[d], C = !h[m];
        if (C && (h[m] = []), p) {
          const T = i.createPositionAt(p, "before");
          h[m].push(T), i.remove(p);
        } else {
          const T = r.getAffectedRange();
          if (!T) {
            b && h[m].push(r.position);
            continue;
          }
          b ? h[m].push(T[b]) : h[m].push(C ? T.start : T.end);
        }
      }
      for (const [d, [m, p]] of Object.entries(h))
        m && p && m.root === p.root && i.addMarker(d, {
          usingOperation: !0,
          affectsData: !0,
          range: new g(m, p)
        });
      u && (l = u.toRange(), u.detach());
    }
    /* istanbul ignore else -- @preserve */
    l && (s instanceof Ve ? i.setSelection(l) : s.setTo(l));
    const c = r.getAffectedRange() || n.createRange(s.anchor);
    return r.destroy(), c;
  });
}
class U2 {
  constructor(e, t, i) {
    this._firstNode = null, this._lastNode = null, this._lastAutoParagraph = null, this._filterAttributesOf = [], this._affectedStart = null, this._affectedEnd = null, this._nodeToSelect = null, this.model = e, this.writer = t, this.position = i, this.canMergeWith = /* @__PURE__ */ new Set([this.position.parent]), this.schema = e.schema, this._documentFragment = t.createDocumentFragment(), this._documentFragmentPosition = t.createPositionAt(this._documentFragment, 0);
  }
  /**
   * Handles insertion of a set of nodes.
   *
   * @param nodes Nodes to insert.
   */
  handleNodes(e) {
    for (const t of Array.from(e))
      this._handleNode(t);
    this._insertPartialFragment(), this._lastAutoParagraph && this._updateLastNodeFromAutoParagraph(this._lastAutoParagraph), this._mergeOnRight(), this.schema.removeDisallowedAttributes(this._filterAttributesOf, this.writer), this._filterAttributesOf = [];
  }
  /**
   * Updates the last node after the auto paragraphing.
   *
   * @param node The last auto paragraphing node.
   */
  _updateLastNodeFromAutoParagraph(e) {
    const t = this.writer.createPositionAfter(this._lastNode), i = this.writer.createPositionAfter(e);
    if (i.isAfter(t)) {
      this._lastNode = e;
      /* istanbul ignore if -- @preserve */
      if (this.position.parent != e || !this.position.isAtEnd)
        throw new f("insertcontent-invalid-insertion-position", this);
      this.position = i, this._setAffectedBoundaries(this.position);
    }
  }
  /**
   * Returns range to be selected after insertion.
   * Returns `null` if there is no valid range to select after insertion.
   */
  getSelectionRange() {
    return this._nodeToSelect ? g._createOn(this._nodeToSelect) : this.model.schema.getNearestSelectionRange(this.position);
  }
  /**
   * Returns a range which contains all the performed changes. This is a range that, if removed, would return the model to the state
   * before the insertion. Returns `null` if no changes were done.
   */
  getAffectedRange() {
    return this._affectedStart ? new g(this._affectedStart, this._affectedEnd) : null;
  }
  /**
   * Destroys `Insertion` instance.
   */
  destroy() {
    this._affectedStart && this._affectedStart.detach(), this._affectedEnd && this._affectedEnd.detach();
  }
  /**
   * Handles insertion of a single node.
   */
  _handleNode(e) {
    if (this.schema.isObject(e)) {
      this._handleObject(e);
      return;
    }
    let t = this._checkAndAutoParagraphToAllowedPosition(e);
    if (!t && (t = this._checkAndSplitToAllowedPosition(e), !t)) {
      this._handleDisallowedNode(e);
      return;
    }
    this._appendToFragment(e), this._firstNode || (this._firstNode = e), this._lastNode = e;
  }
  /**
   * Inserts the temporary DocumentFragment into the model.
   */
  _insertPartialFragment() {
    if (this._documentFragment.isEmpty)
      return;
    const e = re.fromPosition(this.position, "toNext");
    this._setAffectedBoundaries(this.position), this._documentFragment.getChild(0) == this._firstNode && (this.writer.insert(this._firstNode, this.position), this._mergeOnLeft(), this.position = e.toPosition()), this._documentFragment.isEmpty || this.writer.insert(this._documentFragment, this.position), this._documentFragmentPosition = this.writer.createPositionAt(this._documentFragment, 0), this.position = e.toPosition(), e.detach();
  }
  /**
   * @param node The object element.
   */
  _handleObject(e) {
    this._checkAndSplitToAllowedPosition(e) ? this._appendToFragment(e) : this._tryAutoparagraphing(e);
  }
  /**
   * @param node The disallowed node which needs to be handled.
   */
  _handleDisallowedNode(e) {
    e.is("element") ? this.handleNodes(e.getChildren()) : this._tryAutoparagraphing(e);
  }
  /**
   * Append a node to the temporary DocumentFragment.
   *
   * @param node The node to insert.
   */
  _appendToFragment(e) {
    /* istanbul ignore if -- @preserve */
    if (!this.schema.checkChild(this.position, e))
      throw new f("insertcontent-wrong-position", this, { node: e, position: this.position });
    this.writer.insert(e, this._documentFragmentPosition), this._documentFragmentPosition = this._documentFragmentPosition.getShiftedBy(e.offsetSize), this.schema.isObject(e) && !this.schema.checkChild(this.position, "$text") ? this._nodeToSelect = e : this._nodeToSelect = null, this._filterAttributesOf.push(e);
  }
  /**
   * Sets `_affectedStart` and `_affectedEnd` to the given `position`. Should be used before a change is done during insertion process to
   * mark the affected range.
   *
   * This method is used before inserting a node or splitting a parent node. `_affectedStart` and `_affectedEnd` are also changed
   * during merging, but the logic there is more complicated so it is left out of this function.
   */
  _setAffectedBoundaries(e) {
    this._affectedStart || (this._affectedStart = re.fromPosition(e, "toPrevious")), (!this._affectedEnd || this._affectedEnd.isBefore(e)) && (this._affectedEnd && this._affectedEnd.detach(), this._affectedEnd = re.fromPosition(e, "toNext"));
  }
  /**
   * Merges the previous sibling of the first node if it should be merged.
   *
   * After the content was inserted we may try to merge it with its siblings.
   * This should happen only if the selection was in those elements initially.
   */
  _mergeOnLeft() {
    const e = this._firstNode;
    if (!(e instanceof F) || !this._canMergeLeft(e))
      return;
    const t = re._createBefore(e);
    t.stickiness = "toNext";
    const i = re.fromPosition(this.position, "toNext");
    this._affectedStart.isEqual(t) && (this._affectedStart.detach(), this._affectedStart = re._createAt(t.nodeBefore, "end", "toPrevious")), this._firstNode === this._lastNode && (this._firstNode = t.nodeBefore, this._lastNode = t.nodeBefore), this.writer.merge(t), t.isEqual(this._affectedEnd) && this._firstNode === this._lastNode && (this._affectedEnd.detach(), this._affectedEnd = re._createAt(t.nodeBefore, "end", "toNext")), this.position = i.toPosition(), i.detach(), this._filterAttributesOf.push(this.position.parent), t.detach();
  }
  /**
   * Merges the next sibling of the last node if it should be merged.
   *
   * After the content was inserted we may try to merge it with its siblings.
   * This should happen only if the selection was in those elements initially.
   */
  _mergeOnRight() {
    const e = this._lastNode;
    if (!(e instanceof F) || !this._canMergeRight(e))
      return;
    const t = re._createAfter(e);
    t.stickiness = "toNext";
    /* istanbul ignore if -- @preserve */
    if (!this.position.isEqual(t))
      throw new f("insertcontent-invalid-insertion-position", this);
    this.position = w._createAt(t.nodeBefore, "end");
    const i = re.fromPosition(this.position, "toPrevious");
    this._affectedEnd.isEqual(t) && (this._affectedEnd.detach(), this._affectedEnd = re._createAt(t.nodeBefore, "end", "toNext")), this._firstNode === this._lastNode && (this._firstNode = t.nodeBefore, this._lastNode = t.nodeBefore), this.writer.merge(t), t.getShiftedBy(-1).isEqual(this._affectedStart) && this._firstNode === this._lastNode && (this._affectedStart.detach(), this._affectedStart = re._createAt(t.nodeBefore, 0, "toPrevious")), this.position = i.toPosition(), i.detach(), this._filterAttributesOf.push(this.position.parent), t.detach();
  }
  /**
   * Checks whether specified node can be merged with previous sibling element.
   *
   * @param node The node which could potentially be merged.
   */
  _canMergeLeft(e) {
    const t = e.previousSibling;
    return t instanceof F && this.canMergeWith.has(t) && this.model.schema.checkMerge(t, e);
  }
  /**
   * Checks whether specified node can be merged with next sibling element.
   *
   * @param node The node which could potentially be merged.
   */
  _canMergeRight(e) {
    const t = e.nextSibling;
    return t instanceof F && this.canMergeWith.has(t) && this.model.schema.checkMerge(e, t);
  }
  /**
   * Tries wrapping the node in a new paragraph and inserting it this way.
   *
   * @param node The node which needs to be autoparagraphed.
   */
  _tryAutoparagraphing(e) {
    const t = this.writer.createElement("paragraph");
    this._getAllowedIn(this.position.parent, t) && this.schema.checkChild(t, e) && (t._appendChild(e), this._handleNode(t));
  }
  /**
   * Checks if a node can be inserted in the given position or it would be accepted if a paragraph would be inserted.
   * It also handles inserting the paragraph.
   *
   * @returns Whether an allowed position was found.
   * `false` is returned if the node isn't allowed at the current position or in auto paragraph, `true` if was.
   */
  _checkAndAutoParagraphToAllowedPosition(e) {
    if (this.schema.checkChild(this.position.parent, e))
      return !0;
    if (!this.schema.checkChild(this.position.parent, "paragraph") || !this.schema.checkChild("paragraph", e))
      return !1;
    this._insertPartialFragment();
    const t = this.writer.createElement("paragraph");
    return this.writer.insert(t, this.position), this._setAffectedBoundaries(this.position), this._lastAutoParagraph = t, this.position = this.writer.createPositionAt(t, 0), !0;
  }
  /**
   * @returns Whether an allowed position was found.
   * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.
   */
  _checkAndSplitToAllowedPosition(e) {
    const t = this._getAllowedIn(this.position.parent, e);
    if (!t)
      return !1;
    for (t != this.position.parent && this._insertPartialFragment(); t != this.position.parent; )
      if (this.position.isAtStart) {
        const i = this.position.parent;
        this.position = this.writer.createPositionBefore(i), i.isEmpty && i.parent === t && this.writer.remove(i);
      } else if (this.position.isAtEnd)
        this.position = this.writer.createPositionAfter(this.position.parent);
      else {
        const i = this.writer.createPositionAfter(this.position.parent);
        this._setAffectedBoundaries(this.position), this.writer.split(this.position), this.position = i, this.canMergeWith.add(this.position.nodeAfter);
      }
    return !0;
  }
  /**
   * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.
   *
   * @param contextElement The element in which context the node should be checked.
   * @param childNode The node to check.
   */
  _getAllowedIn(e, t) {
    return this.schema.checkChild(e, t) ? e : this.schema.isLimit(e) ? null : this._getAllowedIn(e.parent, t);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function $h(n, e, t = "auto") {
  const i = n.getSelectedElement();
  if (i && e.schema.isObject(i) && !e.schema.isInline(i))
    return t == "before" || t == "after" ? e.createRange(e.createPositionAt(i, t)) : e.createRangeOn(i);
  const s = de(n.getSelectedBlocks());
  if (!s)
    return e.createRange(n.focus);
  if (s.isEmpty)
    return e.createRange(e.createPositionAt(s, 0));
  const r = e.createPositionAfter(s);
  return n.focus.isTouching(r) ? e.createRange(r) : e.createRange(e.createPositionBefore(s));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function j2(n, e, t, i = {}) {
  if (!n.schema.isObject(e))
    throw new f("insertobject-element-not-an-object", n, { object: e });
  const s = t || n.document.selection;
  let r = s;
  i.findOptimalPosition && n.schema.isBlock(e) && (r = n.createSelection($h(s, n, i.findOptimalPosition)));
  const o = de(s.getSelectedBlocks()), a = {};
  return o && Object.assign(a, n.schema.getAttributesWithProperty(o, "copyOnReplace", !0)), n.change((l) => {
    r.isCollapsed || n.deleteContent(r, { doNotAutoparagraph: !0 });
    let c = e;
    const u = r.anchor.parent;
    !n.schema.checkChild(u, e) && n.schema.checkChild(u, "paragraph") && n.schema.checkChild("paragraph", e) && (c = l.createElement("paragraph"), l.insert(e, c)), n.schema.setAllowedAttributes(c, a, l);
    const h = n.insertContent(c, r);
    return h.isCollapsed || i.setSelection && q2(l, e, i.setSelection, a), h;
  });
}
function q2(n, e, t, i) {
  const s = n.model;
  if (t == "on") {
    n.setSelection(e, "on");
    return;
  }
  if (t != "after")
    throw new f("insertobject-invalid-place-parameter-value", s);
  let r = e.nextSibling;
  if (s.schema.isInline(e)) {
    n.setSelection(e, "after");
    return;
  }
  !(r && s.schema.checkChild(r, "$text")) && s.schema.checkChild(e.parent, "paragraph") && (r = n.createElement("paragraph"), s.schema.setAllowedAttributes(r, i, n), s.insertContent(r, n.createPositionAfter(e))), r && n.setSelection(r, 0);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const G2 = ' ,.?!:;"-()';
function K2(n, e, t = {}) {
  const i = n.schema, s = t.direction != "backward", r = t.unit ? t.unit : "character", o = !!t.treatEmojiAsSingleUnit, a = e.focus, l = new Le({
    boundaries: X2(a, s),
    singleCharacters: !0,
    direction: s ? "forward" : "backward"
  }), c = { walker: l, schema: i, isForward: s, unit: r, treatEmojiAsSingleUnit: o };
  let u;
  for (; u = l.next(); ) {
    if (u.done)
      return;
    const h = J2(c, u.value);
    if (h) {
      e instanceof Ve ? n.change((d) => {
        d.setSelectionFocus(h);
      }) : e.setFocus(h);
      return;
    }
  }
}
function J2(n, e) {
  const { isForward: t, walker: i, unit: s, schema: r, treatEmojiAsSingleUnit: o } = n, { type: a, item: l, nextPosition: c } = e;
  if (a == "text")
    return n.unit === "word" ? Z2(i, t) : Y2(i, s, o);
  if (a == (t ? "elementStart" : "elementEnd")) {
    if (r.isSelectable(l))
      return w._createAt(l, t ? "after" : "before");
    if (r.checkChild(c, "$text"))
      return c;
  } else {
    if (r.isLimit(l)) {
      i.skip(() => !0);
      return;
    }
    if (r.checkChild(c, "$text"))
      return c;
  }
}
function Y2(n, e, t) {
  const i = n.position.textNode;
  if (i) {
    const s = i.data;
    let r = n.position.offset - i.startOffset;
    for (; Hr(s, r) || e == "character" && Wr(s, r) || t && Gu(s, r); )
      n.next(), r = n.position.offset - i.startOffset;
  }
  return n.position;
}
function Z2(n, e) {
  let t = n.position.textNode;
  for (t || (t = e ? n.position.nodeAfter : n.position.nodeBefore); t && t.is("$text"); ) {
    const i = n.position.offset - t.startOffset;
    if (e5(t, i, e))
      t = e ? n.position.nodeAfter : n.position.nodeBefore;
    else {
      if (Q2(t.data, i, e))
        break;
      n.next();
    }
  }
  return n.position;
}
function X2(n, e) {
  const t = n.root, i = w._createAt(t, e ? "end" : 0);
  return e ? new g(n, i) : new g(i, n);
}
function Q2(n, e, t) {
  const i = e + (t ? 0 : -1);
  return G2.includes(n.charAt(i));
}
function e5(n, e, t) {
  return e === (t ? n.offsetSize : 0);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
let t5 = class extends H() {
  // @if CK_DEBUG_ENGINE // private _operationLogs: Array<string>;
  // @if CK_DEBUG_ENGINE // private _appliedOperations: Array<Operation>;
  constructor() {
    super(), this.markers = new P2(), this.document = new T2(this), this.schema = new Hy(), this._pendingChanges = [], this._currentWriter = null, ["deleteContent", "modifySelection", "getSelectedContent", "applyOperation"].forEach((e) => this.decorate(e)), this.on("applyOperation", (e, t) => {
      t[0]._validate();
    }, { priority: "highest" }), this.schema.register("$root", {
      isLimit: !0
    }), this.schema.register("$container", {
      allowIn: ["$root", "$container"]
    }), this.schema.register("$block", {
      allowIn: ["$root", "$container"],
      isBlock: !0
    }), this.schema.register("$blockObject", {
      allowWhere: "$block",
      isBlock: !0,
      isObject: !0
    }), this.schema.register("$inlineObject", {
      allowWhere: "$text",
      allowAttributesOf: "$text",
      isInline: !0,
      isObject: !0
    }), this.schema.register("$text", {
      allowIn: "$block",
      isInline: !0,
      isContent: !0
    }), this.schema.register("$clipboardHolder", {
      allowContentOf: "$root",
      allowChildren: "$text",
      isLimit: !0
    }), this.schema.register("$documentFragment", {
      allowContentOf: "$root",
      allowChildren: "$text",
      isLimit: !0
    }), this.schema.register("$marker"), this.schema.addChildCheck((e, t) => {
      if (t.name === "$marker")
        return !0;
    }), Oy(this), this.document.registerPostFixer(Th), this.on("insertContent", (e, [t, i]) => {
      e.return = W2(this, t, i);
    }), this.on("insertObject", (e, [t, i, s]) => {
      e.return = j2(this, t, i, s);
    }), this.on("canEditAt", (e) => {
      const t = !this.document.isReadOnly;
      e.return = t, t || e.stop();
    });
  }
  /**
   * The `change()` method is the primary way of changing the model. You should use it to modify all document nodes
   * (including detached nodes – i.e. nodes not added to the {@link module:engine/model/model~Model#document model document}),
   * the {@link module:engine/model/document~Document#selection document's selection}, and
   * {@link module:engine/model/model~Model#markers model markers}.
   *
   * ```ts
   * model.change( writer => {
   * 	writer.insertText( 'foo', paragraph, 'end' );
   * } );
   * ```
   *
   * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they are combined
   * into a single undo step.
   *
   * ```ts
   * model.change( writer => {
   * 	writer.insertText( 'foo', paragraph, 'end' ); // foo.
   *
   * 	model.change( writer => {
   * 		writer.insertText( 'bar', paragraph, 'end' ); // foobar.
   * 	} );
   *
   * 	writer.insertText( 'bom', paragraph, 'end' ); // foobarbom.
   * } );
   * ```
   *
   * The callback of the `change()` block is executed synchronously.
   *
   * You can also return a value from the change block.
   *
   * ```ts
   * const img = model.change( writer => {
   * 	return writer.createElement( 'img' );
   * } );
   * ```
   *
   * @see #enqueueChange
   * @typeParam TReturn The return type of the provided callback.
   * @param callback Callback function which may modify the model.
   */
  change(e) {
    try {
      return this._pendingChanges.length === 0 ? (this._pendingChanges.push({ batch: new Ht(), callback: e }), this._runPendingChanges()[0]) : e(this._currentWriter);
    } catch (t) {
      /* istanbul ignore next -- @preserve */
      f.rethrowUnexpectedError(t, this);
    }
  }
  enqueueChange(e, t) {
    try {
      e ? typeof e == "function" ? (t = e, e = new Ht()) : e instanceof Ht || (e = new Ht(e)) : e = new Ht(), this._pendingChanges.push({ batch: e, callback: t }), this._pendingChanges.length == 1 && this._runPendingChanges();
    } catch (i) {
      /* istanbul ignore next -- @preserve */
      f.rethrowUnexpectedError(i, this);
    }
  }
  /**
   * {@link module:utils/observablemixin~Observable#decorate Decorated} function for applying
   * {@link module:engine/model/operation/operation~Operation operations} to the model.
   *
   * This is a low-level way of changing the model. It is exposed for very specific use cases (like the undo feature).
   * Normally, to modify the model, you will want to use {@link module:engine/model/writer~Writer `Writer`}.
   * See also {@glink framework/architecture/editing-engine#changing-the-model Changing the model} section
   * of the {@glink framework/architecture/editing-engine Editing architecture} guide.
   *
   * @param operation The operation to apply.
   */
  applyOperation(e) {
    e._execute();
  }
  // @if CK_DEBUG_ENGINE // public getAppliedOperation(): string {
  // @if CK_DEBUG_ENGINE // 	if ( !this._appliedOperations ) {
  // @if CK_DEBUG_ENGINE // 		return '';
  // @if CK_DEBUG_ENGINE // 	}
  // @if CK_DEBUG_ENGINE // 	return this._appliedOperations.map( operation => JSON.stringify( operation ) ).join( '-------' );
  // @if CK_DEBUG_ENGINE // }
  // @if CK_DEBUG_ENGINE // public createReplayer( stringifiedOperations: string ): typeof OperationReplayer {
  // @if CK_DEBUG_ENGINE // 	return new OperationReplayer( this, '-------', stringifiedOperations );
  // @if CK_DEBUG_ENGINE // }
  /**
   * Inserts content at the position in the editor specified by the selection, as one would expect the paste
   * functionality to work.
   *
   * **Note**: If you want to insert an {@glink framework/deep-dive/schema#object-elements object element}
   * (e.g. a {@link module:widget/utils~toWidget widget}), see {@link #insertObject} instead.
   *
   * This is a high-level method. It takes the {@link #schema schema} into consideration when inserting
   * the content, clears the given selection's content before inserting nodes and moves the selection
   * to its target position at the end of the process.
   * It can split elements, merge them, wrap bare text nodes with paragraphs, etc. &mdash; just like the
   * pasting feature should do.
   *
   * For lower-level methods see {@link module:engine/model/writer~Writer `Writer`}.
   *
   * This method, unlike {@link module:engine/model/writer~Writer `Writer`}'s methods, does not have to be used
   * inside a {@link #change `change()` block}.
   *
   * # Conversion and schema
   *
   * Inserting elements and text nodes into the model is not enough to make CKEditor 5 render that content
   * to the user. CKEditor 5 implements a model-view-controller architecture and what `model.insertContent()` does
   * is only adding nodes to the model. Additionally, you need to define
   * {@glink framework/architecture/editing-engine#conversion converters} between the model and view
   * and define those nodes in the {@glink framework/architecture/editing-engine#schema schema}.
   *
   * So, while this method may seem similar to CKEditor 4 `editor.insertHtml()` (in fact, both methods
   * are used for paste-like content insertion), the CKEditor 5 method cannot be use to insert arbitrary HTML
   * unless converters are defined for all elements and attributes in that HTML.
   *
   * # Examples
   *
   * Using `insertContent()` with a manually created model structure:
   *
   * ```ts
   * // Let's create a document fragment containing such content as:
   * //
   * // <paragraph>foo</paragraph>
   * // <blockQuote>
   * //    <paragraph>bar</paragraph>
   * // </blockQuote>
   * const docFrag = editor.model.change( writer => {
   * 	const p1 = writer.createElement( 'paragraph' );
   * 	const p2 = writer.createElement( 'paragraph' );
   * 	const blockQuote = writer.createElement( 'blockQuote' );
   * 	const docFrag = writer.createDocumentFragment();
   *
   * 	writer.append( p1, docFrag );
   * 	writer.append( blockQuote, docFrag );
   * 	writer.append( p2, blockQuote );
   * 	writer.insertText( 'foo', p1 );
   * 	writer.insertText( 'bar', p2 );
   *
   * 	return docFrag;
   * } );
   *
   * // insertContent() does not have to be used in a change() block. It can, though,
   * // so this code could be moved to the callback defined above.
   * editor.model.insertContent( docFrag );
   * ```
   *
   * Using `insertContent()` with an HTML string converted to a model document fragment (similar to the pasting mechanism):
   *
   * ```ts
   * // You can create your own HtmlDataProcessor instance or use editor.data.processor
   * // if you have not overridden the default one (which is the HtmlDataProcessor instance).
   * const htmlDP = new HtmlDataProcessor( viewDocument );
   *
   * // Convert an HTML string to a view document fragment:
   * const viewFragment = htmlDP.toView( htmlString );
   *
   * // Convert the view document fragment to a model document fragment
   * // in the context of $root. This conversion takes the schema into
   * // account so if, for example, the view document fragment contained a bare text node,
   * // this text node cannot be a child of $root, so it will be automatically
   * // wrapped with a <paragraph>. You can define the context yourself (in the second parameter),
   * // and e.g. convert the content like it would happen in a <paragraph>.
   * // Note: The clipboard feature uses a custom context called $clipboardHolder
   * // which has a loosened schema.
   * const modelFragment = editor.data.toModel( viewFragment );
   *
   * editor.model.insertContent( modelFragment );
   * ```
   *
   * By default this method will use the document selection but it can also be used with a position, range or selection instance.
   *
   * ```ts
   * // Insert text at the current document selection position.
   * editor.model.change( writer => {
   * 	editor.model.insertContent( writer.createText( 'x' ) );
   * } );
   *
   * // Insert text at a given position - the document selection will not be modified.
   * editor.model.change( writer => {
   * 	editor.model.insertContent( writer.createText( 'x' ), doc.getRoot(), 2 );
   *
   * 	// Which is a shorthand for:
   * 	editor.model.insertContent( writer.createText( 'x' ), writer.createPositionAt( doc.getRoot(), 2 ) );
   * } );
   * ```
   *
   * If you want the document selection to be moved to the inserted content, use the
   * {@link module:engine/model/writer~Writer#setSelection `setSelection()`} method of the writer after inserting
   * the content:
   *
   * ```ts
   * editor.model.change( writer => {
   * 	const paragraph = writer.createElement( 'paragraph' );
   *
   * 	// Insert an empty paragraph at the beginning of the root.
   * 	editor.model.insertContent( paragraph, writer.createPositionAt( editor.model.document.getRoot(), 0 ) );
   *
   * 	// Move the document selection to the inserted paragraph.
   * 	writer.setSelection( paragraph, 'in' );
   * } );
   * ```
   *
   * If an instance of the {@link module:engine/model/selection~Selection model selection} is passed as `selectable`,
   * the new content will be inserted at the passed selection (instead of document selection):
   *
   * ```ts
   * editor.model.change( writer => {
   * 	// Create a selection in a paragraph that will be used as a place of insertion.
   * 	const selection = writer.createSelection( paragraph, 'in' );
   *
   * 	// Insert the new text at the created selection.
   * 	editor.model.insertContent( writer.createText( 'x' ), selection );
   *
   * 	// insertContent() modifies the passed selection instance so it can be used to set the document selection.
   * 	// Note: This is not necessary when you passed the document selection to insertContent().
   * 	writer.setSelection( selection );
   * } );
   * ```
   *
   * @fires insertContent
   * @param content The content to insert.
   * @param selectable The selection into which the content should be inserted.
   * If not provided the current model document selection will be used.
   * @param placeOrOffset To be used when a model item was passed as `selectable`.
   * This param defines a position in relation to that item.
   * at the insertion position.
   */
  insertContent(e, t, i, ...s) {
    const r = ps(t, i);
    return this.fire("insertContent", [e, r, i, ...s]);
  }
  /**
   * Inserts an {@glink framework/deep-dive/schema#object-elements object element} at a specific position in the editor content.
   *
   * This is a high-level API:
   * * It takes the {@link #schema schema} into consideration,
   * * It clears the content of passed `selectable` before inserting,
   * * It can move the selection at the end of the process,
   * * It will copy the selected block's attributes to preserve them upon insertion,
   * * It can split elements or wrap inline objects with paragraphs if they are not allowed in target position,
   * * etc.
   *
   * # Notes
   *
   * * If you want to insert a non-object content, see {@link #insertContent} instead.
   * * For lower-level API, see {@link module:engine/model/writer~Writer `Writer`}.
   * * Unlike {@link module:engine/model/writer~Writer `Writer`}, this method does not have to be used inside
   * a {@link #change `change()` block}.
   * * Inserting object into the model is not enough to make CKEditor 5 render that content to the user.
   * CKEditor 5 implements a model-view-controller architecture and what `model.insertObject()` does
   * is only adding nodes to the model. Additionally, you need to define
   * {@glink framework/architecture/editing-engine#conversion converters} between the model and view
   * and define those nodes in the {@glink framework/architecture/editing-engine#schema schema}.
   *
   * # Examples
   *
   * Use the following code to insert an object at the current selection and keep the selection on the inserted element:
   *
   * ```ts
   * const rawHtmlEmbedElement = writer.createElement( 'rawHtml' );
   *
   * model.insertObject( rawHtmlEmbedElement, null, null, {
   * 	setSelection: 'on'
   * } );
   * ```
   *
   * Use the following code to insert an object at the current selection and nudge the selection after the inserted object:
   *
   * ```ts
   * const pageBreakElement = writer.createElement( 'pageBreak' );
   *
   * model.insertObject( pageBreakElement, null, null, {
   * 	setSelection: 'after'
   * } );
   * ```
   *
   * Use the following code to insert an object at the current selection and avoid splitting the content (non-destructive insertion):
   *
   * ```ts
   * const tableElement = writer.createElement( 'table' );
   *
   * model.insertObject( tableElement, null, null, {
   * 	findOptimalPosition: 'auto'
   * } );
   * ```
   *
   * Use the following code to insert an object at the specific range (also: replace the content of the range):
   *
   * ```ts
   * const tableElement = writer.createElement( 'table' );
   * const range = model.createRangeOn( model.document.getRoot().getChild( 1 ) );
   *
   * model.insertObject( tableElement, range );
   * ```
   *
   * @param element An object to be inserted into the model document.
   * @param selectable A selectable where the content should be inserted. If not specified, the current
   * {@link module:engine/model/document~Document#selection document selection} will be used instead.
   * @param placeOrOffset Specifies the exact place or offset for the insertion to take place, relative to `selectable`.
   * @param options Additional options.
   * @param options.findOptimalPosition An option that, when set, adjusts the insertion position (relative to
   * `selectable` and `placeOrOffset`) so that the content of `selectable` is not split upon insertion (a.k.a. non-destructive insertion).
   * * When `'auto'`, the algorithm will decide whether to insert the object before or after `selectable` to avoid content splitting.
   * * When `'before'`, the closest position before `selectable` will be used that will not result in content splitting.
   * * When `'after'`, the closest position after `selectable` will be used that will not result in content splitting.
   *
   * Note that this option only works for block objects. Inline objects are inserted into text and do not split blocks.
   * @param options.setSelection An option that, when set, moves the
   * {@link module:engine/model/document~Document#selection document selection} after inserting the object.
   * * When `'on'`, the document selection will be set on the inserted object.
   * * When `'after'`, the document selection will move to the closest text node after the inserted object. If there is no
   * such text node, a paragraph will be created and the document selection will be moved inside it.
   * at the insertion position.
   */
  insertObject(e, t, i, s, ...r) {
    const o = ps(t, i);
    return this.fire("insertObject", [e, o, s, s, ...r]);
  }
  /**
   * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.
   *
   * **Note:** For the sake of predictability, the resulting selection should always be collapsed.
   * In cases where a feature wants to modify deleting behavior so selection isn't collapsed
   * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),
   * then that behavior should be implemented in the view's listener. At the same time, the table feature
   * will need to modify this method's behavior too, e.g. to "delete contents and then collapse
   * the selection inside the last selected cell" or "delete the row and collapse selection somewhere near".
   * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.
   *
   * @fires deleteContent
   * @param selection Selection of which the content should be deleted.
   * @param options.leaveUnmerged Whether to merge elements after removing the content of the selection.
   *
   * For example `<heading1>x[x</heading1><paragraph>y]y</paragraph>` will become:
   *
   * * `<heading1>x^y</heading1>` with the option disabled (`leaveUnmerged == false`)
   * * `<heading1>x^</heading1><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).
   *
   * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}
   * elements will not be merged.
   *
   * @param options.doNotResetEntireContent Whether to skip replacing the entire content with a
   * paragraph when the entire content was selected.
   *
   * For example `<heading1>[x</heading1><paragraph>y]</paragraph>` will become:
   *
   * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)
   * * `<heading1>^</heading1>` with enabled (`doNotResetEntireContent == true`)
   *
   * @param options.doNotAutoparagraph Whether to create a paragraph if after content deletion selection is moved
   * to a place where text cannot be inserted.
   *
   * For example `<paragraph>x</paragraph>[<imageBlock src="foo.jpg"></imageBlock>]` will become:
   *
   * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)
   * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).
   *
   * **Note:** if there is no valid position for the selection, the paragraph will always be created:
   *
   * `[<imageBlock src="foo.jpg"></imageBlock>]` -> `<paragraph>[]</paragraph>`.
   *
   * @param options.direction The direction in which the content is being consumed.
   * Deleting backward corresponds to using the <kbd>Backspace</kbd> key, while deleting content forward corresponds to
   * the <kbd>Shift</kbd>+<kbd>Backspace</kbd> keystroke.
   */
  deleteContent(e, t) {
    V2(this, e, t);
  }
  /**
   * Modifies the selection. Currently, the supported modifications are:
   *
   * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.
   * Possible values for `unit` are:
   *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one
   *  character in `String` sense. However, unicode also defines "combing marks". These are special symbols, that combines
   *  with a symbol before it ("base character") to create one user-perceived character. For example, `q̣̇` is a normal
   *  letter `q` with two "combining marks": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending
   *  selection by one position, it is correct to include both "base character" and all of it's "combining marks". That is
   *  why `'character'` value is most natural and common method of modifying selection.
   *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert
   *  selection between "base character" and "combining mark", because "combining marks" have their own unicode code points.
   *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by
   *  two characters, called "surrogate pairs". Halves of "surrogate pairs" have a meaning only when placed next to each other.
   *  For example `𨭎` is represented in `String` by `\uD862\uDF4E`. Both `\uD862` and `\uDF4E` do not have any meaning
   *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection
   *  extension will include whole "surrogate pair".
   *  * `'word'` - moves selection by a whole word.
   *
   * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.
   *
   * @fires modifySelection
   * @param selection The selection to modify.
   * @param options.direction The direction in which the selection should be modified.
   * @param options.unit The unit by which selection should be modified.
   * @param options.treatEmojiAsSingleUnit Whether multi-characer emoji sequences should be handled as single unit.
   */
  modifySelection(e, t) {
    K2(this, e, t);
  }
  /**
   * Gets a clone of the selected content.
   *
   * For example, for the following selection:
   *
   * ```html
   * <paragraph>x</paragraph>
   * <blockQuote>
   * 	<paragraph>y</paragraph>
   * 	<heading1>fir[st</heading1>
   * </blockQuote>
   * <paragraph>se]cond</paragraph>
   * <paragraph>z</paragraph>
   * ```
   *
   * It will return a document fragment with such a content:
   *
   * ```html
   * <blockQuote>
   * 	<heading1>st</heading1>
   * </blockQuote>
   * <paragraph>se</paragraph>
   * ```
   *
   * @fires getSelectedContent
   * @param selection The selection of which content will be returned.
   */
  getSelectedContent(e) {
    return H2(this, e);
  }
  /**
   * Checks whether the given {@link module:engine/model/range~Range range} or
   * {@link module:engine/model/element~Element element} has any meaningful content.
   *
   * Meaningful content is:
   *
   * * any text node (`options.ignoreWhitespaces` allows controlling whether this text node must also contain
   * any non-whitespace characters),
   * * or any {@link module:engine/model/schema~Schema#isContent content element},
   * * or any {@link module:engine/model/markercollection~Marker marker} which
   * {@link module:engine/model/markercollection~Marker#_affectsData affects data}.
   *
   * This means that a range containing an empty `<paragraph></paragraph>` is not considered to have a meaningful content.
   * However, a range containing an `<imageBlock></imageBlock>` (which would normally be marked in the schema as an object element)
   * is considered non-empty.
   *
   * @param rangeOrElement Range or element to check.
   * @param options.ignoreWhitespaces Whether text node with whitespaces only should be considered empty.
   * @param options.ignoreMarkers Whether markers should be ignored.
   */
  hasContent(e, t = {}) {
    const i = e instanceof g ? e : g._createIn(e);
    if (i.isCollapsed)
      return !1;
    const { ignoreWhitespaces: s = !1, ignoreMarkers: r = !1 } = t;
    if (!r) {
      for (const o of this.markers.getMarkersIntersectingRange(i))
        if (o.affectsData)
          return !0;
    }
    for (const o of i.getItems())
      if (this.schema.isContent(o))
        if (o.is("$textProxy"))
          if (s) {
            if (o.data.search(/\S/) !== -1)
              return !0;
          } else
            return !0;
        else
          return !0;
    return !1;
  }
  /**
   * Check whether given selectable is at a place in the model where it can be edited (returns `true`) or not (returns `false`).
   *
   * Should be used instead of {@link module:core/editor/editor~Editor#isReadOnly} to check whether a user action can happen at
   * given selectable. It may be decorated and used differently in different environment (e.g. multi-root editor can disable
   * a particular root).
   *
   * This method is decorated. Although this method accepts any parameter of `Selectable` type, the
   * {@link ~Model#event:canEditAt `canEditAt` event} is fired with `selectable` normalized to an instance of
   * {@link module:engine/model/selection~Selection} or {@link module:engine/model/documentselection~DocumentSelection}
   *
   * @fires canEditAt
   */
  canEditAt(e) {
    const t = ps(e);
    return this.fire("canEditAt", [t]);
  }
  /**
   * Creates a position from the given root and path in that root.
   *
   * Note: This method is also available as
   * {@link module:engine/model/writer~Writer#createPositionFromPath `Writer#createPositionFromPath()`}.
   *
   * @param root Root of the position.
   * @param path Position path. See {@link module:engine/model/position~Position#path}.
   * @param stickiness Position stickiness. See {@link module:engine/model/position~PositionStickiness}.
   */
  createPositionFromPath(e, t, i) {
    return new w(e, t, i);
  }
  /**
   * Creates position at the given location. The location can be specified as:
   *
   * * a {@link module:engine/model/position~Position position},
   * * a parent element and offset in that element,
   * * a parent element and `'end'` (the position will be set at the end of that element),
   * * a {@link module:engine/model/item~Item model item} and `'before'` or `'after'`
   * (the position will be set before or after the given model item).
   *
   * This method is a shortcut to other factory methods such as:
   *
   * * {@link module:engine/model/model~Model#createPositionBefore `createPositionBefore()`},
   * * {@link module:engine/model/model~Model#createPositionAfter `createPositionAfter()`}.
   *
   * Note: This method is also available as
   * {@link module:engine/model/writer~Writer#createPositionAt `Writer#createPositionAt()`},
   *
   * @param itemOrPosition
   * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/model/item~Item model item}.
   */
  createPositionAt(e, t) {
    return w._createAt(e, t);
  }
  /**
   * Creates a new position after the given {@link module:engine/model/item~Item model item}.
   *
   * Note: This method is also available as
   * {@link module:engine/model/writer~Writer#createPositionAfter `Writer#createPositionAfter()`}.
   *
   * @param item Item after which the position should be placed.
   */
  createPositionAfter(e) {
    return w._createAfter(e);
  }
  /**
   * Creates a new position before the given {@link module:engine/model/item~Item model item}.
   *
   * Note: This method is also available as
   * {@link module:engine/model/writer~Writer#createPositionBefore `Writer#createPositionBefore()`}.
   *
   * @param item Item before which the position should be placed.
   */
  createPositionBefore(e) {
    return w._createBefore(e);
  }
  /**
   * Creates a range spanning from the `start` position to the `end` position.
   *
   * Note: This method is also available as
   * {@link module:engine/model/writer~Writer#createRange `Writer#createRange()`}:
   *
   * ```ts
   * model.change( writer => {
   * 	const range = writer.createRange( start, end );
   * } );
   * ```
   *
   * @param start Start position.
   * @param end End position. If not set, the range will be collapsed to the `start` position.
   */
  createRange(e, t) {
    return new g(e, t);
  }
  /**
   * Creates a range inside the given element which starts before the first child of
   * that element and ends after the last child of that element.
   *
   * Note: This method is also available as
   * {@link module:engine/model/writer~Writer#createRangeIn `Writer#createRangeIn()`}:
   *
   * ```ts
   * model.change( writer => {
   * 	const range = writer.createRangeIn( paragraph );
   * } );
   * ```
   *
   * @param element Element which is a parent for the range.
   */
  createRangeIn(e) {
    return g._createIn(e);
  }
  /**
   * Creates a range that starts before the given {@link module:engine/model/item~Item model item} and ends after it.
   *
   * Note: This method is also available on `writer` instance as
   * {@link module:engine/model/writer~Writer#createRangeOn `Writer.createRangeOn()`}:
   *
   * ```ts
   * model.change( writer => {
   * 	const range = writer.createRangeOn( paragraph );
   * } );
   * ```
   *
   * @param item
   */
  createRangeOn(e) {
    return g._createOn(e);
  }
  createSelection(...e) {
    return new _e(...e);
  }
  /**
   * Creates a {@link module:engine/model/batch~Batch} instance.
   *
   * **Note:** In most cases creating a batch instance is not necessary as they are created when using:
   *
   * * {@link #change `change()`},
   * * {@link #enqueueChange `enqueueChange()`}.
   *
   * @param type {@link module:engine/model/batch~Batch#constructor The type} of the batch.
   */
  createBatch(e) {
    return new Ht(e);
  }
  /**
   * Creates an operation instance from a JSON object (parsed JSON string).
   *
   * This is an alias for {@link module:engine/model/operation/operationfactory~OperationFactory.fromJSON `OperationFactory.fromJSON()`}.
   *
   * @param json Deserialized JSON object.
   */
  createOperationFromJSON(e) {
    return m2.fromJSON(e, this.document);
  }
  /**
   * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.
   */
  destroy() {
    this.document.destroy(), this.stopListening();
  }
  /**
   * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}
   * which calls callbacks and returns array of values returned by these callbacks.
   *
   */
  _runPendingChanges() {
    const e = [];
    this.fire("_beforeChanges");
    try {
      for (; this._pendingChanges.length; ) {
        const t = this._pendingChanges[0].batch;
        this._currentWriter = new I2(this, t);
        const i = this._pendingChanges[0].callback(this._currentWriter);
        e.push(i), this.document._handleChangeBlock(this._currentWriter), this._pendingChanges.shift(), this._currentWriter = null;
      }
    } finally {
      this._pendingChanges.length = 0, this._currentWriter = null, this.fire("_afterChanges");
    }
    return e;
  }
};
function ps(n, e) {
  if (n)
    return n instanceof _e || n instanceof Ve ? n : n instanceof Lt ? e || e === 0 ? new _e(n, e) : n.is("rootElement") ? new _e(n, "in") : new _e(n, "on") : new _e(n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class i5 extends Nt {
  constructor() {
    super(...arguments), this.domEventType = "click";
  }
  /**
   * @inheritDoc
   */
  onDomEvent(e) {
    this.fire(e.type, e);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class qn extends Nt {
  constructor() {
    super(...arguments), this.domEventType = ["mousedown", "mouseup", "mouseover", "mouseout"];
  }
  /**
   * @inheritDoc
   */
  onDomEvent(e) {
    this.fire(e.type, e);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Qr {
  /**
   * @param document The view document instance in which this upcast writer operates.
   */
  constructor(e) {
    this.document = e;
  }
  /**
   * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.
   *
   * @param children A list of nodes to be inserted into the created document fragment.
   * @returns The created document fragment.
   */
  createDocumentFragment(e) {
    return new Pt(this.document, e);
  }
  /**
   * Creates a new {@link module:engine/view/element~Element} instance.
   *
   * Attributes can be passed in various formats:
   *
   * ```ts
   * upcastWriter.createElement( 'div', { class: 'editor', contentEditable: 'true' } ); // object
   * upcastWriter.createElement( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator
   * upcastWriter.createElement( 'div', mapOfAttributes ); // map
   * ```
   *
   * @param name Node name.
   * @param attrs Collection of attributes.
   * @param children A list of nodes to be inserted into created element.
   * @returns Created element.
   */
  createElement(e, t, i) {
    return new Re(this.document, e, t, i);
  }
  /**
   * Creates a new {@link module:engine/view/text~Text} instance.
   *
   * @param data The text's data.
   * @returns The created text node.
   */
  createText(e) {
    return new q(this.document, e);
  }
  /**
   * Clones the provided element.
   *
   * @see module:engine/view/element~Element#_clone
   * @param element Element to be cloned.
   * @param deep If set to `true` clones element and all its children recursively. When set to `false`,
   * element will be cloned without any children.
   * @returns Clone of this element.
   */
  clone(e, t = !1) {
    return e._clone(t);
  }
  /**
   * Appends a child node or a list of child nodes at the end of this node
   * and sets the parent of these nodes to this element.
   *
   * @see module:engine/view/element~Element#_appendChild
   * @param items Items to be inserted.
   * @param element Element to which items will be appended.
   * @returns Number of appended nodes.
   */
  appendChild(e, t) {
    return t._appendChild(e);
  }
  /**
   * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to
   * this element.
   *
   * @see module:engine/view/element~Element#_insertChild
   * @param index Offset at which nodes should be inserted.
   * @param items Items to be inserted.
   * @param element Element to which items will be inserted.
   * @returns Number of inserted nodes.
   */
  insertChild(e, t, i) {
    return i._insertChild(e, t);
  }
  /**
   * Removes the given number of child nodes starting at the given index and set the parent of these nodes to `null`.
   *
   * @see module:engine/view/element~Element#_removeChildren
   * @param index Offset from which nodes will be removed.
   * @param howMany Number of nodes to remove.
   * @param element Element which children will be removed.
   * @returns The array containing removed nodes.
   */
  removeChildren(e, t, i) {
    return i._removeChildren(e, t);
  }
  /**
   * Removes given element from the view structure. Will not have effect on detached elements.
   *
   * @param element Element which will be removed.
   * @returns The array containing removed nodes.
   */
  remove(e) {
    const t = e.parent;
    return t ? this.removeChildren(t.getChildIndex(e), 1, t) : [];
  }
  /**
   * Replaces given element with the new one in the view structure. Will not have effect on detached elements.
   *
   * @param oldElement Element which will be replaced.
   * @param newElement Element which will be inserted in the place of the old element.
   * @returns Whether old element was successfully replaced.
   */
  replace(e, t) {
    const i = e.parent;
    if (i) {
      const s = i.getChildIndex(e);
      return this.removeChildren(s, 1, i), this.insertChild(s, t, i), !0;
    }
    return !1;
  }
  /**
   * Removes given element from view structure and places its children in its position.
   * It does nothing if element has no parent.
   *
   * @param element Element to unwrap.
   */
  unwrapElement(e) {
    const t = e.parent;
    if (t) {
      const i = t.getChildIndex(e);
      this.remove(e), this.insertChild(i, e.getChildren(), t);
    }
  }
  /**
   * Renames element by creating a copy of a given element but with its name changed and then moving contents of the
   * old element to the new one.
   *
   * Since this function creates a new element and removes the given one, the new element is returned to keep reference.
   *
   * @param newName New element name.
   * @param  element Element to be renamed.
   * @returns New element or null if the old element was not replaced (happens for detached elements).
   */
  rename(e, t) {
    const i = new Re(this.document, e, t.getAttributes(), t.getChildren());
    return this.replace(t, i) ? i : null;
  }
  /**
   * Adds or overwrites element's attribute with a specified key and value.
   *
   * ```ts
   * writer.setAttribute( 'href', 'http://ckeditor.com', linkElement );
   * ```
   *
   * @see module:engine/view/element~Element#_setAttribute
   * @param key Attribute key.
   * @param value Attribute value.
   * @param element Element for which attribute will be set.
   */
  setAttribute(e, t, i) {
    i._setAttribute(e, t);
  }
  /**
   * Removes attribute from the element.
   *
   * ```ts
   * writer.removeAttribute( 'href', linkElement );
   * ```
   *
   * @see module:engine/view/element~Element#_removeAttribute
   * @param key Attribute key.
   * @param element Element from which attribute will be removed.
   */
  removeAttribute(e, t) {
    t._removeAttribute(e);
  }
  /**
   * Adds specified class to the element.
   *
   * ```ts
   * writer.addClass( 'foo', linkElement );
   * writer.addClass( [ 'foo', 'bar' ], linkElement );
   * ```
   *
   * @see module:engine/view/element~Element#_addClass
   * @param className Single class name or array of class names which will be added.
   * @param element Element for which class will be added.
   */
  addClass(e, t) {
    t._addClass(e);
  }
  /**
   * Removes specified class from the element.
   *
   * ```ts
   * writer.removeClass( 'foo', linkElement );
   * writer.removeClass( [ 'foo', 'bar' ], linkElement );
   * ```
   *
   * @see module:engine/view/element~Element#_removeClass
   * @param className Single class name or array of class names which will be removed.
   * @param element Element from which class will be removed.
   */
  removeClass(e, t) {
    t._removeClass(e);
  }
  setStyle(e, t, i) {
    me(e) && i === void 0 ? t._setStyle(e) : i._setStyle(e, t);
  }
  /**
   * Removes specified style from the element.
   *
   * ```ts
   * writer.removeStyle( 'color', element );  // Removes 'color' style.
   * writer.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.
   * ```
   *
   * **Note**: This method can work with normalized style names if
   * {@link module:engine/controller/datacontroller~DataController#addStyleProcessorRules a particular style processor rule is enabled}.
   * See {@link module:engine/view/stylesmap~StylesMap#remove `StylesMap#remove()`} for details.
   *
   * @see module:engine/view/element~Element#_removeStyle
   * @param property Style property name or names to be removed.
   * @param element Element from which style will be removed.
   */
  removeStyle(e, t) {
    t._removeStyle(e);
  }
  /**
   * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,
   * so they can be used to add special data to elements.
   *
   * @see module:engine/view/element~Element#_setCustomProperty
   * @param key Custom property name/key.
   * @param value Custom property value to be stored.
   * @param element Element for which custom property will be set.
   */
  setCustomProperty(e, t, i) {
    i._setCustomProperty(e, t);
  }
  /**
   * Removes a custom property stored under the given key.
   *
   * @see module:engine/view/element~Element#_removeCustomProperty
   * @param key Name/key of the custom property to be removed.
   * @param element Element from which the custom property will be removed.
   * @returns Returns true if property was removed.
   */
  removeCustomProperty(e, t) {
    return t._removeCustomProperty(e);
  }
  /**
   * Creates position at the given location. The location can be specified as:
   *
   * * a {@link module:engine/view/position~Position position},
   * * parent element and offset (offset defaults to `0`),
   * * parent element and `'end'` (sets position at the end of that element),
   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).
   *
   * This method is a shortcut to other constructors such as:
   *
   * * {@link #createPositionBefore},
   * * {@link #createPositionAfter},
   *
   * @param offset Offset or one of the flags. Used only when first parameter is a {@link module:engine/view/item~Item view item}.
   */
  createPositionAt(e, t) {
    return v._createAt(e, t);
  }
  /**
   * Creates a new position after given view item.
   *
   * @param item View item after which the position should be located.
   */
  createPositionAfter(e) {
    return v._createAfter(e);
  }
  /**
   * Creates a new position before given view item.
   *
   * @param item View item before which the position should be located.
   */
  createPositionBefore(e) {
    return v._createBefore(e);
  }
  /**
   * Creates a range spanning from `start` position to `end` position.
   *
   * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.
   *
   * @param start Start position.
   * @param end End position. If not set, range will be collapsed at `start` position.
   */
  createRange(e, t) {
    return new P(e, t);
  }
  /**
   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.
   */
  createRangeOn(e) {
    return P._createOn(e);
  }
  /**
   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of
   * that element and ends after the last child of that element.
   *
   * @param element Element which is a parent for the range.
   */
  createRangeIn(e) {
    return P._createIn(e);
  }
  createSelection(...e) {
    return new ht(...e);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class n5 {
  /**
   * Creates collection instance.
   */
  constructor() {
    this._commands = /* @__PURE__ */ new Map();
  }
  /**
   * Registers a new command.
   *
   * @param commandName The name of the command.
   */
  add(e, t) {
    this._commands.set(e, t);
  }
  /**
   * Retrieves a command from the collection.
   *
   * @param commandName The name of the command.
   */
  get(e) {
    return this._commands.get(e);
  }
  /**
   * Executes a command.
   *
   * @param commandName The name of the command.
   * @param commandParams Command parameters.
   * @returns The value returned by the {@link module:core/command~Command#execute `command.execute()`}.
   */
  execute(e, ...t) {
    const i = this.get(e);
    if (!i)
      throw new f("commandcollection-command-not-found", this, { commandName: e });
    return i.execute(...t);
  }
  /**
   * Returns iterator of command names.
   */
  *names() {
    yield* this._commands.keys();
  }
  /**
   * Returns iterator of command instances.
   */
  *commands() {
    yield* this._commands.values();
  }
  /**
   * Iterable interface.
   *
   * Returns `[ commandName, commandInstance ]` pairs.
   */
  [Symbol.iterator]() {
    return this._commands[Symbol.iterator]();
  }
  /**
   * Destroys all collection commands.
   */
  destroy() {
    for (const e of this.commands())
      e.destroy();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class s5 extends ke {
  /**
   * Creates an instance of the keystroke handler.
   */
  constructor(e) {
    super(), this.editor = e;
  }
  /**
   * Registers a handler for the specified keystroke.
   *
   * The handler can be specified as a command name or a callback.
   *
   * @param keystroke Keystroke defined in a format accepted by
   * the {@link module:utils/keyboard~parseKeystroke} function.
   * @param callback If a string is passed, then the keystroke will
   * {@link module:core/editor/editor~Editor#execute execute a command}.
   * If a function, then it will be called with the
   * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and
   * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.
   * @param options Additional options.
   * @param options.priority The priority of the keystroke callback. The higher the priority value
   * the sooner the callback will be executed. Keystrokes having the same priority
   * are called in the order they were added.
   */
  set(e, t, i = {}) {
    if (typeof t == "string") {
      const s = t;
      t = (r, o) => {
        this.editor.execute(s), o();
      };
    }
    super.set(e, t, i);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class r5 extends H() {
  /**
   * Creates a new instance of the editor class.
   *
   * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.
   *
   * @param config The editor configuration.
   */
  constructor(e = {}) {
    super();
    const t = this.constructor, i = e.language || t.defaultConfig && t.defaultConfig.language;
    this._context = e.context || new Ju({ language: i }), this._context._addEditor(this, !e.context);
    const s = Array.from(t.builtinPlugins || []);
    this.config = new Ru(e, t.defaultConfig), this.config.define("plugins", s), this.config.define(this._context._getEditorConfig()), this.plugins = new Ku(this, s, this._context.plugins), this.locale = this._context.locale, this.t = this.locale.t, this._readOnlyLocks = /* @__PURE__ */ new Set(), this.commands = new n5(), this.set("state", "initializing"), this.once("ready", () => this.state = "ready", { priority: "high" }), this.once("destroy", () => this.state = "destroyed", { priority: "high" }), this.model = new t5(), this.on("change:isReadOnly", () => {
      this.model.document.isReadOnly = this.isReadOnly;
    });
    const r = new W_();
    this.data = new u2(this.model, r), this.editing = new Ly(this.model, r), this.editing.view.document.bind("isReadOnly").to(this), this.conversion = new d2([this.editing.downcastDispatcher, this.data.downcastDispatcher], this.data.upcastDispatcher), this.conversion.addAlias("dataDowncast", this.data.downcastDispatcher), this.conversion.addAlias("editingDowncast", this.editing.downcastDispatcher), this.keystrokes = new s5(this), this.keystrokes.listenTo(this.editing.view.document);
  }
  /**
   * Defines whether the editor is in the read-only mode.
   *
   * In read-only mode the editor {@link #commands commands} are disabled so it is not possible
   * to modify the document by using them. Also, the editable element(s) become non-editable.
   *
   * In order to make the editor read-only, you need to call the {@link #enableReadOnlyMode} method:
   *
   * ```ts
   * editor.enableReadOnlyMode( 'feature-id' );
   * ```
   *
   * Later, to turn off the read-only mode, call {@link #disableReadOnlyMode}:
   *
   * ```ts
   * editor.disableReadOnlyMode( 'feature-id' );
   * ```
   *
   * @readonly
   * @observable
   */
  get isReadOnly() {
    return this._readOnlyLocks.size > 0;
  }
  set isReadOnly(e) {
    throw new f("editor-isreadonly-has-no-setter");
  }
  /**
   * Turns on the read-only mode in the editor.
   *
   * Editor can be switched to or out of the read-only mode by many features, under various circumstances. The editor supports locking
   * mechanism for the read-only mode. It enables easy control over the read-only mode when many features wants to turn it on or off at
   * the same time, without conflicting with each other. It guarantees that you will not make the editor editable accidentally (which
   * could lead to errors).
   *
   * Each read-only mode request is identified by a unique id (also called "lock"). If multiple plugins requested to turn on the
   * read-only mode, then, the editor will become editable only after all these plugins turn the read-only mode off (using the same ids).
   *
   * Note, that you cannot force the editor to disable the read-only mode if other plugins set it.
   *
   * After the first `enableReadOnlyMode()` call, the {@link #isReadOnly `isReadOnly` property} will be set to `true`:
   *
   * ```ts
   * editor.isReadOnly; // `false`.
   * editor.enableReadOnlyMode( 'my-feature-id' );
   * editor.isReadOnly; // `true`.
   * ```
   *
   * You can turn off the read-only mode ("clear the lock") using the {@link #disableReadOnlyMode `disableReadOnlyMode()`} method:
   *
   * ```ts
   * editor.enableReadOnlyMode( 'my-feature-id' );
   * // ...
   * editor.disableReadOnlyMode( 'my-feature-id' );
   * editor.isReadOnly; // `false`.
   * ```
   *
   * All "locks" need to be removed to enable editing:
   *
   * ```ts
   * editor.enableReadOnlyMode( 'my-feature-id' );
   * editor.enableReadOnlyMode( 'my-other-feature-id' );
   * // ...
   * editor.disableReadOnlyMode( 'my-feature-id' );
   * editor.isReadOnly; // `true`.
   * editor.disableReadOnlyMode( 'my-other-feature-id' );
   * editor.isReadOnly; // `false`.
   * ```
   *
   * @param lockId A unique ID for setting the editor to the read-only state.
   */
  enableReadOnlyMode(e) {
    if (typeof e != "string" && typeof e != "symbol")
      throw new f("editor-read-only-lock-id-invalid", null, { lockId: e });
    this._readOnlyLocks.has(e) || (this._readOnlyLocks.add(e), this._readOnlyLocks.size === 1 && this.fire("change:isReadOnly", "isReadOnly", !0, !1));
  }
  /**
   * Removes the read-only lock from the editor with given lock ID.
   *
   * When no lock is present on the editor anymore, then the {@link #isReadOnly `isReadOnly` property} will be set to `false`.
   *
   * @param lockId The lock ID for setting the editor to the read-only state.
   */
  disableReadOnlyMode(e) {
    if (typeof e != "string" && typeof e != "symbol")
      throw new f("editor-read-only-lock-id-invalid", null, { lockId: e });
    this._readOnlyLocks.has(e) && (this._readOnlyLocks.delete(e), this._readOnlyLocks.size === 0 && this.fire("change:isReadOnly", "isReadOnly", !1, !0));
  }
  /**
   * Loads and initializes plugins specified in the configuration.
   *
   * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.
   */
  initPlugins() {
    const e = this.config, t = e.get("plugins"), i = e.get("removePlugins") || [], s = e.get("extraPlugins") || [], r = e.get("substitutePlugins") || [];
    return this.plugins.init(t.concat(s), i, r);
  }
  /**
   * Destroys the editor instance, releasing all resources used by it.
   *
   * **Note** The editor cannot be destroyed during the initialization phase so if it is called
   * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.
   *
   * @fires destroy
   * @returns A promise that resolves once the editor instance is fully destroyed.
   */
  destroy() {
    let e = Promise.resolve();
    return this.state == "initializing" && (e = new Promise((t) => this.once("ready", t))), e.then(() => {
      this.fire("destroy"), this.stopListening(), this.commands.destroy();
    }).then(() => this.plugins.destroy()).then(() => {
      this.model.destroy(), this.data.destroy(), this.editing.destroy(), this.keystrokes.destroy();
    }).then(() => this._context._removeEditor(this));
  }
  /**
   * Executes the specified command with given parameters.
   *
   * Shorthand for:
   *
   * ```ts
   * editor.commands.get( commandName ).execute( ... );
   * ```
   *
   * @param commandName The name of the command to execute.
   * @param commandParams Command parameters.
   * @returns The value returned by the {@link module:core/commandcollection~CommandCollection#execute `commands.execute()`}.
   */
  execute(e, ...t) {
    try {
      return this.commands.execute(e, ...t);
    } catch (i) {
      /* istanbul ignore next -- @preserve */
      f.rethrowUnexpectedError(i, this);
    }
  }
  /**
   * Focuses the editor.
   *
   * **Note** To explicitly focus the editing area of the editor, use the
   * {@link module:engine/view/view~View#focus `editor.editing.view.focus()`} method of the editing view.
   *
   * Check out the {@glink framework/deep-dive/ui/focus-tracking#focus-in-the-editor-ui Focus in the editor UI} section
   * of the {@glink framework/deep-dive/ui/focus-tracking Deep dive into focus tracking} guide to learn more.
   */
  focus() {
    this.editing.view.focus();
  }
  /* istanbul ignore next -- @preserve */
  /**
   * Creates and initializes a new editor instance.
   *
   * This is an abstract method. Every editor type needs to implement its own initialization logic.
   *
   * See the `create()` methods of the existing editor types to learn how to use them:
   *
   * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}
   * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}
   * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}
   * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}
   */
  static create(...e) {
    throw new Error("This is an abstract method.");
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function o5(n) {
  if (!St(n.updateSourceElement))
    throw new f("attachtoform-missing-elementapi-interface", n);
  const e = n.sourceElement;
  if (a5(e) && e.form) {
    let t;
    const i = e.form, s = () => n.updateSourceElement();
    St(i.submit) && (t = i.submit, i.submit = () => {
      s(), t.apply(i);
    }), i.addEventListener("submit", s), n.on("destroy", () => {
      i.removeEventListener("submit", s), t && (i.submit = t);
    });
  }
}
function a5(n) {
  return !!n && n.tagName.toLowerCase() === "textarea";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function hn(n) {
  class e extends n {
    setData(i) {
      this.data.set(i);
    }
    getData(i) {
      return this.data.get(i);
    }
  }
  return e;
}
{
  const n = hn(Object);
  hn.setData = n.prototype.setData, hn.getData = n.prototype.getData;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ur(n) {
  class e extends n {
    updateSourceElement(i = this.data.get()) {
      if (!this.sourceElement)
        throw new f("editor-missing-sourceelement", this);
      const s = this.config.get("updateSourceElementOnDestroy"), r = this.sourceElement instanceof HTMLTextAreaElement;
      if (!s && !r) {
        ha(this.sourceElement, "");
        return;
      }
      ha(this.sourceElement, i);
    }
  }
  return e;
}
ur.updateSourceElement = ur(Object).prototype.updateSourceElement;
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function l5(n, e) {
  if (e.ckeditorInstance)
    throw new f("editor-source-element-already-used", n);
  e.ckeditorInstance = n, n.once("destroy", () => {
    delete e.ckeditorInstance;
  });
}
const c5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m11.591 10.177 4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z"/></svg>', u5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 16h9a1 1 0 0 1 0 2H2a1 1 0 0 1 0-2z"/><path d="M17 1a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14zm0 1.5H3a.5.5 0 0 0-.492.41L2.5 3v9a.5.5 0 0 0 .41.492L3 12.5h14a.5.5 0 0 0 .492-.41L17.5 12V3a.5.5 0 0 0-.41-.492L17 2.5z" fill-opacity=".6"/></svg>', h5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z"/></svg>', d5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m11.333 2 .19 2.263a5.899 5.899 0 0 1 1.458.604L14.714 3.4 16.6 5.286l-1.467 1.733c.263.452.468.942.605 1.46L18 8.666v2.666l-2.263.19a5.899 5.899 0 0 1-.604 1.458l1.467 1.733-1.886 1.886-1.733-1.467a5.899 5.899 0 0 1-1.46.605L11.334 18H8.667l-.19-2.263a5.899 5.899 0 0 1-1.458-.604L5.286 16.6 3.4 14.714l1.467-1.733a5.899 5.899 0 0 1-.604-1.458L2 11.333V8.667l2.262-.189a5.899 5.899 0 0 1 .605-1.459L3.4 5.286 5.286 3.4l1.733 1.467a5.899 5.899 0 0 1 1.46-.605L8.666 2h2.666zM10 6.267a3.733 3.733 0 1 0 0 7.466 3.733 3.733 0 0 0 0-7.466z"/></svg>', f5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m8.636 9.531-2.758 3.94a.5.5 0 0 0 .122.696l3.224 2.284h1.314l2.636-3.736L8.636 9.53zm.288 8.451L5.14 15.396a2 2 0 0 1-.491-2.786l6.673-9.53a2 2 0 0 1 2.785-.49l3.742 2.62a2 2 0 0 1 .491 2.785l-7.269 10.053-2.147-.066z"/><path d="M4 18h5.523v-1H4zm-2 0h1v-1H2z"/></svg>', m5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.085 6.22 2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z"/></svg>', g5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z"/></svg>', p5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m9.239 13.938-2.88-1.663a.75.75 0 0 1 .75-1.3L9 12.067V4.75a.75.75 0 1 1 1.5 0v7.318l1.89-1.093a.75.75 0 0 1 .75 1.3l-2.879 1.663a.752.752 0 0 1-.511.187.752.752 0 0 1-.511-.187zM4.25 17a.75.75 0 1 1 0-1.5h10.5a.75.75 0 0 1 0 1.5H4.25z"/></svg>', w5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.75 11.875a.752.752 0 0 1 .508.184l2.883 1.666a.75.75 0 0 1-.659 1.344l-.091-.044-1.892-1.093.001 4.318a.75.75 0 1 1-1.5 0v-4.317l-1.89 1.092a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .51-.187zM15.25 9a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM9.75.375a.75.75 0 0 1 .75.75v4.318l1.89-1.093.092-.045a.75.75 0 0 1 .659 1.344l-2.883 1.667a.752.752 0 0 1-.508.184.752.752 0 0 1-.511-.187L6.359 5.65a.75.75 0 0 1 .75-1.299L9 5.442V1.125a.75.75 0 0 1 .75-.75z"/></svg>', b5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m10.261 7.062 2.88 1.663a.75.75 0 0 1-.75 1.3L10.5 8.933v7.317a.75.75 0 1 1-1.5 0V8.932l-1.89 1.093a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .511-.187.752.752 0 0 1 .511.187zM15.25 4a.75.75 0 1 1 0 1.5H4.75a.75.75 0 0 1 0-1.5h10.5z"/></svg>', _5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>', v5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm2.286 4c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75z"/></svg>', y5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M18 3.75a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 8a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 4a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75zm0-8a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75z"/></svg>', k5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>', C5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2z"/><path d="M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z"/></svg>', A5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2z"/><path d="M15.003 7v5.5a1 1 0 0 1-1 1H5.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H6.5V12h6.997V7.5z"/></svg>', E5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2z"/><path d="M18.003 7v5.5a1 1 0 0 1-1 1H8.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H9.5V12h6.997V7.5z"/></svg>', T5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2z"/><path d="M18 7v5.5a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1zm-1.505.5H3.504V12h12.991V7.5z"/></svg>', P5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm11.5 9H18v1.5h-4.5zM2 15h16v1.5H2z"/><path d="M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z"/></svg>', x5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm11.5 9H18v1.5h-4.5zm0-3H18v1.5h-4.5zm0-3H18v1.5h-4.5zM2 15h16v1.5H2z"/><path d="M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z"/></svg>', S5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path opacity=".5" d="M2 3h16v1.5H2zm0 12h16v1.5H2zm0-9h5v1.5H2zm0 3h5v1.5H2zm0 3h5v1.5H2z"/><path d="M18.003 7v5.5a1 1 0 0 1-1 1H8.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H9.5V12h6.997V7.5z"/></svg>', I5 = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M18.095 2H1.905C.853 2 0 2.895 0 4v12c0 1.105.853 2 1.905 2h16.19C19.147 18 20 17.105 20 16V4c0-1.105-.853-2-1.905-2zm0 1.5c.263 0 .476.224.476.5v12c0 .276-.213.5-.476.5H1.905a.489.489 0 0 1-.476-.5V4c0-.276.213-.5.476-.5h16.19z"/></svg>', R5 = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M13 6H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5V8a.5.5 0 0 1 .5-.5h11z"/></svg>', V5 = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M7 10H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h5a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5h5z"/></svg>', O5 = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z"/><path d="M10 8H2a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2zm0 1.5a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-6a.5.5 0 0 1 .5-.5h8z"/></svg>', M5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m7.3 17.37-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506 13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5 9.375 17H19v1.5H8z"/></svg>', B5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.999 2H15a1 1 0 0 1 0 2h-1.004v13a1 1 0 1 1-2 0V4H8.999v13a1 1 0 1 1-2 0v-7A4 4 0 0 1 3 6a4 4 0 0 1 3.999-4z"/></svg>', D5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574zm8 0a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574z"/></svg>', F5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="9.5" cy="4.5" r="1.5"/><circle cx="9.5" cy="10.5" r="1.5"/><circle cx="9.5" cy="16.5" r="1.5"/></svg>', N5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z"/></svg>', L5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.5 5.5H7v5h3.5a2.5 2.5 0 1 0 0-5zM5 3h6.5v.025a5 5 0 0 1 0 9.95V13H7v4a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z"/></svg>', z5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 0 0-1 1v6H3a1 1 0 1 0 0 2h6v6a1 1 0 1 0 2 0v-6h6a1 1 0 1 0 0-2h-6V3a1 1 0 0 0-1-1Z"/></svg>', $5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.816 11.5 7.038 4.785 4.261 11.5h5.555Zm.62 1.5H3.641l-1.666 4.028H.312l5.789-14h1.875l5.789 14h-1.663L10.436 13Z"/><path d="m12.09 17-.534-1.292.848-1.971.545 1.319L12.113 17h-.023Zm1.142-5.187.545 1.319L15.5 9.13l1.858 4.316h-3.45l.398.965h3.467L18.887 17H20l-3.873-9h-1.254l-1.641 3.813Z"/></svg>', H5 = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M19 4.5 14 0H3v12.673l.868-1.041c.185-.222.4-.402.632-.54V1.5h8v5h5v7.626a2.24 2.24 0 0 1 1.5.822V4.5ZM14 5V2l3.3 3H14Zm-3.692 12.5c.062.105.133.206.213.303L11.52 19H8v-.876a2.243 2.243 0 0 0 1.82-.624h.488Zm7.518-.657a.75.75 0 0 0-1.152-.96L15.5 17.29V12H14v5.29l-1.174-1.408a.75.75 0 0 0-1.152.96l2.346 2.816a.95.95 0 0 0 1.46 0l2.346-2.815Zm-15.056-.38a.75.75 0 0 1-.096-1.056l2.346-2.815a.95.95 0 0 1 1.46 0l2.346 2.815a.75.75 0 1 1-1.152.96L6.5 14.96V20H5v-5.04l-1.174 1.408a.75.75 0 0 1-1.056.096Z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const B = {
  bold: N5,
  cancel: c5,
  caption: u5,
  check: h5,
  cog: d5,
  eraser: f5,
  image: g5,
  lowVision: m5,
  importExport: H5,
  paragraph: L5,
  plus: z5,
  text: $5,
  alignBottom: p5,
  alignMiddle: w5,
  alignTop: b5,
  alignLeft: _5,
  alignCenter: v5,
  alignRight: y5,
  alignJustify: k5,
  objectLeft: x5,
  objectCenter: A5,
  objectRight: S5,
  objectFullWidth: T5,
  objectInline: P5,
  objectBlockLeft: C5,
  objectBlockRight: E5,
  objectSizeFull: I5,
  objectSizeLarge: R5,
  objectSizeSmall: V5,
  objectSizeMedium: O5,
  pencil: M5,
  pilcrow: B5,
  quote: D5,
  threeVerticalDots: F5
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Hh {
  /**
   * @param {module:watchdog/watchdog~WatchdogConfig} config The watchdog plugin configuration.
   */
  constructor(e) {
    if (this.crashes = [], this.state = "initializing", this._now = Date.now, this.crashes = [], this._crashNumberLimit = typeof e.crashNumberLimit == "number" ? e.crashNumberLimit : 3, this._minimumNonErrorTimePeriod = typeof e.minimumNonErrorTimePeriod == "number" ? e.minimumNonErrorTimePeriod : 5e3, this._boundErrorHandler = (t) => {
      const i = "error" in t ? t.error : t.reason;
      i instanceof Error && this._handleError(i, t);
    }, this._listeners = {}, !this._restart)
      throw new Error("The Watchdog class was split into the abstract `Watchdog` class and the `EditorWatchdog` class. Please, use `EditorWatchdog` if you have used the `Watchdog` class previously.");
  }
  /**
   * Destroys the watchdog and releases the resources.
   */
  destroy() {
    this._stopErrorHandling(), this._listeners = {};
  }
  /**
   * Starts listening to a specific event name by registering a callback that will be executed
   * whenever an event with a given name fires.
   *
   * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.
   *
   * @param eventName The event name.
   * @param callback A callback which will be added to event listeners.
   */
  on(e, t) {
    this._listeners[e] || (this._listeners[e] = []), this._listeners[e].push(t);
  }
  /**
   * Stops listening to the specified event name by removing the callback from event listeners.
   *
   * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.
   *
   * @param eventName The event name.
   * @param callback A callback which will be removed from event listeners.
   */
  off(e, t) {
    this._listeners[e] = this._listeners[e].filter((i) => i !== t);
  }
  /**
   * Fires an event with a given event name and arguments.
   *
   * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.
   */
  _fire(e, ...t) {
    const i = this._listeners[e] || [];
    for (const s of i)
      s.apply(this, [null, ...t]);
  }
  /**
   * Starts error handling by attaching global error handlers.
   */
  _startErrorHandling() {
    window.addEventListener("error", this._boundErrorHandler), window.addEventListener("unhandledrejection", this._boundErrorHandler);
  }
  /**
   * Stops error handling by detaching global error handlers.
   */
  _stopErrorHandling() {
    window.removeEventListener("error", this._boundErrorHandler), window.removeEventListener("unhandledrejection", this._boundErrorHandler);
  }
  /**
   * Checks if an error comes from the watched item and restarts it.
   * It reacts to {@link module:utils/ckeditorerror~CKEditorError `CKEditorError` errors} only.
   *
   * @fires error
   * @param error Error.
   * @param evt An error event.
   */
  _handleError(e, t) {
    if (this._shouldReactToError(e)) {
      this.crashes.push({
        message: e.message,
        stack: e.stack,
        // `evt.filename`, `evt.lineno` and `evt.colno` are available only in ErrorEvent events
        filename: t instanceof ErrorEvent ? t.filename : void 0,
        lineno: t instanceof ErrorEvent ? t.lineno : void 0,
        colno: t instanceof ErrorEvent ? t.colno : void 0,
        date: this._now()
      });
      const i = this._shouldRestart();
      this.state = "crashed", this._fire("stateChange"), this._fire("error", { error: e, causesRestart: i }), i ? this._restart() : (this.state = "crashedPermanently", this._fire("stateChange"));
    }
  }
  /**
   * Checks whether an error should be handled by the watchdog.
   *
   * @param error An error that was caught by the error handling process.
   */
  _shouldReactToError(e) {
    return e.is && e.is("CKEditorError") && e.context !== void 0 && // In some cases the watched item should not be restarted - e.g. during the item initialization.
    // That's why the `null` was introduced as a correct error context which does cause restarting.
    e.context !== null && // Do not react to errors if the watchdog is in states other than `ready`.
    this.state === "ready" && this._isErrorComingFromThisItem(e);
  }
  /**
   * Checks if the watchdog should restart the underlying item.
   */
  _shouldRestart() {
    if (this.crashes.length <= this._crashNumberLimit)
      return !0;
    const e = this.crashes[this.crashes.length - 1].date, t = this.crashes[this.crashes.length - 1 - this._crashNumberLimit].date;
    return (e - t) / this._crashNumberLimit > this._minimumNonErrorTimePeriod;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function hr(n, e = /* @__PURE__ */ new Set()) {
  const t = [n], i = /* @__PURE__ */ new Set();
  let s = 0;
  for (; t.length > s; ) {
    const r = t[s++];
    if (!(i.has(r) || !W5(r) || e.has(r)))
      if (i.add(r), Symbol.iterator in r)
        try {
          for (const o of r)
            t.push(o);
        } catch {
        }
      else
        for (const o in r)
          o !== "defaultValue" && t.push(r[o]);
  }
  return i;
}
function W5(n) {
  const e = Object.prototype.toString.call(n), t = typeof n;
  return !(t === "number" || t === "boolean" || t === "string" || t === "symbol" || t === "function" || e === "[object Date]" || e === "[object RegExp]" || e === "[object Module]" || n === void 0 || n === null || // This flag is meant to exclude singletons shared across editor instances. So when an error is thrown in one editor,
  // the other editors connected through the reference to the same singleton are not restarted. This is a temporary workaround
  // until a better solution is found.
  // More in https://github.com/ckeditor/ckeditor5/issues/12292.
  n._watchdogExcluded || // Skip native DOM objects, e.g. Window, nodes, events, etc.
  n instanceof EventTarget || n instanceof Event);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Wh(n, e, t = /* @__PURE__ */ new Set()) {
  if (n === e && U5(n))
    return !0;
  const i = hr(n, t), s = hr(e, t);
  for (const r of i)
    if (s.has(r))
      return !0;
  return !1;
}
function U5(n) {
  return typeof n == "object" && n !== null;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Uh extends Hh {
  /**
   * @param Editor The editor class.
   * @param watchdogConfig The watchdog plugin configuration.
   */
  constructor(e, t = {}) {
    super(t), this._editor = null, this._throttledSave = zn(this._save.bind(this), typeof t.saveInterval == "number" ? t.saveInterval : 5e3), e && (this._creator = (i, s) => e.create(i, s)), this._destructor = (i) => i.destroy();
  }
  /**
   * The current editor instance.
   */
  get editor() {
    return this._editor;
  }
  /**
   * @internal
   */
  get _item() {
    return this._editor;
  }
  /**
   * Sets the function that is responsible for the editor creation.
   * It expects a function that should return a promise.
   *
   * ```ts
   * watchdog.setCreator( ( element, config ) => ClassicEditor.create( element, config ) );
   * ```
   */
  setCreator(e) {
    this._creator = e;
  }
  /**
   * Sets the function that is responsible for the editor destruction.
   * Overrides the default destruction function, which destroys only the editor instance.
   * It expects a function that should return a promise or `undefined`.
   *
   * ```ts
   * watchdog.setDestructor( editor => {
   * 	// Do something before the editor is destroyed.
   *
   * 	return editor
   * 		.destroy()
   * 		.then( () => {
   * 			// Do something after the editor is destroyed.
   * 		} );
   * } );
   * ```
   */
  setDestructor(e) {
    this._destructor = e;
  }
  /**
   * Restarts the editor instance. This method is called whenever an editor error occurs. It fires the `restart` event and changes
   * the state to `initializing`.
   *
   * @fires restart
   */
  _restart() {
    return Promise.resolve().then(() => (this.state = "initializing", this._fire("stateChange"), this._destroy())).catch((e) => {
      console.error("An error happened during the editor destroying.", e);
    }).then(() => {
      if (typeof this._elementOrData == "string")
        return this.create(this._data, this._config, this._config.context);
      {
        const e = Object.assign({}, this._config, {
          initialData: this._data
        });
        return this.create(this._elementOrData, e, e.context);
      }
    }).then(() => {
      this._fire("restart");
    });
  }
  /**
   * Creates the editor instance and keeps it running, using the defined creator and destructor.
   *
   * @param elementOrData The editor source element or the editor data.
   * @param config The editor configuration.
   * @param context A context for the editor.
   */
  create(e = this._elementOrData, t = this._config, i) {
    return Promise.resolve().then(() => (super._startErrorHandling(), this._elementOrData = e, this._config = this._cloneEditorConfiguration(t) || {}, this._config.context = i, this._creator(e, this._config))).then((s) => {
      this._editor = s, s.model.document.on("change:data", this._throttledSave), this._lastDocumentVersion = s.model.document.version, this._data = this._getData(), this.state = "ready", this._fire("stateChange");
    });
  }
  /**
   * Destroys the watchdog and the current editor instance. It fires the callback
   * registered in {@link #setDestructor `setDestructor()`} and uses it to destroy the editor instance.
   * It also sets the state to `destroyed`.
   */
  destroy() {
    return Promise.resolve().then(() => (this.state = "destroyed", this._fire("stateChange"), super.destroy(), this._destroy()));
  }
  _destroy() {
    return Promise.resolve().then(() => {
      this._stopErrorHandling(), this._throttledSave.flush();
      const e = this._editor;
      return this._editor = null, e.model.document.off("change:data", this._throttledSave), this._destructor(e);
    });
  }
  /**
   * Saves the editor data, so it can be restored after the crash even if the data cannot be fetched at
   * the moment of the crash.
   */
  _save() {
    const e = this._editor.model.document.version;
    try {
      this._data = this._getData(), this._lastDocumentVersion = e;
    } catch (t) {
      console.error(t, "An error happened during restoring editor data. Editor will be restored from the previously saved data.");
    }
  }
  /**
   * @internal
   */
  _setExcludedProperties(e) {
    this._excludedProps = e;
  }
  /**
   * Returns the editor data.
   */
  _getData() {
    const e = {};
    for (const t of this._editor.model.document.getRootNames())
      e[t] = this._editor.data.get({ rootName: t });
    return e;
  }
  /**
   * Traverses the error context and the current editor to find out whether these structures are connected
   * to each other via properties.
   *
   * @internal
   */
  _isErrorComingFromThisItem(e) {
    return Wh(this._editor, e.context, this._excludedProps);
  }
  /**
   * Clones the editor configuration.
   */
  _cloneEditorConfiguration(e) {
    return Fr(e, (t, i) => {
      if (gi(t) || i === "context")
        return t;
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Si = Symbol("MainQueueId");
class j5 extends Hh {
  /**
   * The context watchdog class constructor.
   *
   * ```ts
   * const watchdog = new ContextWatchdog( Context );
   *
   * await watchdog.create( contextConfiguration );
   *
   * await watchdog.add( item );
   * ```
   *
   * See the {@glink features/watchdog Watchdog feature guide} to learn more how to use this feature.
   *
   * @param Context The {@link module:core/context~Context} class.
   * @param watchdogConfig The watchdog configuration.
   */
  constructor(e, t = {}) {
    super(t), this._watchdogs = /* @__PURE__ */ new Map(), this._context = null, this._contextProps = /* @__PURE__ */ new Set(), this._actionQueues = new q5(), this._watchdogConfig = t, this._creator = (i) => e.create(i), this._destructor = (i) => i.destroy(), this._actionQueues.onEmpty(() => {
      this.state === "initializing" && (this.state = "ready", this._fire("stateChange"));
    });
  }
  /**
   * Sets the function that is responsible for the context creation.
   * It expects a function that should return a promise (or `undefined`).
   *
   * ```ts
   * watchdog.setCreator( config => Context.create( config ) );
   * ```
   */
  setCreator(e) {
    this._creator = e;
  }
  /**
   * Sets the function that is responsible for the context destruction.
   * Overrides the default destruction function, which destroys only the context instance.
   * It expects a function that should return a promise (or `undefined`).
   *
   * ```ts
   * watchdog.setDestructor( context => {
   * 	// Do something before the context is destroyed.
   *
   * 	return context
   * 		.destroy()
   * 		.then( () => {
   * 			// Do something after the context is destroyed.
   * 		} );
   * } );
   * ```
   */
  setDestructor(e) {
    this._destructor = e;
  }
  /**
   * The context instance. Keep in mind that this property might be changed when the context watchdog restarts,
   * so do not keep this instance internally. Always operate on the `ContextWatchdog#context` property.
   */
  get context() {
    return this._context;
  }
  /**
   * Initializes the context watchdog. Once it is created, the watchdog takes care about
   * recreating the context and the provided items, and starts the error handling mechanism.
   *
   * ```ts
   * await watchdog.create( {
   * 	plugins: []
   * } );
   * ```
   *
   * @param contextConfig The context configuration. See {@link module:core/context~Context}.
   */
  create(e = {}) {
    return this._actionQueues.enqueue(Si, () => (this._contextConfig = e, this._create()));
  }
  /**
   * Returns an item instance with the given `itemId`.
   *
   * ```ts
   * const editor1 = watchdog.getItem( 'editor1' );
   * ```
   *
   * @param itemId The item ID.
   * @returns The item instance or `undefined` if an item with a given ID has not been found.
   */
  getItem(e) {
    return this._getWatchdog(e)._item;
  }
  /**
   * Gets the state of the given item. See {@link #state} for a list of available states.
   *
   * ```ts
   * const editor1State = watchdog.getItemState( 'editor1' );
   * ```
   *
   * @param itemId Item ID.
   * @returns The state of the item.
   */
  getItemState(e) {
    return this._getWatchdog(e).state;
  }
  /**
   * Adds items to the watchdog. Once created, instances of these items will be available using the {@link #getItem} method.
   *
   * Items can be passed together as an array of objects:
   *
   * ```ts
   * await watchdog.add( [ {
   * 	id: 'editor1',
   * 	type: 'editor',
   * 	sourceElementOrData: document.querySelector( '#editor' ),
   * 	config: {
   * 		plugins: [ Essentials, Paragraph, Bold, Italic ],
   * 		toolbar: [ 'bold', 'italic', 'alignment' ]
   * 	},
   * 	creator: ( element, config ) => ClassicEditor.create( element, config )
   * } ] );
   * ```
   *
   * Or one by one as objects:
   *
   * ```ts
   * await watchdog.add( {
   * 	id: 'editor1',
   * 	type: 'editor',
   * 	sourceElementOrData: document.querySelector( '#editor' ),
   * 	config: {
   * 		plugins: [ Essentials, Paragraph, Bold, Italic ],
   * 		toolbar: [ 'bold', 'italic', 'alignment' ]
   * 	},
   * 	creator: ( element, config ) => ClassicEditor.create( element, config )
   * ] );
   * ```
   *
   * Then an instance can be retrieved using the {@link #getItem} method:
   *
   * ```ts
   * const editor1 = watchdog.getItem( 'editor1' );
   * ```
   *
   * Note that this method can be called multiple times, but for performance reasons it is better
   * to pass all items together.
   *
   * @param itemConfigurationOrItemConfigurations An item configuration object or an array of item configurations.
   */
  add(e) {
    const t = el(e);
    return Promise.all(t.map((i) => this._actionQueues.enqueue(i.id, () => {
      if (this.state === "destroyed")
        throw new Error("Cannot add items to destroyed watchdog.");
      if (!this._context)
        throw new Error("Context was not created yet. You should call the `ContextWatchdog#create()` method first.");
      let s;
      if (this._watchdogs.has(i.id))
        throw new Error(`Item with the given id is already added: '${i.id}'.`);
      if (i.type === "editor")
        return s = new Uh(null, this._watchdogConfig), s.setCreator(i.creator), s._setExcludedProperties(this._contextProps), i.destructor && s.setDestructor(i.destructor), this._watchdogs.set(i.id, s), s.on("error", (r, { error: o, causesRestart: a }) => {
          this._fire("itemError", { itemId: i.id, error: o }), a && this._actionQueues.enqueue(i.id, () => new Promise((l) => {
            const c = () => {
              s.off("restart", c), this._fire("itemRestart", { itemId: i.id }), l();
            };
            s.on("restart", c);
          }));
        }), s.create(i.sourceElementOrData, i.config, this._context);
      throw new Error(`Not supported item type: '${i.type}'.`);
    })));
  }
  /**
   * Removes and destroys item(s) with given ID(s).
   *
   * ```ts
   * await watchdog.remove( 'editor1' );
   * ```
   *
   * Or
   *
   * ```ts
   * await watchdog.remove( [ 'editor1', 'editor2' ] );
   * ```
   *
   * @param itemIdOrItemIds Item ID or an array of item IDs.
   */
  remove(e) {
    const t = el(e);
    return Promise.all(t.map((i) => this._actionQueues.enqueue(i, () => {
      const s = this._getWatchdog(i);
      return this._watchdogs.delete(i), s.destroy();
    })));
  }
  /**
   * Destroys the context watchdog and all added items.
   * Once the context watchdog is destroyed, new items cannot be added.
   *
   * ```ts
   * await watchdog.destroy();
   * ```
   */
  destroy() {
    return this._actionQueues.enqueue(Si, () => (this.state = "destroyed", this._fire("stateChange"), super.destroy(), this._destroy()));
  }
  /**
   * Restarts the context watchdog.
   */
  _restart() {
    return this._actionQueues.enqueue(Si, () => (this.state = "initializing", this._fire("stateChange"), this._destroy().catch((e) => {
      console.error("An error happened during destroying the context or items.", e);
    }).then(() => this._create()).then(() => this._fire("restart"))));
  }
  /**
   * Initializes the context watchdog.
   */
  _create() {
    return Promise.resolve().then(() => (this._startErrorHandling(), this._creator(this._contextConfig))).then((e) => (this._context = e, this._contextProps = hr(this._context), Promise.all(Array.from(this._watchdogs.values()).map((t) => (t._setExcludedProperties(this._contextProps), t.create(void 0, void 0, this._context))))));
  }
  /**
   * Destroys the context instance and all added items.
   */
  _destroy() {
    return Promise.resolve().then(() => {
      this._stopErrorHandling();
      const e = this._context;
      return this._context = null, this._contextProps = /* @__PURE__ */ new Set(), Promise.all(Array.from(this._watchdogs.values()).map((t) => t.destroy())).then(() => this._destructor(e));
    });
  }
  /**
   * Returns the watchdog for a given item ID.
   *
   * @param itemId Item ID.
   */
  _getWatchdog(e) {
    const t = this._watchdogs.get(e);
    if (!t)
      throw new Error(`Item with the given id was not registered: ${e}.`);
    return t;
  }
  /**
   * Checks whether an error comes from the context instance and not from the item instances.
   *
   * @internal
   */
  _isErrorComingFromThisItem(e) {
    for (const t of this._watchdogs.values())
      if (t._isErrorComingFromThisItem(e))
        return !1;
    return Wh(this._context, e.context);
  }
}
class q5 {
  constructor() {
    this._onEmptyCallbacks = [], this._queues = /* @__PURE__ */ new Map(), this._activeActions = 0;
  }
  /**
   * Used to register callbacks that will be run when the queue becomes empty.
   *
   * @param onEmptyCallback A callback that will be run whenever the queue becomes empty.
   */
  onEmpty(e) {
    this._onEmptyCallbacks.push(e);
  }
  /**
   * It adds asynchronous actions (functions) to the proper queue and runs them one by one.
   *
   * @param queueId The action queue ID.
   * @param action A function that should be enqueued.
   */
  enqueue(e, t) {
    const i = e === Si;
    this._activeActions++, this._queues.get(e) || this._queues.set(e, Promise.resolve());
    const r = (i ? Promise.all(this._queues.values()) : Promise.all([this._queues.get(Si), this._queues.get(e)])).then(t), o = r.catch(() => {
    });
    return this._queues.set(e, o), r.finally(() => {
      this._activeActions--, this._queues.get(e) === o && this._activeActions === 0 && this._onEmptyCallbacks.forEach((a) => a());
    });
  }
}
function el(n) {
  return Array.isArray(n) ? n : [n];
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function eo({ emitter: n, activator: e, callback: t, contextElements: i }) {
  n.listenTo(document, "mousedown", (s, r) => {
    if (!e())
      return;
    const o = typeof r.composedPath == "function" ? r.composedPath() : [], a = typeof i == "function" ? i() : i;
    for (const l of a)
      if (l.contains(r.target) || o.includes(l))
        return;
    t();
  });
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function to(n) {
  class e extends n {
    disableCssTransitions() {
      this._isCssTransitionsDisabled = !0;
    }
    enableCssTransitions() {
      this._isCssTransitionsDisabled = !1;
    }
    constructor(...i) {
      super(...i), this.set("_isCssTransitionsDisabled", !1), this.initializeCssTransitionDisablerMixin();
    }
    initializeCssTransitionDisablerMixin() {
      this.extendTemplate({
        attributes: {
          class: [
            this.bindTemplate.if("_isCssTransitionsDisabled", "ck-transitions-disabled")
          ]
        }
      });
    }
  }
  return e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function io({ view: n }) {
  n.listenTo(n.element, "submit", (e, t) => {
    t.preventDefault(), n.fire("submit");
  }, { useCapture: !0 });
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function jh({ keystrokeHandler: n, focusTracker: e, gridItems: t, numberOfColumns: i, uiLanguageDirection: s }) {
  const r = typeof i == "number" ? () => i : i;
  n.set("arrowright", o((c, u) => s === "rtl" ? l(c, u.length) : a(c, u.length))), n.set("arrowleft", o((c, u) => s === "rtl" ? a(c, u.length) : l(c, u.length))), n.set("arrowup", o((c, u) => {
    let h = c - r();
    return h < 0 && (h = c + r() * Math.floor(u.length / r()), h > u.length - 1 && (h -= r())), h;
  })), n.set("arrowdown", o((c, u) => {
    let h = c + r();
    return h > u.length - 1 && (h = c % r()), h;
  }));
  function o(c) {
    return (u) => {
      const h = t.find((p) => p.element === e.focusedElement), d = t.getIndex(h), m = c(d, t);
      t.get(m).focus(), u.stopPropagation(), u.preventDefault();
    };
  }
  function a(c, u) {
    return c === u - 1 ? 0 : c + 1;
  }
  function l(c, u) {
    return c === 0 ? u - 1 : c - 1;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class qe extends Ue {
  /**
   * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.
   *
   * @param initialItems The initial items of the collection.
   */
  constructor(e = []) {
    super(e, {
      // An #id Number attribute should be legal and not break the `ViewCollection` instance.
      // https://github.com/ckeditor/ckeditor5-ui/issues/93
      idProperty: "viewUid"
    }), this.on("add", (t, i, s) => {
      this._renderViewIntoCollectionParent(i, s);
    }), this.on("remove", (t, i) => {
      i.element && this._parentElement && i.element.remove();
    }), this._parentElement = null;
  }
  /**
   * Destroys the view collection along with child views.
   * See the view {@link module:ui/view~View#destroy} method.
   */
  destroy() {
    this.map((e) => e.destroy());
  }
  /**
   * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and
   * {@link #remove removing} views in the collection synchronizes their
   * {@link module:ui/view~View#element elements} in the parent element.
   *
   * @param element A new parent element.
   */
  setParent(e) {
    this._parentElement = e;
    for (const t of this)
      this._renderViewIntoCollectionParent(t);
  }
  /**
   * Delegates selected events coming from within views in the collection to any
   * {@link module:utils/emittermixin~Emitter}.
   *
   * For the following views and collection:
   *
   * ```ts
   * const viewA = new View();
   * const viewB = new View();
   * const viewC = new View();
   *
   * const views = parentView.createCollection();
   *
   * views.delegate( 'eventX' ).to( viewB );
   * views.delegate( 'eventX', 'eventY' ).to( viewC );
   *
   * views.add( viewA );
   * ```
   *
   * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:
   *
   * ```ts
   * viewA.fire( 'eventX', customData );
   * ```
   *
   * and `eventY` is delegated (fired by) `viewC` along with `customData`:
   *
   * ```ts
   * viewA.fire( 'eventY', customData );
   * ```
   *
   * See {@link module:utils/emittermixin~Emitter#delegate}.
   *
   * @param events {@link module:ui/view~View} event names to be delegated to another
   * {@link module:utils/emittermixin~Emitter}.
   * @returns Object with `to` property, a function which accepts the destination
   * of {@link module:utils/emittermixin~Emitter#delegate delegated} events.
   */
  delegate(...e) {
    if (!e.length || !G5(e))
      throw new f("ui-viewcollection-delegate-wrong-events", this);
    return {
      to: (t) => {
        for (const i of this)
          for (const s of e)
            i.delegate(s).to(t);
        this.on("add", (i, s) => {
          for (const r of e)
            s.delegate(r).to(t);
        }), this.on("remove", (i, s) => {
          for (const r of e)
            s.stopDelegating(r, t);
        });
      }
    };
  }
  /**
   * This method {@link module:ui/view~View#render renders} a new view added to the collection.
   *
   * If the {@link #_parentElement parent element} of the collection is set, this method also adds
   * the view's {@link module:ui/view~View#element} as a child of the parent in DOM at a specified index.
   *
   * **Note**: If index is not specified, the view's element is pushed as the last child
   * of the parent element.
   *
   * @param view A new view added to the collection.
   * @param index An index the view holds in the collection. When not specified,
   * the view is added at the end.
   */
  _renderViewIntoCollectionParent(e, t) {
    e.isRendered || e.render(), e.element && this._parentElement && this._parentElement.insertBefore(e.element, this._parentElement.children[t]);
  }
  /**
   * Removes a child view from the collection. If the {@link #setParent parent element} of the
   * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed
   * in DOM, reflecting the order of the collection.
   *
   * See the {@link #add} method.
   *
   * @param subject The view to remove, its id or index in the collection.
   * @returns The removed view.
   */
  remove(e) {
    return super.remove(e);
  }
}
function G5(n) {
  return n.every((e) => typeof e == "string");
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class E extends rt(H()) {
  /**
   * Creates an instance of the {@link module:ui/view~View} class.
   *
   * Also see {@link #render}.
   *
   * @param locale The localization services instance.
   */
  constructor(e) {
    super(), this.element = null, this.isRendered = !1, this.locale = e, this.t = e && e.t, this._viewCollections = new Ue(), this._unboundChildren = this.createCollection(), this._viewCollections.on("add", (t, i) => {
      i.locale = e, i.t = e && e.t;
    }), this.decorate("render");
  }
  /**
   * Shorthand for {@link module:ui/template~Template.bind}, a binding
   * {@link module:ui/template~BindChain interface} pre–configured for the view instance.
   *
   * It provides {@link module:ui/template~BindChain#to `to()`} and
   * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with
   * observable attributes and attach DOM listeners.
   *
   * ```ts
   * class SampleView extends View {
   * 	constructor( locale ) {
   * 		super( locale );
   *
   * 		const bind = this.bindTemplate;
   *
   * 		// These {@link module:utils/observablemixin~Observable observable} attributes will control
   * 		// the state of the view in DOM.
   * 		this.set( {
   * 			elementClass: 'foo',
   * 		 	isEnabled: true
   * 		 } );
   *
   * 		this.setTemplate( {
   * 			tag: 'p',
   *
   * 			attributes: {
   * 				// The class HTML attribute will follow elementClass
   * 				// and isEnabled view attributes.
   * 				class: [
   * 					bind.to( 'elementClass' )
   * 					bind.if( 'isEnabled', 'present-when-enabled' )
   * 				]
   * 			},
   *
   * 			on: {
   * 				// The view will fire the "clicked" event upon clicking <p> in DOM.
   * 				click: bind.to( 'clicked' )
   * 			}
   * 		} );
   * 	}
   * }
   * ```
   */
  get bindTemplate() {
    return this._bindTemplate ? this._bindTemplate : this._bindTemplate = Ee.bind(this, this);
  }
  /**
   * Creates a new collection of views, which can be used as
   * {@link module:ui/template~Template#children} of this view.
   *
   * ```ts
   * class SampleView extends View {
   * 	constructor( locale ) {
   * 		super( locale );
   *
   * 		const child = new ChildView( locale );
   * 		this.items = this.createCollection( [ child ] );
   *
   * 		this.setTemplate( {
   * 			tag: 'p',
   *
   * 			// `items` collection will render here.
   * 			children: this.items
   * 		} );
   * 	}
   * }
   *
   * const view = new SampleView( locale );
   * view.render();
   *
   * // It will append <p><child#element></p> to the <body>.
   * document.body.appendChild( view.element );
   * ```
   *
   * @param views Initial views of the collection.
   * @returns A new collection of view instances.
   */
  createCollection(e) {
    const t = new qe(e);
    return this._viewCollections.add(t), t;
  }
  /**
   * Registers a new child view under the view instance. Once registered, a child
   * view is managed by its parent, including {@link #render rendering}
   * and {@link #destroy destruction}.
   *
   * To revert this, use {@link #deregisterChild}.
   *
   * ```ts
   * class SampleView extends View {
   * 	constructor( locale ) {
   * 		super( locale );
   *
   * 		this.childA = new SomeChildView( locale );
   * 		this.childB = new SomeChildView( locale );
   *
   * 		this.setTemplate( { tag: 'p' } );
   *
   * 		// Register the children.
   * 		this.registerChild( [ this.childA, this.childB ] );
   * 	}
   *
   * 	render() {
   * 		super.render();
   *
   * 		this.element.appendChild( this.childA.element );
   * 		this.element.appendChild( this.childB.element );
   * 	}
   * }
   *
   * const view = new SampleView( locale );
   *
   * view.render();
   *
   * // Will append <p><childA#element><b></b><childB#element></p>.
   * document.body.appendChild( view.element );
   * ```
   *
   * **Note**: There's no need to add child views if they're already referenced in the
   * {@link #template}:
   *
   * ```ts
   * class SampleView extends View {
   * 	constructor( locale ) {
   * 		super( locale );
   *
   * 		this.childA = new SomeChildView( locale );
   * 		this.childB = new SomeChildView( locale );
   *
   * 		this.setTemplate( {
   * 			tag: 'p',
   *
   * 			// These children will be added automatically. There's no
   * 			// need to call {@link #registerChild} for any of them.
   * 			children: [ this.childA, this.childB ]
   * 		} );
   * 	}
   *
   * 	// ...
   * }
   * ```
   *
   * @param children Children views to be registered.
   */
  registerChild(e) {
    ye(e) || (e = [e]);
    for (const t of e)
      this._unboundChildren.add(t);
  }
  /**
   * The opposite of {@link #registerChild}. Removes a child view from this view instance.
   * Once removed, the child is no longer managed by its parent, e.g. it can safely
   * become a child of another parent view.
   *
   * @see #registerChild
   * @param children Child views to be removed.
   */
  deregisterChild(e) {
    ye(e) || (e = [e]);
    for (const t of e)
      this._unboundChildren.remove(t);
  }
  /**
   * Sets the {@link #template} of the view with with given definition.
   *
   * A shorthand for:
   *
   * ```ts
   * view.setTemplate( definition );
   * ```
   *
   * @param definition Definition of view's template.
   */
  setTemplate(e) {
    this.template = new Ee(e);
  }
  /**
   * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with
   * with given definition.
   *
   * A shorthand for:
   *
   * ```ts
   * Template.extend( view.template, definition );
   * ```
   *
   * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.
   *
   * @param definition Definition which extends the {@link #template}.
   */
  extendTemplate(e) {
    Ee.extend(this.template, e);
  }
  /**
   * Recursively renders the view.
   *
   * Once the view is rendered:
   * * the {@link #element} becomes an HTML element out of {@link #template},
   * * the {@link #isRendered} flag is set `true`.
   *
   * **Note**: The children of the view:
   * * defined directly in the {@link #template}
   * * residing in collections created by the {@link #createCollection} method,
   * * and added by {@link #registerChild}
   * are also rendered in the process.
   *
   * In general, `render()` method is the right place to keep the code which refers to the
   * {@link #element} and should be executed at the very beginning of the view's life cycle.
   *
   * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before
   * the view is rendered. To allow an early customization of the view (e.g. by its parent),
   * such references should be done in `render()`.
   *
   * ```ts
   * class SampleView extends View {
   * 	constructor() {
   * 		this.setTemplate( {
   * 			// ...
   * 		} );
   * 	},
   *
   * 	render() {
   * 		// View#element becomes available.
   * 		super.render();
   *
   * 		// The "scroll" listener depends on #element.
   * 		this.listenTo( window, 'scroll', () => {
   * 			// A reference to #element would render the #template and make it non-extendable.
   * 			if ( window.scrollY > 0 ) {
   * 				this.element.scrollLeft = 100;
   * 			} else {
   * 				this.element.scrollLeft = 0;
   * 			}
   * 		} );
   * 	}
   * }
   *
   * const view = new SampleView();
   *
   * // Let's customize the view before it gets rendered.
   * view.extendTemplate( {
   * 	attributes: {
   * 		class: [
   * 			'additional-class'
   * 		]
   * 	}
   * } );
   *
   * // Late rendering allows customization of the view.
   * view.render();
   * ```
   */
  render() {
    if (this.isRendered)
      throw new f("ui-view-render-already-rendered", this);
    this.template && (this.element = this.template.render(), this.registerChild(this.template.getViews())), this.isRendered = !0;
  }
  /**
   * Recursively destroys the view instance and child views added by {@link #registerChild} and
   * residing in collections created by the {@link #createCollection}.
   *
   * Destruction disables all event listeners:
   * * created on the view, e.g. `view.on( 'event', () => {} )`,
   * * defined in the {@link #template} for DOM events.
   */
  destroy() {
    this.stopListening(), this._viewCollections.map((e) => e.destroy()), this.template && this.template._revertData && this.template.revert(this.element);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const K5 = "http://www.w3.org/1999/xhtml";
class Ee extends L() {
  /**
   * Creates an instance of the {@link ~Template} class.
   *
   * @param def The definition of the template.
   */
  constructor(e) {
    super(), Object.assign(this, il(tl(e))), this._isRendered = !1, this._revertData = null;
  }
  /**
   * Renders a DOM Node (an HTML element or text) out of the template.
   *
   * ```ts
   * const domNode = new Template( { ... } ).render();
   * ```
   *
   * See: {@link #apply}.
   */
  render() {
    const e = this._renderNode({
      intoFragment: !0
    });
    return this._isRendered = !0, e;
  }
  /**
   * Applies the template to an existing DOM Node, either HTML element or text.
   *
   * **Note:** No new DOM nodes will be created. Applying extends:
   *
   * {@link module:ui/template~TemplateDefinition attributes},
   * {@link module:ui/template~TemplateDefinition event listeners}, and
   * `textContent` of {@link module:ui/template~TemplateDefinition children} only.
   *
   * **Note:** Existing `class` and `style` attributes are extended when a template
   * is applied to an HTML element, while other attributes and `textContent` are overridden.
   *
   * **Note:** The process of applying a template can be easily reverted using the
   * {@link module:ui/template~Template#revert} method.
   *
   * ```ts
   * const element = document.createElement( 'div' );
   * const observable = new Model( { divClass: 'my-div' } );
   * const emitter = Object.create( EmitterMixin );
   * const bind = Template.bind( observable, emitter );
   *
   * new Template( {
   * 	attributes: {
   * 		id: 'first-div',
   * 		class: bind.to( 'divClass' )
   * 	},
   * 	on: {
   * 		click: bind( 'elementClicked' ) // Will be fired by the observable.
   * 	},
   * 	children: [
   * 		'Div text.'
   * 	]
   * } ).apply( element );
   *
   * console.log( element.outerHTML ); // -> '<div id="first-div" class="my-div"></div>'
   * ```
   *
   * @see module:ui/template~Template#render
   * @see module:ui/template~Template#revert
   * @param node Root node for the template to apply.
   */
  apply(e) {
    return this._revertData = rl(), this._renderNode({
      node: e,
      intoFragment: !1,
      isApplying: !0,
      revertData: this._revertData
    }), e;
  }
  /**
   * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.
   *
   * @param node The root node for the template to revert. In most of the cases, it is the
   * same node used by {@link module:ui/template~Template#apply}.
   */
  revert(e) {
    if (!this._revertData)
      throw new f("ui-template-revert-not-applied", [this, e]);
    this._revertTemplateFromNode(e, this._revertData);
  }
  /**
   * Returns an iterator which traverses the template in search of {@link module:ui/view~View}
   * instances and returns them one by one.
   *
   * ```ts
   * const viewFoo = new View();
   * const viewBar = new View();
   * const viewBaz = new View();
   * const template = new Template( {
   * 	tag: 'div',
   * 	children: [
   * 		viewFoo,
   * 		{
   * 			tag: 'div',
   * 			children: [
   * 				viewBar
   * 			]
   * 		},
   * 		viewBaz
   * 	]
   * } );
   *
   * // Logs: viewFoo, viewBar, viewBaz
   * for ( const view of template.getViews() ) {
   * 	console.log( view );
   * }
   * ```
   */
  *getViews() {
    function* e(t) {
      if (t.children)
        for (const i of t.children)
          Tn(i) ? yield i : no(i) && (yield* e(i));
    }
    yield* e(this);
  }
  /**
   * An entry point to the interface which binds DOM nodes to
   * {@link module:utils/observablemixin~Observable observables}.
   * There are two types of bindings:
   *
   * * HTML element attributes or text `textContent` synchronized with attributes of an
   * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}
   * and {@link module:ui/template~BindChain#if}.
   *
   * ```ts
   * const bind = Template.bind( observable, emitter );
   *
   * new Template( {
   * 	attributes: {
   * 		// Binds the element "class" attribute to observable#classAttribute.
   * 		class: bind.to( 'classAttribute' )
   * 	}
   * } ).render();
   * ```
   *
   * * DOM events fired on HTML element propagated through
   * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.
   *
   * ```ts
   * const bind = Template.bind( observable, emitter );
   *
   * new Template( {
   * 	on: {
   * 		// Will be fired by the observable.
   * 		click: bind( 'elementClicked' )
   * 	}
   * } ).render();
   * ```
   *
   * Also see {@link module:ui/view~View#bindTemplate}.
   *
   * @param observable An observable which provides boundable attributes.
   * @param emitter An emitter that listens to observable attribute
   * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.
   */
  static bind(e, t) {
    return {
      to(i, s) {
        return new J5({
          eventNameOrFunction: i,
          attribute: i,
          observable: e,
          emitter: t,
          callback: s
        });
      },
      if(i, s, r) {
        return new qh({
          observable: e,
          emitter: t,
          attribute: i,
          valueIfTrue: s,
          callback: r
        });
      }
    };
  }
  /**
   * Extends an existing {@link module:ui/template~Template} instance with some additional content
   * from another {@link module:ui/template~TemplateDefinition}.
   *
   * ```ts
   * const bind = Template.bind( observable, emitter );
   *
   * const template = new Template( {
   * 	tag: 'p',
   * 	attributes: {
   * 		class: 'a',
   * 		data-x: bind.to( 'foo' )
   * 	},
   * 	children: [
   * 		{
   * 			tag: 'span',
   * 			attributes: {
   * 				class: 'b'
   * 			},
   * 			children: [
   * 				'Span'
   * 			]
   * 		}
   * 	]
   *  } );
   *
   * // Instance-level extension.
   * Template.extend( template, {
   * 	attributes: {
   * 		class: 'b',
   * 		data-x: bind.to( 'bar' )
   * 	},
   * 	children: [
   * 		{
   * 			attributes: {
   * 				class: 'c'
   * 			}
   * 		}
   * 	]
   * } );
   *
   * // Child extension.
   * Template.extend( template.children[ 0 ], {
   * 	attributes: {
   * 		class: 'd'
   * 	}
   * } );
   * ```
   *
   * the `outerHTML` of `template.render()` is:
   *
   * ```html
   * <p class="a b" data-x="{ observable.foo } { observable.bar }">
   * 	<span class="b c d">Span</span>
   * </p>
   * ```
   *
   * @param template An existing template instance to be extended.
   * @param def Additional definition to be applied to a template.
   */
  static extend(e, t) {
    if (e._isRendered)
      throw new f("template-extend-render", [this, e]);
    Yh(e, il(tl(t)));
  }
  /**
   * Renders a DOM Node (either an HTML element or text) out of the template.
   *
   * @param data Rendering data.
   */
  _renderNode(e) {
    let t;
    if (e.node ? t = this.tag && this.text : t = this.tag ? this.text : !this.text, t)
      throw new f("ui-template-wrong-syntax", this);
    return this.text ? this._renderText(e) : this._renderElement(e);
  }
  /**
   * Renders an HTML element out of the template.
   *
   * @param data Rendering data.
   */
  _renderElement(e) {
    let t = e.node;
    return t || (t = e.node = document.createElementNS(this.ns || K5, this.tag)), this._renderAttributes(e), this._renderElementChildren(e), this._setUpListeners(e), t;
  }
  /**
   * Renders a text node out of {@link module:ui/template~Template#text}.
   *
   * @param data Rendering data.
   */
  _renderText(e) {
    let t = e.node;
    return t ? e.revertData.text = t.textContent : t = e.node = document.createTextNode(""), dn(this.text) ? this._bindToObservable({
      schema: this.text,
      updater: Z5(t),
      data: e
    }) : t.textContent = this.text.join(""), t;
  }
  /**
   * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.
   *
   * @param data Rendering data.
   */
  _renderAttributes(e) {
    if (!this.attributes)
      return;
    const t = e.node, i = e.revertData;
    for (const s in this.attributes) {
      const r = t.getAttribute(s), o = this.attributes[s];
      i && (i.attributes[s] = r);
      const a = sl(o) ? o[0].ns : null;
      if (dn(o)) {
        const l = sl(o) ? o[0].value : o;
        i && ol(s) && l.unshift(r), this._bindToObservable({
          schema: l,
          updater: X5(t, s, a),
          data: e
        });
      } else if (s == "style" && typeof o[0] != "string")
        this._renderStyleAttribute(o[0], e);
      else {
        i && r && ol(s) && o.unshift(r);
        const l = o.map((c) => c && (c.value || c)).reduce((c, u) => c.concat(u), []).reduce(Jh, "");
        ai(l) || t.setAttributeNS(a, s, l);
      }
    }
  }
  /**
   * Renders the `style` attribute of an HTML element based on
   * {@link module:ui/template~Template#attributes}.
   *
   * A style attribute is an object with static values:
   *
   * ```ts
   * attributes: {
   * 	style: {
   * 		color: 'red'
   * 	}
   * }
   * ```
   *
   * or values bound to {@link module:ui/model~Model} properties:
   *
   * ```ts
   * attributes: {
   * 	style: {
   * 		color: bind.to( ... )
   * 	}
   * }
   * ```
   *
   * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be
   * needed.
   *
   * @param styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.
   * @param data Rendering data.
   */
  _renderStyleAttribute(e, t) {
    const i = t.node;
    for (const s in e) {
      const r = e[s];
      dn(r) ? this._bindToObservable({
        schema: [r],
        updater: Q5(i, s),
        data: t
      }) : i.style[s] = r;
    }
  }
  /**
   * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.
   *
   * @param data Rendering data.
   */
  _renderElementChildren(e) {
    const t = e.node, i = e.intoFragment ? document.createDocumentFragment() : t, s = e.isApplying;
    let r = 0;
    for (const o of this.children)
      if (so(o)) {
        if (!s) {
          o.setParent(t);
          for (const a of o)
            i.appendChild(a.element);
        }
      } else if (Tn(o))
        s || (o.isRendered || o.render(), i.appendChild(o.element));
      else if (ut(o))
        i.appendChild(o);
      else if (s) {
        const a = e.revertData, l = rl();
        a.children.push(l), o._renderNode({
          intoFragment: !1,
          node: i.childNodes[r++],
          isApplying: !0,
          revertData: l
        });
      } else
        i.appendChild(o.render());
    e.intoFragment && t.appendChild(i);
  }
  /**
   * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}
   * on an HTML element.
   *
   * @param data Rendering data.
   */
  _setUpListeners(e) {
    if (this.eventListeners)
      for (const t in this.eventListeners) {
        const i = this.eventListeners[t].map((s) => {
          const [r, o] = t.split("@");
          return s.activateDomEventListener(r, o, e);
        });
        e.revertData && e.revertData.bindings.push(i);
      }
  }
  /**
   * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}
   * activates the binding and sets its initial value.
   *
   * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or
   * text node `textContent`.
   *
   * @param options Binding options.
   * @param options.updater A function which updates the DOM (like attribute or text).
   * @param options.data Rendering data.
   */
  _bindToObservable({ schema: e, updater: t, data: i }) {
    const s = i.revertData;
    Gh(e, t, i);
    const r = e.filter((o) => !ai(o)).filter((o) => o.observable).map((o) => o.activateAttributeListener(e, t, i));
    s && s.bindings.push(r);
  }
  /**
   * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to
   * return it to the original state.
   *
   * @param node A node to be reverted.
   * @param revertData An object that stores information about what changes have been made by
   * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.
   */
  _revertTemplateFromNode(e, t) {
    for (const s of t.bindings)
      for (const r of s)
        r();
    if (t.text) {
      e.textContent = t.text;
      return;
    }
    const i = e;
    for (const s in t.attributes) {
      const r = t.attributes[s];
      r === null ? i.removeAttribute(s) : i.setAttribute(s, r);
    }
    for (let s = 0; s < t.children.length; ++s)
      this._revertTemplateFromNode(i.childNodes[s], t.children[s]);
  }
}
class ji {
  /**
   * Creates an instance of the {@link module:ui/template~TemplateBinding} class.
   *
   * @param def The definition of the binding.
   */
  constructor(e) {
    this.attribute = e.attribute, this.observable = e.observable, this.emitter = e.emitter, this.callback = e.callback;
  }
  /**
   * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in
   * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the
   * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.
   *
   * @param node A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.
   * @returns The value of {@link module:ui/template~TemplateBinding#attribute} in
   * {@link module:ui/template~TemplateBinding#observable}.
   */
  getValue(e) {
    const t = this.observable[this.attribute];
    return this.callback ? this.callback(t, e) : t;
  }
  /**
   * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in
   * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated
   * value of {@link module:ui/template~TemplateValueSchema}.
   *
   * @param schema A full schema to generate an attribute or text in the DOM.
   * @param updater A DOM updater function used to update the native DOM attribute or text.
   * @param data Rendering data.
   * @returns A function to sever the listener binding.
   */
  activateAttributeListener(e, t, i) {
    const s = () => Gh(e, t, i);
    return this.emitter.listenTo(this.observable, `change:${this.attribute}`, s), () => {
      this.emitter.stopListening(this.observable, `change:${this.attribute}`, s);
    };
  }
}
class J5 extends ji {
  constructor(e) {
    super(e), this.eventNameOrFunction = e.eventNameOrFunction;
  }
  /**
   * Activates the listener for the native DOM event, which when fired, is propagated by
   * the {@link module:ui/template~TemplateBinding#emitter}.
   *
   * @param domEvtName The name of the native DOM event.
   * @param domSelector The selector in the DOM to filter delegated events.
   * @param data Rendering data.
   * @returns A function to sever the listener binding.
   */
  activateDomEventListener(e, t, i) {
    const s = (r, o) => {
      (!t || o.target.matches(t)) && (typeof this.eventNameOrFunction == "function" ? this.eventNameOrFunction(o) : this.observable.fire(this.eventNameOrFunction, o));
    };
    return this.emitter.listenTo(i.node, e, s), () => {
      this.emitter.stopListening(i.node, e, s);
    };
  }
}
class qh extends ji {
  constructor(e) {
    super(e), this.valueIfTrue = e.valueIfTrue;
  }
  /**
   * @inheritDoc
   */
  getValue(e) {
    const t = super.getValue(e);
    return ai(t) ? !1 : this.valueIfTrue || !0;
  }
}
function dn(n) {
  return n ? (n.value && (n = n.value), Array.isArray(n) ? n.some(dn) : n instanceof ji) : !1;
}
function Y5(n, e) {
  return n.map((t) => t instanceof ji ? t.getValue(e) : t);
}
function Gh(n, e, { node: t }) {
  const i = Y5(n, t);
  let s;
  n.length == 1 && n[0] instanceof qh ? s = i[0] : s = i.reduce(Jh, ""), ai(s) ? e.remove() : e.set(s);
}
function Z5(n) {
  return {
    set(e) {
      n.textContent = e;
    },
    remove() {
      n.textContent = "";
    }
  };
}
function X5(n, e, t) {
  return {
    set(i) {
      n.setAttributeNS(t, e, i);
    },
    remove() {
      n.removeAttributeNS(t, e);
    }
  };
}
function Q5(n, e) {
  return {
    set(t) {
      n.style[e] = t;
    },
    remove() {
      n.style[e] = null;
    }
  };
}
function tl(n) {
  return Fr(n, (t) => {
    if (t && (t instanceof ji || no(t) || Tn(t) || so(t)))
      return t;
  });
}
function il(n) {
  if (typeof n == "string" ? n = ik(n) : n.text && nk(n), n.on && (n.eventListeners = tk(n.on), delete n.on), !n.text) {
    n.attributes && ek(n.attributes);
    const e = [];
    if (n.children)
      if (so(n.children))
        e.push(n.children);
      else
        for (const t of n.children)
          no(t) || Tn(t) || ut(t) ? e.push(t) : e.push(new Ee(t));
    n.children = e;
  }
  return n;
}
function ek(n) {
  for (const e in n)
    n[e].value && (n[e].value = Q(n[e].value)), Kh(n, e);
}
function tk(n) {
  for (const e in n)
    Kh(n, e);
  return n;
}
function ik(n) {
  return {
    text: [n]
  };
}
function nk(n) {
  n.text = Q(n.text);
}
function Kh(n, e) {
  n[e] = Q(n[e]);
}
function Jh(n, e) {
  return ai(e) ? n : ai(n) ? e : `${n} ${e}`;
}
function nl(n, e) {
  for (const t in e)
    n[t] ? n[t].push(...e[t]) : n[t] = e[t];
}
function Yh(n, e) {
  if (e.attributes && (n.attributes || (n.attributes = {}), nl(n.attributes, e.attributes)), e.eventListeners && (n.eventListeners || (n.eventListeners = {}), nl(n.eventListeners, e.eventListeners)), e.text && n.text.push(...e.text), e.children && e.children.length) {
    if (n.children.length != e.children.length)
      throw new f("ui-template-extend-children-mismatch", n);
    let t = 0;
    for (const i of e.children)
      Yh(n.children[t++], i);
  }
}
function ai(n) {
  return !n && n !== 0;
}
function Tn(n) {
  return n instanceof E;
}
function no(n) {
  return n instanceof Ee;
}
function so(n) {
  return n instanceof qe;
}
function sl(n) {
  return K(n[0]) && n[0].ns;
}
function rl() {
  return {
    children: [],
    bindings: [],
    attributes: {}
  };
}
function ol(n) {
  return n == "class" || n == "style";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class sk extends qe {
  /**
   * Creates a new instance of the {@link module:ui/editorui/bodycollection~BodyCollection}.
   *
   * @param locale The {@link module:core/editor/editor~Editor editor's locale} instance.
   * @param initialItems The initial items of the collection.
   */
  constructor(e, t = []) {
    super(t), this.locale = e;
  }
  /**
   * The element holding elements of the body region.
   */
  get bodyCollectionContainer() {
    return this._bodyCollectionContainer;
  }
  /**
   * Attaches the body collection to the DOM body element. You need to execute this method to render the content of
   * the body collection.
   */
  attachToDom() {
    this._bodyCollectionContainer = new Ee({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-reset_all",
          "ck-body",
          "ck-rounded-corners"
        ],
        dir: this.locale.uiLanguageDirection
      },
      children: this
    }).render();
    let e = document.querySelector(".ck-body-wrapper");
    e || (e = qb(document, "div", { class: "ck-body-wrapper" }), document.body.appendChild(e)), e.appendChild(this._bodyCollectionContainer);
  }
  /**
   * Detaches the collection from the DOM structure. Use this method when you do not need to use the body collection
   * anymore to clean-up the DOM structure.
   */
  detachFromDom() {
    super.destroy(), this._bodyCollectionContainer && this._bodyCollectionContainer.remove();
    const e = document.querySelector(".ck-body-wrapper");
    e && e.childElementCount == 0 && e.remove();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class pt extends E {
  /**
   * @inheritDoc
   */
  constructor() {
    super();
    const e = this.bindTemplate;
    this.set("content", ""), this.set("viewBox", "0 0 20 20"), this.set("fillColor", ""), this.set("isColorInherited", !0), this.setTemplate({
      tag: "svg",
      ns: "http://www.w3.org/2000/svg",
      attributes: {
        class: [
          "ck",
          "ck-icon",
          // Exclude icon internals from the CSS reset to allow rich (non-monochromatic) icons
          // (https://github.com/ckeditor/ckeditor5/issues/12599).
          "ck-reset_all-excluded",
          // The class to remove the dynamic color inheritance is toggleable
          // (https://github.com/ckeditor/ckeditor5/issues/12599).
          e.if("isColorInherited", "ck-icon_inherit-color")
        ],
        viewBox: e.to("viewBox")
      }
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this._updateXMLContent(), this._colorFillPaths(), this.on("change:content", () => {
      this._updateXMLContent(), this._colorFillPaths();
    }), this.on("change:fillColor", () => {
      this._colorFillPaths();
    });
  }
  /**
   * Updates the {@link #element} with the value of {@link #content}.
   */
  _updateXMLContent() {
    if (this.content) {
      const t = new DOMParser().parseFromString(this.content.trim(), "image/svg+xml").querySelector("svg"), i = t.getAttribute("viewBox");
      i && (this.viewBox = i);
      for (const { name: s, value: r } of Array.from(t.attributes))
        pt.presentationalAttributeNames.includes(s) && this.element.setAttribute(s, r);
      for (; this.element.firstChild; )
        this.element.removeChild(this.element.firstChild);
      for (; t.childNodes.length > 0; )
        this.element.appendChild(t.childNodes[0]);
    }
  }
  /**
   * Fills all child `path.ck-icon__fill` with the `#fillColor`.
   */
  _colorFillPaths() {
    this.fillColor && this.element.querySelectorAll(".ck-icon__fill").forEach((e) => {
      e.style.fill = this.fillColor;
    });
  }
}
pt.presentationalAttributeNames = [
  "alignment-baseline",
  "baseline-shift",
  "clip-path",
  "clip-rule",
  "color",
  "color-interpolation",
  "color-interpolation-filters",
  "color-rendering",
  "cursor",
  "direction",
  "display",
  "dominant-baseline",
  "fill",
  "fill-opacity",
  "fill-rule",
  "filter",
  "flood-color",
  "flood-opacity",
  "font-family",
  "font-size",
  "font-size-adjust",
  "font-stretch",
  "font-style",
  "font-variant",
  "font-weight",
  "image-rendering",
  "letter-spacing",
  "lighting-color",
  "marker-end",
  "marker-mid",
  "marker-start",
  "mask",
  "opacity",
  "overflow",
  "paint-order",
  "pointer-events",
  "shape-rendering",
  "stop-color",
  "stop-opacity",
  "stroke",
  "stroke-dasharray",
  "stroke-dashoffset",
  "stroke-linecap",
  "stroke-linejoin",
  "stroke-miterlimit",
  "stroke-opacity",
  "stroke-width",
  "text-anchor",
  "text-decoration",
  "text-overflow",
  "text-rendering",
  "transform",
  "unicode-bidi",
  "vector-effect",
  "visibility",
  "white-space",
  "word-spacing",
  "writing-mode"
];
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class D extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this._focusDelayed = null;
    const t = this.bindTemplate, i = et();
    this.set("ariaChecked", void 0), this.set("ariaLabel", void 0), this.set("ariaLabelledBy", `ck-editor__aria-label_${i}`), this.set("class", void 0), this.set("labelStyle", void 0), this.set("icon", void 0), this.set("isEnabled", !0), this.set("isOn", !1), this.set("isVisible", !0), this.set("isToggleable", !1), this.set("keystroke", void 0), this.set("label", void 0), this.set("role", void 0), this.set("tabindex", -1), this.set("tooltip", !1), this.set("tooltipPosition", "s"), this.set("type", "button"), this.set("withText", !1), this.set("withKeystroke", !1), this.children = this.createCollection(), this.labelView = this._createLabelView(), this.iconView = new pt(), this.iconView.extendTemplate({
      attributes: {
        class: "ck-button__icon"
      }
    }), this.keystrokeView = this._createKeystrokeView(), this.bind("_tooltipString").to(this, "tooltip", this, "label", this, "keystroke", this._getTooltipString.bind(this));
    const s = {
      tag: "button",
      attributes: {
        class: [
          "ck",
          "ck-button",
          t.to("class"),
          t.if("isEnabled", "ck-disabled", (r) => !r),
          t.if("isVisible", "ck-hidden", (r) => !r),
          t.to("isOn", (r) => r ? "ck-on" : "ck-off"),
          t.if("withText", "ck-button_with-text"),
          t.if("withKeystroke", "ck-button_with-keystroke")
        ],
        role: t.to("role"),
        type: t.to("type", (r) => r || "button"),
        tabindex: t.to("tabindex"),
        "aria-label": t.to("ariaLabel"),
        "aria-labelledby": t.to("ariaLabelledBy"),
        "aria-disabled": t.if("isEnabled", !0, (r) => !r),
        "aria-checked": t.to("isOn"),
        "aria-pressed": t.to("isOn", (r) => this.isToggleable ? String(!!r) : !1),
        "data-cke-tooltip-text": t.to("_tooltipString"),
        "data-cke-tooltip-position": t.to("tooltipPosition")
      },
      children: this.children,
      on: {
        click: t.to((r) => {
          this.isEnabled ? this.fire("execute") : r.preventDefault();
        })
      }
    };
    S.isSafari && (this._focusDelayed || (this._focusDelayed = Qs(() => this.focus(), 0)), s.on.mousedown = t.to(() => {
      this._focusDelayed();
    }), s.on.mouseup = t.to(() => {
      this._focusDelayed.cancel();
    })), this.setTemplate(s);
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.icon && (this.iconView.bind("content").to(this, "icon"), this.children.add(this.iconView)), this.children.add(this.labelView), this.withKeystroke && this.keystroke && this.children.add(this.keystrokeView);
  }
  /**
   * Focuses the {@link #element} of the button.
   */
  focus() {
    this.element.focus();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    this._focusDelayed && this._focusDelayed.cancel(), super.destroy();
  }
  /**
   * Creates a label view instance and binds it with button attributes.
   */
  _createLabelView() {
    const e = new E(), t = this.bindTemplate;
    return e.setTemplate({
      tag: "span",
      attributes: {
        class: [
          "ck",
          "ck-button__label"
        ],
        style: t.to("labelStyle"),
        id: this.ariaLabelledBy
      },
      children: [
        {
          text: t.to("label")
        }
      ]
    }), e;
  }
  /**
   * Creates a view that displays a keystroke next to a {@link #labelView label }
   * and binds it with button attributes.
   */
  _createKeystrokeView() {
    const e = new E();
    return e.setTemplate({
      tag: "span",
      attributes: {
        class: [
          "ck",
          "ck-button__keystroke"
        ]
      },
      children: [
        {
          text: this.bindTemplate.to("keystroke", (t) => ga(t))
        }
      ]
    }), e;
  }
  /**
   * Gets the text for the tooltip from the combination of
   * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.
   *
   * @see #tooltip
   * @see #_tooltipString
   * @param tooltip Button tooltip.
   * @param label Button label.
   * @param keystroke Button keystroke.
   */
  _getTooltipString(e, t, i) {
    return e ? typeof e == "string" ? e : (i && (i = ga(i)), e instanceof Function ? e(t, i) : `${t}${i ? ` (${i})` : ""}`) : "";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Gn extends D {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.isToggleable = !0, this.toggleSwitchView = this._createToggleView(), this.extendTemplate({
      attributes: {
        class: "ck-switchbutton"
      }
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.children.add(this.toggleSwitchView);
  }
  /**
   * Creates a toggle child view.
   */
  _createToggleView() {
    const e = new E();
    return e.setTemplate({
      tag: "span",
      attributes: {
        class: [
          "ck",
          "ck-button__toggle"
        ]
      },
      children: [
        {
          tag: "span",
          attributes: {
            class: [
              "ck",
              "ck-button__toggle__inner"
            ]
          }
        }
      ]
    }), e;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function rk(n, e) {
  const t = n.t, i = {
    Black: t("Black"),
    "Dim grey": t("Dim grey"),
    Grey: t("Grey"),
    "Light grey": t("Light grey"),
    White: t("White"),
    Red: t("Red"),
    Orange: t("Orange"),
    Yellow: t("Yellow"),
    "Light green": t("Light green"),
    Green: t("Green"),
    Aquamarine: t("Aquamarine"),
    Turquoise: t("Turquoise"),
    "Light blue": t("Light blue"),
    Blue: t("Blue"),
    Purple: t("Purple")
  };
  return e.map((s) => {
    const r = i[s.label];
    return r && r != s.label && (s.label = r), s;
  });
}
function ok(n) {
  return n.map(ak).filter((e) => !!e);
}
function ak(n) {
  return typeof n == "string" ? {
    model: n,
    label: n,
    hasBorder: !1,
    view: {
      name: "span",
      styles: {
        color: n
      }
    }
  } : {
    model: n.color,
    label: n.label || n.color,
    hasBorder: n.hasBorder === void 0 ? !1 : n.hasBorder,
    view: {
      name: "span",
      styles: {
        color: `${n.color}`
      }
    }
  };
}
const lk = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path class="ck-icon__fill" d="M16.935 5.328a2 2 0 0 1 0 2.829l-7.778 7.778a2 2 0 0 1-2.829 0L3.5 13.107a1.999 1.999 0 1 1 2.828-2.829l.707.707a1 1 0 0 0 1.414 0l5.658-5.657a2 2 0 0 1 2.828 0z"/><path d="M14.814 6.035 8.448 12.4a1 1 0 0 1-1.414 0l-1.413-1.415A1 1 0 1 0 4.207 12.4l2.829 2.829a1 1 0 0 0 1.414 0l7.778-7.778a1 1 0 1 0-1.414-1.415z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Zh extends D {
  constructor(e) {
    super(e);
    const t = this.bindTemplate;
    this.set("color", void 0), this.set("hasBorder", !1), this.icon = lk, this.extendTemplate({
      attributes: {
        style: {
          backgroundColor: t.to("color")
        },
        class: [
          "ck",
          "ck-color-grid__tile",
          t.if("hasBorder", "ck-color-table__color-tile_bordered")
        ]
      }
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.iconView.fillColor = "hsl(0, 0%, 100%)";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class al extends E {
  /**
   * Creates an instance of a color grid containing {@link module:ui/colorgrid/colortileview~ColorTileView tiles}.
   *
   * @fires execute
   * @param locale The localization services instance.
   * @param options Component configuration
   * @param options.colorDefinitions Array with definitions
   * required to create the {@link module:ui/colorgrid/colortileview~ColorTileView tiles}.
   * @param options.columns A number of columns to display the tiles.
   */
  constructor(e, t) {
    super(e);
    const i = t && t.colorDefinitions ? t.colorDefinitions : [];
    this.columns = t && t.columns ? t.columns : 5;
    const s = {
      gridTemplateColumns: `repeat( ${this.columns}, 1fr)`
    };
    this.set("selectedColor", void 0), this.items = this.createCollection(), this.focusTracker = new fe(), this.keystrokes = new ke(), this.items.on("add", (r, o) => {
      o.isOn = o.color === this.selectedColor;
    }), i.forEach((r) => {
      const o = new Zh();
      o.set({
        color: r.color,
        label: r.label,
        tooltip: !0,
        hasBorder: r.options.hasBorder
      }), o.on("execute", () => {
        this.fire("execute", {
          value: r.color,
          hasBorder: r.options.hasBorder,
          label: r.label
        });
      }), this.items.add(o);
    }), this.setTemplate({
      tag: "div",
      children: this.items,
      attributes: {
        class: [
          "ck",
          "ck-color-grid"
        ],
        style: s
      }
    }), this.on("change:selectedColor", (r, o, a) => {
      for (const l of this.items)
        l.isOn = l.color === a;
    });
  }
  /**
   * Focuses the first focusable in {@link #items}.
   */
  focus() {
    this.items.length && this.items.first.focus();
  }
  /**
   * Focuses the last focusable in {@link #items}.
   */
  focusLast() {
    this.items.length && this.items.last.focus();
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render();
    for (const e of this.items)
      this.focusTracker.add(e.element);
    this.items.on("add", (e, t) => {
      this.focusTracker.add(t.element);
    }), this.items.on("remove", (e, t) => {
      this.focusTracker.remove(t.element);
    }), this.keystrokes.listenTo(this.element), jh({
      keystrokeHandler: this.keystrokes,
      focusTracker: this.focusTracker,
      gridItems: this.items,
      numberOfColumns: this.columns,
      uiLanguageDirection: this.locale && this.locale.uiLanguageDirection
    });
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy();
  }
}
function Xh(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var Qh = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  grey: [128, 128, 128],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  rebeccapurple: [102, 51, 153],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
const ll = /* @__PURE__ */ Xh(Qh);
var cl = {
  red: 0,
  orange: 60,
  yellow: 120,
  green: 180,
  blue: 240,
  purple: 300
};
function ul(n) {
  var e, t = [], i = 1, s;
  if (typeof n == "string")
    if (ll[n])
      t = ll[n].slice(), s = "rgb";
    else if (n === "transparent")
      i = 0, s = "rgb", t = [0, 0, 0];
    else if (/^#[A-Fa-f0-9]+$/.test(n)) {
      var r = n.slice(1), o = r.length, a = o <= 4;
      i = 1, a ? (t = [
        parseInt(r[0] + r[0], 16),
        parseInt(r[1] + r[1], 16),
        parseInt(r[2] + r[2], 16)
      ], o === 4 && (i = parseInt(r[3] + r[3], 16) / 255)) : (t = [
        parseInt(r[0] + r[1], 16),
        parseInt(r[2] + r[3], 16),
        parseInt(r[4] + r[5], 16)
      ], o === 8 && (i = parseInt(r[6] + r[7], 16) / 255)), t[0] || (t[0] = 0), t[1] || (t[1] = 0), t[2] || (t[2] = 0), s = "rgb";
    } else if (e = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\s*\(([^\)]*)\)/.exec(n)) {
      var l = e[1], c = l === "rgb", r = l.replace(/a$/, "");
      s = r;
      var o = r === "cmyk" ? 4 : r === "gray" ? 1 : 3;
      t = e[2].trim().split(/\s*[,\/]\s*|\s+/).map(function(d, m) {
        if (/%$/.test(d))
          return m === o ? parseFloat(d) / 100 : r === "rgb" ? parseFloat(d) * 255 / 100 : parseFloat(d);
        if (r[m] === "h") {
          if (/deg$/.test(d))
            return parseFloat(d);
          if (cl[d] !== void 0)
            return cl[d];
        }
        return parseFloat(d);
      }), l === r && t.push(1), i = c || t[o] === void 0 ? 1 : t[o], t = t.slice(0, o);
    } else
      n.length > 10 && /[0-9](?:\s|\/)/.test(n) && (t = n.match(/([0-9]+)/g).map(function(u) {
        return parseFloat(u);
      }), s = n.match(/([a-z])/ig).join("").toLowerCase());
  else
    isNaN(n) ? Array.isArray(n) || n.length ? (t = [n[0], n[1], n[2]], s = "rgb", i = n.length === 4 ? n[3] : 1) : n instanceof Object && (n.r != null || n.red != null || n.R != null ? (s = "rgb", t = [
      n.r || n.red || n.R || 0,
      n.g || n.green || n.G || 0,
      n.b || n.blue || n.B || 0
    ]) : (s = "hsl", t = [
      n.h || n.hue || n.H || 0,
      n.s || n.saturation || n.S || 0,
      n.l || n.lightness || n.L || n.b || n.brightness
    ]), i = n.a || n.alpha || n.opacity || 1, n.opacity != null && (i /= 100)) : (s = "rgb", t = [n >>> 16, (n & 65280) >>> 8, n & 255]);
  return {
    space: s,
    values: t,
    alpha: i
  };
}
const zi = Qh, ed = {};
for (const n of Object.keys(zi))
  ed[zi[n]] = n;
const y = {
  rgb: { channels: 3, labels: "rgb" },
  hsl: { channels: 3, labels: "hsl" },
  hsv: { channels: 3, labels: "hsv" },
  hwb: { channels: 3, labels: "hwb" },
  cmyk: { channels: 4, labels: "cmyk" },
  xyz: { channels: 3, labels: "xyz" },
  lab: { channels: 3, labels: "lab" },
  lch: { channels: 3, labels: "lch" },
  hex: { channels: 1, labels: ["hex"] },
  keyword: { channels: 1, labels: ["keyword"] },
  ansi16: { channels: 1, labels: ["ansi16"] },
  ansi256: { channels: 1, labels: ["ansi256"] },
  hcg: { channels: 3, labels: ["h", "c", "g"] },
  apple: { channels: 3, labels: ["r16", "g16", "b16"] },
  gray: { channels: 1, labels: ["gray"] }
};
var td = y;
for (const n of Object.keys(y)) {
  if (!("channels" in y[n]))
    throw new Error("missing channels property: " + n);
  if (!("labels" in y[n]))
    throw new Error("missing channel labels property: " + n);
  if (y[n].labels.length !== y[n].channels)
    throw new Error("channel and label counts mismatch: " + n);
  const { channels: e, labels: t } = y[n];
  delete y[n].channels, delete y[n].labels, Object.defineProperty(y[n], "channels", { value: e }), Object.defineProperty(y[n], "labels", { value: t });
}
y.rgb.hsl = function(n) {
  const e = n[0] / 255, t = n[1] / 255, i = n[2] / 255, s = Math.min(e, t, i), r = Math.max(e, t, i), o = r - s;
  let a, l;
  r === s ? a = 0 : e === r ? a = (t - i) / o : t === r ? a = 2 + (i - e) / o : i === r && (a = 4 + (e - t) / o), a = Math.min(a * 60, 360), a < 0 && (a += 360);
  const c = (s + r) / 2;
  return r === s ? l = 0 : c <= 0.5 ? l = o / (r + s) : l = o / (2 - r - s), [a, l * 100, c * 100];
};
y.rgb.hsv = function(n) {
  let e, t, i, s, r;
  const o = n[0] / 255, a = n[1] / 255, l = n[2] / 255, c = Math.max(o, a, l), u = c - Math.min(o, a, l), h = function(d) {
    return (c - d) / 6 / u + 1 / 2;
  };
  return u === 0 ? (s = 0, r = 0) : (r = u / c, e = h(o), t = h(a), i = h(l), o === c ? s = i - t : a === c ? s = 1 / 3 + e - i : l === c && (s = 2 / 3 + t - e), s < 0 ? s += 1 : s > 1 && (s -= 1)), [
    s * 360,
    r * 100,
    c * 100
  ];
};
y.rgb.hwb = function(n) {
  const e = n[0], t = n[1];
  let i = n[2];
  const s = y.rgb.hsl(n)[0], r = 1 / 255 * Math.min(e, Math.min(t, i));
  return i = 1 - 1 / 255 * Math.max(e, Math.max(t, i)), [s, r * 100, i * 100];
};
y.rgb.cmyk = function(n) {
  const e = n[0] / 255, t = n[1] / 255, i = n[2] / 255, s = Math.min(1 - e, 1 - t, 1 - i), r = (1 - e - s) / (1 - s) || 0, o = (1 - t - s) / (1 - s) || 0, a = (1 - i - s) / (1 - s) || 0;
  return [r * 100, o * 100, a * 100, s * 100];
};
function ck(n, e) {
  return (n[0] - e[0]) ** 2 + (n[1] - e[1]) ** 2 + (n[2] - e[2]) ** 2;
}
y.rgb.keyword = function(n) {
  const e = ed[n];
  if (e)
    return e;
  let t = 1 / 0, i;
  for (const s of Object.keys(zi)) {
    const r = zi[s], o = ck(n, r);
    o < t && (t = o, i = s);
  }
  return i;
};
y.keyword.rgb = function(n) {
  return zi[n];
};
y.rgb.xyz = function(n) {
  let e = n[0] / 255, t = n[1] / 255, i = n[2] / 255;
  e = e > 0.04045 ? ((e + 0.055) / 1.055) ** 2.4 : e / 12.92, t = t > 0.04045 ? ((t + 0.055) / 1.055) ** 2.4 : t / 12.92, i = i > 0.04045 ? ((i + 0.055) / 1.055) ** 2.4 : i / 12.92;
  const s = e * 0.4124 + t * 0.3576 + i * 0.1805, r = e * 0.2126 + t * 0.7152 + i * 0.0722, o = e * 0.0193 + t * 0.1192 + i * 0.9505;
  return [s * 100, r * 100, o * 100];
};
y.rgb.lab = function(n) {
  const e = y.rgb.xyz(n);
  let t = e[0], i = e[1], s = e[2];
  t /= 95.047, i /= 100, s /= 108.883, t = t > 8856e-6 ? t ** (1 / 3) : 7.787 * t + 16 / 116, i = i > 8856e-6 ? i ** (1 / 3) : 7.787 * i + 16 / 116, s = s > 8856e-6 ? s ** (1 / 3) : 7.787 * s + 16 / 116;
  const r = 116 * i - 16, o = 500 * (t - i), a = 200 * (i - s);
  return [r, o, a];
};
y.hsl.rgb = function(n) {
  const e = n[0] / 360, t = n[1] / 100, i = n[2] / 100;
  let s, r, o;
  if (t === 0)
    return o = i * 255, [o, o, o];
  i < 0.5 ? s = i * (1 + t) : s = i + t - i * t;
  const a = 2 * i - s, l = [0, 0, 0];
  for (let c = 0; c < 3; c++)
    r = e + 1 / 3 * -(c - 1), r < 0 && r++, r > 1 && r--, 6 * r < 1 ? o = a + (s - a) * 6 * r : 2 * r < 1 ? o = s : 3 * r < 2 ? o = a + (s - a) * (2 / 3 - r) * 6 : o = a, l[c] = o * 255;
  return l;
};
y.hsl.hsv = function(n) {
  const e = n[0];
  let t = n[1] / 100, i = n[2] / 100, s = t;
  const r = Math.max(i, 0.01);
  i *= 2, t *= i <= 1 ? i : 2 - i, s *= r <= 1 ? r : 2 - r;
  const o = (i + t) / 2, a = i === 0 ? 2 * s / (r + s) : 2 * t / (i + t);
  return [e, a * 100, o * 100];
};
y.hsv.rgb = function(n) {
  const e = n[0] / 60, t = n[1] / 100;
  let i = n[2] / 100;
  const s = Math.floor(e) % 6, r = e - Math.floor(e), o = 255 * i * (1 - t), a = 255 * i * (1 - t * r), l = 255 * i * (1 - t * (1 - r));
  switch (i *= 255, s) {
    case 0:
      return [i, l, o];
    case 1:
      return [a, i, o];
    case 2:
      return [o, i, l];
    case 3:
      return [o, a, i];
    case 4:
      return [l, o, i];
    case 5:
      return [i, o, a];
  }
};
y.hsv.hsl = function(n) {
  const e = n[0], t = n[1] / 100, i = n[2] / 100, s = Math.max(i, 0.01);
  let r, o;
  o = (2 - t) * i;
  const a = (2 - t) * s;
  return r = t * s, r /= a <= 1 ? a : 2 - a, r = r || 0, o /= 2, [e, r * 100, o * 100];
};
y.hwb.rgb = function(n) {
  const e = n[0] / 360;
  let t = n[1] / 100, i = n[2] / 100;
  const s = t + i;
  let r;
  s > 1 && (t /= s, i /= s);
  const o = Math.floor(6 * e), a = 1 - i;
  r = 6 * e - o, o & 1 && (r = 1 - r);
  const l = t + r * (a - t);
  let c, u, h;
  switch (o) {
    default:
    case 6:
    case 0:
      c = a, u = l, h = t;
      break;
    case 1:
      c = l, u = a, h = t;
      break;
    case 2:
      c = t, u = a, h = l;
      break;
    case 3:
      c = t, u = l, h = a;
      break;
    case 4:
      c = l, u = t, h = a;
      break;
    case 5:
      c = a, u = t, h = l;
      break;
  }
  return [c * 255, u * 255, h * 255];
};
y.cmyk.rgb = function(n) {
  const e = n[0] / 100, t = n[1] / 100, i = n[2] / 100, s = n[3] / 100, r = 1 - Math.min(1, e * (1 - s) + s), o = 1 - Math.min(1, t * (1 - s) + s), a = 1 - Math.min(1, i * (1 - s) + s);
  return [r * 255, o * 255, a * 255];
};
y.xyz.rgb = function(n) {
  const e = n[0] / 100, t = n[1] / 100, i = n[2] / 100;
  let s, r, o;
  return s = e * 3.2406 + t * -1.5372 + i * -0.4986, r = e * -0.9689 + t * 1.8758 + i * 0.0415, o = e * 0.0557 + t * -0.204 + i * 1.057, s = s > 31308e-7 ? 1.055 * s ** (1 / 2.4) - 0.055 : s * 12.92, r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92, o = o > 31308e-7 ? 1.055 * o ** (1 / 2.4) - 0.055 : o * 12.92, s = Math.min(Math.max(0, s), 1), r = Math.min(Math.max(0, r), 1), o = Math.min(Math.max(0, o), 1), [s * 255, r * 255, o * 255];
};
y.xyz.lab = function(n) {
  let e = n[0], t = n[1], i = n[2];
  e /= 95.047, t /= 100, i /= 108.883, e = e > 8856e-6 ? e ** (1 / 3) : 7.787 * e + 16 / 116, t = t > 8856e-6 ? t ** (1 / 3) : 7.787 * t + 16 / 116, i = i > 8856e-6 ? i ** (1 / 3) : 7.787 * i + 16 / 116;
  const s = 116 * t - 16, r = 500 * (e - t), o = 200 * (t - i);
  return [s, r, o];
};
y.lab.xyz = function(n) {
  const e = n[0], t = n[1], i = n[2];
  let s, r, o;
  r = (e + 16) / 116, s = t / 500 + r, o = r - i / 200;
  const a = r ** 3, l = s ** 3, c = o ** 3;
  return r = a > 8856e-6 ? a : (r - 16 / 116) / 7.787, s = l > 8856e-6 ? l : (s - 16 / 116) / 7.787, o = c > 8856e-6 ? c : (o - 16 / 116) / 7.787, s *= 95.047, r *= 100, o *= 108.883, [s, r, o];
};
y.lab.lch = function(n) {
  const e = n[0], t = n[1], i = n[2];
  let s;
  s = Math.atan2(i, t) * 360 / 2 / Math.PI, s < 0 && (s += 360);
  const o = Math.sqrt(t * t + i * i);
  return [e, o, s];
};
y.lch.lab = function(n) {
  const e = n[0], t = n[1], s = n[2] / 360 * 2 * Math.PI, r = t * Math.cos(s), o = t * Math.sin(s);
  return [e, r, o];
};
y.rgb.ansi16 = function(n, e = null) {
  const [t, i, s] = n;
  let r = e === null ? y.rgb.hsv(n)[2] : e;
  if (r = Math.round(r / 50), r === 0)
    return 30;
  let o = 30 + (Math.round(s / 255) << 2 | Math.round(i / 255) << 1 | Math.round(t / 255));
  return r === 2 && (o += 60), o;
};
y.hsv.ansi16 = function(n) {
  return y.rgb.ansi16(y.hsv.rgb(n), n[2]);
};
y.rgb.ansi256 = function(n) {
  const e = n[0], t = n[1], i = n[2];
  return e === t && t === i ? e < 8 ? 16 : e > 248 ? 231 : Math.round((e - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(e / 255 * 5) + 6 * Math.round(t / 255 * 5) + Math.round(i / 255 * 5);
};
y.ansi16.rgb = function(n) {
  let e = n % 10;
  if (e === 0 || e === 7)
    return n > 50 && (e += 3.5), e = e / 10.5 * 255, [e, e, e];
  const t = (~~(n > 50) + 1) * 0.5, i = (e & 1) * t * 255, s = (e >> 1 & 1) * t * 255, r = (e >> 2 & 1) * t * 255;
  return [i, s, r];
};
y.ansi256.rgb = function(n) {
  if (n >= 232) {
    const r = (n - 232) * 10 + 8;
    return [r, r, r];
  }
  n -= 16;
  let e;
  const t = Math.floor(n / 36) / 5 * 255, i = Math.floor((e = n % 36) / 6) / 5 * 255, s = e % 6 / 5 * 255;
  return [t, i, s];
};
y.rgb.hex = function(n) {
  const t = (((Math.round(n[0]) & 255) << 16) + ((Math.round(n[1]) & 255) << 8) + (Math.round(n[2]) & 255)).toString(16).toUpperCase();
  return "000000".substring(t.length) + t;
};
y.hex.rgb = function(n) {
  const e = n.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  if (!e)
    return [0, 0, 0];
  let t = e[0];
  e[0].length === 3 && (t = t.split("").map((a) => a + a).join(""));
  const i = parseInt(t, 16), s = i >> 16 & 255, r = i >> 8 & 255, o = i & 255;
  return [s, r, o];
};
y.rgb.hcg = function(n) {
  const e = n[0] / 255, t = n[1] / 255, i = n[2] / 255, s = Math.max(Math.max(e, t), i), r = Math.min(Math.min(e, t), i), o = s - r;
  let a, l;
  return o < 1 ? a = r / (1 - o) : a = 0, o <= 0 ? l = 0 : s === e ? l = (t - i) / o % 6 : s === t ? l = 2 + (i - e) / o : l = 4 + (e - t) / o, l /= 6, l %= 1, [l * 360, o * 100, a * 100];
};
y.hsl.hcg = function(n) {
  const e = n[1] / 100, t = n[2] / 100, i = t < 0.5 ? 2 * e * t : 2 * e * (1 - t);
  let s = 0;
  return i < 1 && (s = (t - 0.5 * i) / (1 - i)), [n[0], i * 100, s * 100];
};
y.hsv.hcg = function(n) {
  const e = n[1] / 100, t = n[2] / 100, i = e * t;
  let s = 0;
  return i < 1 && (s = (t - i) / (1 - i)), [n[0], i * 100, s * 100];
};
y.hcg.rgb = function(n) {
  const e = n[0] / 360, t = n[1] / 100, i = n[2] / 100;
  if (t === 0)
    return [i * 255, i * 255, i * 255];
  const s = [0, 0, 0], r = e % 1 * 6, o = r % 1, a = 1 - o;
  let l = 0;
  switch (Math.floor(r)) {
    case 0:
      s[0] = 1, s[1] = o, s[2] = 0;
      break;
    case 1:
      s[0] = a, s[1] = 1, s[2] = 0;
      break;
    case 2:
      s[0] = 0, s[1] = 1, s[2] = o;
      break;
    case 3:
      s[0] = 0, s[1] = a, s[2] = 1;
      break;
    case 4:
      s[0] = o, s[1] = 0, s[2] = 1;
      break;
    default:
      s[0] = 1, s[1] = 0, s[2] = a;
  }
  return l = (1 - t) * i, [
    (t * s[0] + l) * 255,
    (t * s[1] + l) * 255,
    (t * s[2] + l) * 255
  ];
};
y.hcg.hsv = function(n) {
  const e = n[1] / 100, t = n[2] / 100, i = e + t * (1 - e);
  let s = 0;
  return i > 0 && (s = e / i), [n[0], s * 100, i * 100];
};
y.hcg.hsl = function(n) {
  const e = n[1] / 100, i = n[2] / 100 * (1 - e) + 0.5 * e;
  let s = 0;
  return i > 0 && i < 0.5 ? s = e / (2 * i) : i >= 0.5 && i < 1 && (s = e / (2 * (1 - i))), [n[0], s * 100, i * 100];
};
y.hcg.hwb = function(n) {
  const e = n[1] / 100, t = n[2] / 100, i = e + t * (1 - e);
  return [n[0], (i - e) * 100, (1 - i) * 100];
};
y.hwb.hcg = function(n) {
  const e = n[1] / 100, i = 1 - n[2] / 100, s = i - e;
  let r = 0;
  return s < 1 && (r = (i - s) / (1 - s)), [n[0], s * 100, r * 100];
};
y.apple.rgb = function(n) {
  return [n[0] / 65535 * 255, n[1] / 65535 * 255, n[2] / 65535 * 255];
};
y.rgb.apple = function(n) {
  return [n[0] / 255 * 65535, n[1] / 255 * 65535, n[2] / 255 * 65535];
};
y.gray.rgb = function(n) {
  return [n[0] / 100 * 255, n[0] / 100 * 255, n[0] / 100 * 255];
};
y.gray.hsl = function(n) {
  return [0, 0, n[0]];
};
y.gray.hsv = y.gray.hsl;
y.gray.hwb = function(n) {
  return [0, 100, n[0]];
};
y.gray.cmyk = function(n) {
  return [0, 0, 0, n[0]];
};
y.gray.lab = function(n) {
  return [n[0], 0, 0];
};
y.gray.hex = function(n) {
  const e = Math.round(n[0] / 100 * 255) & 255, i = ((e << 16) + (e << 8) + e).toString(16).toUpperCase();
  return "000000".substring(i.length) + i;
};
y.rgb.gray = function(n) {
  return [(n[0] + n[1] + n[2]) / 3 / 255 * 100];
};
const Pn = td;
function uk() {
  const n = {}, e = Object.keys(Pn);
  for (let t = e.length, i = 0; i < t; i++)
    n[e[i]] = {
      // http://jsperf.com/1-vs-infinity
      // micro-opt, but this is simple.
      distance: -1,
      parent: null
    };
  return n;
}
function hk(n) {
  const e = uk(), t = [n];
  for (e[n].distance = 0; t.length; ) {
    const i = t.pop(), s = Object.keys(Pn[i]);
    for (let r = s.length, o = 0; o < r; o++) {
      const a = s[o], l = e[a];
      l.distance === -1 && (l.distance = e[i].distance + 1, l.parent = i, t.unshift(a));
    }
  }
  return e;
}
function dk(n, e) {
  return function(t) {
    return e(n(t));
  };
}
function fk(n, e) {
  const t = [e[n].parent, n];
  let i = Pn[e[n].parent][n], s = e[n].parent;
  for (; e[s].parent; )
    t.unshift(e[s].parent), i = dk(Pn[e[s].parent][s], i), s = e[s].parent;
  return i.conversion = t, i;
}
var mk = function(n) {
  const e = hk(n), t = {}, i = Object.keys(e);
  for (let s = i.length, r = 0; r < s; r++) {
    const o = i[r];
    e[o].parent !== null && (t[o] = fk(o, e));
  }
  return t;
};
const dr = td, gk = mk, Yt = {}, pk = Object.keys(dr);
function wk(n) {
  const e = function(...t) {
    const i = t[0];
    return i == null ? i : (i.length > 1 && (t = i), n(t));
  };
  return "conversion" in n && (e.conversion = n.conversion), e;
}
function bk(n) {
  const e = function(...t) {
    const i = t[0];
    if (i == null)
      return i;
    i.length > 1 && (t = i);
    const s = n(t);
    if (typeof s == "object")
      for (let r = s.length, o = 0; o < r; o++)
        s[o] = Math.round(s[o]);
    return s;
  };
  return "conversion" in n && (e.conversion = n.conversion), e;
}
pk.forEach((n) => {
  Yt[n] = {}, Object.defineProperty(Yt[n], "channels", { value: dr[n].channels }), Object.defineProperty(Yt[n], "labels", { value: dr[n].labels });
  const e = gk(n);
  Object.keys(e).forEach((i) => {
    const s = e[i];
    Yt[n][i] = bk(s), Yt[n][i].raw = wk(s);
  });
});
var id = Yt;
const _k = /* @__PURE__ */ Xh(id), nd = /* @__PURE__ */ df({
  __proto__: null,
  default: _k
}, [id]);
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function sd(n, e) {
  if (!n)
    return "";
  const t = rd(n);
  if (!t)
    return "";
  if (t.space === e)
    return n;
  if (!kk(t))
    return "";
  const s = nd[t.space][e];
  if (!s)
    return "";
  const r = s(t.space === "hex" ? t.hexValue : t.values);
  return yk(r, e);
}
function vk(n) {
  if (!n)
    return "";
  const e = rd(n);
  return e ? e.space === "hex" ? e.hexValue : sd(n, "hex") : "#000";
}
function yk(n, e) {
  switch (e) {
    case "hex":
      return `#${n}`;
    case "rgb":
      return `rgb( ${n[0]}, ${n[1]}, ${n[2]} )`;
    case "hsl":
      return `hsl( ${n[0]}, ${n[1]}%, ${n[2]}% )`;
    case "hwb":
      return `hwb( ${n[0]}, ${n[1]}, ${n[2]} )`;
    case "lab":
      return `lab( ${n[0]}% ${n[1]} ${n[2]} )`;
    case "lch":
      return `lch( ${n[0]}% ${n[1]} ${n[2]} )`;
    default:
      return "";
  }
}
function rd(n) {
  if (n.startsWith("#")) {
    const t = ul(n);
    return {
      space: "hex",
      values: t.values,
      hexValue: n,
      alpha: t.alpha
    };
  }
  const e = ul(n);
  return e.space ? e : null;
}
function kk(n) {
  return Object.keys(nd).includes(n.space);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class od extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.set("text", void 0), this.set("for", void 0), this.id = `ck-editor__label_${et()}`;
    const t = this.bindTemplate;
    this.setTemplate({
      tag: "label",
      attributes: {
        class: [
          "ck",
          "ck-label"
        ],
        id: this.id,
        for: t.to("for")
      },
      children: [
        {
          text: t.to("text")
        }
      ]
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class qi extends E {
  /**
   * Creates an instance of the labeled field view class using a provided creator function
   * that provides the view to be labeled.
   *
   * @param locale The locale instance.
   * @param viewCreator A function that returns a {@link module:ui/view~View}
   * that will be labeled. The following arguments are passed to the creator function:
   *
   * * an instance of the `LabeledFieldView` to allow binding observable properties,
   * * an UID string that connects the {@link #labelView label} and the labeled field view in DOM,
   * * an UID string that connects the {@link #statusView status} and the labeled field view in DOM.
   */
  constructor(e, t) {
    super(e);
    const i = `ck-labeled-field-view-${et()}`, s = `ck-labeled-field-view-status-${et()}`;
    this.fieldView = t(this, i, s), this.set("label", void 0), this.set("isEnabled", !0), this.set("isEmpty", !0), this.set("isFocused", !1), this.set("errorText", null), this.set("infoText", null), this.set("class", void 0), this.set("placeholder", void 0), this.labelView = this._createLabelView(i), this.statusView = this._createStatusView(s), this.fieldWrapperChildren = this.createCollection([this.fieldView, this.labelView]), this.bind("_statusText").to(this, "errorText", this, "infoText", (o, a) => o || a);
    const r = this.bindTemplate;
    this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-labeled-field-view",
          r.to("class"),
          r.if("isEnabled", "ck-disabled", (o) => !o),
          r.if("isEmpty", "ck-labeled-field-view_empty"),
          r.if("isFocused", "ck-labeled-field-view_focused"),
          r.if("placeholder", "ck-labeled-field-view_placeholder"),
          r.if("errorText", "ck-error")
        ]
      },
      children: [
        {
          tag: "div",
          attributes: {
            class: [
              "ck",
              "ck-labeled-field-view__input-wrapper"
            ]
          },
          children: this.fieldWrapperChildren
        },
        this.statusView
      ]
    });
  }
  /**
   * Creates label view class instance and bind with view.
   *
   * @param id Unique id to set as labelView#for attribute.
   */
  _createLabelView(e) {
    const t = new od(this.locale);
    return t.for = e, t.bind("text").to(this, "label"), t;
  }
  /**
   * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}
   * next to the {@link #fieldView}. See {@link #_statusText}.
   *
   * @param statusUid Unique id of the status, shared with the {@link #fieldView view's}
   * `aria-describedby` attribute.
   */
  _createStatusView(e) {
    const t = new E(this.locale), i = this.bindTemplate;
    return t.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-labeled-field-view__status",
          i.if("errorText", "ck-labeled-field-view__status_error"),
          i.if("_statusText", "ck-hidden", (s) => !s)
        ],
        id: e,
        role: i.if("errorText", "alert")
      },
      children: [
        {
          text: i.to("_statusText")
        }
      ]
    }), t;
  }
  /**
   * Focuses the {@link #fieldView}.
   */
  focus() {
    this.fieldView.focus();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ad extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.set("value", void 0), this.set("id", void 0), this.set("placeholder", void 0), this.set("isReadOnly", !1), this.set("hasError", !1), this.set("ariaDescribedById", void 0), this.focusTracker = new fe(), this.bind("isFocused").to(this.focusTracker), this.set("isEmpty", !0), this.set("inputMode", "text");
    const t = this.bindTemplate;
    this.setTemplate({
      tag: "input",
      attributes: {
        class: [
          "ck",
          "ck-input",
          t.if("isFocused", "ck-input_focused"),
          t.if("isEmpty", "ck-input-text_empty"),
          t.if("hasError", "ck-error")
        ],
        id: t.to("id"),
        placeholder: t.to("placeholder"),
        readonly: t.to("isReadOnly"),
        inputmode: t.to("inputMode"),
        "aria-invalid": t.if("hasError", !0),
        "aria-describedby": t.to("ariaDescribedById")
      },
      on: {
        input: t.to((...i) => {
          this.fire("input", ...i), this._updateIsEmpty();
        }),
        change: t.to(this._updateIsEmpty.bind(this))
      }
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.focusTracker.add(this.element), this._setDomElementValue(this.value), this._updateIsEmpty(), this.on("change:value", (e, t, i) => {
      this._setDomElementValue(i), this._updateIsEmpty();
    });
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy();
  }
  /**
   * Moves the focus to the input and selects the value.
   */
  select() {
    this.element.select();
  }
  /**
   * Focuses the input.
   */
  focus() {
    this.element.focus();
  }
  /**
   * Updates the {@link #isEmpty} property value on demand.
   */
  _updateIsEmpty() {
    this.isEmpty = Ck(this.element);
  }
  /**
   * Sets the `value` property of the {@link #element DOM element} on demand.
   */
  _setDomElementValue(e) {
    this.element.value = !e && e !== 0 ? "" : e;
  }
}
function Ck(n) {
  return !n.value;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ak extends ad {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.extendTemplate({
      attributes: {
        type: "text",
        class: [
          "ck-input-text"
        ]
      }
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ek extends ad {
  /**
   * Creates an instance of the input number view.
   *
   * @param locale The {@link module:core/editor/editor~Editor#locale} instance.
   * @param options The options of the input.
   * @param options.min The value of the `min` DOM attribute (the lowest accepted value).
   * @param options.max The value of the `max` DOM attribute (the highest accepted value).
   * @param options.step The value of the `step` DOM attribute.
   */
  constructor(e, { min: t, max: i, step: s } = {}) {
    super(e);
    const r = this.bindTemplate;
    this.set("min", t), this.set("max", i), this.set("step", s), this.extendTemplate({
      attributes: {
        type: "number",
        class: [
          "ck-input-number"
        ],
        min: r.to("min"),
        max: r.to("max"),
        step: r.to("step")
      }
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Tk extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = this.bindTemplate;
    this.set("isVisible", !1), this.set("position", "se"), this.children = this.createCollection(), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-reset",
          "ck-dropdown__panel",
          t.to("position", (i) => `ck-dropdown__panel_${i}`),
          t.if("isVisible", "ck-dropdown__panel-visible")
        ]
      },
      children: this.children,
      on: {
        // Drag and drop in the panel should not break the selection in the editor.
        // https://github.com/ckeditor/ckeditor5-ui/issues/228
        selectstart: t.to((i) => {
          i.target.tagName.toLocaleLowerCase() !== "input" && i.preventDefault();
        })
      }
    });
  }
  /**
   * Focuses the first view in the {@link #children} collection.
   *
   * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.
   */
  focus() {
    if (this.children.length) {
      const e = this.children.first;
      typeof e.focus == "function" ? e.focus() : G("ui-dropdown-panel-focus-child-missing-focus", { childView: this.children.first, dropdownPanel: this });
    }
  }
  /**
   * Focuses the view element or last item in view collection on opening dropdown's panel.
   *
   * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.
   */
  focusLast() {
    if (this.children.length) {
      const e = this.children.last;
      typeof e.focusLast == "function" ? e.focusLast() : e.focus();
    }
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class li extends E {
  /**
   * Creates an instance of the dropdown.
   *
   * Also see {@link #render}.
   *
   * @param locale The localization services instance.
   */
  constructor(e, t, i) {
    super(e);
    const s = this.bindTemplate;
    this.buttonView = t, this.panelView = i, this.set("isOpen", !1), this.set("isEnabled", !0), this.set("class", void 0), this.set("id", void 0), this.set("panelPosition", "auto"), this.keystrokes = new ke(), this.focusTracker = new fe(), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-dropdown",
          s.to("class"),
          s.if("isEnabled", "ck-disabled", (r) => !r)
        ],
        id: s.to("id"),
        "aria-describedby": s.to("ariaDescribedById")
      },
      children: [
        t,
        i
      ]
    }), t.extendTemplate({
      attributes: {
        class: [
          "ck-dropdown__button"
        ],
        "data-cke-tooltip-disabled": s.to("isOpen")
      }
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.focusTracker.add(this.buttonView.element), this.focusTracker.add(this.panelView.element), this.listenTo(this.buttonView, "open", () => {
      this.isOpen = !this.isOpen;
    }), this.panelView.bind("isVisible").to(this, "isOpen"), this.on("change:isOpen", (t, i, s) => {
      s && (this.panelPosition === "auto" ? this.panelView.position = li._getOptimalPosition({
        element: this.panelView.element,
        target: this.buttonView.element,
        fitInViewport: !0,
        positions: this._panelPositions
      }).name : this.panelView.position = this.panelPosition);
    }), this.keystrokes.listenTo(this.element);
    const e = (t, i) => {
      this.isOpen && (this.isOpen = !1, i());
    };
    this.keystrokes.set("arrowdown", (t, i) => {
      this.buttonView.isEnabled && !this.isOpen && (this.isOpen = !0, i());
    }), this.keystrokes.set("arrowright", (t, i) => {
      this.isOpen && i();
    }), this.keystrokes.set("arrowleft", e), this.keystrokes.set("esc", e);
  }
  /**
   * Focuses the {@link #buttonView}.
   */
  focus() {
    this.buttonView.focus();
  }
  /**
   * Returns {@link #panelView panel} positions to be used by the
   * {@link module:utils/dom/position~getOptimalPosition `getOptimalPosition()`}
   * utility considering the direction of the language the UI of the editor is displayed in.
   */
  get _panelPositions() {
    const { south: e, north: t, southEast: i, southWest: s, northEast: r, northWest: o, southMiddleEast: a, southMiddleWest: l, northMiddleEast: c, northMiddleWest: u } = li.defaultPanelPositions;
    return this.locale.uiLanguageDirection !== "rtl" ? [
      i,
      s,
      a,
      l,
      e,
      r,
      o,
      c,
      u,
      t
    ] : [
      s,
      i,
      l,
      a,
      e,
      o,
      r,
      u,
      c,
      t
    ];
  }
}
li.defaultPanelPositions = {
  south: (n, e) => ({
    top: n.bottom,
    left: n.left - (e.width - n.width) / 2,
    name: "s"
  }),
  southEast: (n) => ({
    top: n.bottom,
    left: n.left,
    name: "se"
  }),
  southWest: (n, e) => ({
    top: n.bottom,
    left: n.left - e.width + n.width,
    name: "sw"
  }),
  southMiddleEast: (n, e) => ({
    top: n.bottom,
    left: n.left - (e.width - n.width) / 4,
    name: "sme"
  }),
  southMiddleWest: (n, e) => ({
    top: n.bottom,
    left: n.left - (e.width - n.width) * 3 / 4,
    name: "smw"
  }),
  north: (n, e) => ({
    top: n.top - e.height,
    left: n.left - (e.width - n.width) / 2,
    name: "n"
  }),
  northEast: (n, e) => ({
    top: n.top - e.height,
    left: n.left,
    name: "ne"
  }),
  northWest: (n, e) => ({
    top: n.top - e.height,
    left: n.left - e.width + n.width,
    name: "nw"
  }),
  northMiddleEast: (n, e) => ({
    top: n.top - e.height,
    left: n.left - (e.width - n.width) / 4,
    name: "nme"
  }),
  northMiddleWest: (n, e) => ({
    top: n.top - e.height,
    left: n.left - (e.width - n.width) * 3 / 4,
    name: "nmw"
  })
};
li._getOptimalPosition = zu;
const ro = '<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ld extends D {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.arrowView = this._createArrowView(), this.extendTemplate({
      attributes: {
        "aria-haspopup": !0,
        "aria-expanded": this.bindTemplate.to("isOn", (t) => String(t))
      }
    }), this.delegate("execute").to(this, "open");
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.children.add(this.arrowView);
  }
  /**
   * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.
   */
  _createArrowView() {
    const e = new pt();
    return e.content = ro, e.extendTemplate({
      attributes: {
        class: "ck-dropdown__arrow"
      }
    }), e;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class wt {
  /**
   * Creates an instance of the focus cycler utility.
   *
   * @param options Configuration options.
   */
  constructor(e) {
    if (this.focusables = e.focusables, this.focusTracker = e.focusTracker, this.keystrokeHandler = e.keystrokeHandler, this.actions = e.actions, e.actions && e.keystrokeHandler)
      for (const t in e.actions) {
        let i = e.actions[t];
        typeof i == "string" && (i = [i]);
        for (const s of i)
          e.keystrokeHandler.set(s, (r, o) => {
            this[t](), o();
          });
      }
  }
  /**
   * Returns the first focusable view in {@link #focusables}.
   * Returns `null` if there is none.
   *
   * **Note**: Hidden views (e.g. with `display: none`) are ignored.
   */
  get first() {
    return this.focusables.find(ws) || null;
  }
  /**
   * Returns the last focusable view in {@link #focusables}.
   * Returns `null` if there is none.
   *
   * **Note**: Hidden views (e.g. with `display: none`) are ignored.
   */
  get last() {
    return this.focusables.filter(ws).slice(-1)[0] || null;
  }
  /**
   * Returns the next focusable view in {@link #focusables} based on {@link #current}.
   * Returns `null` if there is none.
   *
   * **Note**: Hidden views (e.g. with `display: none`) are ignored.
   */
  get next() {
    return this._getFocusableItem(1);
  }
  /**
   * Returns the previous focusable view in {@link #focusables} based on {@link #current}.
   * Returns `null` if there is none.
   *
   * **Note**: Hidden views (e.g. with `display: none`) are ignored.
   */
  get previous() {
    return this._getFocusableItem(-1);
  }
  /**
   * An index of the view in the {@link #focusables} which is focused according
   * to {@link #focusTracker}. Returns `null` when there is no such view.
   */
  get current() {
    let e = null;
    return this.focusTracker.focusedElement === null ? null : (this.focusables.find((t, i) => {
      const s = t.element === this.focusTracker.focusedElement;
      return s && (e = i), s;
    }), e);
  }
  /**
   * Focuses the {@link #first} item in {@link #focusables}.
   *
   * **Note**: Hidden views (e.g. with `display: none`) are ignored.
   */
  focusFirst() {
    this._focus(this.first);
  }
  /**
   * Focuses the {@link #last} item in {@link #focusables}.
   *
   * **Note**: Hidden views (e.g. with `display: none`) are ignored.
   */
  focusLast() {
    this._focus(this.last);
  }
  /**
   * Focuses the {@link #next} item in {@link #focusables}.
   *
   * **Note**: Hidden views (e.g. with `display: none`) are ignored.
   */
  focusNext() {
    this._focus(this.next);
  }
  /**
   * Focuses the {@link #previous} item in {@link #focusables}.
   *
   * **Note**: Hidden views (e.g. with `display: none`) are ignored.
   */
  focusPrevious() {
    this._focus(this.previous);
  }
  /**
   * Focuses the given view if it exists.
   */
  _focus(e) {
    e && e.focus();
  }
  /**
   * Returns the next or previous focusable view in {@link #focusables} with respect
   * to {@link #current}.
   *
   * @param step Either `1` for checking forward from {@link #current} or `-1` for checking backwards.
   */
  _getFocusableItem(e) {
    const t = this.current, i = this.focusables.length;
    if (!i)
      return null;
    if (t === null)
      return this[e === 1 ? "first" : "last"];
    let s = (t + i + e) % i;
    do {
      const r = this.focusables.get(s);
      if (ws(r))
        return r;
      s = (s + i + e) % i;
    } while (s !== t);
    return null;
  }
}
function ws(n) {
  return !!(n.focus && Rt(n.element));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class cd extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.setTemplate({
      tag: "span",
      attributes: {
        class: [
          "ck",
          "ck-toolbar__separator"
        ]
      }
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Pk extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.setTemplate({
      tag: "span",
      attributes: {
        class: [
          "ck",
          "ck-toolbar__line-break"
        ]
      }
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function xk(n) {
  return n.bindTemplate.to((e) => {
    e.target === n.element && e.preventDefault();
  });
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ud(n) {
  return Array.isArray(n) ? {
    items: n,
    removeItems: []
  } : n ? Object.assign({
    items: [],
    removeItems: []
  }, n) : {
    items: [],
    removeItems: []
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const { threeVerticalDots: hd } = B, Sk = {
  alignLeft: B.alignLeft,
  bold: B.bold,
  importExport: B.importExport,
  paragraph: B.paragraph,
  plus: B.plus,
  text: B.text,
  threeVerticalDots: B.threeVerticalDots
};
class oo extends E {
  /**
   * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.
   *
   * Also see {@link #render}.
   *
   * @param locale The localization services instance.
   * @param options Configuration options of the toolbar.
   */
  constructor(e, t) {
    super(e);
    const i = this.bindTemplate, s = this.t;
    this.options = t || {}, this.set("ariaLabel", s("Editor toolbar")), this.set("maxWidth", "auto"), this.items = this.createCollection(), this.focusTracker = new fe(), this.keystrokes = new ke(), this.set("class", void 0), this.set("isCompact", !1), this.itemsView = new Ik(e), this.children = this.createCollection(), this.children.add(this.itemsView), this.focusables = this.createCollection();
    const r = e.uiLanguageDirection === "rtl";
    this._focusCycler = new wt({
      focusables: this.focusables,
      focusTracker: this.focusTracker,
      keystrokeHandler: this.keystrokes,
      actions: {
        // Navigate toolbar items backwards using the arrow[left,up] keys.
        focusPrevious: [r ? "arrowright" : "arrowleft", "arrowup"],
        // Navigate toolbar items forwards using the arrow[right,down] keys.
        focusNext: [r ? "arrowleft" : "arrowright", "arrowdown"]
      }
    });
    const o = [
      "ck",
      "ck-toolbar",
      i.to("class"),
      i.if("isCompact", "ck-toolbar_compact")
    ];
    this.options.shouldGroupWhenFull && this.options.isFloating && o.push("ck-toolbar_floating"), this.setTemplate({
      tag: "div",
      attributes: {
        class: o,
        role: "toolbar",
        "aria-label": i.to("ariaLabel"),
        style: {
          maxWidth: i.to("maxWidth")
        },
        tabindex: -1
      },
      children: this.children,
      on: {
        // https://github.com/ckeditor/ckeditor5-ui/issues/206
        mousedown: xk(this)
      }
    }), this._behavior = this.options.shouldGroupWhenFull ? new Vk(this) : new Rk(this);
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.focusTracker.add(this.element);
    for (const e of this.items)
      this.focusTracker.add(e.element);
    this.items.on("add", (e, t) => {
      this.focusTracker.add(t.element);
    }), this.items.on("remove", (e, t) => {
      this.focusTracker.remove(t.element);
    }), this.keystrokes.listenTo(this.element), this._behavior.render(this);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    return this._behavior.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy(), super.destroy();
  }
  /**
   * Focuses the first focusable in {@link #focusables}.
   */
  focus() {
    this._focusCycler.focusFirst();
  }
  /**
   * Focuses the last focusable in {@link #focusables}.
   */
  focusLast() {
    this._focusCycler.focusLast();
  }
  /**
   * A utility that expands the plain toolbar configuration into
   * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.
   *
   * @param itemsOrConfig The toolbar items or the entire toolbar configuration object.
   * @param factory A factory producing toolbar items.
   * @param removeItems An array of items names to be removed from the configuration. When present, applies
   * to this toolbar and all nested ones as well.
   */
  fillFromConfig(e, t, i) {
    this.items.addMany(this._buildItemsFromConfig(e, t, i));
  }
  /**
   * A utility that expands the plain toolbar configuration into a list of view items using a given component factory.
   *
   * @param itemsOrConfig The toolbar items or the entire toolbar configuration object.
   * @param factory A factory producing toolbar items.
   * @param removeItems An array of items names to be removed from the configuration. When present, applies
   * to this toolbar and all nested ones as well.
   */
  _buildItemsFromConfig(e, t, i) {
    const s = ud(e), r = i || s.removeItems;
    return this._cleanItemsConfiguration(s.items, t, r).map((a) => K(a) ? this._createNestedToolbarDropdown(a, t, r) : a === "|" ? new cd() : a === "-" ? new Pk() : t.create(a)).filter((a) => !!a);
  }
  /**
   * Cleans up the {@link module:ui/toolbar/toolbarview~ToolbarView#items} of the toolbar by removing unwanted items and
   * duplicated (obsolete) separators or line breaks.
   *
   * @param items The toolbar items configuration.
   * @param factory A factory producing toolbar items.
   * @param removeItems An array of items names to be removed from the configuration.
   * @returns Items after the clean-up.
   */
  _cleanItemsConfiguration(e, t, i) {
    const s = e.filter((r, o, a) => r === "|" ? !0 : i.indexOf(r) !== -1 ? !1 : r === "-" ? this.options.shouldGroupWhenFull ? (G("toolbarview-line-break-ignored-when-grouping-items", a), !1) : !0 : !K(r) && !t.has(r) ? (G("toolbarview-item-unavailable", { item: r }), !1) : !0);
    return this._cleanSeparatorsAndLineBreaks(s);
  }
  /**
   * Remove leading, trailing, and duplicated separators (`-` and `|`).
   *
   * @returns Toolbar items after the separator and line break clean-up.
   */
  _cleanSeparatorsAndLineBreaks(e) {
    const t = (o) => o !== "-" && o !== "|", i = e.length, s = e.findIndex(t);
    if (s === -1)
      return [];
    const r = i - e.slice().reverse().findIndex(t);
    return e.slice(s, r).filter((o, a, l) => t(o) ? !0 : !(a > 0 && l[a - 1] === o));
  }
  /**
   * Creates a user-defined dropdown containing a toolbar with items.
   *
   * @param definition A definition of the nested toolbar dropdown.
   * @param definition.label A label of the dropdown.
   * @param definition.icon An icon of the drop-down. One of 'bold', 'plus', 'text', 'importExport', 'alignLeft',
   * 'paragraph' or an SVG string. When `false` is passed, no icon will be used.
   * @param definition.withText When set `true`, the label of the dropdown will be visible. See
   * {@link module:ui/button/buttonview~ButtonView#withText} to learn more.
   * @param definition.tooltip A tooltip of the dropdown button. See
   * {@link module:ui/button/buttonview~ButtonView#tooltip} to learn more. Defaults to `true`.
   * @param componentFactory Component factory used to create items
   * of the nested toolbar.
   */
  _createNestedToolbarDropdown(e, t, i) {
    let { label: s, icon: r, items: o, tooltip: a = !0, withText: l = !1 } = e;
    if (o = this._cleanItemsConfiguration(o, t, i), !o.length)
      return null;
    const c = this.locale, u = ot(c);
    return s || G("toolbarview-nested-toolbar-dropdown-missing-label", e), u.class = "ck-toolbar__nested-toolbar-dropdown", u.buttonView.set({
      label: s,
      tooltip: a,
      withText: !!l
    }), r !== !1 ? u.buttonView.icon = Sk[r] || r || hd : u.buttonView.withText = !0, Kn(u, () => u.toolbarView._buildItemsFromConfig(o, t, i)), u;
  }
}
class Ik extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.children = this.createCollection(), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-toolbar__items"
        ]
      },
      children: this.children
    });
  }
}
class Rk {
  /**
   * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar
   * behavior.
   *
   * @param view An instance of the toolbar that this behavior is added to.
   */
  constructor(e) {
    const t = e.bindTemplate;
    e.set("isVertical", !1), e.itemsView.children.bindTo(e.items).using((i) => i), e.focusables.bindTo(e.items).using((i) => i), e.extendTemplate({
      attributes: {
        class: [
          // When vertical, the toolbar has an additional CSS class.
          t.if("isVertical", "ck-toolbar_vertical")
        ]
      }
    });
  }
  /**
   * @inheritDoc
   */
  render() {
  }
  /**
   * @inheritDoc
   */
  destroy() {
  }
}
class Vk {
  /**
   * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar
   * behavior.
   *
   * @param view An instance of the toolbar that this behavior is added to.
   */
  constructor(e) {
    this.resizeObserver = null, this.cachedPadding = null, this.shouldUpdateGroupingOnNextResize = !1, this.view = e, this.viewChildren = e.children, this.viewFocusables = e.focusables, this.viewItemsView = e.itemsView, this.viewFocusTracker = e.focusTracker, this.viewLocale = e.locale, this.ungroupedItems = e.createCollection(), this.groupedItems = e.createCollection(), this.groupedItemsDropdown = this._createGroupedItemsDropdown(), e.itemsView.children.bindTo(this.ungroupedItems).using((t) => t), this.ungroupedItems.on("change", this._updateFocusCycleableItems.bind(this)), e.children.on("change", this._updateFocusCycleableItems.bind(this)), e.items.on("change", (t, i) => {
      const s = i.index, r = Array.from(i.added);
      for (const o of i.removed)
        s >= this.ungroupedItems.length ? this.groupedItems.remove(o) : this.ungroupedItems.remove(o);
      for (let o = s; o < s + r.length; o++) {
        const a = r[o - s];
        o > this.ungroupedItems.length ? this.groupedItems.add(a, o - this.ungroupedItems.length) : this.ungroupedItems.add(a, o);
      }
      this._updateGrouping();
    }), e.extendTemplate({
      attributes: {
        class: [
          // To group items dynamically, the toolbar needs a dedicated CSS class.
          "ck-toolbar_grouping"
        ]
      }
    });
  }
  /**
   * Enables dynamic items grouping based on the dimensions of the toolbar.
   *
   * @param view An instance of the toolbar that this behavior is added to.
   */
  render(e) {
    this.viewElement = e.element, this._enableGroupingOnResize(), this._enableGroupingOnMaxWidthChange(e);
  }
  /**
   * Cleans up the internals used by this behavior.
   */
  destroy() {
    this.groupedItemsDropdown.destroy(), this.resizeObserver.destroy();
  }
  /**
   * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,
   * and it will move them to the {@link #groupedItems} when it happens.
   *
   * At the same time, it will also check if there is enough space in the toolbar for the first of the
   * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row
   * without the toolbar wrapping.
   */
  _updateGrouping() {
    if (!this.viewElement.ownerDocument.body.contains(this.viewElement))
      return;
    if (!Rt(this.viewElement)) {
      this.shouldUpdateGroupingOnNextResize = !0;
      return;
    }
    const e = this.groupedItems.length;
    let t;
    for (; this._areItemsOverflowing; )
      this._groupLastItem(), t = !0;
    if (!t && this.groupedItems.length) {
      for (; this.groupedItems.length && !this._areItemsOverflowing; )
        this._ungroupFirstItem();
      this._areItemsOverflowing && this._groupLastItem();
    }
    this.groupedItems.length !== e && this.view.fire("groupedItemsUpdate");
  }
  /**
   * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,
   * for instance if the toolbar is narrower than its members. Returns `false` otherwise.
   */
  get _areItemsOverflowing() {
    if (!this.ungroupedItems.length)
      return !1;
    const e = this.viewElement, t = this.viewLocale.uiLanguageDirection, i = new M(e.lastChild), s = new M(e);
    if (!this.cachedPadding) {
      const r = I.window.getComputedStyle(e), o = t === "ltr" ? "paddingRight" : "paddingLeft";
      this.cachedPadding = Number.parseInt(r[o]);
    }
    return t === "ltr" ? i.right > s.right - this.cachedPadding : i.left < s.left + this.cachedPadding;
  }
  /**
   * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)
   * upon resize when there is little space available. Instead, the toolbar items are moved to the
   * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).
   *
   * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and "group"
   * them in the dropdown if necessary. It will also observe the browser window for size changes in
   * the future and respond to them by grouping more items or reverting already grouped back, depending
   * on the visual space available.
   */
  _enableGroupingOnResize() {
    let e;
    this.resizeObserver = new $(this.viewElement, (t) => {
      (!e || e !== t.contentRect.width || this.shouldUpdateGroupingOnNextResize) && (this.shouldUpdateGroupingOnNextResize = !1, this._updateGrouping(), e = t.contentRect.width);
    }), this._updateGrouping();
  }
  /**
   * Enables the grouping functionality, just like {@link #_enableGroupingOnResize} but the difference is that
   * it listens to the changes of {@link module:ui/toolbar/toolbarview~ToolbarView#maxWidth} instead.
   */
  _enableGroupingOnMaxWidthChange(e) {
    e.on("change:maxWidth", () => {
      this._updateGrouping();
    });
  }
  /**
   * When called, it will remove the last item from {@link #ungroupedItems} and move it back
   * to the {@link #groupedItems} collection.
   *
   * The opposite of {@link #_ungroupFirstItem}.
   */
  _groupLastItem() {
    this.groupedItems.length || (this.viewChildren.add(new cd()), this.viewChildren.add(this.groupedItemsDropdown), this.viewFocusTracker.add(this.groupedItemsDropdown.element)), this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);
  }
  /**
   * Moves the very first item belonging to {@link #groupedItems} back
   * to the {@link #ungroupedItems} collection.
   *
   * The opposite of {@link #_groupLastItem}.
   */
  _ungroupFirstItem() {
    this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first)), this.groupedItems.length || (this.viewChildren.remove(this.groupedItemsDropdown), this.viewChildren.remove(this.viewChildren.last), this.viewFocusTracker.remove(this.groupedItemsDropdown.element));
  }
  /**
   * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}
   * collection when there is not enough space in the toolbar to display all items in a single row.
   */
  _createGroupedItemsDropdown() {
    const e = this.viewLocale, t = e.t, i = ot(e);
    return i.class = "ck-toolbar__grouped-dropdown", i.panelPosition = e.uiLanguageDirection === "ltr" ? "sw" : "se", Kn(i, this.groupedItems), i.buttonView.set({
      label: t("Show more items"),
      tooltip: !0,
      tooltipPosition: e.uiLanguageDirection === "rtl" ? "se" : "sw",
      icon: hd
    }), i;
  }
  /**
   * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}
   * collection so it represents the up–to–date state of the UI from the perspective of the user.
   *
   * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,
   * it must be subject to focus cycling in the toolbar.
   *
   * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation
   * to learn more about the purpose of this method.
   */
  _updateFocusCycleableItems() {
    this.viewFocusables.clear(), this.ungroupedItems.map((e) => {
      this.viewFocusables.add(e);
    }), this.groupedItems.length && this.viewFocusables.add(this.groupedItemsDropdown);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ok extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = this.bindTemplate;
    this.items = this.createCollection(), this.focusTracker = new fe(), this.keystrokes = new ke(), this._focusCycler = new wt({
      focusables: this.items,
      focusTracker: this.focusTracker,
      keystrokeHandler: this.keystrokes,
      actions: {
        // Navigate list items backwards using the arrowup key.
        focusPrevious: "arrowup",
        // Navigate toolbar items forwards using the arrowdown key.
        focusNext: "arrowdown"
      }
    }), this.set("ariaLabel", void 0), this.set("role", void 0), this.setTemplate({
      tag: "ul",
      attributes: {
        class: [
          "ck",
          "ck-reset",
          "ck-list"
        ],
        role: t.to("role"),
        "aria-label": t.to("ariaLabel")
      },
      children: this.items
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render();
    for (const e of this.items)
      this.focusTracker.add(e.element);
    this.items.on("add", (e, t) => {
      this.focusTracker.add(t.element);
    }), this.items.on("remove", (e, t) => {
      this.focusTracker.remove(t.element);
    }), this.keystrokes.listenTo(this.element);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy();
  }
  /**
   * Focuses the first focusable in {@link #items}.
   */
  focus() {
    this._focusCycler.focusFirst();
  }
  /**
   * Focuses the last focusable in {@link #items}.
   */
  focusLast() {
    this._focusCycler.focusLast();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class dd extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = this.bindTemplate;
    this.set("isVisible", !0), this.children = this.createCollection(), this.setTemplate({
      tag: "li",
      attributes: {
        class: [
          "ck",
          "ck-list__item",
          t.if("isVisible", "ck-hidden", (i) => !i)
        ],
        role: "presentation"
      },
      children: this.children
    });
  }
  /**
   * Focuses the list item.
   */
  focus() {
    this.children.first.focus();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Mk extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.setTemplate({
      tag: "li",
      attributes: {
        class: [
          "ck",
          "ck-list__separator"
        ]
      }
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ao extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = this.bindTemplate;
    this.set("class", void 0), this.set("labelStyle", void 0), this.set("icon", void 0), this.set("isEnabled", !0), this.set("isOn", !1), this.set("isToggleable", !1), this.set("isVisible", !0), this.set("keystroke", void 0), this.set("withKeystroke", !1), this.set("label", void 0), this.set("tabindex", -1), this.set("tooltip", !1), this.set("tooltipPosition", "s"), this.set("type", "button"), this.set("withText", !1), this.children = this.createCollection(), this.actionView = this._createActionView(), this.arrowView = this._createArrowView(), this.keystrokes = new ke(), this.focusTracker = new fe(), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-splitbutton",
          t.to("class"),
          t.if("isVisible", "ck-hidden", (i) => !i),
          this.arrowView.bindTemplate.if("isOn", "ck-splitbutton_open")
        ]
      },
      children: this.children
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.children.add(this.actionView), this.children.add(this.arrowView), this.focusTracker.add(this.actionView.element), this.focusTracker.add(this.arrowView.element), this.keystrokes.listenTo(this.element), this.keystrokes.set("arrowright", (e, t) => {
      this.focusTracker.focusedElement === this.actionView.element && (this.arrowView.focus(), t());
    }), this.keystrokes.set("arrowleft", (e, t) => {
      this.focusTracker.focusedElement === this.arrowView.element && (this.actionView.focus(), t());
    });
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy();
  }
  /**
   * Focuses the {@link module:ui/button/buttonview~ButtonView#element} of the action part of split button.
   */
  focus() {
    this.actionView.focus();
  }
  /**
   * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #actionView} and binds it with main split button
   * attributes.
   */
  _createActionView() {
    const e = new D();
    return e.bind("icon", "isEnabled", "isOn", "isToggleable", "keystroke", "label", "tabindex", "tooltip", "tooltipPosition", "type", "withText").to(this), e.extendTemplate({
      attributes: {
        class: "ck-splitbutton__action"
      }
    }), e.delegate("execute").to(this), e;
  }
  /**
   * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #arrowView} and binds it with main split button
   * attributes.
   */
  _createArrowView() {
    const e = new D(), t = e.bindTemplate;
    return e.icon = ro, e.extendTemplate({
      attributes: {
        class: [
          "ck-splitbutton__arrow"
        ],
        "data-cke-tooltip-disabled": t.to("isOn"),
        "aria-haspopup": !0,
        "aria-expanded": t.to("isOn", (i) => String(i))
      }
    }), e.bind("isEnabled").to(this), e.bind("label").to(this), e.bind("tooltip").to(this), e.delegate("execute").to(this, "open"), e;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ot(n, e = ld) {
  const t = new e(n), i = new Tk(n), s = new li(n, t, i);
  return t.bind("isEnabled").to(s), t instanceof ao ? t.arrowView.bind("isOn").to(s, "isOpen") : t.bind("isOn").to(s, "isOpen"), Bk(s), s;
}
function Kn(n, e, t = {}) {
  n.extendTemplate({
    attributes: {
      class: ["ck-toolbar-dropdown"]
    }
  }), n.isOpen ? hl(n, e, t) : n.once("change:isOpen", () => hl(n, e, t), { priority: "highest" }), t.enableActiveItemFocusOnDropdownOpen && Jn(n, () => n.toolbarView.items.find((i) => i.isOn));
}
function hl(n, e, t) {
  const i = n.locale, s = i.t, r = n.toolbarView = new oo(i), o = typeof e == "function" ? e() : e;
  r.ariaLabel = t.ariaLabel || s("Dropdown toolbar"), t.maxWidth && (r.maxWidth = t.maxWidth), t.class && (r.class = t.class), t.isCompact && (r.isCompact = t.isCompact), t.isVertical && (r.isVertical = !0), o instanceof qe ? r.items.bindTo(o).using((a) => a) : r.items.addMany(o), n.panelView.children.add(r), r.items.delegate("execute").to(n);
}
function fd(n, e, t = {}) {
  n.isOpen ? dl(n, e, t) : n.once("change:isOpen", () => dl(n, e, t), { priority: "highest" }), Jn(n, () => n.listView.items.find((i) => i instanceof dd ? i.children.first.isOn : !1));
}
function dl(n, e, t) {
  const i = n.locale, s = n.listView = new Ok(i), r = typeof e == "function" ? e() : e;
  s.ariaLabel = t.ariaLabel, s.role = t.role, s.items.bindTo(r).using((o) => {
    if (o.type === "separator")
      return new Mk(i);
    if (o.type === "button" || o.type === "switchbutton") {
      const a = new dd(i);
      let l;
      return o.type === "button" ? l = new D(i) : l = new Gn(i), l.bind(...Object.keys(o.model)).to(o.model), l.delegate("execute").to(a), a.children.add(l), a;
    }
    return null;
  }), n.panelView.children.add(s), s.items.delegate("execute").to(n);
}
function Jn(n, e) {
  n.on("change:isOpen", () => {
    if (!n.isOpen)
      return;
    const t = e();
    t && (typeof t.focus == "function" ? t.focus() : G("ui-dropdown-focus-child-on-open-child-missing-focus", { view: t }));
  }, { priority: ve.low - 10 });
}
function Bk(n) {
  Dk(n), Fk(n), Nk(n), Lk(n), zk(n), $k(n);
}
function Dk(n) {
  n.on("render", () => {
    eo({
      emitter: n,
      activator: () => n.isOpen,
      callback: () => {
        n.isOpen = !1;
      },
      contextElements: [n.element]
    });
  });
}
function Fk(n) {
  n.on("execute", (e) => {
    e.source instanceof Gn || (n.isOpen = !1);
  });
}
function Nk(n) {
  n.focusTracker.on("change:isFocused", (e, t, i) => {
    n.isOpen && !i && (n.isOpen = !1);
  });
}
function Lk(n) {
  n.keystrokes.set("arrowdown", (e, t) => {
    n.isOpen && (n.panelView.focus(), t());
  }), n.keystrokes.set("arrowup", (e, t) => {
    n.isOpen && (n.panelView.focusLast(), t());
  });
}
function zk(n) {
  n.on("change:isOpen", (e, t, i) => {
    if (i)
      return;
    const s = n.panelView.element;
    s && s.contains(I.document.activeElement) && n.buttonView.focus();
  });
}
function $k(n) {
  n.on("change:isOpen", (e, t, i) => {
    i && n.panelView.focus();
  }, { priority: "low" });
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Yn(n, e, t) {
  const i = new Ak(n.locale);
  return i.set({
    id: e,
    ariaDescribedById: t
  }), i.bind("isReadOnly").to(n, "isEnabled", (s) => !s), i.bind("hasError").to(n, "errorText", (s) => !!s), i.on("input", () => {
    n.errorText = null;
  }), n.bind("isEmpty", "isFocused", "placeholder").to(i), i;
}
function Hk(n, e, t) {
  const i = new Ek(n.locale);
  return i.set({
    id: e,
    ariaDescribedById: t,
    inputMode: "numeric"
  }), i.bind("isReadOnly").to(n, "isEnabled", (s) => !s), i.bind("hasError").to(n, "errorText", (s) => !!s), i.on("input", () => {
    n.errorText = null;
  }), n.bind("isEmpty", "isFocused", "placeholder").to(i), i;
}
const $i = (n, e = 0, t = 1) => n > t ? t : n < e ? e : n, oe = (n, e = 0, t = Math.pow(10, e)) => Math.round(t * n) / t, Wk = (n) => Kk(fr(n)), fr = (n) => (n[0] === "#" && (n = n.substring(1)), n.length < 6 ? {
  r: parseInt(n[0] + n[0], 16),
  g: parseInt(n[1] + n[1], 16),
  b: parseInt(n[2] + n[2], 16),
  a: n.length === 4 ? oe(parseInt(n[3] + n[3], 16) / 255, 2) : 1
} : {
  r: parseInt(n.substring(0, 2), 16),
  g: parseInt(n.substring(2, 4), 16),
  b: parseInt(n.substring(4, 6), 16),
  a: n.length === 8 ? oe(parseInt(n.substring(6, 8), 16) / 255, 2) : 1
}), Uk = (n) => Gk(qk(n)), jk = ({ h: n, s: e, v: t, a: i }) => {
  const s = (200 - e) * t / 100;
  return {
    h: oe(n),
    s: oe(s > 0 && s < 200 ? e * t / 100 / (s <= 100 ? s : 200 - s) * 100 : 0),
    l: oe(s / 2),
    a: oe(i, 2)
  };
}, mr = (n) => {
  const { h: e, s: t, l: i } = jk(n);
  return `hsl(${e}, ${t}%, ${i}%)`;
}, qk = ({ h: n, s: e, v: t, a: i }) => {
  n = n / 360 * 6, e = e / 100, t = t / 100;
  const s = Math.floor(n), r = t * (1 - e), o = t * (1 - (n - s) * e), a = t * (1 - (1 - n + s) * e), l = s % 6;
  return {
    r: oe([t, o, r, r, a, t][l] * 255),
    g: oe([a, t, t, o, r, r][l] * 255),
    b: oe([r, r, a, t, t, o][l] * 255),
    a: oe(i, 2)
  };
}, nn = (n) => {
  const e = n.toString(16);
  return e.length < 2 ? "0" + e : e;
}, Gk = ({ r: n, g: e, b: t, a: i }) => {
  const s = i < 1 ? nn(oe(i * 255)) : "";
  return "#" + nn(n) + nn(e) + nn(t) + s;
}, Kk = ({ r: n, g: e, b: t, a: i }) => {
  const s = Math.max(n, e, t), r = s - Math.min(n, e, t), o = r ? s === n ? (e - t) / r : s === e ? 2 + (t - n) / r : 4 + (n - e) / r : 0;
  return {
    h: oe(60 * (o < 0 ? o + 6 : o)),
    s: oe(s ? r / s * 100 : 0),
    v: oe(s / 255 * 100),
    a: i
  };
}, md = (n, e) => {
  if (n === e)
    return !0;
  for (const t in n)
    if (n[t] !== e[t])
      return !1;
  return !0;
}, Jk = (n, e) => n.toLowerCase() === e.toLowerCase() ? !0 : md(fr(n), fr(e)), fl = {}, gd = (n) => {
  let e = fl[n];
  return e || (e = document.createElement("template"), e.innerHTML = n, fl[n] = e), e;
}, lo = (n, e, t) => {
  n.dispatchEvent(new CustomEvent(e, {
    bubbles: !0,
    detail: t
  }));
};
let ti = !1;
const gr = (n) => "touches" in n, Yk = (n) => ti && !gr(n) ? !1 : (ti || (ti = gr(n)), !0), ml = (n, e) => {
  const t = gr(e) ? e.touches[0] : e, i = n.el.getBoundingClientRect();
  lo(n.el, "move", n.getMove({
    x: $i((t.pageX - (i.left + window.pageXOffset)) / i.width),
    y: $i((t.pageY - (i.top + window.pageYOffset)) / i.height)
  }));
}, Zk = (n, e) => {
  const t = e.keyCode;
  t > 40 || n.xy && t < 37 || t < 33 || (e.preventDefault(), lo(n.el, "move", n.getMove({
    x: t === 39 ? 0.01 : t === 37 ? -0.01 : t === 34 ? 0.05 : t === 33 ? -0.05 : t === 35 ? 1 : t === 36 ? -1 : 0,
    y: t === 40 ? 0.01 : t === 38 ? -0.01 : 0
  }, !0)));
};
class pd {
  constructor(e, t, i, s) {
    const r = gd(`<div role="slider" tabindex="0" part="${t}" ${i}><div part="${t}-pointer"></div></div>`);
    e.appendChild(r.content.cloneNode(!0));
    const o = e.querySelector(`[part=${t}]`);
    o.addEventListener("mousedown", this), o.addEventListener("touchstart", this), o.addEventListener("keydown", this), this.el = o, this.xy = s, this.nodes = [o.firstChild, o];
  }
  set dragging(e) {
    const t = e ? document.addEventListener : document.removeEventListener;
    t(ti ? "touchmove" : "mousemove", this), t(ti ? "touchend" : "mouseup", this);
  }
  handleEvent(e) {
    switch (e.type) {
      case "mousedown":
      case "touchstart":
        if (e.preventDefault(), !Yk(e) || !ti && e.button != 0)
          return;
        this.el.focus(), ml(this, e), this.dragging = !0;
        break;
      case "mousemove":
      case "touchmove":
        e.preventDefault(), ml(this, e);
        break;
      case "mouseup":
      case "touchend":
        this.dragging = !1;
        break;
      case "keydown":
        Zk(this, e);
        break;
    }
  }
  style(e) {
    e.forEach((t, i) => {
      for (const s in t)
        this.nodes[i].style.setProperty(s, t[s]);
    });
  }
}
class Xk extends pd {
  constructor(e) {
    super(e, "hue", 'aria-label="Hue" aria-valuemin="0" aria-valuemax="360"', !1);
  }
  update({ h: e }) {
    this.h = e, this.style([
      {
        left: `${e / 360 * 100}%`,
        color: mr({ h: e, s: 100, v: 100, a: 1 })
      }
    ]), this.el.setAttribute("aria-valuenow", `${oe(e)}`);
  }
  getMove(e, t) {
    return { h: t ? $i(this.h + e.x * 360, 0, 360) : 360 * e.x };
  }
}
class Qk extends pd {
  constructor(e) {
    super(e, "saturation", 'aria-label="Color"', !0);
  }
  update(e) {
    this.hsva = e, this.style([
      {
        top: `${100 - e.v}%`,
        left: `${e.s}%`,
        color: mr(e)
      },
      {
        "background-color": mr({ h: e.h, s: 100, v: 100, a: 1 })
      }
    ]), this.el.setAttribute("aria-valuetext", `Saturation ${oe(e.s)}%, Brightness ${oe(e.v)}%`);
  }
  getMove(e, t) {
    return {
      s: t ? $i(this.hsva.s + e.x * 100, 0, 100) : e.x * 100,
      v: t ? $i(this.hsva.v - e.y * 100, 0, 100) : Math.round(100 - e.y * 100)
    };
  }
}
const eC = ':host{display:flex;flex-direction:column;position:relative;width:200px;height:200px;user-select:none;-webkit-user-select:none;cursor:default}:host([hidden]){display:none!important}[role=slider]{position:relative;touch-action:none;user-select:none;-webkit-user-select:none;outline:0}[role=slider]:last-child{border-radius:0 0 8px 8px}[part$=pointer]{position:absolute;z-index:1;box-sizing:border-box;width:28px;height:28px;display:flex;place-content:center center;transform:translate(-50%,-50%);background-color:#fff;border:2px solid #fff;border-radius:50%;box-shadow:0 2px 4px rgba(0,0,0,.2)}[part$=pointer]::after{content:"";width:100%;height:100%;border-radius:inherit;background-color:currentColor}[role=slider]:focus [part$=pointer]{transform:translate(-50%,-50%) scale(1.1)}', tC = "[part=hue]{flex:0 0 24px;background:linear-gradient(to right,red 0,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red 100%)}[part=hue-pointer]{top:50%;z-index:2}", iC = "[part=saturation]{flex-grow:1;border-color:transparent;border-bottom:12px solid #000;border-radius:8px 8px 0 0;background-image:linear-gradient(to top,#000,transparent),linear-gradient(to right,#fff,rgba(255,255,255,0));box-shadow:inset 0 0 0 1px rgba(0,0,0,.05)}[part=saturation-pointer]{z-index:3}", sn = Symbol("same"), bs = Symbol("color"), gl = Symbol("hsva"), _s = Symbol("update"), pl = Symbol("parts"), wl = Symbol("css"), bl = Symbol("sliders");
class nC extends HTMLElement {
  static get observedAttributes() {
    return ["color"];
  }
  get [wl]() {
    return [eC, tC, iC];
  }
  get [bl]() {
    return [Qk, Xk];
  }
  get color() {
    return this[bs];
  }
  set color(e) {
    if (!this[sn](e)) {
      const t = this.colorModel.toHsva(e);
      this[_s](t), this[bs] = e;
    }
  }
  constructor() {
    super();
    const e = gd(`<style>${this[wl].join("")}</style>`), t = this.attachShadow({ mode: "open" });
    t.appendChild(e.content.cloneNode(!0)), t.addEventListener("move", this), this[pl] = this[bl].map((i) => new i(t));
  }
  connectedCallback() {
    if (this.hasOwnProperty("color")) {
      const e = this.color;
      delete this.color, this.color = e;
    } else
      this.color || (this.color = this.colorModel.defaultColor);
  }
  attributeChangedCallback(e, t, i) {
    const s = this.colorModel.fromAttr(i);
    this[sn](s) || (this.color = s);
  }
  handleEvent(e) {
    const t = this[gl], i = { ...t, ...e.detail };
    this[_s](i);
    let s;
    !md(i, t) && !this[sn](s = this.colorModel.fromHsva(i)) && (this[bs] = s, lo(this, "color-changed", { value: s }));
  }
  [sn](e) {
    return this.color && this.colorModel.equal(e, this.color);
  }
  [_s](e) {
    this[gl] = e, this[pl].forEach((t) => t.update(e));
  }
}
const sC = {
  defaultColor: "#000",
  toHsva: Wk,
  fromHsva: ({ h: n, s: e, v: t }) => Uk({ h: n, s: e, v: t, a: 1 }),
  equal: Jk,
  fromAttr: (n) => n
};
class rC extends nC {
  get colorModel() {
    return sC;
  }
}
class oC extends rC {
}
customElements.define("hex-color-picker", oC);
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const aC = 150;
class lC extends E {
  /**
   * Creates a view of color picker.
   *
   * @param locale
   * @param config
   */
  constructor(e, t) {
    super(e), this.set("color", ""), this.set("_hexColor", ""), this._format = t.format || "hsl", this.hexInputRow = this._createInputRow();
    const i = this.createCollection();
    i.add(this.hexInputRow), this.setTemplate({
      tag: "div",
      attributes: {
        class: ["ck", "ck-color-picker"],
        tabindex: -1
      },
      children: i
    }), this._debounceColorPickerEvent = ni((s) => {
      this.set("color", s);
    }, aC, {
      leading: !0
    }), this.on("set:color", (s, r, o) => {
      s.return = sd(o, this._format);
    }), this.on("change:color", () => {
      this._hexColor = vs(this.color);
    }), this.on("change:_hexColor", () => {
      document.activeElement !== this.picker && this.picker.setAttribute("color", this._hexColor), vs(this.color) != vs(this._hexColor) && (this.color = this._hexColor);
    });
  }
  /**
   * Renders color picker in the view.
   */
  render() {
    if (super.render(), this.picker = I.document.createElement("hex-color-picker"), this.picker.setAttribute("class", "hex-color-picker"), this.picker.setAttribute("tabindex", "-1"), this._createSlidersView(), this.element) {
      this.element.insertBefore(this.picker, this.hexInputRow.element);
      const e = document.createElement("style");
      e.textContent = '[role="slider"]:focus [part$="pointer"] {border: 1px solid #fff;outline: 1px solid var(--ck-color-focus-border);box-shadow: 0 0 0 2px #fff;}', this.picker.shadowRoot.appendChild(e);
    }
    this.picker.addEventListener("color-changed", (e) => {
      const i = e.detail.value;
      this._debounceColorPickerEvent(i);
    });
  }
  /**
   * Focuses the first pointer in color picker.
   *
   */
  focus() {
    /* istanbul ignore next -- @preserve */
    (S.isGecko || S.isiOS || S.isSafari) && this.hexInputRow.children.get(1).focus(), this.slidersView.first.focus();
  }
  /**
   * Creates collection of sliders in color picker.
   *
   * @private
   */
  _createSlidersView() {
    const i = [...this.picker.shadowRoot.children].filter((s) => s.getAttribute("role") === "slider").map((s) => new cC(s));
    this.slidersView = this.createCollection(), i.forEach((s) => {
      this.slidersView.add(s);
    });
  }
  /**
   * Creates input row for defining custom colors in color picker.
   *
   * @private
   */
  _createInputRow() {
    const e = new uC(), t = this._createColorInput();
    return new hC(this.locale, [e, t]);
  }
  /**
   * Creates the input where user can type or paste the color in hex format.
   *
   * @private
   */
  _createColorInput() {
    const e = new qi(this.locale, Yn), { t } = this.locale;
    return e.set({
      label: t("HEX"),
      class: "color-picker-hex-input"
    }), e.fieldView.bind("value").to(this, "_hexColor", (i) => e.isFocused ? e.fieldView.value : i.startsWith("#") ? i.substring(1) : i), e.fieldView.on("input", () => {
      const i = e.fieldView.element.value;
      if (i) {
        const s = i.trim(), r = s.startsWith("#") ? s.substring(1) : s;
        [3, 4, 6, 8].includes(r.length) && /(([0-9a-fA-F]{2}){3,4}|([0-9a-fA-F]){3,4})/.test(r) && this._debounceColorPickerEvent("#" + r);
      }
    }), e;
  }
}
function vs(n) {
  let e = vk(n);
  return e || (e = "#000"), e.length === 4 && (e = "#" + [e[1], e[1], e[2], e[2], e[3], e[3]].join("")), e.toLowerCase();
}
class cC extends E {
  /**
   * @param element HTML elemnt of slider in color picker.
   */
  constructor(e) {
    super(), this.element = e;
  }
  /**
   * Focuses element.
   */
  focus() {
    this.element.focus();
  }
}
class uC extends E {
  constructor(e) {
    super(e), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-color-picker__hash-view"
        ]
      },
      children: "#"
    });
  }
}
class hC extends E {
  /**
   * Creates an instance of the form row class.
   *
   * @param locale The locale instance.
   */
  constructor(e, t) {
    super(e), this.children = this.createCollection(t), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-color-picker__row"
        ]
      },
      children: this.children
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class dC {
  /**
   * Creates an instance of the factory.
   *
   * @param editor The editor instance.
   */
  constructor(e) {
    this._components = /* @__PURE__ */ new Map(), this.editor = e;
  }
  /**
   * Returns an iterator of registered component names. Names are returned in lower case.
   */
  *names() {
    for (const e of this._components.values())
      yield e.originalName;
  }
  /**
   * Registers a component factory function that will be used by the
   * {@link #create create} method and called with the
   * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,
   * allowing localization of the {@link module:ui/view~View view}.
   *
   * @param name The name of the component.
   * @param callback The callback that returns the component.
   */
  add(e, t) {
    this._components.set(ys(e), { callback: t, originalName: e });
  }
  /**
   * Creates an instance of a component registered in the factory under a specific name.
   *
   * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to
   * the previously {@link #add added} factory function, allowing localization of the
   * {@link module:ui/view~View view}.
   *
   * @param name The name of the component.
   * @returns The instantiated component view.
   */
  create(e) {
    if (!this.has(e))
      throw new f("componentfactory-item-missing", this, { name: e });
    return this._components.get(ys(e)).callback(this.editor.locale);
  }
  /**
   * Checks if a component of a given name is registered in the factory.
   *
   * @param name The name of the component.
   */
  has(e) {
    return this._components.has(ys(e));
  }
}
function ys(n) {
  return String(n).toLowerCase();
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const _l = zr("px"), vl = I.document.body;
class ae extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = this.bindTemplate;
    this.set("top", 0), this.set("left", 0), this.set("position", "arrow_nw"), this.set("isVisible", !1), this.set("withArrow", !0), this.set("class", void 0), this._pinWhenIsVisibleCallback = null, this.content = this.createCollection(), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-balloon-panel",
          t.to("position", (i) => `ck-balloon-panel_${i}`),
          t.if("isVisible", "ck-balloon-panel_visible"),
          t.if("withArrow", "ck-balloon-panel_with-arrow"),
          t.to("class")
        ],
        style: {
          top: t.to("top", _l),
          left: t.to("left", _l)
        }
      },
      children: this.content
    });
  }
  /**
   * Shows the panel.
   *
   * See {@link #isVisible}.
   */
  show() {
    this.isVisible = !0;
  }
  /**
   * Hides the panel.
   *
   * See {@link #isVisible}.
   */
  hide() {
    this.isVisible = !1;
  }
  /**
   * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a
   * smart positioning heuristics that chooses from available positions to make sure the panel
   * is visible to the user i.e. within the limits of the viewport.
   *
   * This method accepts configuration {@link module:utils/dom/position~Options options}
   * to set the `target`, optional `limiter` and `positions` the balloon should choose from.
   *
   * ```ts
   * const panel = new BalloonPanelView( locale );
   * const positions = BalloonPanelView.defaultPositions;
   *
   * panel.render();
   *
   * // Attach the panel to an element with the "target" id DOM.
   * panel.attachTo( {
   * 	target: document.querySelector( '#target' ),
   * 	positions: [
   * 		positions.northArrowSouth,
   * 		positions.southArrowNorth
   * 	]
   * } );
   * ```
   *
   * **Note**: Attaching the panel will also automatically {@link #show} it.
   *
   * **Note**: An attached panel will not follow its target when the window is scrolled or resized.
   * See the {@link #pin} method for a more permanent positioning strategy.
   *
   * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.
   * Default `positions` array is {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.
   */
  attachTo(e) {
    this.show();
    const t = ae.defaultPositions, i = Object.assign({}, {
      element: this.element,
      positions: [
        t.southArrowNorth,
        t.southArrowNorthMiddleWest,
        t.southArrowNorthMiddleEast,
        t.southArrowNorthWest,
        t.southArrowNorthEast,
        t.northArrowSouth,
        t.northArrowSouthMiddleWest,
        t.northArrowSouthMiddleEast,
        t.northArrowSouthWest,
        t.northArrowSouthEast,
        t.viewportStickyNorth
      ],
      limiter: vl,
      fitInViewport: !0
    }, e), s = ae._getOptimalPosition(i), r = parseInt(s.left), o = parseInt(s.top), a = s.name, l = s.config || {}, { withArrow: c = !0 } = l;
    this.top = o, this.left = r, this.position = a, this.withArrow = c;
  }
  /**
   * Works the same way as the {@link #attachTo} method except that the position of the panel is
   * continuously updated when:
   *
   * * any ancestor of the {@link module:utils/dom/position~Options#target}
   * or {@link module:utils/dom/position~Options#limiter} is scrolled,
   * * the browser window gets resized or scrolled.
   *
   * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target}
   * and is immune to the changing environment.
   *
   * ```ts
   * const panel = new BalloonPanelView( locale );
   * const positions = BalloonPanelView.defaultPositions;
   *
   * panel.render();
   *
   * // Pin the panel to an element with the "target" id DOM.
   * panel.pin( {
   * 	target: document.querySelector( '#target' ),
   * 	positions: [
   * 		positions.northArrowSouth,
   * 		positions.southArrowNorth
   * 	]
   * } );
   * ```
   *
   * To leave the pinned state, use the {@link #unpin} method.
   *
   * **Note**: Pinning the panel will also automatically {@link #show} it.
   *
   * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.
   * Default `positions` array is {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.
   */
  pin(e) {
    this.unpin(), this._pinWhenIsVisibleCallback = () => {
      this.isVisible ? this._startPinning(e) : this._stopPinning();
    }, this._startPinning(e), this.listenTo(this, "change:isVisible", this._pinWhenIsVisibleCallback);
  }
  /**
   * Stops pinning the panel, as set up by {@link #pin}.
   */
  unpin() {
    this._pinWhenIsVisibleCallback && (this._stopPinning(), this.stopListening(this, "change:isVisible", this._pinWhenIsVisibleCallback), this._pinWhenIsVisibleCallback = null, this.hide());
  }
  /**
   * Starts managing the pinned state of the panel. See {@link #pin}.
   *
   * @param options Positioning options compatible with {@link module:utils/dom/position~getOptimalPosition}.
   */
  _startPinning(e) {
    this.attachTo(e);
    const t = pr(e.target), i = e.limiter ? pr(e.limiter) : vl;
    this.listenTo(I.document, "scroll", (s, r) => {
      const o = r.target, a = t && o.contains(t), l = i && o.contains(i);
      (a || l || !t || !i) && this.attachTo(e);
    }, { useCapture: !0 }), this.listenTo(I.window, "resize", () => {
      this.attachTo(e);
    });
  }
  /**
   * Stops managing the pinned state of the panel. See {@link #pin}.
   */
  _stopPinning() {
    this.stopListening(I.document, "scroll"), this.stopListening(I.window, "resize");
  }
}
ae.arrowSideOffset = 25;
ae.arrowHeightOffset = 10;
ae.stickyVerticalOffset = 20;
ae._getOptimalPosition = zu;
ae.defaultPositions = wd();
function pr(n) {
  return gi(n) ? n : Hn(n) ? n.commonAncestorContainer : typeof n == "function" ? pr(n()) : null;
}
function wd(n = {}) {
  const { sideOffset: e = ae.arrowSideOffset, heightOffset: t = ae.arrowHeightOffset, stickyVerticalOffset: i = ae.stickyVerticalOffset, config: s } = n;
  return {
    // ------- North west
    northWestArrowSouthWest: (a, l) => ({
      top: r(a, l),
      left: a.left - e,
      name: "arrow_sw",
      ...s && { config: s }
    }),
    northWestArrowSouthMiddleWest: (a, l) => ({
      top: r(a, l),
      left: a.left - l.width * 0.25 - e,
      name: "arrow_smw",
      ...s && { config: s }
    }),
    northWestArrowSouth: (a, l) => ({
      top: r(a, l),
      left: a.left - l.width / 2,
      name: "arrow_s",
      ...s && { config: s }
    }),
    northWestArrowSouthMiddleEast: (a, l) => ({
      top: r(a, l),
      left: a.left - l.width * 0.75 + e,
      name: "arrow_sme",
      ...s && { config: s }
    }),
    northWestArrowSouthEast: (a, l) => ({
      top: r(a, l),
      left: a.left - l.width + e,
      name: "arrow_se",
      ...s && { config: s }
    }),
    // ------- North
    northArrowSouthWest: (a, l) => ({
      top: r(a, l),
      left: a.left + a.width / 2 - e,
      name: "arrow_sw",
      ...s && { config: s }
    }),
    northArrowSouthMiddleWest: (a, l) => ({
      top: r(a, l),
      left: a.left + a.width / 2 - l.width * 0.25 - e,
      name: "arrow_smw",
      ...s && { config: s }
    }),
    northArrowSouth: (a, l) => ({
      top: r(a, l),
      left: a.left + a.width / 2 - l.width / 2,
      name: "arrow_s",
      ...s && { config: s }
    }),
    northArrowSouthMiddleEast: (a, l) => ({
      top: r(a, l),
      left: a.left + a.width / 2 - l.width * 0.75 + e,
      name: "arrow_sme",
      ...s && { config: s }
    }),
    northArrowSouthEast: (a, l) => ({
      top: r(a, l),
      left: a.left + a.width / 2 - l.width + e,
      name: "arrow_se",
      ...s && { config: s }
    }),
    // ------- North east
    northEastArrowSouthWest: (a, l) => ({
      top: r(a, l),
      left: a.right - e,
      name: "arrow_sw",
      ...s && { config: s }
    }),
    northEastArrowSouthMiddleWest: (a, l) => ({
      top: r(a, l),
      left: a.right - l.width * 0.25 - e,
      name: "arrow_smw",
      ...s && { config: s }
    }),
    northEastArrowSouth: (a, l) => ({
      top: r(a, l),
      left: a.right - l.width / 2,
      name: "arrow_s",
      ...s && { config: s }
    }),
    northEastArrowSouthMiddleEast: (a, l) => ({
      top: r(a, l),
      left: a.right - l.width * 0.75 + e,
      name: "arrow_sme",
      ...s && { config: s }
    }),
    northEastArrowSouthEast: (a, l) => ({
      top: r(a, l),
      left: a.right - l.width + e,
      name: "arrow_se",
      ...s && { config: s }
    }),
    // ------- South west
    southWestArrowNorthWest: (a) => ({
      top: o(a),
      left: a.left - e,
      name: "arrow_nw",
      ...s && { config: s }
    }),
    southWestArrowNorthMiddleWest: (a, l) => ({
      top: o(a),
      left: a.left - l.width * 0.25 - e,
      name: "arrow_nmw",
      ...s && { config: s }
    }),
    southWestArrowNorth: (a, l) => ({
      top: o(a),
      left: a.left - l.width / 2,
      name: "arrow_n",
      ...s && { config: s }
    }),
    southWestArrowNorthMiddleEast: (a, l) => ({
      top: o(a),
      left: a.left - l.width * 0.75 + e,
      name: "arrow_nme",
      ...s && { config: s }
    }),
    southWestArrowNorthEast: (a, l) => ({
      top: o(a),
      left: a.left - l.width + e,
      name: "arrow_ne",
      ...s && { config: s }
    }),
    // ------- South
    southArrowNorthWest: (a) => ({
      top: o(a),
      left: a.left + a.width / 2 - e,
      name: "arrow_nw",
      ...s && { config: s }
    }),
    southArrowNorthMiddleWest: (a, l) => ({
      top: o(a),
      left: a.left + a.width / 2 - l.width * 0.25 - e,
      name: "arrow_nmw",
      ...s && { config: s }
    }),
    southArrowNorth: (a, l) => ({
      top: o(a),
      left: a.left + a.width / 2 - l.width / 2,
      name: "arrow_n",
      ...s && { config: s }
    }),
    southArrowNorthMiddleEast: (a, l) => ({
      top: o(a),
      left: a.left + a.width / 2 - l.width * 0.75 + e,
      name: "arrow_nme",
      ...s && { config: s }
    }),
    southArrowNorthEast: (a, l) => ({
      top: o(a),
      left: a.left + a.width / 2 - l.width + e,
      name: "arrow_ne",
      ...s && { config: s }
    }),
    // ------- South east
    southEastArrowNorthWest: (a) => ({
      top: o(a),
      left: a.right - e,
      name: "arrow_nw",
      ...s && { config: s }
    }),
    southEastArrowNorthMiddleWest: (a, l) => ({
      top: o(a),
      left: a.right - l.width * 0.25 - e,
      name: "arrow_nmw",
      ...s && { config: s }
    }),
    southEastArrowNorth: (a, l) => ({
      top: o(a),
      left: a.right - l.width / 2,
      name: "arrow_n",
      ...s && { config: s }
    }),
    southEastArrowNorthMiddleEast: (a, l) => ({
      top: o(a),
      left: a.right - l.width * 0.75 + e,
      name: "arrow_nme",
      ...s && { config: s }
    }),
    southEastArrowNorthEast: (a, l) => ({
      top: o(a),
      left: a.right - l.width + e,
      name: "arrow_ne",
      ...s && { config: s }
    }),
    // ------- West
    westArrowEast: (a, l) => ({
      top: a.top + a.height / 2 - l.height / 2,
      left: a.left - l.width - t,
      name: "arrow_e",
      ...s && { config: s }
    }),
    // ------- East
    eastArrowWest: (a, l) => ({
      top: a.top + a.height / 2 - l.height / 2,
      left: a.right + t,
      name: "arrow_w",
      ...s && { config: s }
    }),
    // ------- Sticky
    viewportStickyNorth: (a, l, c) => a.getIntersection(c) ? {
      top: c.top + i,
      left: a.left + a.width / 2 - l.width / 2,
      name: "arrowless",
      config: {
        withArrow: !1,
        ...s
      }
    } : null
  };
  function r(a, l) {
    return a.top - l.height - t;
  }
  function o(a) {
    return a.bottom + t;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const yl = "ck-tooltip";
class ne extends rt() {
  /**
   * Creates an instance of the tooltip manager.
   */
  constructor(e) {
    if (super(), this._currentElementWithTooltip = null, this._currentTooltipPosition = null, this._resizeObserver = null, ne._editors.add(e), ne._instance)
      return ne._instance;
    ne._instance = this, this.tooltipTextView = new E(e.locale), this.tooltipTextView.set("text", ""), this.tooltipTextView.setTemplate({
      tag: "span",
      attributes: {
        class: [
          "ck",
          "ck-tooltip__text"
        ]
      },
      children: [
        {
          text: this.tooltipTextView.bindTemplate.to("text")
        }
      ]
    }), this.balloonPanelView = new ae(e.locale), this.balloonPanelView.class = yl, this.balloonPanelView.content.add(this.tooltipTextView), this._pinTooltipDebounced = ni(this._pinTooltip, 600), this.listenTo(I.document, "mouseenter", this._onEnterOrFocus.bind(this), { useCapture: !0 }), this.listenTo(I.document, "mouseleave", this._onLeaveOrBlur.bind(this), { useCapture: !0 }), this.listenTo(I.document, "focus", this._onEnterOrFocus.bind(this), { useCapture: !0 }), this.listenTo(I.document, "blur", this._onLeaveOrBlur.bind(this), { useCapture: !0 }), this.listenTo(I.document, "scroll", this._onScroll.bind(this), { useCapture: !0 }), this._watchdogExcluded = !0;
  }
  /**
   * Destroys the tooltip manager.
   *
   * **Note**: The manager singleton cannot be destroyed until all editors that use it are destroyed.
   *
   * @param editor The editor the manager was created for.
   */
  destroy(e) {
    const t = e.ui.view && e.ui.view.body;
    ne._editors.delete(e), this.stopListening(e.ui), t && t.has(this.balloonPanelView) && t.remove(this.balloonPanelView), ne._editors.size || (this._unpinTooltip(), this.balloonPanelView.destroy(), this.stopListening(), ne._instance = null);
  }
  /**
   * Returns {@link #balloonPanelView} {@link module:utils/dom/position~PositioningFunction positioning functions} for a given position
   * name.
   *
   * @param position Name of the position (`s`, `se`, `sw`, `n`, `e`, or `w`).
   * @returns Positioning functions to be used by the {@link #balloonPanelView}.
   */
  static getPositioningFunctions(e) {
    const t = ne.defaultBalloonPositions;
    return {
      // South is most popular. We can use positioning heuristics to avoid clipping by the viewport with the sane fallback.
      s: [
        t.southArrowNorth,
        t.southArrowNorthEast,
        t.southArrowNorthWest
      ],
      n: [t.northArrowSouth],
      e: [t.eastArrowWest],
      w: [t.westArrowEast],
      sw: [t.southArrowNorthEast],
      se: [t.southArrowNorthWest]
    }[e];
  }
  /**
   * Handles displaying tooltips on `mouseenter` and `focus` in DOM.
   *
   * @param evt An object containing information about the fired event.
   * @param domEvent The DOM event.
   */
  _onEnterOrFocus(e, { target: t }) {
    const i = ks(t);
    i && i !== this._currentElementWithTooltip && (this._unpinTooltip(), this._pinTooltipDebounced(i, fC(i)));
  }
  /**
   * Handles hiding tooltips on `mouseleave` and `blur` in DOM.
   *
   * @param evt An object containing information about the fired event.
   * @param domEvent The DOM event.
   */
  _onLeaveOrBlur(e, { target: t, relatedTarget: i }) {
    if (e.name === "mouseleave") {
      if (!gi(t) || this._currentElementWithTooltip && t !== this._currentElementWithTooltip)
        return;
      const s = ks(t), r = ks(i);
      s && s !== r && this._unpinTooltip();
    } else {
      if (this._currentElementWithTooltip && t !== this._currentElementWithTooltip)
        return;
      this._unpinTooltip();
    }
  }
  /**
   * Handles hiding tooltips on `scroll` in DOM.
   *
   * @param evt An object containing information about the fired event.
   * @param domEvent The DOM event.
   */
  _onScroll(e, { target: t }) {
    this._currentElementWithTooltip && (t.contains(this.balloonPanelView.element) && t.contains(this._currentElementWithTooltip) || this._unpinTooltip());
  }
  /**
   * Pins the tooltip to a specific DOM element.
   *
   * @param options.text Text of the tooltip to display.
   * @param options.position The position of the tooltip.
   * @param options.cssClass Additional CSS class of the balloon with the tooltip.
   */
  _pinTooltip(e, { text: t, position: i, cssClass: s }) {
    const r = de(ne._editors.values()).ui.view.body;
    r.has(this.balloonPanelView) || r.add(this.balloonPanelView), this.tooltipTextView.text = t, this.balloonPanelView.pin({
      target: e,
      positions: ne.getPositioningFunctions(i)
    }), this._resizeObserver = new $(e, () => {
      Rt(e) || this._unpinTooltip();
    }), this.balloonPanelView.class = [yl, s].filter((o) => o).join(" ");
    for (const o of ne._editors)
      this.listenTo(o.ui, "update", this._updateTooltipPosition.bind(this), { priority: "low" });
    this._currentElementWithTooltip = e, this._currentTooltipPosition = i;
  }
  /**
   * Unpins the tooltip and cancels all queued pinning.
   */
  _unpinTooltip() {
    this._pinTooltipDebounced.cancel(), this.balloonPanelView.unpin();
    for (const e of ne._editors)
      this.stopListening(e.ui, "update");
    this._currentElementWithTooltip = null, this._currentTooltipPosition = null, this._resizeObserver && this._resizeObserver.destroy();
  }
  /**
   * Updates the position of the tooltip so it stays in sync with the element it is pinned to.
   *
   * Hides the tooltip when the element is no longer visible in DOM.
   */
  _updateTooltipPosition() {
    if (!Rt(this._currentElementWithTooltip)) {
      this._unpinTooltip();
      return;
    }
    this.balloonPanelView.pin({
      target: this._currentElementWithTooltip,
      positions: ne.getPositioningFunctions(this._currentTooltipPosition)
    });
  }
}
ne.defaultBalloonPositions = wd({
  heightOffset: 5,
  sideOffset: 13
});
ne._editors = /* @__PURE__ */ new Set();
ne._instance = null;
function ks(n) {
  return gi(n) ? n.closest("[data-cke-tooltip-text]:not([data-cke-tooltip-disabled])") : null;
}
function fC(n) {
  return {
    text: n.dataset.ckeTooltipText,
    position: n.dataset.ckeTooltipPosition || "s",
    cssClass: n.dataset.ckeTooltipClass || ""
  };
}
const mC = `<svg xmlns="http://www.w3.org/2000/svg" width="53" height="10" viewBox="0 0 53 10"><path fill="#1C2331" d="M31.724 1.492a15.139 15.139 0 0 0 .045 1.16 2.434 2.434 0 0 0-.687-.34 3.68 3.68 0 0 0-1.103-.166 2.332 2.332 0 0 0-1.14.255 1.549 1.549 0 0 0-.686.87c-.15.41-.225.98-.225 1.712 0 .939.148 1.659.444 2.161.297.503.792.754 1.487.754.452.015.9-.094 1.294-.316.296-.174.557-.4.771-.669l.14.852h1.282V.007h-1.623v1.485ZM31 6.496a1.77 1.77 0 0 1-.494.061.964.964 0 0 1-.521-.127.758.758 0 0 1-.296-.466 3.984 3.984 0 0 1-.093-.992 4.208 4.208 0 0 1 .098-1.052.753.753 0 0 1 .307-.477 1.08 1.08 0 0 1 .55-.122c.233-.004.466.026.69.089l.483.144v2.553c-.11.076-.213.143-.307.2a1.73 1.73 0 0 1-.417.189ZM35.68 0l-.702.004c-.322.002-.482.168-.48.497l.004.581c.002.33.164.493.486.49l.702-.004c.322-.002.481-.167.48-.496L36.165.49c-.002-.33-.164-.493-.486-.491ZM36.145 2.313l-1.612.01.034 5.482 1.613-.01-.035-5.482ZM39.623.79 37.989.8 38 2.306l-.946.056.006 1.009.949-.006.024 2.983c.003.476.143.844.419 1.106.275.26.658.39 1.148.387.132 0 .293-.01.483-.03.19-.02.38-.046.57-.08.163-.028.324-.068.482-.119l-.183-1.095-.702.004a.664.664 0 0 1-.456-.123.553.553 0 0 1-.14-.422l-.016-2.621 1.513-.01-.006-1.064-1.514.01-.01-1.503ZM46.226 2.388c-.41-.184-.956-.274-1.636-.27-.673.004-1.215.101-1.627.29-.402.179-.72.505-.888.91-.18.419-.268.979-.264 1.68.004.688.1 1.24.285 1.655.172.404.495.724.9.894.414.18.957.268 1.63.264.68-.004 1.224-.099 1.632-.284.4-.176.714-.501.878-.905.176-.418.263-.971.258-1.658-.004-.702-.097-1.261-.28-1.677a1.696 1.696 0 0 0-.888-.9Zm-.613 3.607a.77.77 0 0 1-.337.501 1.649 1.649 0 0 1-1.317.009.776.776 0 0 1-.343-.497 4.066 4.066 0 0 1-.105-1.02 4.136 4.136 0 0 1 .092-1.03.786.786 0 0 1 .337-.507 1.59 1.59 0 0 1 1.316-.008.79.79 0 0 1 .344.502c.078.337.113.683.105 1.03.012.343-.019.685-.092 1.02ZM52.114 2.07a2.67 2.67 0 0 0-1.128.278c-.39.191-.752.437-1.072.73l-.157-.846-1.273.008.036 5.572 1.623-.01-.024-3.78c.35-.124.646-.22.887-.286.26-.075.53-.114.8-.118l.45-.003.144-1.546-.286.001ZM22.083 7.426l-1.576-2.532a2.137 2.137 0 0 0-.172-.253 1.95 1.95 0 0 0-.304-.29.138.138 0 0 1 .042-.04 1.7 1.7 0 0 0 .328-.374l1.75-2.71c.01-.015.025-.028.024-.048-.01-.01-.021-.007-.031-.007L20.49 1.17a.078.078 0 0 0-.075.045l-.868 1.384c-.23.366-.46.732-.688 1.099a.108.108 0 0 1-.112.06c-.098-.005-.196-.001-.294-.002-.018 0-.038.006-.055-.007.002-.02.002-.039.005-.058a4.6 4.6 0 0 0 .046-.701V1.203c0-.02-.009-.032-.03-.03h-.033L16.93 1.17c-.084 0-.073-.01-.073.076v6.491c-.001.018.006.028.025.027h1.494c.083 0 .072.007.072-.071v-2.19c0-.055-.003-.11-.004-.166a3.366 3.366 0 0 0-.05-.417h.06c.104 0 .209.002.313-.002a.082.082 0 0 1 .084.05c.535.913 1.07 1.824 1.607 2.736a.104.104 0 0 0 .103.062c.554-.003 1.107-.002 1.66-.002l.069-.003-.019-.032-.188-.304ZM27.112 6.555c-.005-.08-.004-.08-.082-.08h-2.414c-.053 0-.106-.003-.159-.011a.279.279 0 0 1-.246-.209.558.558 0 0 1-.022-.15c0-.382 0-.762-.002-1.143 0-.032.007-.049.042-.044h2.504c.029.003.037-.012.034-.038V3.814c0-.089.013-.078-.076-.078h-2.44c-.07 0-.062.003-.062-.06v-.837c0-.047.004-.093.013-.14a.283.283 0 0 1 .241-.246.717.717 0 0 1 .146-.011h2.484c.024.002.035-.009.036-.033l.003-.038.03-.496c.01-.183.024-.365.034-.548.005-.085.003-.087-.082-.094-.218-.018-.437-.038-.655-.05a17.845 17.845 0 0 0-.657-.026 72.994 72.994 0 0 0-1.756-.016 1.7 1.7 0 0 0-.471.064 1.286 1.286 0 0 0-.817.655c-.099.196-.149.413-.145.633v3.875c0 .072.003.144.011.216a1.27 1.27 0 0 0 .711 1.029c.228.113.48.167.734.158.757-.005 1.515.002 2.272-.042.274-.016.548-.034.82-.053.03-.002.043-.008.04-.041-.008-.104-.012-.208-.019-.312a69.964 69.964 0 0 1-.05-.768ZM16.14 7.415l-.127-1.075c-.004-.03-.014-.04-.044-.037a13.125 13.125 0 0 1-.998.073c-.336.01-.672.02-1.008.016-.116-.001-.233-.014-.347-.039a.746.746 0 0 1-.45-.262c-.075-.1-.132-.211-.167-.33a3.324 3.324 0 0 1-.126-.773 9.113 9.113 0 0 1-.015-.749c0-.285.022-.57.065-.852.023-.158.066-.312.127-.46a.728.728 0 0 1 .518-.443 1.64 1.64 0 0 1 .397-.048c.628-.001 1.255.003 1.882.05.022.001.033-.006.036-.026l.003-.031.06-.55c.019-.177.036-.355.057-.532.004-.034-.005-.046-.04-.056a5.595 5.595 0 0 0-1.213-.21 10.783 10.783 0 0 0-.708-.02c-.24-.003-.48.01-.719.041a3.477 3.477 0 0 0-.625.14 1.912 1.912 0 0 0-.807.497c-.185.2-.33.433-.424.688a4.311 4.311 0 0 0-.24 1.096c-.031.286-.045.572-.042.86-.006.43.024.86.091 1.286.04.25.104.497.193.734.098.279.26.53.473.734.214.205.473.358.756.446.344.11.702.17 1.063.177a8.505 8.505 0 0 0 1.578-.083 6.11 6.11 0 0 0 .766-.18c.03-.008.047-.023.037-.057a.157.157 0 0 1-.003-.025Z"/><path fill="#AFE229" d="M6.016 6.69a1.592 1.592 0 0 0-.614.21c-.23.132-.422.32-.56.546-.044.072-.287.539-.287.539l-.836 1.528.009.006c.038.025.08.046.123.063.127.046.26.07.395.073.505.023 1.011-.007 1.517-.003.29.009.58.002.869-.022a.886.886 0 0 0 .395-.116.962.962 0 0 0 .312-.286c.056-.083.114-.163.164-.249.24-.408.48-.816.718-1.226.075-.128.148-.257.222-.386l.112-.192a1.07 1.07 0 0 0 .153-.518l-1.304.023s-1.258-.005-1.388.01Z"/><path fill="#771BFF" d="m2.848 9.044.76-1.39.184-.352c-.124-.067-.245-.14-.367-.21-.346-.204-.706-.384-1.045-.6a.984.984 0 0 1-.244-.207c-.108-.134-.136-.294-.144-.46-.021-.409-.002-.818-.009-1.227-.003-.195 0-.39.003-.585.004-.322.153-.553.427-.713l.833-.488c.22-.13.44-.257.662-.385.05-.029.105-.052.158-.077.272-.128.519-.047.76.085l.044.028c.123.06.242.125.358.196.318.178.635.357.952.537.095.056.187.117.275.184.194.144.254.35.266.578.016.284.007.569.006.853-.001.28.004.558 0 .838.592-.003 1.259 0 1.259 0l.723-.013c-.003-.292-.007-.584-.007-.876 0-.524.015-1.048-.016-1.571-.024-.42-.135-.8-.492-1.067a5.02 5.02 0 0 0-.506-.339A400.52 400.52 0 0 0 5.94.787C5.722.664 5.513.524 5.282.423 5.255.406 5.228.388 5.2.373 4.758.126 4.305-.026 3.807.21c-.097.046-.197.087-.29.14A699.896 699.896 0 0 0 .783 1.948c-.501.294-.773.717-.778 1.31-.004.36-.009.718-.001 1.077.016.754-.017 1.508.024 2.261.016.304.07.6.269.848.127.15.279.28.448.382.622.4 1.283.734 1.92 1.11l.183.109Z"/></svg>
`;
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const gC = 53, pC = 10, wC = 50, bC = 350, _C = "Powered by", rn = {
  top: -99999,
  left: -99999,
  name: "invalid",
  config: {
    withArrow: !1
  }
};
class vC extends rt() {
  /**
   * Creates a "powered by" helper for a given editor. The feature is initialized on Editor#ready
   * event.
   *
   * @param editor
   */
  constructor(e) {
    super(), this.editor = e, this._balloonView = null, this._lastFocusedEditableElement = null, this._showBalloonThrottled = zn(this._showBalloon.bind(this), 50, { leading: !0 }), e.on("ready", this._handleEditorReady.bind(this));
  }
  /**
   * Destroys the "powered by" helper along with its view.
   */
  destroy() {
    const e = this._balloonView;
    e && (e.unpin(), this._balloonView = null), this._showBalloonThrottled.cancel(), this.stopListening();
  }
  /**
   * Enables "powered by" label once the editor (ui) is ready.
   */
  _handleEditorReady() {
    const e = this.editor, t = !!e.config.get("ui.poweredBy.forceVisible");
    /* istanbul ignore next -- @preserve */
    !t && A_(e.config.get("licenseKey")) === "VALID" || e.ui.view && (e.ui.focusTracker.on("change:isFocused", (i, s, r) => {
      this._updateLastFocusedEditableElement(), r ? this._showBalloon() : this._hideBalloon();
    }), e.ui.focusTracker.on("change:focusedElement", (i, s, r) => {
      this._updateLastFocusedEditableElement(), r && this._showBalloon();
    }), e.ui.on("update", () => {
      this._showBalloonThrottled();
    }));
  }
  /**
   * Creates an instance of the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView balloon panel}
   * with the "powered by" view inside ready for positioning.
   */
  _createBalloonView() {
    const e = this.editor, t = this._balloonView = new ae(), i = _d(e), s = new yC(e.locale, i.label);
    t.content.add(s), t.set({
      class: "ck-powered-by-balloon"
    }), e.ui.view.body.add(t), e.ui.focusTracker.add(t.element), this._balloonView = t;
  }
  /**
   * Attempts to display the balloon with the "powered by" view.
   */
  _showBalloon() {
    if (!this._lastFocusedEditableElement)
      return;
    const e = kC(this.editor, this._lastFocusedEditableElement);
    e && (this._balloonView || this._createBalloonView(), this._balloonView.pin(e));
  }
  /**
   * Hides the "powered by" balloon if already visible.
   */
  _hideBalloon() {
    this._balloonView && this._balloonView.unpin();
  }
  /**
   * Updates the {@link #_lastFocusedEditableElement} based on the state of the global focus tracker.
   */
  _updateLastFocusedEditableElement() {
    const e = this.editor, t = e.ui.focusTracker.isFocused, i = e.ui.focusTracker.focusedElement;
    if (!t || !i) {
      this._lastFocusedEditableElement = null;
      return;
    }
    const s = Array.from(e.ui.getEditableElementsNames()).map((r) => e.ui.getEditableElement(r));
    s.includes(i) ? this._lastFocusedEditableElement = i : this._lastFocusedEditableElement = s[0];
  }
}
class yC extends E {
  /**
   * Created an instance of the "powered by" view.
   *
   * @param locale The localization services instance.
   * @param label The label text.
   */
  constructor(e, t) {
    super(e);
    const i = new pt(), s = this.bindTemplate;
    i.set({
      content: mC,
      isColorInherited: !1
    }), i.extendTemplate({
      attributes: {
        style: {
          width: gC + "px",
          height: pC + "px"
        }
      }
    }), this.setTemplate({
      tag: "div",
      attributes: {
        class: ["ck", "ck-powered-by"],
        "aria-hidden": !0
      },
      children: [
        {
          tag: "a",
          attributes: {
            href: "https://ckeditor.com/?utm_source=ckeditor&utm_medium=referral&utm_campaign=701Dn000000hVgmIAE_powered_by_ckeditor_logo",
            target: "_blank",
            tabindex: "-1"
          },
          children: [
            ...t ? [
              {
                tag: "span",
                attributes: {
                  class: ["ck", "ck-powered-by__label"]
                },
                children: [t]
              }
            ] : [],
            i
          ],
          on: {
            dragstart: s.to((r) => r.preventDefault())
          }
        }
      ]
    });
  }
}
function kC(n, e) {
  const t = _d(n), i = t.side === "right" ? CC(e, t) : AC(e, t);
  return {
    target: e,
    positions: [i]
  };
}
function CC(n, e) {
  return bd(n, e, (t, i) => t.left + t.width - i.width - e.horizontalOffset);
}
function AC(n, e) {
  return bd(n, e, (t) => t.left + e.horizontalOffset);
}
function bd(n, e, t) {
  return (i, s) => {
    const r = i.getVisible();
    if (!r || i.width < bC || i.height < wC)
      return rn;
    let o;
    e.position === "inside" ? o = i.bottom - s.height : o = i.bottom - s.height / 2, o -= e.verticalOffset;
    const a = t(i, s);
    if (e.position === "inside") {
      const l = s.clone().moveTo(a, o);
      if (l.getIntersectionArea(r) < l.getArea())
        return rn;
    } else {
      const l = Yb(n);
      if (l) {
        const c = new M(l);
        if (r.bottom + s.height / 2 > c.bottom)
          return rn;
      }
    }
    return {
      top: o,
      left: a,
      name: `position_${e.position}-side_${e.side}`,
      config: {
        withArrow: !1
      }
    };
  };
}
function _d(n) {
  const e = n.config.get("ui.poweredBy"), t = e && e.position || "border";
  return {
    position: t,
    label: _C,
    verticalOffset: t === "inside" ? 5 : 0,
    horizontalOffset: 5,
    side: n.locale.contentLanguageDirection === "ltr" ? "right" : "left",
    ...e
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class EC extends H() {
  /**
   * Creates an instance of the editor UI class.
   *
   * @param editor The editor instance.
   */
  constructor(e) {
    super(), this.isReady = !1, this._editableElementsMap = /* @__PURE__ */ new Map(), this._focusableToolbarDefinitions = [];
    const t = e.editing.view;
    this.editor = e, this.componentFactory = new dC(e), this.focusTracker = new fe(), this.tooltipManager = new ne(e), this.poweredBy = new vC(e), this.set("viewportOffset", this._readViewportOffsetFromConfig()), this.once("ready", () => {
      this.isReady = !0;
    }), this.listenTo(t.document, "layoutChanged", this.update.bind(this)), this.listenTo(t, "scrollToTheSelection", this._handleScrollToTheSelection.bind(this)), this._initFocusTracking();
  }
  /**
   * The main (outermost) DOM element of the editor UI.
   *
   * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which
   * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}
   * it is the editable element itself (as there is no other wrapper). However, in
   * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not
   * come with a single "main" HTML element (its editable element and toolbar are separate).
   *
   * This property can be understood as a shorthand for retrieving the element that a specific editor integration
   * considers to be its main DOM element.
   */
  get element() {
    return null;
  }
  /**
   * Fires the {@link module:ui/editorui/editorui~EditorUI#event:update `update`} event.
   *
   * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to
   * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).
   */
  update() {
    this.fire("update");
  }
  /**
   * Destroys the UI.
   */
  destroy() {
    this.stopListening(), this.focusTracker.destroy(), this.tooltipManager.destroy(this.editor), this.poweredBy.destroy();
    for (const e of this._editableElementsMap.values())
      e.ckeditorInstance = null, this.editor.keystrokes.stopListening(e);
    this._editableElementsMap = /* @__PURE__ */ new Map(), this._focusableToolbarDefinitions = [];
  }
  /**
   * Stores the native DOM editable element used by the editor under a unique name.
   *
   * Also, registers the element in the editor to maintain the accessibility of the UI. When the user is editing text in a focusable
   * editable area, they can use the <kbd>Alt</kbd> + <kbd>F10</kbd> keystroke to navigate over editor toolbars. See {@link #addToolbar}.
   *
   * @param rootName The unique name of the editable element.
   * @param domElement The native DOM editable element.
   */
  setEditableElement(e, t) {
    this._editableElementsMap.set(e, t), t.ckeditorInstance || (t.ckeditorInstance = this.editor), this.focusTracker.add(t);
    const i = () => {
      this.editor.editing.view.getDomRoot(e) || this.editor.keystrokes.listenTo(t);
    };
    this.isReady ? i() : this.once("ready", i);
  }
  /**
   * Removes the editable from the editor UI. Removes all handlers added by {@link #setEditableElement}.
   *
   * @param rootName The name of the editable element to remove.
   */
  removeEditableElement(e) {
    const t = this._editableElementsMap.get(e);
    t && (this._editableElementsMap.delete(e), this.editor.keystrokes.stopListening(t), this.focusTracker.remove(t), t.ckeditorInstance = null);
  }
  /**
   * Returns the editable editor element with the given name or null if editable does not exist.
   *
   * @param rootName The editable name.
   */
  getEditableElement(e = "main") {
    return this._editableElementsMap.get(e);
  }
  /**
   * Returns array of names of all editor editable elements.
   */
  getEditableElementsNames() {
    return this._editableElementsMap.keys();
  }
  /**
   * Adds a toolbar to the editor UI. Used primarily to maintain the accessibility of the UI.
   *
   * Focusable toolbars can be accessed (focused) by users by pressing the <kbd>Alt</kbd> + <kbd>F10</kbd> keystroke.
   * Successive keystroke presses navigate over available toolbars.
   *
   * @param toolbarView A instance of the toolbar to be registered.
   */
  addToolbar(e, t = {}) {
    e.isRendered ? (this.focusTracker.add(e.element), this.editor.keystrokes.listenTo(e.element)) : e.once("render", () => {
      this.focusTracker.add(e.element), this.editor.keystrokes.listenTo(e.element);
    }), this._focusableToolbarDefinitions.push({ toolbarView: e, options: t });
  }
  /**
   * Stores all editable elements used by the editor instance.
   *
   * @deprecated
   */
  get _editableElements() {
    return console.warn("editor-ui-deprecated-editable-elements: The EditorUI#_editableElements property has been deprecated and will be removed in the near future.", { editorUI: this }), this._editableElementsMap;
  }
  /**
   * Returns viewport offsets object:
   *
   * ```js
   * {
   * 	top: Number,
   * 	right: Number,
   * 	bottom: Number,
   * 	left: Number
   * }
   * ```
   *
   * Only top property is currently supported.
   */
  _readViewportOffsetFromConfig() {
    const e = this.editor, t = e.config.get("ui.viewportOffset");
    if (t)
      return t;
    const i = e.config.get("toolbar.viewportTopOffset");
    return i ? (console.warn("editor-ui-deprecated-viewport-offset-config: The `toolbar.vieportTopOffset` configuration option is deprecated. It will be removed from future CKEditor versions. Use `ui.viewportOffset.top` instead."), { top: i }) : { top: 0 };
  }
  /**
   * Starts listening for <kbd>Alt</kbd> + <kbd>F10</kbd> and <kbd>Esc</kbd> keystrokes in the context of focusable
   * {@link #setEditableElement editable elements} and {@link #addToolbar toolbars}
   * to allow users navigate across the UI.
   */
  _initFocusTracking() {
    const e = this.editor, t = e.editing.view;
    let i, s;
    e.keystrokes.set("Alt+F10", (r, o) => {
      const a = this.focusTracker.focusedElement;
      Array.from(this._editableElementsMap.values()).includes(a) && !Array.from(t.domRoots.values()).includes(a) && (i = a);
      const l = this._getCurrentFocusedToolbarDefinition();
      (!l || !s) && (s = this._getFocusableCandidateToolbarDefinitions());
      for (let c = 0; c < s.length; c++) {
        const u = s.shift();
        if (s.push(u), u !== l && this._focusFocusableCandidateToolbar(u)) {
          l && l.options.afterBlur && l.options.afterBlur();
          break;
        }
      }
      o();
    }), e.keystrokes.set("Esc", (r, o) => {
      const a = this._getCurrentFocusedToolbarDefinition();
      a && (i ? (i.focus(), i = null) : e.editing.view.focus(), a.options.afterBlur && a.options.afterBlur(), o());
    });
  }
  /**
   * Returns definitions of toolbars that could potentially be focused, sorted by their importance for the user.
   *
   * Focusable toolbars candidates are either:
   * * already visible,
   * * have `beforeFocus()` set in their {@link module:ui/editorui/editorui~FocusableToolbarDefinition definition} that suggests that
   * they might show up when called. Keep in mind that determining whether a toolbar will show up (and become focusable) is impossible
   * at this stage because it depends on its implementation, that in turn depends on the editing context (selection).
   *
   * **Note**: Contextual toolbars take precedence over regular toolbars.
   */
  _getFocusableCandidateToolbarDefinitions() {
    const e = [];
    for (const t of this._focusableToolbarDefinitions) {
      const { toolbarView: i, options: s } = t;
      (Rt(i.element) || s.beforeFocus) && e.push(t);
    }
    return e.sort((t, i) => kl(t) - kl(i)), e;
  }
  /**
   * Returns a definition of the toolbar that is currently visible and focused (one of its children has focus).
   *
   * `null` is returned when no toolbar is currently focused.
   */
  _getCurrentFocusedToolbarDefinition() {
    for (const e of this._focusableToolbarDefinitions)
      if (e.toolbarView.element && e.toolbarView.element.contains(this.focusTracker.focusedElement))
        return e;
    return null;
  }
  /**
   * Focuses a focusable toolbar candidate using its definition.
   *
   * @param candidateToolbarDefinition A definition of the toolbar to focus.
   * @returns `true` when the toolbar candidate was focused. `false` otherwise.
   */
  _focusFocusableCandidateToolbar(e) {
    const { toolbarView: t, options: { beforeFocus: i } } = e;
    return i && i(), Rt(t.element) ? (t.focus(), !0) : !1;
  }
  /**
   * Provides an integration between {@link #viewportOffset} and {@link module:utils/dom/scroll~scrollViewportToShowTarget}.
   * It allows the UI-agnostic engine method to consider user-configured viewport offsets specific for the integration.
   *
   * @param evt The `scrollToTheSelection` event info.
   * @param data The payload carried by the `scrollToTheSelection` event.
   */
  _handleScrollToTheSelection(e, t) {
    const i = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      ...this.viewportOffset
    };
    t.viewportOffset.top += i.top, t.viewportOffset.bottom += i.bottom, t.viewportOffset.left += i.left, t.viewportOffset.right += i.right;
  }
}
function kl(n) {
  const { toolbarView: e, options: t } = n;
  let i = 10;
  return Rt(e.element) && i--, t.isContextual && i--, i;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class TC extends E {
  /**
   * Creates an instance of the editor UI view class.
   *
   * @param locale The locale instance.
   */
  constructor(e) {
    super(e), this.body = new sk(e);
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.body.attachToDom();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    return this.body.detachFromDom(), super.destroy();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class PC extends E {
  /**
   * Creates an instance of EditableUIView class.
   *
   * @param locale The locale instance.
   * @param editingView The editing view instance the editable is related to.
   * @param editableElement The editable element. If not specified, this view
   * should create it. Otherwise, the existing element should be used.
   */
  constructor(e, t, i) {
    super(e), this.name = null, this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-content",
          "ck-editor__editable",
          "ck-rounded-corners"
        ],
        lang: e.contentLanguage,
        dir: e.contentLanguageDirection
      }
    }), this.set("isFocused", !1), this._editableElement = i, this._hasExternalElement = !!this._editableElement, this._editingView = t;
  }
  /**
   * Renders the view by either applying the {@link #template} to the existing
   * {@link module:ui/editableui/editableuiview~EditableUIView#_editableElement} or assigning {@link #element}
   * as {@link module:ui/editableui/editableuiview~EditableUIView#_editableElement}.
   */
  render() {
    super.render(), this._hasExternalElement ? this.template.apply(this.element = this._editableElement) : this._editableElement = this.element, this.on("change:isFocused", () => this._updateIsFocusedClasses()), this._updateIsFocusedClasses();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    this._hasExternalElement && this.template.revert(this._editableElement), super.destroy();
  }
  /**
   * Whether an external {@link #_editableElement} was passed into the constructor, which also means
   * the view will not render its {@link #template}.
   */
  get hasExternalElement() {
    return this._hasExternalElement;
  }
  /**
   * Updates the `ck-focused` and `ck-blurred` CSS classes on the {@link #element} according to
   * the {@link #isFocused} property value using the {@link #_editingView editing view} API.
   */
  _updateIsFocusedClasses() {
    const e = this._editingView;
    e.isRenderingInProgress ? i(this) : t(this);
    function t(s) {
      e.change((r) => {
        const o = e.document.getRoot(s.name);
        r.addClass(s.isFocused ? "ck-focused" : "ck-blurred", o), r.removeClass(s.isFocused ? "ck-blurred" : "ck-focused", o);
      });
    }
    function i(s) {
      e.once("change:isRenderingInProgress", (r, o, a) => {
        a ? i(s) : t(s);
      });
    }
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class xC extends PC {
  /**
   * Creates an instance of the InlineEditableUIView class.
   *
   * @param locale The locale instance.
   * @param editingView The editing view instance the editable is related to.
   * @param editableElement The editable element. If not specified, the
   * {@link module:ui/editableui/editableuiview~EditableUIView}
   * will create it. Otherwise, the existing element will be used.
   * @param options Additional configuration of the view.
   * @param options.label A function that gets called with the instance of this view as an argument
   * and should return a string that represents the label of the editable for assistive technologies. If not provided,
   * a default label generator is used.
   */
  constructor(e, t, i, s = {}) {
    super(e, t, i);
    const r = e.t;
    this.extendTemplate({
      attributes: {
        role: "textbox",
        class: "ck-editor__editable_inline"
      }
    }), this._generateLabel = s.label || (() => r("Editor editing area: %0", this.name));
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render();
    const e = this._editingView;
    e.change((t) => {
      const i = e.document.getRoot(this.name);
      t.setAttribute("aria-label", this._generateLabel(this), i);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class vd extends H() {
  /**
   * Creates a new Model instance.
   *
   * @param attributes The model state attributes to be defined during the instance creation.
   * @param properties The (out of state) properties to be appended to the instance during creation.
   */
  constructor(e, t) {
    super(), t && Uc(this, t), e && this.set(e);
  }
}
const SC = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.463 5.187a.888.888 0 1 1 1.254 1.255L9.16 10l3.557 3.557a.888.888 0 1 1-1.254 1.255L7.26 10.61a.888.888 0 0 1 .16-1.382l4.043-4.042z"/></svg>', IC = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.537 14.813a.888.888 0 1 1-1.254-1.255L10.84 10 7.283 6.442a.888.888 0 1 1 1.254-1.255L12.74 9.39a.888.888 0 0 1-.16 1.382l-4.043 4.042z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const on = zr("px");
class xn extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ContextualBalloon";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this._viewToStack = /* @__PURE__ */ new Map(), this._idToStack = /* @__PURE__ */ new Map(), this._view = null, this._rotatorView = null, this._fakePanelsView = null, this.positionLimiter = () => {
      const t = this.editor.editing.view, s = t.document.selection.editableElement;
      return s ? t.domConverter.mapViewToDom(s.root) : null;
    }, this.set("visibleView", null), this.set("_numberOfStacks", 0), this.set("_singleViewMode", !1);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this._view && this._view.destroy(), this._rotatorView && this._rotatorView.destroy(), this._fakePanelsView && this._fakePanelsView.destroy();
  }
  /**
   * The common balloon panel view.
   */
  get view() {
    return this._view || this._createPanelView(), this._view;
  }
  /**
   * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.
   */
  hasView(e) {
    return Array.from(this._viewToStack.keys()).includes(e);
  }
  /**
   * Adds a new view to the stack and makes it visible if the current stack is visible
   * or it is the first view in the balloon.
   *
   * @param data The configuration of the view.
   * @param data.stackId The ID of the stack that the view is added to. Defaults to `'main'`.
   * @param data.view The content of the balloon.
   * @param data.position Positioning options.
   * @param data.balloonClassName An additional CSS class added to the {@link #view balloon} when visible.
   * @param data.withArrow Whether the {@link #view balloon} should be rendered with an arrow. Defaults to `true`.
   * @param data.singleViewMode Whether the view should be the only visible view even if other stacks were added. Defaults to `false`.
   */
  add(e) {
    if (this._view || this._createPanelView(), this.hasView(e.view))
      throw new f("contextualballoon-add-view-exist", [this, e]);
    const t = e.stackId || "main";
    if (!this._idToStack.has(t)) {
      this._idToStack.set(t, /* @__PURE__ */ new Map([[e.view, e]])), this._viewToStack.set(e.view, this._idToStack.get(t)), this._numberOfStacks = this._idToStack.size, (!this._visibleStack || e.singleViewMode) && this.showStack(t);
      return;
    }
    const i = this._idToStack.get(t);
    e.singleViewMode && this.showStack(t), i.set(e.view, e), this._viewToStack.set(e.view, i), i === this._visibleStack && this._showView(e);
  }
  /**
   * Removes the given view from the stack. If the removed view was visible,
   * the view preceding it in the stack will become visible instead.
   * When there is no view in the stack, the next stack will be displayed.
   * When there are no more stacks, the balloon will hide.
   *
   * @param view A view to be removed from the balloon.
   */
  remove(e) {
    if (!this.hasView(e))
      throw new f("contextualballoon-remove-view-not-exist", [this, e]);
    const t = this._viewToStack.get(e);
    this._singleViewMode && this.visibleView === e && (this._singleViewMode = !1), this.visibleView === e && (t.size === 1 ? this._idToStack.size > 1 ? this._showNextStack() : (this.view.hide(), this.visibleView = null, this._rotatorView.hideView()) : this._showView(Array.from(t.values())[t.size - 2])), t.size === 1 ? (this._idToStack.delete(this._getStackId(t)), this._numberOfStacks = this._idToStack.size) : t.delete(e), this._viewToStack.delete(e);
  }
  /**
   * Updates the position of the balloon using the position data of the first visible view in the stack.
   * When new position data is given, the position data of the currently visible view will be updated.
   *
   * @param position Position options.
   */
  updatePosition(e) {
    e && (this._visibleStack.get(this.visibleView).position = e), this.view.pin(this._getBalloonPosition()), this._fakePanelsView.updatePosition();
  }
  /**
   * Shows the last view from the stack of a given ID.
   */
  showStack(e) {
    this.visibleStack = e;
    const t = this._idToStack.get(e);
    if (!t)
      throw new f("contextualballoon-showstack-stack-not-exist", this);
    this._visibleStack !== t && this._showView(Array.from(t.values()).pop());
  }
  /**
   * Initializes view instances.
   */
  _createPanelView() {
    this._view = new ae(this.editor.locale), this.editor.ui.view.body.add(this._view), this.editor.ui.focusTracker.add(this._view.element), this._rotatorView = this._createRotatorView(), this._fakePanelsView = this._createFakePanelsView();
  }
  /**
   * Returns the stack of the currently visible view.
   */
  get _visibleStack() {
    return this._viewToStack.get(this.visibleView);
  }
  /**
   * Returns the ID of the given stack.
   */
  _getStackId(e) {
    return Array.from(this._idToStack.entries()).find((i) => i[1] === e)[0];
  }
  /**
   * Shows the last view from the next stack.
   */
  _showNextStack() {
    const e = Array.from(this._idToStack.values());
    let t = e.indexOf(this._visibleStack) + 1;
    e[t] || (t = 0), this.showStack(this._getStackId(e[t]));
  }
  /**
   * Shows the last view from the previous stack.
   */
  _showPrevStack() {
    const e = Array.from(this._idToStack.values());
    let t = e.indexOf(this._visibleStack) - 1;
    e[t] || (t = e.length - 1), this.showStack(this._getStackId(e[t]));
  }
  /**
   * Creates a rotator view.
   */
  _createRotatorView() {
    const e = new RC(this.editor.locale), t = this.editor.locale.t;
    return this.view.content.add(e), e.bind("isNavigationVisible").to(this, "_numberOfStacks", this, "_singleViewMode", (i, s) => !s && i > 1), e.on("change:isNavigationVisible", () => this.updatePosition(), { priority: "low" }), e.bind("counter").to(this, "visibleView", this, "_numberOfStacks", (i, s) => {
      if (s < 2)
        return "";
      const r = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;
      return t("%0 of %1", [r, s]);
    }), e.buttonNextView.on("execute", () => {
      e.focusTracker.isFocused && this.editor.editing.view.focus(), this._showNextStack();
    }), e.buttonPrevView.on("execute", () => {
      e.focusTracker.isFocused && this.editor.editing.view.focus(), this._showPrevStack();
    }), e;
  }
  /**
   * Creates a fake panels view.
   */
  _createFakePanelsView() {
    const e = new VC(this.editor.locale, this.view);
    return e.bind("numberOfPanels").to(this, "_numberOfStacks", this, "_singleViewMode", (t, i) => !i && t >= 2 ? Math.min(t - 1, 2) : 0), e.listenTo(this.view, "change:top", () => e.updatePosition()), e.listenTo(this.view, "change:left", () => e.updatePosition()), this.editor.ui.view.body.add(e), e;
  }
  /**
   * Sets the view as the content of the balloon and attaches the balloon using position
   * options of the first view.
   *
   * @param data Configuration.
   * @param data.view The view to show in the balloon.
   * @param data.balloonClassName Additional class name which will be added to the {@link #view balloon}.
   * @param data.withArrow Whether the {@link #view balloon} should be rendered with an arrow.
   */
  _showView({ view: e, balloonClassName: t = "", withArrow: i = !0, singleViewMode: s = !1 }) {
    this.view.class = t, this.view.withArrow = i, this._rotatorView.showView(e), this.visibleView = e, this.view.pin(this._getBalloonPosition()), this._fakePanelsView.updatePosition(), s && (this._singleViewMode = !0);
  }
  /**
   * Returns position options of the last view in the stack.
   * This keeps the balloon in the same position when the view is changed.
   */
  _getBalloonPosition() {
    let e = Array.from(this._visibleStack.values()).pop().position;
    return e && (e.limiter || (e = Object.assign({}, e, {
      limiter: this.positionLimiter
    })), e = Object.assign({}, e, {
      viewportOffsetConfig: this.editor.ui.viewportOffset
    })), e;
  }
}
class RC extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = e.t, i = this.bindTemplate;
    this.set("isNavigationVisible", !0), this.focusTracker = new fe(), this.buttonPrevView = this._createButtonView(t("Previous"), SC), this.buttonNextView = this._createButtonView(t("Next"), IC), this.content = this.createCollection(), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-balloon-rotator"
        ],
        "z-index": "-1"
      },
      children: [
        {
          tag: "div",
          attributes: {
            class: [
              "ck-balloon-rotator__navigation",
              i.to("isNavigationVisible", (s) => s ? "" : "ck-hidden")
            ]
          },
          children: [
            this.buttonPrevView,
            {
              tag: "span",
              attributes: {
                class: [
                  "ck-balloon-rotator__counter"
                ]
              },
              children: [
                {
                  text: i.to("counter")
                }
              ]
            },
            this.buttonNextView
          ]
        },
        {
          tag: "div",
          attributes: {
            class: "ck-balloon-rotator__content"
          },
          children: this.content
        }
      ]
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.focusTracker.add(this.element);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy();
  }
  /**
   * Shows a given view.
   *
   * @param view The view to show.
   */
  showView(e) {
    this.hideView(), this.content.add(e);
  }
  /**
   * Hides the currently displayed view.
   */
  hideView() {
    this.content.clear();
  }
  /**
   * Creates a navigation button view.
   *
   * @param label The button label.
   * @param icon The button icon.
   */
  _createButtonView(e, t) {
    const i = new D(this.locale);
    return i.set({
      label: e,
      icon: t,
      tooltip: !0
    }), i;
  }
}
class VC extends E {
  /**
   * @inheritDoc
   */
  constructor(e, t) {
    super(e);
    const i = this.bindTemplate;
    this.set("top", 0), this.set("left", 0), this.set("height", 0), this.set("width", 0), this.set("numberOfPanels", 0), this.content = this.createCollection(), this._balloonPanelView = t, this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck-fake-panel",
          i.to("numberOfPanels", (s) => s ? "" : "ck-hidden")
        ],
        style: {
          top: i.to("top", on),
          left: i.to("left", on),
          width: i.to("width", on),
          height: i.to("height", on)
        }
      },
      children: this.content
    }), this.on("change:numberOfPanels", (s, r, o, a) => {
      o > a ? this._addPanels(o - a) : this._removePanels(a - o), this.updatePosition();
    });
  }
  _addPanels(e) {
    for (; e--; ) {
      const t = new E();
      t.setTemplate({ tag: "div" }), this.content.add(t), this.registerChild(t);
    }
  }
  _removePanels(e) {
    for (; e--; ) {
      const t = this.content.last;
      this.content.remove(t), this.deregisterChild(t), t.destroy();
    }
  }
  /**
   * Updates coordinates of fake panels.
   */
  updatePosition() {
    if (this.numberOfPanels) {
      const { top: e, left: t } = this._balloonPanelView, { width: i, height: s } = new M(this._balloonPanelView.element);
      Object.assign(this, { top: e, left: t, width: i, height: s });
    }
  }
}
const OC = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.209 18.717A8.5 8.5 0 1 1 18.686 9.6h-.008l.002.12a3 3 0 0 1-2.866 2.997h-.268l-.046-.002v.002h-4.791a2 2 0 1 0 0 4 1 1 0 1 1-.128 1.992 8.665 8.665 0 0 1-.372.008Zm-3.918-7.01a1.25 1.25 0 1 0-2.415-.648 1.25 1.25 0 0 0 2.415.647ZM5.723 8.18a1.25 1.25 0 1 0 .647-2.414 1.25 1.25 0 0 0-.647 2.414ZM9.76 6.155a1.25 1.25 0 1 0 .647-2.415 1.25 1.25 0 0 0-.647 2.415Zm4.028 1.759a1.25 1.25 0 1 0 .647-2.415 1.25 1.25 0 0 0-.647 2.415Z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const MC = {
  colorPaletteIcon: OC
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class BC extends EC {
  /**
   * Creates an instance of the inline editor UI class.
   *
   * @param editor The editor instance.
   * @param view The view of the UI.
   */
  constructor(e, t) {
    super(e), this.view = t, this._toolbarConfig = ud(e.config.get("toolbar"));
  }
  /**
   * @inheritDoc
   */
  get element() {
    return this.view.editable.element;
  }
  /**
   * Initializes the UI.
   */
  init() {
    const e = this.editor, t = this.view, i = e.editing.view, s = t.editable, r = i.document.getRoot();
    s.name = r.rootName, t.render();
    const o = s.element;
    this.setEditableElement(s.name, o), s.bind("isFocused").to(this.focusTracker), i.attachDomRoot(o), this._initPlaceholder(), this._initToolbar(), this.fire("ready");
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy();
    const e = this.view;
    this.editor.editing.view.detachDomRoot(e.editable.name), e.destroy();
  }
  /**
   * Initializes the inline editor toolbar and its panel.
   */
  _initToolbar() {
    const e = this.editor, t = this.view, i = t.editable.element, s = t.toolbar;
    t.panel.bind("isVisible").to(this.focusTracker, "isFocused"), t.bind("viewportTopOffset").to(this, "viewportOffset", ({ top: r }) => r || 0), t.listenTo(e.ui, "update", () => {
      t.panel.isVisible && t.panel.pin({
        target: i,
        positions: t.panelPositions
      });
    }), s.fillFromConfig(this._toolbarConfig, this.componentFactory), this.addToolbar(s);
  }
  /**
   * Enable the placeholder text on the editing root, if any was configured.
   */
  _initPlaceholder() {
    const e = this.editor, t = e.editing.view, i = t.document.getRoot();
    e.sourceElement;
    const s = e.config.get("placeholder");
    if (s) {
      const r = typeof s == "string" ? s : s[i.rootName];
      r && I_({
        view: t,
        element: i,
        text: r,
        isDirectHost: !1,
        keepOnFocus: !0
      });
    }
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const DC = zr("px");
class FC extends TC {
  /**
   * Creates an instance of the inline editor UI view.
   *
   * @param locale The {@link module:core/editor/editor~Editor#locale} instance.
   * @param editingView The editing view instance this view is related to.
   * @param editableElement The editable element. If not specified, it will be automatically created by
   * {@link module:ui/editableui/editableuiview~EditableUIView}. Otherwise, the given element will be used.
   * @param options Configuration options for the view instance.
   * @param options.shouldToolbarGroupWhenFull When set `true` enables automatic items grouping
   * in the main {@link module:editor-inline/inlineeditoruiview~InlineEditorUIView#toolbar toolbar}.
   * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.
   */
  constructor(e, t, i, s = {}) {
    super(e);
    const r = e.t;
    this.toolbar = new oo(e, {
      shouldGroupWhenFull: s.shouldToolbarGroupWhenFull,
      isFloating: !0
    }), this.set("viewportTopOffset", 0), this.panel = new ae(e), this.panelPositions = this._getPanelPositions(), this.panel.extendTemplate({
      attributes: {
        class: "ck-toolbar-container"
      }
    }), this.editable = new xC(e, t, i, {
      label: (o) => r("Rich Text Editor. Editing area: %0", o.name)
    }), this._resizeObserver = null;
  }
  /**
   * @inheritDoc
   */
  render() {
    if (super.render(), this.body.add(this.panel), this.registerChild(this.editable), this.panel.content.add(this.toolbar), this.toolbar.options.shouldGroupWhenFull) {
      const t = this.editable.element;
      this._resizeObserver = new $(t, () => {
        this.toolbar.maxWidth = DC(new M(t).width);
      });
    }
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this._resizeObserver && this._resizeObserver.destroy();
  }
  /**
   * Determines the panel top position of the {@link #panel} in {@link #panelPositions}.
   *
   * @param editableRect Rect of the {@link #element}.
   * @param panelRect Rect of the {@link #panel}.
   */
  _getPanelPositionTop(e, t) {
    let i;
    return e.top > t.height + this.viewportTopOffset ? i = e.top - t.height : e.bottom > t.height + this.viewportTopOffset + 50 ? i = this.viewportTopOffset : i = e.bottom, i;
  }
  /**
   * Returns the positions for {@link #panelPositions}.
   *
   * See: {@link module:utils/dom/position~Options#positions}.
   */
  _getPanelPositions() {
    const e = [
      (t, i) => ({
        top: this._getPanelPositionTop(t, i),
        left: t.left,
        name: "toolbar_west",
        config: {
          withArrow: !1
        }
      }),
      (t, i) => ({
        top: this._getPanelPositionTop(t, i),
        left: t.left + t.width - i.width,
        name: "toolbar_east",
        config: {
          withArrow: !1
        }
      })
    ];
    return this.locale.uiLanguageDirection === "ltr" ? e : e.reverse();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class co extends hn(ur(r5)) {
  /**
   * Creates an instance of the inline editor.
   *
   * **Note:** Do not use the constructor to create editor instances. Use the static
   * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`} method instead.
   *
   * @param sourceElementOrData The DOM element that will be the source for the created editor
   * (on which the editor will be initialized) or initial data for the editor. For more information see
   * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}.
   * @param config The editor configuration.
   */
  constructor(e, t = {}) {
    if (!fn(e) && t.initialData !== void 0)
      throw new f("editor-create-initial-data", null);
    super(t), this.config.get("initialData") === void 0 && this.config.set("initialData", NC(e)), this.model.document.createRoot(), fn(e) && (this.sourceElement = e, l5(this, e));
    const i = !this.config.get("toolbar.shouldNotGroupWhenFull"), s = new FC(this.locale, this.editing.view, this.sourceElement, {
      shouldToolbarGroupWhenFull: i
    });
    this.ui = new BC(this, s), o5(this);
  }
  /**
   * Destroys the editor instance, releasing all resources used by it.
   *
   * Updates the original editor element with the data if the
   * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy `updateSourceElementOnDestroy`}
   * configuration option is set to `true`.
   */
  destroy() {
    const e = this.getData();
    return this.ui.destroy(), super.destroy().then(() => {
      this.sourceElement && this.updateSourceElement(e);
    });
  }
  /**
   * Creates a new inline editor instance.
   *
   * There are three general ways how the editor can be initialized.
   *
   * # Using an existing DOM element (and loading data from it)
   *
   * You can initialize the editor using an existing DOM element:
   *
   * ```ts
   * InlineEditor
   * 	.create( document.querySelector( '#editor' ) )
   * 	.then( editor => {
   * 		console.log( 'Editor was initialized', editor );
   * 	} )
   * 	.catch( err => {
   * 		console.error( err.stack );
   * 	} );
   * ```
   *
   * The element's content will be used as the editor data and the element will become the editable element.
   *
   * # Creating a detached editor
   *
   * Alternatively, you can initialize the editor by passing the initial data directly as a `String`.
   * In this case, the editor will render an element that must be inserted into the DOM for the editor to work properly:
   *
   * ```ts
   * InlineEditor
   * 	.create( '<p>Hello world!</p>' )
   * 	.then( editor => {
   * 		console.log( 'Editor was initialized', editor );
   *
   * 		// Initial data was provided so the editor UI element needs to be added manually to the DOM.
   * 		document.body.appendChild( editor.ui.element );
   * 	} )
   * 	.catch( err => {
   * 		console.error( err.stack );
   * 	} );
   * ```
   *
   * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your
   * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.
   *
   * # Using an existing DOM element (and data provided in `config.initialData`)
   *
   * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:
   *
   * ```ts
   * InlineEditor
   * 	.create( document.querySelector( '#editor' ), {
   * 		initialData: '<h2>Initial data</h2><p>Foo bar.</p>'
   * 	} )
   * 	.then( editor => {
   * 		console.log( 'Editor was initialized', editor );
   * 	} )
   * 	.catch( err => {
   * 		console.error( err.stack );
   * 	} );
   * ```
   *
   * This method can be used to initialize the editor on an existing element with the specified content in case if your integration
   * makes it difficult to set the content of the source element.
   *
   * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.
   *
   * # Configuring the editor
   *
   * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about
   * customizing plugins, toolbar and more.
   *
   * # Using the editor from source
   *
   * The code samples listed in the previous sections of this documentation assume that you are using an
   * {@glink installation/getting-started/predefined-builds editor build} (for example – `@ckeditor/ckeditor5-build-inline`).
   *
   * If you want to use the inline editor from source (`@ckeditor/ckeditor5-editor-inline/src/inlineeditor`),
   * you need to define the list of
   * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and
   * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from
   * source in the {@glink installation/advanced/alternative-setups/integrating-from-source-webpack dedicated guide}.
   *
   * @param sourceElementOrData The DOM element that will be the source for the created editor
   * or the editor's initial data.
   *
   * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization.
   * The editor data will be set back to the original element once the editor is destroyed only if the
   * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy updateSourceElementOnDestroy}
   * option is set to `true`.
   *
   * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.
   * It is available under the {@link module:editor-inline/inlineeditorui~InlineEditorUI#element `editor.ui.element`} property.
   *
   * @param config The editor configuration.
   * @returns A promise resolved once the editor is ready. The promise resolves with the created editor instance.
   */
  static create(e, t = {}) {
    return new Promise((i) => {
      if (fn(e) && e.tagName === "TEXTAREA")
        throw new f("editor-wrong-element", null);
      const s = new this(e, t);
      i(s.initPlugins().then(() => s.ui.init()).then(() => s.data.init(s.config.get("initialData"))).then(() => s.fire("ready")).then(() => s));
    });
  }
}
co.Context = Ju;
co.EditorWatchdog = Uh;
co.ContextWatchdog = j5;
function NC(n) {
  return fn(n) ? Zb(n) : n;
}
function fn(n) {
  return gi(n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class uo extends Nt {
  constructor(e) {
    super(e), this.domEventType = [
      "paste",
      "copy",
      "cut",
      "drop",
      "dragover",
      "dragstart",
      "dragend",
      "dragenter",
      "dragleave"
    ];
    const t = this.document;
    this.listenTo(t, "paste", i("clipboardInput"), { priority: "low" }), this.listenTo(t, "drop", i("clipboardInput"), { priority: "low" }), this.listenTo(t, "dragover", i("dragging"), { priority: "low" });
    function i(s) {
      return (r, o) => {
        o.preventDefault();
        const a = o.dropRange ? [o.dropRange] : null, l = new Qe(t, s);
        t.fire(l, {
          dataTransfer: o.dataTransfer,
          method: r.name,
          targetRanges: a,
          target: o.target,
          domEvent: o.domEvent
        }), l.stop.called && o.stopPropagation();
      };
    }
  }
  onDomEvent(e) {
    const t = "clipboardData" in e ? e.clipboardData : e.dataTransfer, i = e.type == "drop" || e.type == "paste", s = {
      dataTransfer: new hh(t, { cacheFiles: i })
    };
    (e.type == "drop" || e.type == "dragover") && (s.dropRange = LC(this.view, e)), this.fire(e.type, e, s);
  }
}
function LC(n, e) {
  const t = e.target.ownerDocument, i = e.clientX, s = e.clientY;
  let r;
  return t.caretRangeFromPoint && t.caretRangeFromPoint(i, s) ? r = t.caretRangeFromPoint(i, s) : e.rangeParent && (r = t.createRange(), r.setStart(e.rangeParent, e.rangeOffset), r.collapse(!0)), r ? n.domConverter.domRangeToView(r) : null;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function zC(n) {
  return n = n.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r?\n\r?\n/g, "</p><p>").replace(/\r?\n/g, "<br>").replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;").replace(/^\s/, "&nbsp;").replace(/\s$/, "&nbsp;").replace(/\s\s/g, " &nbsp;"), (n.includes("</p><p>") || n.includes("<br>")) && (n = `<p>${n}</p>`), n;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function $C(n) {
  return n.replace(/<span(?: class="Apple-converted-space"|)>(\s+)<\/span>/g, (e, t) => t.length == 1 ? " " : t).replace(/<!--[\s\S]*?-->/g, "");
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Cl = ["figcaption", "li"];
function yd(n) {
  let e = "";
  if (n.is("$text") || n.is("$textProxy"))
    e = n.data;
  else if (n.is("element", "img") && n.hasAttribute("alt"))
    e = n.getAttribute("alt");
  else if (n.is("element", "br"))
    e = `
`;
  else {
    let t = null;
    for (const i of n.getChildren()) {
      const s = yd(i);
      t && (t.is("containerElement") || i.is("containerElement")) && (Cl.includes(t.name) || Cl.includes(i.name) ? e += `
` : e += `

`), e += s, t = i;
    }
  }
  return e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class dt extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ClipboardPipeline";
  }
  /**
   * @inheritDoc
   */
  init() {
    this.editor.editing.view.addObserver(uo), this._setupPasteDrop(), this._setupCopyCut();
  }
  /**
   * The clipboard paste pipeline.
   */
  _setupPasteDrop() {
    const e = this.editor, t = e.model, i = e.editing.view, s = i.document;
    this.listenTo(s, "clipboardInput", (r, o) => {
      o.method == "paste" && !e.model.canEditAt(e.model.document.selection) && r.stop();
    }, { priority: "highest" }), this.listenTo(s, "clipboardInput", (r, o) => {
      const a = o.dataTransfer;
      let l;
      if (o.content)
        l = o.content;
      else {
        let u = "";
        a.getData("text/html") ? u = $C(a.getData("text/html")) : a.getData("text/plain") && (u = zC(a.getData("text/plain"))), l = this.editor.data.htmlProcessor.toView(u);
      }
      const c = new Qe(this, "inputTransformation");
      this.fire(c, {
        content: l,
        dataTransfer: a,
        targetRanges: o.targetRanges,
        method: o.method
      }), c.stop.called && r.stop(), i.scrollToTheSelection();
    }, { priority: "low" }), this.listenTo(this, "inputTransformation", (r, o) => {
      if (o.content.isEmpty)
        return;
      const l = this.editor.data.toModel(o.content, "$clipboardHolder");
      l.childCount != 0 && (r.stop(), t.change(() => {
        this.fire("contentInsertion", {
          content: l,
          method: o.method,
          dataTransfer: o.dataTransfer,
          targetRanges: o.targetRanges
        });
      }));
    }, { priority: "low" }), this.listenTo(this, "contentInsertion", (r, o) => {
      o.resultRange = t.insertContent(o.content);
    }, { priority: "low" });
  }
  /**
   * The clipboard copy/cut pipeline.
   */
  _setupCopyCut() {
    const e = this.editor, t = e.model.document, s = e.editing.view.document, r = (o, a) => {
      const l = a.dataTransfer;
      a.preventDefault();
      const c = e.data.toView(e.model.getSelectedContent(t.selection));
      s.fire("clipboardOutput", {
        dataTransfer: l,
        content: c,
        method: o.name
      });
    };
    this.listenTo(s, "copy", r, { priority: "low" }), this.listenTo(s, "cut", (o, a) => {
      e.model.canEditAt(e.model.document.selection) ? r(o, a) : a.preventDefault();
    }, { priority: "low" }), this.listenTo(s, "clipboardOutput", (o, a) => {
      a.content.isEmpty || (a.dataTransfer.setData("text/html", this.editor.data.htmlProcessor.toData(a.content)), a.dataTransfer.setData("text/plain", yd(a.content))), a.method == "cut" && e.model.deleteContent(t.selection);
    }, { priority: "low" });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class kd {
  /**
   * Creates a new instance of the change buffer.
   *
   * @param limit The maximum number of atomic changes which can be contained in one batch.
   */
  constructor(e, t = 20) {
    this._batch = null, this.model = e, this._size = 0, this.limit = t, this._isLocked = !1, this._changeCallback = (i, s) => {
      s.isLocal && s.isUndoable && s !== this._batch && this._reset(!0);
    }, this._selectionChangeCallback = () => {
      this._reset();
    }, this.model.document.on("change", this._changeCallback), this.model.document.selection.on("change:range", this._selectionChangeCallback), this.model.document.selection.on("change:attribute", this._selectionChangeCallback);
  }
  /**
   * The current batch to which a feature should add its operations. Once the {@link #size}
   * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.
   */
  get batch() {
    return this._batch || (this._batch = this.model.createBatch({ isTyping: !0 })), this._batch;
  }
  /**
   * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},
   * the {@link #batch batch} is set to a new one.
   */
  get size() {
    return this._size;
  }
  /**
   * The input number of changes into the buffer. Once the {@link #size} is
   * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.
   *
   * @param changeCount The number of atomic changes to input.
   */
  input(e) {
    this._size += e, this._size >= this.limit && this._reset(!0);
  }
  /**
   * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.
   */
  get isLocked() {
    return this._isLocked;
  }
  /**
   * Locks the buffer.
   */
  lock() {
    this._isLocked = !0;
  }
  /**
   * Unlocks the buffer.
   */
  unlock() {
    this._isLocked = !1;
  }
  /**
   * Destroys the buffer.
   */
  destroy() {
    this.model.document.off("change", this._changeCallback), this.model.document.selection.off("change:range", this._selectionChangeCallback), this.model.document.selection.off("change:attribute", this._selectionChangeCallback);
  }
  /**
   * Resets the change buffer.
   *
   * @param ignoreLock Whether internal lock {@link #isLocked} should be ignored.
   */
  _reset(e = !1) {
    (!this.isLocked || e) && (this._batch = null, this._size = 0);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class HC extends W {
  /**
   * Creates an instance of the command.
   *
   * @param undoStepSize The maximum number of atomic changes
   * which can be contained in one batch in the command buffer.
   */
  constructor(e, t) {
    super(e), this._buffer = new kd(e.model, t), this._isEnabledBasedOnSelection = !1;
  }
  /**
   * The current change buffer.
   */
  get buffer() {
    return this._buffer;
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this._buffer.destroy();
  }
  /**
   * Executes the input command. It replaces the content within the given range with the given text.
   * Replacing is a two step process, first the content within the range is removed and then the new text is inserted
   * at the beginning of the range (which after the removal is a collapsed range).
   *
   * @fires execute
   * @param options The command options.
   */
  execute(e = {}) {
    const t = this.editor.model, i = t.document, s = e.text || "", r = s.length;
    let o = i.selection;
    if (e.selection ? o = e.selection : e.range && (o = t.createSelection(e.range)), !t.canEditAt(o))
      return;
    const a = e.resultRange;
    t.enqueueChange(this._buffer.batch, (l) => {
      this._buffer.lock(), t.deleteContent(o), s && t.insertContent(l.createText(s, i.selection.getAttributes()), o), a ? l.setSelection(a) : o.is("documentSelection") || l.setSelection(o), this._buffer.unlock(), this._buffer.input(r);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Al = [
  // For collapsed range:
  //	- This one is a regular typing (all browsers, all systems).
  //	- This one is used by Chrome when typing accented letter – 2nd step when the user selects the accent (Mac).
  // For non-collapsed range:
  //	- This one is used by Chrome when typing accented letter – when the selection box first appears (Mac).
  //	- This one is used by Safari when accepting spell check suggestions from the context menu (Mac).
  "insertText",
  // This one is used by Safari when typing accented letter (Mac).
  // This one is used by Safari when accepting spell check suggestions from the autocorrection pop-up (Mac).
  "insertReplacementText"
];
class WC extends je {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), S.isAndroid && Al.push("insertCompositionText");
    const t = e.document;
    t.on("beforeinput", (i, s) => {
      if (!this.isEnabled)
        return;
      const { data: r, targetRanges: o, inputType: a, domEvent: l } = s;
      if (!Al.includes(a))
        return;
      const c = new Qe(t, "insertText");
      t.fire(c, new oi(e, l, {
        text: r,
        selection: e.createSelection(o)
      })), c.stop.called && i.stop();
    }), t.on("compositionend", (i, { data: s, domEvent: r }) => {
      !this.isEnabled || S.isAndroid || s && t.fire("insertText", new oi(e, r, {
        text: s,
        selection: t.selection
      }));
    }, { priority: "lowest" });
  }
  /**
   * @inheritDoc
   */
  observe() {
  }
  /**
   * @inheritDoc
   */
  stopObserving() {
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Cd extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Input";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.model, i = e.editing.view, s = t.document.selection;
    i.addObserver(WC);
    const r = new HC(e, e.config.get("typing.undoStep") || 20);
    e.commands.add("insertText", r), e.commands.add("input", r), this.listenTo(i.document, "insertText", (o, a) => {
      i.document.isComposing || a.preventDefault();
      const { text: l, selection: c, resultRange: u } = a, h = Array.from(c.getRanges()).map((p) => e.editing.mapper.toModelRange(p));
      let d = l;
      if (S.isAndroid) {
        const p = Array.from(h[0].getItems()).reduce((b, C) => b + (C.is("$textProxy") ? C.data : ""), "");
        p && (p.length <= d.length ? d.startsWith(p) && (d = d.substring(p.length), h[0].start = h[0].start.getShiftedBy(p.length)) : p.startsWith(d) && (h[0].start = h[0].start.getShiftedBy(d.length), d = ""));
      }
      const m = {
        text: d,
        selection: t.createSelection(h)
      };
      u && (m.resultRange = e.editing.mapper.toModelRange(u)), e.execute("insertText", m);
    }), S.isAndroid ? this.listenTo(i.document, "keydown", (o, a) => {
      s.isCollapsed || a.keyCode != 229 || !i.document.isComposing || El(t, r);
    }) : this.listenTo(i.document, "compositionstart", () => {
      s.isCollapsed || El(t, r);
    });
  }
}
function El(n, e) {
  if (!e.isEnabled)
    return;
  const t = e.buffer;
  t.lock(), n.enqueueChange(t.batch, () => {
    n.deleteContent(n.document.selection);
  }), t.unlock();
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Tl extends W {
  /**
   * Creates an instance of the command.
   *
   * @param direction The directionality of the delete describing in what direction it
   * should consume the content when the selection is collapsed.
   */
  constructor(e, t) {
    super(e), this.direction = t, this._buffer = new kd(e.model, e.config.get("typing.undoStep")), this._isEnabledBasedOnSelection = !1;
  }
  /**
   * The current change buffer.
   */
  get buffer() {
    return this._buffer;
  }
  /**
   * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content
   * or a piece of content in the {@link #direction defined direction}.
   *
   * @fires execute
   * @param options The command options.
   * @param options.unit See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.
   * @param options.sequence A number describing which subsequent delete event it is without the key being released.
   * See the {@link module:engine/view/document~Document#event:delete} event data.
   * @param options.selection Selection to remove. If not set, current model selection will be used.
   */
  execute(e = {}) {
    const t = this.editor.model, i = t.document;
    t.enqueueChange(this._buffer.batch, (s) => {
      this._buffer.lock();
      const r = s.createSelection(e.selection || i.selection);
      if (!t.canEditAt(r))
        return;
      const o = e.sequence || 1, a = r.isCollapsed;
      if (r.isCollapsed && t.modifySelection(r, {
        direction: this.direction,
        unit: e.unit,
        treatEmojiAsSingleUnit: !0
      }), this._shouldEntireContentBeReplacedWithParagraph(o)) {
        this._replaceEntireContentWithParagraph(s);
        return;
      }
      if (this._shouldReplaceFirstBlockWithParagraph(r, o)) {
        this.editor.execute("paragraph", { selection: r });
        return;
      }
      if (r.isCollapsed)
        return;
      let l = 0;
      r.getFirstRange().getMinimalFlatRanges().forEach((c) => {
        l += Ys(c.getWalker({ singleCharacters: !0, ignoreElementEnd: !0, shallow: !0 }));
      }), t.deleteContent(r, {
        doNotResetEntireContent: a,
        direction: this.direction
      }), this._buffer.input(l), s.setSelection(r), this._buffer.unlock();
    });
  }
  /**
   * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current
   * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph
   * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).
   *
   * But, if the user pressed the key in an empty editable for the first time,
   * we want to replace the entire content with a paragraph if:
   *
   * * the current limit element is empty,
   * * the paragraph is allowed in the limit element,
   * * the limit doesn't already have a paragraph inside.
   *
   * See https://github.com/ckeditor/ckeditor5-typing/issues/61.
   *
   * @param sequence A number describing which subsequent delete event it is without the key being released.
   */
  _shouldEntireContentBeReplacedWithParagraph(e) {
    if (e > 1)
      return !1;
    const t = this.editor.model, s = t.document.selection, r = t.schema.getLimitElement(s);
    if (!(s.isCollapsed && s.containsEntireContent(r)) || !t.schema.checkChild(r, "paragraph"))
      return !1;
    const a = r.getChild(0);
    return !(a && a.is("element", "paragraph"));
  }
  /**
   * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.
   *
   * @param writer The model writer.
   */
  _replaceEntireContentWithParagraph(e) {
    const t = this.editor.model, s = t.document.selection, r = t.schema.getLimitElement(s), o = e.createElement("paragraph");
    e.remove(e.createRangeIn(r)), e.insert(o, r), e.setSelection(o, 0);
  }
  /**
   * Checks if the selection is inside an empty element that is the first child of the limit element
   * and should be replaced with a paragraph.
   *
   * @param selection The selection.
   * @param sequence A number describing which subsequent delete event it is without the key being released.
   */
  _shouldReplaceFirstBlockWithParagraph(e, t) {
    const i = this.editor.model;
    if (t > 1 || this.direction != "backward" || !e.isCollapsed)
      return !1;
    const s = e.getFirstPosition(), r = i.schema.getLimitElement(s), o = r.getChild(0);
    return !(s.parent != o || !e.containsEntireContent(o) || !i.schema.checkChild(r, "paragraph") || o.name == "paragraph");
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const UC = "character", Pl = "word", jC = "codePoint", ct = "selection", Zt = "backward", Ci = "forward", Ad = {
  // --------------------------------------- Backward delete types -----------------------------------------------------
  // This happens in Safari on Mac when some content is selected and Ctrl + K is pressed.
  deleteContent: {
    unit: ct,
    // According to the Input Events Level 2 spec, this delete type has no direction
    // but to keep things simple, let's default to backward.
    direction: Zt
  },
  // Chrome and Safari on Mac: Backspace or Ctrl + H
  deleteContentBackward: {
    // This kind of deletions must be done on the code point-level instead of target range provided by the DOM beforeinput event.
    // Take for instance "👨‍👩‍👧‍👧", it equals:
    //
    //	* [ "👨", "ZERO WIDTH JOINER", "👩", "ZERO WIDTH JOINER", "👧", "ZERO WIDTH JOINER", "👧" ]
    //	* or simply "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}"
    //
    // The range provided by the browser would cause the entire multi-byte grapheme to disappear while the user
    // intention when deleting backwards ("👨‍👩‍👧‍👧[]", then backspace) is gradual "decomposition" (first to "👨‍👩‍👧‍[]",
    // then to "👨‍👩‍[]", etc.).
    //
    //	* "👨‍👩‍👧‍👧[]" + backward delete (by code point)  -> results in "👨‍👩‍👧[]", removed the last "👧" 👍
    //	* "👨‍👩‍👧‍👧[]" + backward delete (by character)  -> results in "[]", removed the whole grapheme 👎
    //
    // Deleting by code-point is simply a better UX. See "deleteContentForward" to learn more.
    unit: jC,
    direction: Zt
  },
  // On Mac: Option + Backspace.
  // On iOS: Hold the backspace for a while and the whole words will start to disappear.
  deleteWordBackward: {
    unit: Pl,
    direction: Zt
  },
  // Safari on Mac: Cmd + Backspace
  deleteHardLineBackward: {
    unit: ct,
    direction: Zt
  },
  // Chrome on Mac: Cmd + Backspace.
  deleteSoftLineBackward: {
    unit: ct,
    direction: Zt
  },
  // --------------------------------------- Forward delete types -----------------------------------------------------
  // Chrome on Mac: Fn + Backspace or Ctrl + D
  // Safari on Mac: Ctrl + K or Ctrl + D
  deleteContentForward: {
    // Unlike backward delete, this delete must be performed by character instead of by code point, which
    // provides the best UX for working with accented letters.
    // Take, for example "b̂" ("\u0062\u0302", or [ "LATIN SMALL LETTER B", "COMBINING CIRCUMFLEX ACCENT" ]):
    //
    //	* "b̂[]" + backward delete (by code point)  -> results in "b[]", removed the combining mark 👍
    //	* "[]b̂" + forward delete (by code point)   -> results in "[]^", a bare combining mark does that not make sense when alone 👎
    //	* "[]b̂" + forward delete (by character)    -> results in "[]", removed both "b" and the combining mark 👍
    //
    // See: "deleteContentBackward" to learn more.
    unit: UC,
    direction: Ci
  },
  // On Mac: Fn + Option + Backspace.
  deleteWordForward: {
    unit: Pl,
    direction: Ci
  },
  // Chrome on Mac: Ctrl + K (you have to disable the Link plugin first, though, because it uses the same keystroke)
  // This is weird that it does not work in Safari on Mac despite being listed in the official shortcuts listing
  // on Apple's webpage.
  deleteHardLineForward: {
    unit: ct,
    direction: Ci
  },
  // At this moment there is no known way to trigger this event type but let's keep it for the symmetry with
  // deleteSoftLineBackward.
  deleteSoftLineForward: {
    unit: ct,
    direction: Ci
  }
};
class qC extends je {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = e.document;
    let i = 0;
    t.on("keydown", () => {
      i++;
    }), t.on("keyup", () => {
      i = 0;
    }), t.on("beforeinput", (s, r) => {
      if (!this.isEnabled)
        return;
      const { targetRanges: o, domEvent: a, inputType: l } = r, c = Ad[l];
      if (!c)
        return;
      const u = {
        direction: c.direction,
        unit: c.unit,
        sequence: i
      };
      u.unit == ct && (u.selectionToRemove = e.createSelection(o[0])), l === "deleteContentBackward" && (S.isAndroid && (u.sequence = 1), KC(o) && (u.unit = ct, u.selectionToRemove = e.createSelection(o)));
      const h = new pi(t, "delete", o[0]);
      t.fire(h, new oi(e, a, u)), h.stop.called && s.stop();
    }), S.isBlink && GC(this);
  }
  /**
   * @inheritDoc
   */
  observe() {
  }
  /**
   * @inheritDoc
   */
  stopObserving() {
  }
}
function GC(n) {
  const e = n.view, t = e.document;
  let i = null, s = !1;
  t.on("keydown", (a, { keyCode: l }) => {
    i = l, s = !1;
  }), t.on("keyup", (a, { keyCode: l, domEvent: c }) => {
    const u = t.selection, h = n.isEnabled && l == i && r(l) && !u.isCollapsed && !s;
    if (i = null, h) {
      const d = u.getFirstRange(), m = new pi(t, "delete", d), p = {
        unit: ct,
        direction: o(l),
        selectionToRemove: u
      };
      t.fire(m, new oi(e, c, p));
    }
  }), t.on("beforeinput", (a, { inputType: l }) => {
    const c = Ad[l];
    r(i) && c && c.direction == o(i) && (s = !0);
  }, { priority: "high" }), t.on("beforeinput", (a, { inputType: l, data: c }) => {
    i == R.delete && l == "insertText" && c == "" && a.stop();
  }, { priority: "high" });
  function r(a) {
    return a == R.backspace || a == R.delete;
  }
  function o(a) {
    return a == R.backspace ? Zt : Ci;
  }
}
function KC(n) {
  if (n.length != 1 || n[0].isCollapsed)
    return !1;
  const e = n[0].getWalker({
    direction: "backward",
    singleCharacters: !0,
    ignoreElementEnd: !0
  });
  let t = 0;
  for (const { nextPosition: i } of e) {
    if (!i.parent.is("$text"))
      t++;
    else {
      const s = i.parent.data, r = i.offset;
      if (Hr(s, r) || Wr(s, r) || Gu(s, r))
        continue;
      t++;
    }
    if (t > 1)
      return !0;
  }
  return !1;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Vt extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Delete";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.editing.view, i = t.document, s = e.model.document;
    t.addObserver(qC), this._undoOnBackspace = !1;
    const r = new Tl(e, "forward");
    e.commands.add("deleteForward", r), e.commands.add("forwardDelete", r), e.commands.add("delete", new Tl(e, "backward")), this.listenTo(i, "delete", (o, a) => {
      i.isComposing || a.preventDefault();
      const { direction: l, sequence: c, selectionToRemove: u, unit: h } = a, d = l === "forward" ? "deleteForward" : "delete", m = { sequence: c };
      if (h == "selection") {
        const p = Array.from(u.getRanges()).map((b) => e.editing.mapper.toModelRange(b));
        m.selection = e.model.createSelection(p);
      } else
        m.unit = h;
      e.execute(d, m), t.scrollToTheSelection();
    }, { priority: "low" }), this.editor.plugins.has("UndoEditing") && (this.listenTo(i, "delete", (o, a) => {
      this._undoOnBackspace && a.direction == "backward" && a.sequence == 1 && a.unit == "codePoint" && (this._undoOnBackspace = !1, e.execute("undo"), a.preventDefault(), o.stop());
    }, { context: "$capture" }), this.listenTo(s, "change", () => {
      this._undoOnBackspace = !1;
    }));
  }
  /**
   * If the next user action after calling this method is pressing backspace, it would undo the last change.
   *
   * Requires {@link module:undo/undoediting~UndoEditing} plugin. If not loaded, does nothing.
   */
  requestUndoOnBackspace() {
    this.editor.plugins.has("UndoEditing") && (this._undoOnBackspace = !0);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class JC extends _ {
  static get requires() {
    return [Cd, Vt];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Typing";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Ed(n, e) {
  let t = n.start;
  return { text: Array.from(n.getWalker({ ignoreElementEnd: !1 })).reduce((s, { item: r }) => r.is("$text") || r.is("$textProxy") ? s + r.data : (t = e.createPositionAfter(r), ""), ""), range: e.createRange(t, n.end) };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class YC extends H() {
  /**
   * Creates a text watcher instance.
   *
   * @param testCallback See {@link module:typing/textwatcher~TextWatcher#testCallback}.
   */
  constructor(e, t) {
    super(), this.model = e, this.testCallback = t, this._hasMatch = !1, this.set("isEnabled", !0), this.on("change:isEnabled", () => {
      this.isEnabled ? this._startListening() : (this.stopListening(e.document.selection), this.stopListening(e.document));
    }), this._startListening();
  }
  /**
   * Flag indicating whether there is a match currently.
   */
  get hasMatch() {
    return this._hasMatch;
  }
  /**
   * Starts listening to the editor for typing and selection events.
   */
  _startListening() {
    const t = this.model.document;
    this.listenTo(t.selection, "change:range", (i, { directChange: s }) => {
      if (s) {
        if (!t.selection.isCollapsed) {
          this.hasMatch && (this.fire("unmatched"), this._hasMatch = !1);
          return;
        }
        this._evaluateTextBeforeSelection("selection");
      }
    }), this.listenTo(t, "change:data", (i, s) => {
      s.isUndo || !s.isLocal || this._evaluateTextBeforeSelection("data", { batch: s });
    });
  }
  /**
   * Checks the editor content for matched text.
   *
   * @fires matched:data
   * @fires matched:selection
   * @fires unmatched
   *
   * @param suffix A suffix used for generating the event name.
   * @param data Data object for event.
   */
  _evaluateTextBeforeSelection(e, t = {}) {
    const i = this.model, r = i.document.selection, o = i.createRange(i.createPositionAt(r.focus.parent, 0), r.focus), { text: a, range: l } = Ed(o, i), c = this.testCallback(a);
    if (!c && this.hasMatch && this.fire("unmatched"), this._hasMatch = !!c, c) {
      const u = Object.assign(t, { text: a, range: l });
      typeof c == "object" && Object.assign(u, c), this.fire(`matched:${e}`, u);
    }
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class xl extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "TwoStepCaretMovement";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.attributes = /* @__PURE__ */ new Set(), this._overrideUid = null;
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.model, i = e.editing.view, s = e.locale, r = t.document.selection;
    this.listenTo(i.document, "arrowKey", (o, a) => {
      if (!r.isCollapsed || a.shiftKey || a.altKey || a.ctrlKey)
        return;
      const l = a.keyCode == R.arrowright, c = a.keyCode == R.arrowleft;
      if (!l && !c)
        return;
      const u = s.contentLanguageDirection;
      let h = !1;
      u === "ltr" && l || u === "rtl" && c ? h = this._handleForwardMovement(a) : h = this._handleBackwardMovement(a), h === !0 && o.stop();
    }, { context: "$text", priority: "highest" }), this._isNextGravityRestorationSkipped = !1, this.listenTo(r, "change:range", (o, a) => {
      if (this._isNextGravityRestorationSkipped) {
        this._isNextGravityRestorationSkipped = !1;
        return;
      }
      this._isGravityOverridden && (!a.directChange && mn(r.getFirstPosition(), this.attributes) || this._restoreGravity());
    });
  }
  /**
   * Registers a given attribute for the two-step caret movement.
   *
   * @param attribute Name of the attribute to handle.
   */
  registerAttribute(e) {
    this.attributes.add(e);
  }
  /**
   * Updates the document selection and the view according to the two–step caret movement state
   * when moving **forwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.
   *
   * @param data Data of the key press.
   * @returns `true` when the handler prevented caret movement.
   */
  _handleForwardMovement(e) {
    const t = this.attributes, s = this.editor.model.document.selection, r = s.getFirstPosition();
    return this._isGravityOverridden || r.isAtStart && Cs(s, t) ? !1 : mn(r, t) ? (an(e), this._overrideGravity(), !0) : !1;
  }
  /**
   * Updates the document selection and the view according to the two–step caret movement state
   * when moving **backwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.
   *
   * @param data Data of the key press.
   * @returns `true` when the handler prevented caret movement
   */
  _handleBackwardMovement(e) {
    const t = this.attributes, i = this.editor.model, s = i.document.selection, r = s.getFirstPosition();
    return this._isGravityOverridden ? (an(e), this._restoreGravity(), As(i, t, r), !0) : r.isAtStart ? Cs(s, t) ? (an(e), As(i, t, r), !0) : !1 : ZC(r, t) ? r.isAtEnd && !Cs(s, t) && mn(r, t) ? (an(e), As(i, t, r), !0) : (this._isNextGravityRestorationSkipped = !0, this._overrideGravity(), !1) : !1;
  }
  /**
   * `true` when the gravity is overridden for the plugin.
   */
  get _isGravityOverridden() {
    return !!this._overrideUid;
  }
  /**
   * Overrides the gravity using the {@link module:engine/model/writer~Writer model writer}
   * and stores the information about this fact in the {@link #_overrideUid}.
   *
   * A shorthand for {@link module:engine/model/writer~Writer#overrideSelectionGravity}.
   */
  _overrideGravity() {
    this._overrideUid = this.editor.model.change((e) => e.overrideSelectionGravity());
  }
  /**
   * Restores the gravity using the {@link module:engine/model/writer~Writer model writer}.
   *
   * A shorthand for {@link module:engine/model/writer~Writer#restoreSelectionGravity}.
   */
  _restoreGravity() {
    this.editor.model.change((e) => {
      e.restoreSelectionGravity(this._overrideUid), this._overrideUid = null;
    });
  }
}
function Cs(n, e) {
  for (const t of e)
    if (n.hasAttribute(t))
      return !0;
  return !1;
}
function As(n, e, t) {
  const i = t.nodeBefore;
  n.change((s) => {
    i ? s.setSelectionAttribute(i.getAttributes()) : s.removeSelectionAttribute(e);
  });
}
function an(n) {
  n.preventDefault();
}
function ZC(n, e) {
  const t = n.getShiftedBy(-1);
  return mn(t, e);
}
function mn(n, e) {
  const { nodeBefore: t, nodeAfter: i } = n;
  for (const s of e) {
    const r = t ? t.getAttribute(s) : void 0;
    if ((i ? i.getAttribute(s) : void 0) !== r)
      return !0;
  }
  return !1;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function ci(n, e, t, i) {
  return i.createRange(Sl(n, e, t, !0, i), Sl(n, e, t, !1, i));
}
function Sl(n, e, t, i, s) {
  let r = n.textNode || (i ? n.nodeBefore : n.nodeAfter), o = null;
  for (; r && r.getAttribute(e) == t; )
    o = r, r = i ? r.previousSibling : r.nextSibling;
  return o ? s.createPositionAt(o, i ? "before" : "after") : n;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function XC(n, e, t, i) {
  const s = n.editing.view, r = /* @__PURE__ */ new Set();
  s.document.registerPostFixer((o) => {
    const a = n.model.document.selection;
    let l = !1;
    if (a.hasAttribute(e)) {
      const c = ci(a.getFirstPosition(), e, a.getAttribute(e), n.model), u = n.editing.mapper.toViewRange(c);
      for (const h of u.getItems())
        h.is("element", t) && !h.hasClass(i) && (o.addClass(i, h), r.add(h), l = !0);
    }
    return l;
  }), n.conversion.for("editingDowncast").add((o) => {
    o.on("insert", a, { priority: "highest" }), o.on("remove", a, { priority: "highest" }), o.on("attribute", a, { priority: "highest" }), o.on("selection", a, { priority: "highest" });
    function a() {
      s.change((l) => {
        for (const c of r.values())
          l.removeClass(i, c), r.delete(c);
      });
    }
  });
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function* Td(n, e) {
  for (const t of e)
    t && n.getAttributeProperties(t[0]).copyOnEnter && (yield t);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class QC extends W {
  /**
   * @inheritDoc
   */
  execute() {
    this.editor.model.change((e) => {
      this.enterBlock(e), this.fire("afterExecute", { writer: e });
    });
  }
  /**
   * Splits a block where the document selection is placed, in the way how the <kbd>Enter</kbd> key is expected to work:
   *
   * ```
   * <p>Foo[]bar</p>   ->   <p>Foo</p><p>[]bar</p>
   * <p>Foobar[]</p>   ->   <p>Foobar</p><p>[]</p>
   * <p>Fo[ob]ar</p>   ->   <p>Fo</p><p>[]ar</p>
   * ```
   *
   * In some cases, the split will not happen:
   *
   * ```
   * // The selection parent is a limit element:
   * <figcaption>A[bc]d</figcaption>   ->   <figcaption>A[]d</figcaption>
   *
   * // The selection spans over multiple elements:
   * <h>x[x</h><p>y]y<p>   ->   <h>x</h><p>[]y</p>
   * ```
   *
   * @param writer Writer to use when performing the enter action.
   * @returns Boolean indicating if the block was split.
   */
  enterBlock(e) {
    const t = this.editor.model, i = t.document.selection, s = t.schema, r = i.isCollapsed, o = i.getFirstRange(), a = o.start.parent, l = o.end.parent;
    if (s.isLimit(a) || s.isLimit(l))
      return !r && a == l && t.deleteContent(i), !1;
    if (r) {
      const c = Td(e.model.schema, i.getAttributes());
      return Il(e, o.start), e.setSelectionAttribute(c), !0;
    } else {
      const c = !(o.start.isAtStart && o.end.isAtEnd), u = a == l;
      if (t.deleteContent(i, { leaveUnmerged: c }), c) {
        if (u)
          return Il(e, i.focus), !0;
        e.setSelection(l, 0);
      }
    }
    return !1;
  }
}
function Il(n, e) {
  n.split(e), n.setSelection(e.parent.nextSibling, 0);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const eA = {
  insertParagraph: { isSoft: !1 },
  insertLineBreak: { isSoft: !0 }
};
class Pd extends je {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = this.document;
    let i = !1;
    t.on("keydown", (s, r) => {
      i = r.shiftKey;
    }), t.on("beforeinput", (s, r) => {
      if (!this.isEnabled)
        return;
      let o = r.inputType;
      S.isSafari && i && o == "insertParagraph" && (o = "insertLineBreak");
      const a = r.domEvent, l = eA[o];
      if (!l)
        return;
      const c = new pi(t, "enter", r.targetRanges[0]);
      t.fire(c, new oi(e, a, {
        isSoft: l.isSoft
      })), c.stop.called && s.stop();
    });
  }
  /**
   * @inheritDoc
   */
  observe() {
  }
  /**
   * @inheritDoc
   */
  stopObserving() {
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Zn extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Enter";
  }
  init() {
    const e = this.editor, t = e.editing.view, i = t.document;
    t.addObserver(Pd), e.commands.add("enter", new QC(e)), this.listenTo(i, "enter", (s, r) => {
      i.isComposing || r.preventDefault(), !r.isSoft && (e.execute("enter"), t.scrollToTheSelection());
    }, { priority: "low" });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class tA extends W {
  /**
   * @inheritDoc
   */
  execute() {
    const e = this.editor.model, t = e.document;
    e.change((i) => {
      nA(e, i, t.selection), this.fire("afterExecute", { writer: i });
    });
  }
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this.editor.model, t = e.document;
    this.isEnabled = iA(e.schema, t.selection);
  }
}
function iA(n, e) {
  if (e.rangeCount > 1)
    return !1;
  const t = e.anchor;
  if (!t || !n.checkChild(t, "softBreak"))
    return !1;
  const i = e.getFirstRange(), s = i.start.parent, r = i.end.parent;
  return !((wr(s, n) || wr(r, n)) && s !== r);
}
function nA(n, e, t) {
  const i = t.isCollapsed, s = t.getFirstRange(), r = s.start.parent, o = s.end.parent, a = r == o;
  if (i) {
    const l = Td(n.schema, t.getAttributes());
    Rl(n, e, s.end), e.removeSelectionAttribute(t.getAttributeKeys()), e.setSelectionAttribute(l);
  } else {
    const l = !(s.start.isAtStart && s.end.isAtEnd);
    n.deleteContent(t, { leaveUnmerged: l }), a ? Rl(n, e, t.focus) : l && e.setSelection(o, 0);
  }
}
function Rl(n, e, t) {
  const i = e.createElement("softBreak");
  n.insertContent(i, t), e.setSelection(i, "after");
}
function wr(n, e) {
  return n.is("rootElement") ? !1 : e.isLimit(n) || wr(n.parent, e);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class sA extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ShiftEnter";
  }
  init() {
    const e = this.editor, t = e.model.schema, i = e.conversion, s = e.editing.view, r = s.document;
    t.register("softBreak", {
      allowWhere: "$text",
      isInline: !0
    }), i.for("upcast").elementToElement({
      model: "softBreak",
      view: "br"
    }), i.for("downcast").elementToElement({
      model: "softBreak",
      view: (o, { writer: a }) => a.createEmptyElement("br")
    }), s.addObserver(Pd), e.commands.add("shiftEnter", new tA(e)), this.listenTo(r, "enter", (o, a) => {
      r.isComposing || a.preventDefault(), a.isSoft && (e.execute("shiftEnter"), s.scrollToTheSelection());
    }, { priority: "low" });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class rA extends L() {
  constructor() {
    super(...arguments), this._stack = [];
  }
  /**
   * Adds highlight descriptor to the stack.
   *
   * @fires change:top
   */
  add(e, t) {
    const i = this._stack, s = i[0];
    this._insertDescriptor(e);
    const r = i[0];
    s !== r && !Es(s, r) && this.fire("change:top", {
      oldDescriptor: s,
      newDescriptor: r,
      writer: t
    });
  }
  /**
   * Removes highlight descriptor from the stack.
   *
   * @fires change:top
   * @param id Id of the descriptor to remove.
   */
  remove(e, t) {
    const i = this._stack, s = i[0];
    this._removeDescriptor(e);
    const r = i[0];
    s !== r && !Es(s, r) && this.fire("change:top", {
      oldDescriptor: s,
      newDescriptor: r,
      writer: t
    });
  }
  /**
   * Inserts a given descriptor in correct place in the stack. It also takes care about updating information
   * when descriptor with same id is already present.
   */
  _insertDescriptor(e) {
    const t = this._stack, i = t.findIndex((r) => r.id === e.id);
    if (Es(e, t[i]))
      return;
    i > -1 && t.splice(i, 1);
    let s = 0;
    for (; t[s] && oA(t[s], e); )
      s++;
    t.splice(s, 0, e);
  }
  /**
   * Removes descriptor with given id from the stack.
   *
   * @param id Descriptor's id.
   */
  _removeDescriptor(e) {
    const t = this._stack, i = t.findIndex((s) => s.id === e);
    i > -1 && t.splice(i, 1);
  }
}
function Es(n, e) {
  return n && e && n.priority == e.priority && Sn(n.classes) == Sn(e.classes);
}
function oA(n, e) {
  return n.priority > e.priority ? !0 : n.priority < e.priority ? !1 : Sn(n.classes) > Sn(e.classes);
}
function Sn(n) {
  return Array.isArray(n) ? n.sort().join(",") : n;
}
const aA = '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z"/><path fill-opacity=".256" d="M1 1h14v14H1z"/><g class="ck-icon__selected-indicator"><path d="M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z"/><path fill-opacity=".254" d="M1 1h14v14H1z"/></g></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const lA = "ck-widget", Vl = "ck-widget_selected";
function X(n) {
  return n.is("element") ? !!n.getCustomProperty("widget") : !1;
}
function ho(n, e, t = {}) {
  if (!n.is("containerElement"))
    throw new f("widget-to-widget-wrong-element-type", null, { element: n });
  return e.setAttribute("contenteditable", "false", n), e.addClass(lA, n), e.setCustomProperty("widget", !0, n), n.getFillerOffset = mA, e.setCustomProperty("widgetLabel", [], n), t.label && dA(n, t.label), t.hasSelectionHandle && gA(n, e), hA(n, e), n;
}
function cA(n, e, t) {
  if (e.classes && t.addClass(Q(e.classes), n), e.attributes)
    for (const i in e.attributes)
      t.setAttribute(i, e.attributes[i], n);
}
function uA(n, e, t) {
  if (e.classes && t.removeClass(Q(e.classes), n), e.attributes)
    for (const i in e.attributes)
      t.removeAttribute(i, n);
}
function hA(n, e, t = cA, i = uA) {
  const s = new rA();
  s.on("change:top", (a, l) => {
    l.oldDescriptor && i(n, l.oldDescriptor, l.writer), l.newDescriptor && t(n, l.newDescriptor, l.writer);
  });
  const r = (a, l, c) => s.add(l, c), o = (a, l, c) => s.remove(l, c);
  e.setCustomProperty("addHighlight", r, n), e.setCustomProperty("removeHighlight", o, n);
}
function dA(n, e) {
  n.getCustomProperty("widgetLabel").push(e);
}
function fA(n) {
  return n.getCustomProperty("widgetLabel").reduce((t, i) => typeof i == "function" ? t ? t + ". " + i() : i() : t ? t + ". " + i : i, "");
}
function xd(n, e) {
  const t = n.getSelectedElement();
  if (t) {
    const i = lt(n);
    if (i)
      return e.createRange(e.createPositionAt(t, i));
  }
  return $h(n, e);
}
function eS(n, e) {
  return (t, i) => {
    const { mapper: s, viewPosition: r } = i, o = s.findMappedViewAncestor(r);
    if (!e(o))
      return;
    const a = s.toModelElement(o);
    i.modelPosition = n.createPositionAt(a, r.isAtStart ? "before" : "after");
  };
}
function mA() {
  return null;
}
function gA(n, e) {
  const t = e.createUIElement("div", { class: "ck ck-widget__selection-handle" }, function(i) {
    const s = this.toDomElement(i), r = new pt();
    return r.set("content", aA), r.render(), s.appendChild(r.element), s;
  });
  e.insert(e.createPositionAt(n, 0), t), e.addClass(["ck-widget_with-selection-handle"], n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Je = "widget-type-around";
function kt(n, e, t) {
  return !!n && X(n) && !t.isInline(e);
}
function pA(n) {
  return n.closest(".ck-widget__type-around__button");
}
function wA(n) {
  return n.classList.contains("ck-widget__type-around__button_before") ? "before" : "after";
}
function bA(n, e) {
  const t = n.closest(".ck-widget");
  return e.mapDomToView(t);
}
function lt(n) {
  return n.getAttribute(Je);
}
const _A = '<svg viewBox="0 0 10 8" xmlns="http://www.w3.org/2000/svg"><path d="M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Sd = ["before", "after"], vA = new DOMParser().parseFromString(_A, "image/svg+xml").firstChild, Ol = "ck-widget__type-around_disabled";
class yA extends _ {
  constructor() {
    super(...arguments), this._currentFakeCaretModelElement = null;
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "WidgetTypeAround";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Zn, Vt];
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.editing.view;
    this.on("change:isEnabled", (i, s, r) => {
      t.change((o) => {
        for (const a of t.document.roots)
          r ? o.removeClass(Ol, a) : o.addClass(Ol, a);
      }), r || e.model.change((o) => {
        o.removeSelectionAttribute(Je);
      });
    }), this._enableTypeAroundUIInjection(), this._enableInsertingParagraphsOnButtonClick(), this._enableInsertingParagraphsOnEnterKeypress(), this._enableInsertingParagraphsOnTypingKeystroke(), this._enableTypeAroundFakeCaretActivationUsingKeyboardArrows(), this._enableDeleteIntegration(), this._enableInsertContentIntegration(), this._enableInsertObjectIntegration(), this._enableDeleteContentIntegration();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this._currentFakeCaretModelElement = null;
  }
  /**
   * Inserts a new paragraph next to a widget element with the selection anchored in it.
   *
   * **Note**: This method is heavily user-oriented and will both focus the editing view and scroll
   * the viewport to the selection in the inserted paragraph.
   *
   * @param widgetModelElement The model widget element next to which a paragraph is inserted.
   * @param position The position where the paragraph is inserted. Either `'before'` or `'after'` the widget.
   */
  _insertParagraph(e, t) {
    const i = this.editor, s = i.editing.view, r = i.model.schema.getAttributesWithProperty(e, "copyOnReplace", !0);
    i.execute("insertParagraph", {
      position: i.model.createPositionAt(e, t),
      attributes: r
    }), s.focus(), s.scrollToTheSelection();
  }
  /**
   * A wrapper for the {@link module:utils/emittermixin~Emitter#listenTo} method that executes the callbacks only
   * when the plugin {@link #isEnabled is enabled}.
   *
   * @param emitter The object that fires the event.
   * @param event The name of the event.
   * @param callback The function to be called on event.
   * @param options Additional options.
   * @param options.priority The priority of this event callback. The higher the priority value the sooner
   * the callback will be fired. Events having the same priority are called in the order they were added.
   */
  _listenToIfEnabled(e, t, i, s) {
    this.listenTo(e, t, (...r) => {
      this.isEnabled && i(...r);
    }, s);
  }
  /**
   * Similar to {@link #_insertParagraph}, this method inserts a paragraph except that it
   * does not expect a position. Instead, it performs the insertion next to a selected widget
   * according to the `widget-type-around` model selection attribute value (fake caret position).
   *
   * Because this method requires the `widget-type-around` attribute to be set,
   * the insertion can only happen when the widget's fake caret is active (e.g. activated
   * using the keyboard).
   *
   * @returns Returns `true` when the paragraph was inserted (the attribute was present) and `false` otherwise.
   */
  _insertParagraphAccordingToFakeCaretPosition() {
    const i = this.editor.model.document.selection, s = lt(i);
    if (!s)
      return !1;
    const r = i.getSelectedElement();
    return this._insertParagraph(r, s), !0;
  }
  /**
   * Creates a listener in the editing conversion pipeline that injects the widget type around
   * UI into every single widget instance created in the editor.
   *
   * The UI is delivered as a {@link module:engine/view/uielement~UIElement}
   * wrapper which renders DOM buttons that users can use to insert paragraphs.
   */
  _enableTypeAroundUIInjection() {
    const e = this.editor, t = e.model.schema, i = e.locale.t, s = {
      before: i("Insert paragraph before block"),
      after: i("Insert paragraph after block")
    };
    e.editing.downcastDispatcher.on("insert", (r, o, a) => {
      const l = a.mapper.toViewElement(o.item);
      l && kt(l, o.item, t) && (kA(a.writer, s, l), l.getCustomProperty("widgetLabel").push(() => this.isEnabled ? i("Press Enter to type after or press Shift + Enter to type before the widget") : ""));
    }, { priority: "low" });
  }
  /**
   * Brings support for the fake caret that appears when either:
   *
   * * the selection moves to a widget from a position next to it using arrow keys,
   * * the arrow key is pressed when the widget is already selected.
   *
   * The fake caret lets the user know that they can start typing or just press
   * <kbd>Enter</kbd> to insert a paragraph at the position next to a widget as suggested by the fake caret.
   *
   * The fake caret disappears when the user changes the selection or the editor
   * gets blurred.
   *
   * The whole idea is as follows:
   *
   * 1. A user does one of the 2 scenarios described at the beginning.
   * 2. The "keydown" listener is executed and the decision is made whether to show or hide the fake caret.
   * 3. If it should show up, the `widget-type-around` model selection attribute is set indicating
   *    on which side of the widget it should appear.
   * 4. The selection dispatcher reacts to the selection attribute and sets CSS classes responsible for the
   *    fake caret on the view widget.
   * 5. If the fake caret should disappear, the selection attribute is removed and the dispatcher
   *    does the CSS class clean-up in the view.
   * 6. Additionally, `change:range` and `FocusTracker#isFocused` listeners also remove the selection
   *    attribute (the former also removes widget CSS classes).
   */
  _enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {
    const e = this.editor, t = e.model, i = t.document.selection, s = t.schema, r = e.editing.view;
    this._listenToIfEnabled(r.document, "arrowKey", (a, l) => {
      this._handleArrowKeyPress(a, l);
    }, { context: [X, "$text"], priority: "high" }), this._listenToIfEnabled(i, "change:range", (a, l) => {
      l.directChange && e.model.change((c) => {
        c.removeSelectionAttribute(Je);
      });
    }), this._listenToIfEnabled(t.document, "change:data", () => {
      const a = i.getSelectedElement();
      if (a) {
        const l = e.editing.mapper.toViewElement(a);
        if (kt(l, a, s))
          return;
      }
      e.model.change((l) => {
        l.removeSelectionAttribute(Je);
      });
    }), this._listenToIfEnabled(e.editing.downcastDispatcher, "selection", (a, l, c) => {
      const u = c.writer;
      if (this._currentFakeCaretModelElement) {
        const p = c.mapper.toViewElement(this._currentFakeCaretModelElement);
        p && (u.removeClass(Sd.map(o), p), this._currentFakeCaretModelElement = null);
      }
      const h = l.selection.getSelectedElement();
      if (!h)
        return;
      const d = c.mapper.toViewElement(h);
      if (!kt(d, h, s))
        return;
      const m = lt(l.selection);
      m && (u.addClass(o(m), d), this._currentFakeCaretModelElement = h);
    }), this._listenToIfEnabled(e.ui.focusTracker, "change:isFocused", (a, l, c) => {
      c || e.model.change((u) => {
        u.removeSelectionAttribute(Je);
      });
    });
    function o(a) {
      return `ck-widget_type-around_show-fake-caret_${a}`;
    }
  }
  /**
   * A listener executed on each "keydown" in the view document, a part of
   * {@link #_enableTypeAroundFakeCaretActivationUsingKeyboardArrows}.
   *
   * It decides whether the arrow keypress should activate the fake caret or not (also whether it should
   * be deactivated).
   *
   * The fake caret activation is done by setting the `widget-type-around` model selection attribute
   * in this listener, and stopping and preventing the event that would normally be handled by the widget
   * plugin that is responsible for the regular keyboard navigation near/across all widgets (that
   * includes inline widgets, which are ignored by the widget type around plugin).
   */
  _handleArrowKeyPress(e, t) {
    const i = this.editor, s = i.model, r = s.document.selection, o = s.schema, a = i.editing.view, l = t.keyCode, c = d_(l, i.locale.contentLanguageDirection), u = a.document.selection.getSelectedElement(), h = i.editing.mapper.toModelElement(u);
    let d;
    kt(u, h, o) ? d = this._handleArrowKeyPressOnSelectedWidget(c) : r.isCollapsed ? d = this._handleArrowKeyPressWhenSelectionNextToAWidget(c) : t.shiftKey || (d = this._handleArrowKeyPressWhenNonCollapsedSelection(c)), d && (t.preventDefault(), e.stop());
  }
  /**
   * Handles the keyboard navigation on "keydown" when a widget is currently selected and activates or deactivates
   * the fake caret for that widget, depending on the current value of the `widget-type-around` model
   * selection attribute and the direction of the pressed arrow key.
   *
   * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement
   * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.
   * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should
   * process the event any further. Returns `false` otherwise.
   */
  _handleArrowKeyPressOnSelectedWidget(e) {
    const i = this.editor.model, s = i.document.selection, r = lt(s);
    return i.change((o) => {
      if (r) {
        if (!(r === (e ? "after" : "before")))
          return o.removeSelectionAttribute(Je), !0;
      } else
        return o.setSelectionAttribute(Je, e ? "after" : "before"), !0;
      return !1;
    });
  }
  /**
   * Handles the keyboard navigation on "keydown" when **no** widget is selected but the selection is **directly** next
   * to one and upon the fake caret should become active for this widget upon arrow keypress
   * (AKA entering/selecting the widget).
   *
   * **Note**: This code mirrors the implementation from the widget plugin but also adds the selection attribute.
   * Unfortunately, there is no safe way to let the widget plugin do the selection part first and then just set the
   * selection attribute here in the widget type around plugin. This is why this code must duplicate some from the widget plugin.
   *
   * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement
   * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.
   * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should
   * process the event any further. Returns `false` otherwise.
   */
  _handleArrowKeyPressWhenSelectionNextToAWidget(e) {
    const t = this.editor, i = t.model, s = i.schema, r = t.plugins.get("Widget"), o = r._getObjectElementNextToSelection(e), a = t.editing.mapper.toViewElement(o);
    return kt(a, o, s) ? (i.change((l) => {
      r._setSelectionOverElement(o), l.setSelectionAttribute(Je, e ? "before" : "after");
    }), !0) : !1;
  }
  /**
   * Handles the keyboard navigation on "keydown" when a widget is currently selected (together with some other content)
   * and the widget is the first or last element in the selection. It activates or deactivates the fake caret for that widget.
   *
   * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement
   * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.
   * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should
   * process the event any further. Returns `false` otherwise.
   */
  _handleArrowKeyPressWhenNonCollapsedSelection(e) {
    const t = this.editor, i = t.model, s = i.schema, r = t.editing.mapper, o = i.document.selection, a = e ? o.getLastPosition().nodeBefore : o.getFirstPosition().nodeAfter, l = r.toViewElement(a);
    return kt(l, a, s) ? (i.change((c) => {
      c.setSelection(a, "on"), c.setSelectionAttribute(Je, e ? "after" : "before");
    }), !0) : !1;
  }
  /**
   * Registers a `mousedown` listener for the view document which intercepts events
   * coming from the widget type around UI, which happens when a user clicks one of the buttons
   * that insert a paragraph next to a widget.
   */
  _enableInsertingParagraphsOnButtonClick() {
    const e = this.editor, t = e.editing.view;
    this._listenToIfEnabled(t.document, "mousedown", (i, s) => {
      const r = pA(s.domTarget);
      if (!r)
        return;
      const o = wA(r), a = bA(r, t.domConverter), l = e.editing.mapper.toModelElement(a);
      this._insertParagraph(l, o), s.preventDefault(), i.stop();
    });
  }
  /**
   * Creates the <kbd>Enter</kbd> key listener on the view document that allows the user to insert a paragraph
   * near the widget when either:
   *
   * * The fake caret was first activated using the arrow keys,
   * * The entire widget is selected in the model.
   *
   * In the first case, the new paragraph is inserted according to the `widget-type-around` selection
   * attribute (see {@link #_handleArrowKeyPress}).
   *
   * In the second case, the new paragraph is inserted based on whether a soft (<kbd>Shift</kbd>+<kbd>Enter</kbd>) keystroke
   * was pressed or not.
   */
  _enableInsertingParagraphsOnEnterKeypress() {
    const e = this.editor, t = e.model.document.selection, i = e.editing.view;
    this._listenToIfEnabled(i.document, "enter", (s, r) => {
      if (s.eventPhase != "atTarget")
        return;
      const o = t.getSelectedElement(), a = e.editing.mapper.toViewElement(o), l = e.model.schema;
      let c;
      this._insertParagraphAccordingToFakeCaretPosition() ? c = !0 : kt(a, o, l) && (this._insertParagraph(o, r.isSoft ? "before" : "after"), c = !0), c && (r.preventDefault(), s.stop());
    }, { context: X });
  }
  /**
   * Similar to the {@link #_enableInsertingParagraphsOnEnterKeypress}, it allows the user
   * to insert a paragraph next to a widget when the fake caret was activated using arrow
   * keys but it responds to typing instead of <kbd>Enter</kbd>.
   *
   * Listener enabled by this method will insert a new paragraph according to the `widget-type-around`
   * model selection attribute as the user simply starts typing, which creates the impression that the fake caret
   * behaves like a real one rendered by the browser (AKA your text appears where the caret was).
   *
   * **Note**: At the moment this listener creates 2 undo steps: one for the `insertParagraph` command
   * and another one for actual typing. It is not a disaster but this may need to be fixed
   * sooner or later.
   */
  _enableInsertingParagraphsOnTypingKeystroke() {
    const t = this.editor.editing.view.document;
    this._listenToIfEnabled(t, "insertText", (i, s) => {
      this._insertParagraphAccordingToFakeCaretPosition() && (s.selection = t.selection);
    }, { priority: "high" }), S.isAndroid ? this._listenToIfEnabled(t, "keydown", (i, s) => {
      s.keyCode == 229 && this._insertParagraphAccordingToFakeCaretPosition();
    }) : this._listenToIfEnabled(t, "compositionstart", () => {
      this._insertParagraphAccordingToFakeCaretPosition();
    }, { priority: "high" });
  }
  /**
   * It creates a "delete" event listener on the view document to handle cases when the <kbd>Delete</kbd> or <kbd>Backspace</kbd>
   * is pressed and the fake caret is currently active.
   *
   * The fake caret should create an illusion of a real browser caret so that when it appears before or after
   * a widget, pressing <kbd>Delete</kbd> or <kbd>Backspace</kbd> should remove a widget or delete the content
   * before or after a widget (depending on the content surrounding the widget).
   */
  _enableDeleteIntegration() {
    const e = this.editor, t = e.editing.view, i = e.model, s = i.schema;
    this._listenToIfEnabled(t.document, "delete", (r, o) => {
      if (r.eventPhase != "atTarget")
        return;
      const a = lt(i.document.selection);
      if (!a)
        return;
      const l = o.direction, c = i.document.selection.getSelectedElement(), u = a === "before", h = l == "forward";
      if (u === h)
        e.execute("delete", {
          selection: i.createSelection(c, "on")
        });
      else {
        const m = s.getNearestSelectionRange(i.createPositionAt(c, a), l);
        if (m)
          if (!m.isCollapsed)
            i.change((p) => {
              p.setSelection(m), e.execute(h ? "deleteForward" : "delete");
            });
          else {
            const p = i.createSelection(m.start);
            if (i.modifySelection(p, { direction: l }), !p.focus.isEqual(m.start))
              i.change((b) => {
                b.setSelection(m), e.execute(h ? "deleteForward" : "delete");
              });
            else {
              const b = EA(s, m.start.parent);
              i.deleteContent(i.createSelection(b, "on"), {
                doNotAutoparagraph: !0
              });
            }
          }
      }
      o.preventDefault(), r.stop();
    }, { context: X });
  }
  /**
   * Attaches the {@link module:engine/model/model~Model#event:insertContent} event listener that, for instance, allows the user to paste
   * content near a widget when the fake caret is first activated using the arrow keys.
   *
   * The content is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).
   */
  _enableInsertContentIntegration() {
    const e = this.editor, t = this.editor.model, i = t.document.selection;
    this._listenToIfEnabled(e.model, "insertContent", (s, [r, o]) => {
      if (o && !o.is("documentSelection"))
        return;
      const a = lt(i);
      if (a)
        return s.stop(), t.change((l) => {
          const c = i.getSelectedElement(), u = t.createPositionAt(c, a), h = l.createSelection(u), d = t.insertContent(r, h);
          return l.setSelection(h), d;
        });
    }, { priority: "high" });
  }
  /**
   * Attaches the {@link module:engine/model/model~Model#event:insertObject} event listener that modifies the
   * `options.findOptimalPosition`parameter to position of fake caret in relation to selected element
   * to reflect user's intent of desired insertion position.
   *
   * The object is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).
   */
  _enableInsertObjectIntegration() {
    const e = this.editor, i = this.editor.model.document.selection;
    this._listenToIfEnabled(e.model, "insertObject", (s, r) => {
      const [, o, a = {}] = r;
      if (o && !o.is("documentSelection"))
        return;
      const l = lt(i);
      l && (a.findOptimalPosition = l, r[3] = a);
    }, { priority: "high" });
  }
  /**
   * Attaches the {@link module:engine/model/model~Model#event:deleteContent} event listener to block the event when the fake
   * caret is active.
   *
   * This is required for cases that trigger {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}
   * before calling {@link module:engine/model/model~Model#insertContent `model.insertContent()`} like, for instance,
   * plain text pasting.
   */
  _enableDeleteContentIntegration() {
    const e = this.editor, i = this.editor.model.document.selection;
    this._listenToIfEnabled(e.model, "deleteContent", (s, [r]) => {
      if (r && !r.is("documentSelection"))
        return;
      lt(i) && s.stop();
    }, { priority: "high" });
  }
}
function kA(n, e, t) {
  const i = n.createUIElement("div", {
    class: "ck ck-reset_all ck-widget__type-around"
  }, function(s) {
    const r = this.toDomElement(s);
    return CA(r, e), AA(r), r;
  });
  n.insert(n.createPositionAt(t, "end"), i);
}
function CA(n, e) {
  for (const t of Sd) {
    const i = new Ee({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-widget__type-around__button",
          `ck-widget__type-around__button_${t}`
        ],
        title: e[t],
        "aria-hidden": "true"
      },
      children: [
        n.ownerDocument.importNode(vA, !0)
      ]
    });
    n.appendChild(i.render());
  }
}
function AA(n) {
  const e = new Ee({
    tag: "div",
    attributes: {
      class: [
        "ck",
        "ck-widget__type-around__fake-caret"
      ]
    }
  });
  n.appendChild(e.render());
}
function EA(n, e) {
  let t = e;
  for (const i of e.getAncestors({ parentFirst: !0 })) {
    if (i.childCount > 1 || n.isLimit(i))
      break;
    t = i;
  }
  return t;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function TA(n) {
  const e = n.model;
  return (t, i) => {
    const s = i.keyCode == R.arrowup, r = i.keyCode == R.arrowdown, o = i.shiftKey, a = e.document.selection;
    if (!s && !r)
      return;
    const l = r;
    if (o && SA(a, l))
      return;
    const c = PA(n, a, l);
    if (c) {
      if (c.isCollapsed) {
        if (a.isCollapsed)
          return;
        if (o)
          return;
      }
      (c.isCollapsed || xA(n, c, l)) && (e.change((u) => {
        const h = l ? c.end : c.start;
        if (o) {
          const d = e.createSelection(a.anchor);
          d.setFocus(h), u.setSelection(d);
        } else
          u.setSelection(h);
      }), t.stop(), i.preventDefault(), i.stopPropagation());
    }
  };
}
function PA(n, e, t) {
  const i = n.model;
  if (t) {
    const s = e.isCollapsed ? e.focus : e.getLastPosition(), r = Ml(i, s, "forward");
    if (!r)
      return null;
    const o = i.createRange(s, r), a = Bl(i.schema, o, "backward");
    return a ? i.createRange(s, a) : null;
  } else {
    const s = e.isCollapsed ? e.focus : e.getFirstPosition(), r = Ml(i, s, "backward");
    if (!r)
      return null;
    const o = i.createRange(r, s), a = Bl(i.schema, o, "forward");
    return a ? i.createRange(a, s) : null;
  }
}
function Ml(n, e, t) {
  const i = n.schema, s = n.createRangeIn(e.root), r = t == "forward" ? "elementStart" : "elementEnd";
  for (const { previousPosition: o, item: a, type: l } of s.getWalker({ startPosition: e, direction: t })) {
    if (i.isLimit(a) && !i.isInline(a))
      return o;
    if (l == r && i.isBlock(a))
      return null;
  }
  return null;
}
function Bl(n, e, t) {
  const i = t == "backward" ? e.end : e.start;
  if (n.checkChild(i, "$text"))
    return i;
  for (const { nextPosition: s } of e.getWalker({ direction: t }))
    if (n.checkChild(s, "$text"))
      return s;
  return null;
}
function xA(n, e, t) {
  const i = n.model, s = n.view.domConverter;
  if (t) {
    const c = i.createSelection(e.start);
    i.modifySelection(c), !c.focus.isAtEnd && !e.start.isEqual(c.focus) && (e = i.createRange(c.focus, e.end));
  }
  const r = n.mapper.toViewRange(e), o = s.viewRangeToDom(r), a = M.getDomRangeRects(o);
  let l;
  for (const c of a) {
    if (l === void 0) {
      l = Math.round(c.bottom);
      continue;
    }
    if (Math.round(c.top) >= l)
      return !1;
    l = Math.max(l, Math.round(c.bottom));
  }
  return !0;
}
function SA(n, e) {
  return !n.isCollapsed && n.isBackward == e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Gi extends _ {
  constructor() {
    super(...arguments), this._previouslySelected = /* @__PURE__ */ new Set();
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Widget";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [yA, Vt];
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.editing.view, i = t.document;
    this.editor.editing.downcastDispatcher.on("selection", (s, r, o) => {
      const a = o.writer, l = r.selection;
      if (l.isCollapsed)
        return;
      const c = l.getSelectedElement();
      if (!c)
        return;
      const u = e.editing.mapper.toViewElement(c);
      X(u) && o.consumable.consume(l, "selection") && a.setSelection(a.createRangeOn(u), {
        fake: !0,
        label: fA(u)
      });
    }), this.editor.editing.downcastDispatcher.on("selection", (s, r, o) => {
      this._clearPreviouslySelectedWidgets(o.writer);
      const a = o.writer, l = a.document.selection;
      let c = null;
      for (const u of l.getRanges())
        for (const h of u) {
          const d = h.item;
          X(d) && !RA(d, c) && (a.addClass(Vl, d), this._previouslySelected.add(d), c = d);
        }
    }, { priority: "low" }), t.addObserver(qn), this.listenTo(i, "mousedown", (...s) => this._onMousedown(...s)), this.listenTo(i, "arrowKey", (...s) => {
      this._handleSelectionChangeOnArrowKeyPress(...s);
    }, { context: [X, "$text"] }), this.listenTo(i, "arrowKey", (...s) => {
      this._preventDefaultOnArrowKeyPress(...s);
    }, { context: "$root" }), this.listenTo(i, "arrowKey", TA(this.editor.editing), { context: "$text" }), this.listenTo(i, "delete", (s, r) => {
      this._handleDelete(r.direction == "forward") && (r.preventDefault(), s.stop());
    }, { context: "$root" });
  }
  /**
   * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.
   */
  _onMousedown(e, t) {
    const i = this.editor, s = i.editing.view, r = s.document;
    let o = t.target;
    if (IA(o)) {
      if ((S.isSafari || S.isGecko) && t.domEvent.detail >= 3) {
        const l = i.editing.mapper, c = o.is("attributeElement") ? o.findAncestor((h) => !h.is("attributeElement")) : o, u = l.toModelElement(c);
        t.preventDefault(), this.editor.model.change((h) => {
          h.setSelection(u, "in");
        });
      }
      return;
    }
    if (!X(o) && (o = o.findAncestor(X), !o))
      return;
    S.isAndroid && t.preventDefault(), r.isFocused || s.focus();
    const a = i.editing.mapper.toModelElement(o);
    this._setSelectionOverElement(a);
  }
  /**
   * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and changes
   * the model selection when:
   *
   * * arrow key is pressed when the widget is selected,
   * * the selection is next to a widget and the widget should become selected upon the arrow key press.
   *
   * See {@link #_preventDefaultOnArrowKeyPress}.
   */
  _handleSelectionChangeOnArrowKeyPress(e, t) {
    const i = t.keyCode, s = this.editor.model, r = s.schema, o = s.document.selection, a = o.getSelectedElement(), l = qu(i, this.editor.locale.contentLanguageDirection), c = l == "down" || l == "right", u = l == "up" || l == "down";
    if (a && r.isObject(a)) {
      const d = c ? o.getLastPosition() : o.getFirstPosition(), m = r.getNearestSelectionRange(d, c ? "forward" : "backward");
      m && (s.change((p) => {
        p.setSelection(m);
      }), t.preventDefault(), e.stop());
      return;
    }
    if (!o.isCollapsed && !t.shiftKey) {
      const d = o.getFirstPosition(), m = o.getLastPosition(), p = d.nodeAfter, b = m.nodeBefore;
      (p && r.isObject(p) || b && r.isObject(b)) && (s.change((C) => {
        C.setSelection(c ? m : d);
      }), t.preventDefault(), e.stop());
      return;
    }
    if (!o.isCollapsed)
      return;
    const h = this._getObjectElementNextToSelection(c);
    if (h && r.isObject(h)) {
      if (r.isInline(h) && u)
        return;
      this._setSelectionOverElement(h), t.preventDefault(), e.stop();
    }
  }
  /**
   * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and prevents
   * the default browser behavior to make sure the fake selection is not being moved from a fake selection
   * container.
   *
   * See {@link #_handleSelectionChangeOnArrowKeyPress}.
   */
  _preventDefaultOnArrowKeyPress(e, t) {
    const i = this.editor.model, s = i.schema, r = i.document.selection.getSelectedElement();
    r && s.isObject(r) && (t.preventDefault(), e.stop());
  }
  /**
   * Handles delete keys: backspace and delete.
   *
   * @param isForward Set to true if delete was performed in forward direction.
   * @returns Returns `true` if keys were handled correctly.
   */
  _handleDelete(e) {
    const i = this.editor.model.document.selection;
    if (!this.editor.model.canEditAt(i) || !i.isCollapsed)
      return;
    const s = this._getObjectElementNextToSelection(e);
    if (s)
      return this.editor.model.change((r) => {
        let o = i.anchor.parent;
        for (; o.isEmpty; ) {
          const a = o;
          o = a.parent, r.remove(a);
        }
        this._setSelectionOverElement(s);
      }), !0;
  }
  /**
   * Sets {@link module:engine/model/selection~Selection document's selection} over given element.
   *
   * @internal
   */
  _setSelectionOverElement(e) {
    this.editor.model.change((t) => {
      t.setSelection(t.createRangeOn(e));
    });
  }
  /**
   * Checks if {@link module:engine/model/element~Element element} placed next to the current
   * {@link module:engine/model/selection~Selection model selection} exists and is marked in
   * {@link module:engine/model/schema~Schema schema} as `object`.
   *
   * @internal
   * @param forward Direction of checking.
   */
  _getObjectElementNextToSelection(e) {
    const t = this.editor.model, i = t.schema, s = t.document.selection, r = t.createSelection(s);
    if (t.modifySelection(r, { direction: e ? "forward" : "backward" }), r.isEqual(s))
      return null;
    const o = e ? r.focus.nodeBefore : r.focus.nodeAfter;
    return o && i.isObject(o) ? o : null;
  }
  /**
   * Removes CSS class from previously selected widgets.
   */
  _clearPreviouslySelectedWidgets(e) {
    for (const t of this._previouslySelected)
      e.removeClass(Vl, t);
    this._previouslySelected.clear();
  }
}
function IA(n) {
  let e = n;
  for (; e; ) {
    if (e.is("editableElement") && !e.is("rootElement"))
      return !0;
    if (X(e))
      return !1;
    e = e.parent;
  }
  return !1;
}
function RA(n, e) {
  return e ? Array.from(n.getAncestors()).includes(e) : !1;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Dl extends _ {
  constructor() {
    super(...arguments), this._toolbarDefinitions = /* @__PURE__ */ new Map();
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [xn];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "WidgetToolbarRepository";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    if (e.plugins.has("BalloonToolbar")) {
      const t = e.plugins.get("BalloonToolbar");
      this.listenTo(t, "show", (i) => {
        VA(e.editing.view.document.selection) && i.stop();
      }, { priority: "high" });
    }
    this._balloon = this.editor.plugins.get("ContextualBalloon"), this.on("change:isEnabled", () => {
      this._updateToolbarsVisibility();
    }), this.listenTo(e.ui, "update", () => {
      this._updateToolbarsVisibility();
    }), this.listenTo(e.ui.focusTracker, "change:isFocused", () => {
      this._updateToolbarsVisibility();
    }, { priority: "low" });
  }
  destroy() {
    super.destroy();
    for (const e of this._toolbarDefinitions.values())
      e.view.destroy();
  }
  /**
   * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked
   * `getRelatedElement` function. Toolbar items are gathered from `items` array.
   * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.
   *
   * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}
   * callback (or later) to make sure that the given toolbar items were already registered by other plugins.
   *
   * @param toolbarId An id for the toolbar. Used to
   * @param options.ariaLabel Label used by assistive technologies to describe this toolbar element.
   * @param options.items Array of toolbar items.
   * @param options.getRelatedElement Callback which returns an element the toolbar should be attached to.
   * @param options.balloonClassName CSS class for the widget balloon.
   */
  register(e, { ariaLabel: t, items: i, getRelatedElement: s, balloonClassName: r = "ck-toolbar-container" }) {
    if (!i.length) {
      G("widget-toolbar-no-items", { toolbarId: e });
      return;
    }
    const o = this.editor, a = o.t, l = new oo(o.locale);
    if (l.ariaLabel = t || a("Widget toolbar"), this._toolbarDefinitions.has(e))
      throw new f("widget-toolbar-duplicated", this, { toolbarId: e });
    const c = {
      view: l,
      getRelatedElement: s,
      balloonClassName: r,
      itemsConfig: i,
      initialized: !1
    };
    o.ui.addToolbar(l, {
      isContextual: !0,
      beforeFocus: () => {
        const u = s(o.editing.view.document.selection);
        u && this._showToolbar(c, u);
      },
      afterBlur: () => {
        this._hideToolbar(c);
      }
    }), this._toolbarDefinitions.set(e, c);
  }
  /**
   * Iterates over stored toolbars and makes them visible or hidden.
   */
  _updateToolbarsVisibility() {
    let e = 0, t = null, i = null;
    for (const s of this._toolbarDefinitions.values()) {
      const r = s.getRelatedElement(this.editor.editing.view.document.selection);
      if (!this.isEnabled || !r)
        this._isToolbarInBalloon(s) && this._hideToolbar(s);
      else if (!this.editor.ui.focusTracker.isFocused)
        this._isToolbarVisible(s) && this._hideToolbar(s);
      else {
        const o = r.getAncestors().length;
        o > e && (e = o, t = r, i = s);
      }
    }
    i && this._showToolbar(i, t);
  }
  /**
   * Hides the given toolbar.
   */
  _hideToolbar(e) {
    this._balloon.remove(e.view), this.stopListening(this._balloon, "change:visibleView");
  }
  /**
   * Shows up the toolbar if the toolbar is not visible.
   * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.
   *
   * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view
   * should be still visible after the {@link module:ui/editorui/editorui~EditorUI#event:update}.
   */
  _showToolbar(e, t) {
    this._isToolbarVisible(e) ? Fl(this.editor, t) : this._isToolbarInBalloon(e) || (e.initialized || (e.initialized = !0, e.view.fillFromConfig(e.itemsConfig, this.editor.ui.componentFactory)), this._balloon.add({
      view: e.view,
      position: Id(this.editor, t),
      balloonClassName: e.balloonClassName
    }), this.listenTo(this._balloon, "change:visibleView", () => {
      for (const i of this._toolbarDefinitions.values())
        if (this._isToolbarVisible(i)) {
          const s = i.getRelatedElement(this.editor.editing.view.document.selection);
          Fl(this.editor, s);
        }
    }));
  }
  _isToolbarVisible(e) {
    return this._balloon.visibleView === e.view;
  }
  _isToolbarInBalloon(e) {
    return this._balloon.hasView(e.view);
  }
}
function Fl(n, e) {
  const t = n.plugins.get("ContextualBalloon"), i = Id(n, e);
  t.updatePosition(i);
}
function Id(n, e) {
  const t = n.editing.view, i = ae.defaultPositions;
  return {
    target: t.domConverter.mapViewToDom(e),
    positions: [
      i.northArrowSouth,
      i.northArrowSouthWest,
      i.northArrowSouthEast,
      i.southArrowNorth,
      i.southArrowNorthWest,
      i.southArrowNorthEast,
      i.viewportStickyNorth
    ]
  };
}
function VA(n) {
  const e = n.getSelectedElement();
  return !!(e && X(e));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class OA extends H() {
  /**
   * @param options Resizer options.
   */
  constructor(e) {
    super(), this.set("activeHandlePosition", null), this.set("proposedWidthPercents", null), this.set("proposedWidth", null), this.set("proposedHeight", null), this.set("proposedHandleHostWidth", null), this.set("proposedHandleHostHeight", null), this._options = e, this._referenceCoordinates = null;
  }
  /**
   * The original width (pixels) of the resized object when the resize process was started.
   */
  get originalWidth() {
    return this._originalWidth;
  }
  /**
   * The original height (pixels) of the resized object when the resize process was started.
   */
  get originalHeight() {
    return this._originalHeight;
  }
  /**
   * The original width (percents) of the resized object when the resize process was started.
   */
  get originalWidthPercents() {
    return this._originalWidthPercents;
  }
  /**
   * A width to height ratio of the resized image.
   */
  get aspectRatio() {
    return this._aspectRatio;
  }
  /**
   *
   * @param domResizeHandle The handle used to calculate the reference point.
   */
  begin(e, t, i) {
    const s = new M(t);
    this.activeHandlePosition = FA(e), this._referenceCoordinates = BA(t, NA(this.activeHandlePosition)), this._originalWidth = s.width, this._originalHeight = s.height, this._aspectRatio = s.width / s.height;
    const r = i.style.width;
    r && r.match(/^\d+(\.\d*)?%$/) ? this._originalWidthPercents = parseFloat(r) : this._originalWidthPercents = MA(i, s);
  }
  update(e) {
    this.proposedWidth = e.width, this.proposedHeight = e.height, this.proposedWidthPercents = e.widthPercents, this.proposedHandleHostWidth = e.handleHostWidth, this.proposedHandleHostHeight = e.handleHostHeight;
  }
}
function MA(n, e) {
  const t = n.parentElement;
  let i = parseFloat(t.ownerDocument.defaultView.getComputedStyle(t).width);
  const s = 5;
  let r = 0, o = t;
  for (; isNaN(i); ) {
    if (o = o.parentElement, ++r > s)
      return 0;
    i = parseFloat(t.ownerDocument.defaultView.getComputedStyle(o).width);
  }
  return e.width / i * 100;
}
function BA(n, e) {
  const t = new M(n), i = e.split("-"), s = {
    x: i[1] == "right" ? t.right : t.left,
    y: i[0] == "bottom" ? t.bottom : t.top
  };
  return s.x += n.ownerDocument.defaultView.scrollX, s.y += n.ownerDocument.defaultView.scrollY, s;
}
function DA(n) {
  return `ck-widget__resizer__handle-${n}`;
}
function FA(n) {
  const e = ["top-left", "top-right", "bottom-right", "bottom-left"];
  for (const t of e)
    if (n.classList.contains(DA(t)))
      return t;
}
function NA(n) {
  const e = n.split("-"), t = {
    top: "bottom",
    bottom: "top",
    left: "right",
    right: "left"
  };
  return `${t[e[0]]}-${t[e[1]]}`;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class LA extends E {
  constructor() {
    super();
    const e = this.bindTemplate;
    this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-size-view",
          e.to("_viewPosition", (t) => t ? `ck-orientation-${t}` : "")
        ],
        style: {
          display: e.if("_isVisible", "none", (t) => !t)
        }
      },
      children: [{
        text: e.to("_label")
      }]
    });
  }
  /**
   * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.
   *
   * @internal
   * @param options An object defining the resizer options, used for setting the proper size label.
   * @param resizeState The `ResizeState` class instance, used for keeping the `SizeView` state up to date.
   */
  _bindToState(e, t) {
    this.bind("_isVisible").to(t, "proposedWidth", t, "proposedHeight", (i, s) => i !== null && s !== null), this.bind("_label").to(t, "proposedHandleHostWidth", t, "proposedHandleHostHeight", t, "proposedWidthPercents", (i, s, r) => e.unit === "px" ? `${i}×${s}` : `${r}%`), this.bind("_viewPosition").to(
      t,
      "activeHandlePosition",
      t,
      "proposedHandleHostWidth",
      t,
      "proposedHandleHostHeight",
      // If the widget is too small to contain the size label, display the label above.
      (i, s, r) => s < 50 || r < 50 ? "above-center" : i
    );
  }
  /**
   * A method used for cleaning up. It removes the bindings and hides the view.
   *
   * @internal
   */
  _dismiss() {
    this.unbind(), this._isVisible = !1;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Nl extends H() {
  /**
   * @param options Resizer options.
   */
  constructor(e) {
    super(), this._viewResizerWrapper = null, this._options = e, this.set("isEnabled", !0), this.set("isSelected", !1), this.bind("isVisible").to(this, "isEnabled", this, "isSelected", (t, i) => t && i), this.decorate("begin"), this.decorate("cancel"), this.decorate("commit"), this.decorate("updateSize"), this.on("commit", (t) => {
      !this.state.proposedWidth && !this.state.proposedWidthPercents && (this._cleanup(), t.stop());
    }, { priority: "high" });
  }
  /**
   * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.
   *
   * Note that a new state is created for each resize transaction.
   */
  get state() {
    return this._state;
  }
  /**
   * Makes resizer visible in the UI.
   */
  show() {
    this._options.editor.editing.view.change((t) => {
      t.removeClass("ck-hidden", this._viewResizerWrapper);
    });
  }
  /**
   * Hides resizer in the UI.
   */
  hide() {
    this._options.editor.editing.view.change((t) => {
      t.addClass("ck-hidden", this._viewResizerWrapper);
    });
  }
  /**
   * Attaches the resizer to the DOM.
   */
  attach() {
    const e = this, t = this._options.viewElement;
    this._options.editor.editing.view.change((s) => {
      const r = s.createUIElement("div", {
        class: "ck ck-reset_all ck-widget__resizer"
      }, function(o) {
        const a = this.toDomElement(o);
        return e._appendHandles(a), e._appendSizeUI(a), a;
      });
      s.insert(s.createPositionAt(t, "end"), r), s.addClass("ck-widget_with-resizer", t), this._viewResizerWrapper = r, this.isVisible || this.hide();
    }), this.on("change:isVisible", () => {
      this.isVisible ? (this.show(), this.redraw()) : this.hide();
    });
  }
  /**
   * Starts the resizing process.
   *
   * Creates a new {@link #state} for the current process.
   *
   * @fires begin
   * @param domResizeHandle Clicked handle.
   */
  begin(e) {
    this._state = new OA(this._options), this._sizeView._bindToState(this._options, this.state), this._initialViewWidth = this._options.viewElement.getStyle("width"), this.state.begin(e, this._getHandleHost(), this._getResizeHost());
  }
  /**
   * Updates the proposed size based on `domEventData`.
   *
   * @fires updateSize
   */
  updateSize(e) {
    const t = this._proposeNewSize(e);
    this._options.editor.editing.view.change((c) => {
      const u = this._options.unit || "%", h = (u === "%" ? t.widthPercents : t.width) + u;
      c.setStyle("width", h, this._options.viewElement);
    });
    const s = this._getHandleHost(), r = new M(s), o = Math.round(r.width), a = Math.round(r.height), l = new M(s);
    t.width = Math.round(l.width), t.height = Math.round(l.height), this.redraw(r), this.state.update({
      ...t,
      handleHostWidth: o,
      handleHostHeight: a
    });
  }
  /**
   * Applies the geometry proposed with the resizer.
   *
   * @fires commit
   */
  commit() {
    const e = this._options.unit || "%", t = (e === "%" ? this.state.proposedWidthPercents : this.state.proposedWidth) + e;
    this._options.editor.editing.view.change(() => {
      this._cleanup(), this._options.onCommit(t);
    });
  }
  /**
   * Cancels and rejects the proposed resize dimensions, hiding the UI.
   *
   * @fires cancel
   */
  cancel() {
    this._cleanup();
  }
  /**
   * Destroys the resizer.
   */
  destroy() {
    this.cancel();
  }
  /**
   * Redraws the resizer.
   *
   * @param handleHostRect Handle host rectangle might be given to improve performance.
   */
  redraw(e) {
    const t = this._domResizerWrapper;
    if (!HA(t))
      return;
    const i = t.parentElement, s = this._getHandleHost(), r = this._viewResizerWrapper, o = [
      r.getStyle("width"),
      r.getStyle("height"),
      r.getStyle("left"),
      r.getStyle("top")
    ];
    let a;
    if (i.isSameNode(s)) {
      const l = e || new M(s);
      a = [
        l.width + "px",
        l.height + "px",
        void 0,
        void 0
      ];
    } else
      a = [
        s.offsetWidth + "px",
        s.offsetHeight + "px",
        s.offsetLeft + "px",
        s.offsetTop + "px"
      ];
    ce(o, a) !== "same" && this._options.editor.editing.view.change((l) => {
      l.setStyle({
        width: a[0],
        height: a[1],
        left: a[2],
        top: a[3]
      }, r);
    });
  }
  containsHandle(e) {
    return this._domResizerWrapper.contains(e);
  }
  static isResizeHandle(e) {
    return e.classList.contains("ck-widget__resizer__handle");
  }
  /**
   * Cleans up the context state.
   */
  _cleanup() {
    this._sizeView._dismiss(), this._options.editor.editing.view.change((t) => {
      t.setStyle("width", this._initialViewWidth, this._options.viewElement);
    });
  }
  /**
   * Calculates the proposed size as the resize handles are dragged.
   *
   * @param domEventData Event data that caused the size update request. It should be used to calculate the proposed size.
   */
  _proposeNewSize(e) {
    const t = this.state, i = $A(e), s = this._options.isCentered ? this._options.isCentered(this) : !0, r = {
      x: t._referenceCoordinates.x - (i.x + t.originalWidth),
      y: i.y - t.originalHeight - t._referenceCoordinates.y
    };
    s && t.activeHandlePosition.endsWith("-right") && (r.x = i.x - (t._referenceCoordinates.x + t.originalWidth)), s && (r.x *= 2);
    let o = Math.abs(t.originalWidth + r.x), a = Math.abs(t.originalHeight + r.y);
    return (o / t.aspectRatio > a ? "width" : "height") == "width" ? a = o / t.aspectRatio : o = a * t.aspectRatio, {
      width: Math.round(o),
      height: Math.round(a),
      widthPercents: Math.min(Math.round(t.originalWidthPercents / t.originalWidth * o * 100) / 100, 100)
    };
  }
  /**
   * Obtains the resize host.
   *
   * Resize host is an object that receives dimensions which are the result of resizing.
   */
  _getResizeHost() {
    const e = this._domResizerWrapper.parentElement;
    return this._options.getResizeHost(e);
  }
  /**
   * Obtains the handle host.
   *
   * Handle host is an object that the handles are aligned to.
   *
   * Handle host will not always be an entire widget itself. Take an image as an example. The image widget
   * contains an image and a caption. Only the image should be surrounded with handles.
   */
  _getHandleHost() {
    const e = this._domResizerWrapper.parentElement;
    return this._options.getHandleHost(e);
  }
  /**
   * DOM container of the entire resize UI.
   *
   * Note that this property will have a value only after the element bound with the resizer is rendered
   * (otherwise `null`).
   */
  get _domResizerWrapper() {
    return this._options.editor.editing.view.domConverter.mapViewToDom(this._viewResizerWrapper);
  }
  /**
   * Renders the resize handles in the DOM.
   *
   * @param domElement The resizer wrapper.
   */
  _appendHandles(e) {
    const t = ["top-left", "top-right", "bottom-right", "bottom-left"];
    for (const i of t)
      e.appendChild(new Ee({
        tag: "div",
        attributes: {
          class: `ck-widget__resizer__handle ${zA(i)}`
        }
      }).render());
  }
  /**
   * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.
   */
  _appendSizeUI(e) {
    this._sizeView = new LA(), this._sizeView.render(), e.appendChild(this._sizeView.element);
  }
}
function zA(n) {
  return `ck-widget__resizer__handle-${n}`;
}
function $A(n) {
  return {
    x: n.pageX,
    y: n.pageY
  };
}
function HA(n) {
  return n && n.ownerDocument && n.ownerDocument.contains(n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ts extends _ {
  constructor() {
    super(...arguments), this._resizers = /* @__PURE__ */ new Map();
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "WidgetResize";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor.editing, t = I.window.document;
    this.set("selectedResizer", null), this.set("_activeResizer", null), e.view.addObserver(qn), this._observer = new (rt())(), this.listenTo(e.view.document, "mousedown", this._mouseDownListener.bind(this), { priority: "high" }), this._observer.listenTo(t, "mousemove", this._mouseMoveListener.bind(this)), this._observer.listenTo(t, "mouseup", this._mouseUpListener.bind(this)), this._redrawSelectedResizerThrottled = zn(() => this.redrawSelectedResizer(), 200), this.editor.ui.on("update", this._redrawSelectedResizerThrottled), this.editor.model.document.on("change", () => {
      for (const [s, r] of this._resizers)
        s.isAttached() || (this._resizers.delete(s), r.destroy());
    }, { priority: "lowest" }), this._observer.listenTo(I.window, "resize", this._redrawSelectedResizerThrottled);
    const i = this.editor.editing.view.document.selection;
    i.on("change", () => {
      const s = i.getSelectedElement(), r = this.getResizerByViewElement(s) || null;
      r ? this.select(r) : this.deselect();
    });
  }
  /**
   * Redraws the selected resizer if there is any selected resizer and if it is visible.
   */
  redrawSelectedResizer() {
    this.selectedResizer && this.selectedResizer.isVisible && this.selectedResizer.redraw();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this._observer.stopListening();
    for (const e of this._resizers.values())
      e.destroy();
    this._redrawSelectedResizerThrottled.cancel();
  }
  /**
   * Marks resizer as selected.
   */
  select(e) {
    this.deselect(), this.selectedResizer = e, this.selectedResizer.isSelected = !0;
  }
  /**
   * Deselects currently set resizer.
   */
  deselect() {
    this.selectedResizer && (this.selectedResizer.isSelected = !1), this.selectedResizer = null;
  }
  /**
   * @param options Resizer options.
   */
  attachTo(e) {
    const t = new Nl(e), i = this.editor.plugins;
    if (t.attach(), i.has("WidgetToolbarRepository")) {
      const o = i.get("WidgetToolbarRepository");
      t.on("begin", () => {
        o.forceDisabled("resize");
      }, { priority: "lowest" }), t.on("cancel", () => {
        o.clearForceDisabled("resize");
      }, { priority: "highest" }), t.on("commit", () => {
        o.clearForceDisabled("resize");
      }, { priority: "highest" });
    }
    this._resizers.set(e.viewElement, t);
    const r = this.editor.editing.view.document.selection.getSelectedElement();
    return this.getResizerByViewElement(r) == t && this.select(t), t;
  }
  /**
   * Returns a resizer created for a given view element (widget element).
   *
   * @param viewElement View element associated with the resizer.
   */
  getResizerByViewElement(e) {
    return this._resizers.get(e);
  }
  /**
   * Returns a resizer that contains a given resize handle.
   */
  _getResizerByHandle(e) {
    for (const t of this._resizers.values())
      if (t.containsHandle(e))
        return t;
  }
  /**
   * @param domEventData Native DOM event.
   */
  _mouseDownListener(e, t) {
    const i = t.domTarget;
    Nl.isResizeHandle(i) && (this._activeResizer = this._getResizerByHandle(i) || null, this._activeResizer && (this._activeResizer.begin(i), e.stop(), t.preventDefault()));
  }
  /**
   * @param domEventData Native DOM event.
   */
  _mouseMoveListener(e, t) {
    this._activeResizer && this._activeResizer.updateSize(t);
  }
  _mouseUpListener() {
    this._activeResizer && (this._activeResizer.commit(), this._activeResizer = null);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class WA extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "DragDrop";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [dt, Gi];
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.editing.view;
    if (this._draggedRange = null, this._draggingUid = "", this._draggableElement = null, this._updateDropMarkerThrottled = zn((i) => this._updateDropMarker(i), 40), this._removeDropMarkerDelayed = Qs(() => this._removeDropMarker(), 40), this._clearDraggableAttributesDelayed = Qs(() => this._clearDraggableAttributes(), 40), e.plugins.has("DragDropExperimental")) {
      this.forceDisabled("DragDropExperimental");
      return;
    }
    t.addObserver(uo), t.addObserver(qn), this._setupDragging(), this._setupContentInsertionIntegration(), this._setupClipboardInputIntegration(), this._setupDropMarker(), this._setupDraggableAttributeHandling(), this.listenTo(e, "change:isReadOnly", (i, s, r) => {
      r ? this.forceDisabled("readOnlyMode") : this.clearForceDisabled("readOnlyMode");
    }), this.on("change:isEnabled", (i, s, r) => {
      r || this._finalizeDragging(!1);
    }), S.isAndroid && this.forceDisabled("noAndroidSupport");
  }
  /**
   * @inheritDoc
   */
  destroy() {
    return this._draggedRange && (this._draggedRange.detach(), this._draggedRange = null), this._updateDropMarkerThrottled.cancel(), this._removeDropMarkerDelayed.cancel(), this._clearDraggableAttributesDelayed.cancel(), super.destroy();
  }
  /**
   * Drag and drop events handling.
   */
  _setupDragging() {
    const e = this.editor, t = e.model, i = t.document, s = e.editing.view, r = s.document;
    this.listenTo(r, "dragstart", (o, a) => {
      const l = i.selection;
      if (a.target && a.target.is("editableElement")) {
        a.preventDefault();
        return;
      }
      const c = a.target ? $l(a.target) : null;
      if (c) {
        const m = e.editing.mapper.toModelElement(c);
        this._draggedRange = We.fromRange(t.createRangeOn(m)), e.plugins.has("WidgetToolbarRepository") && e.plugins.get("WidgetToolbarRepository").forceDisabled("dragDrop");
      } else if (!r.selection.isCollapsed) {
        const m = r.selection.getSelectedElement();
        (!m || !X(m)) && (this._draggedRange = We.fromRange(l.getFirstRange()));
      }
      if (!this._draggedRange) {
        a.preventDefault();
        return;
      }
      this._draggingUid = et();
      const u = this.isEnabled && e.model.canEditAt(this._draggedRange);
      a.dataTransfer.effectAllowed = u ? "copyMove" : "copy", a.dataTransfer.setData("application/ckeditor5-dragging-uid", this._draggingUid);
      const h = t.createSelection(this._draggedRange.toRange()), d = e.data.toView(t.getSelectedContent(h));
      r.fire("clipboardOutput", {
        dataTransfer: a.dataTransfer,
        content: d,
        method: "dragstart"
      }), u || (this._draggedRange.detach(), this._draggedRange = null, this._draggingUid = "");
    }, { priority: "low" }), this.listenTo(r, "dragend", (o, a) => {
      this._finalizeDragging(!a.dataTransfer.isCanceled && a.dataTransfer.dropEffect == "move");
    }, { priority: "low" }), this.listenTo(r, "dragenter", () => {
      this.isEnabled && s.focus();
    }), this.listenTo(r, "dragleave", () => {
      this._removeDropMarkerDelayed();
    }), this.listenTo(r, "dragging", (o, a) => {
      if (!this.isEnabled) {
        a.dataTransfer.dropEffect = "none";
        return;
      }
      this._removeDropMarkerDelayed.cancel();
      const l = Ll(e, a.targetRanges, a.target);
      if (!e.model.canEditAt(l)) {
        a.dataTransfer.dropEffect = "none";
        return;
      }
      this._draggedRange || (a.dataTransfer.dropEffect = "copy"), S.isGecko || (a.dataTransfer.effectAllowed == "copy" ? a.dataTransfer.dropEffect = "copy" : ["all", "copyMove"].includes(a.dataTransfer.effectAllowed) && (a.dataTransfer.dropEffect = "move"));
      /* istanbul ignore else -- @preserve */
      l && this._updateDropMarkerThrottled(l);
    }, { priority: "low" });
  }
  /**
   * Integration with the `clipboardInput` event.
   */
  _setupClipboardInputIntegration() {
    const e = this.editor, i = e.editing.view.document;
    this.listenTo(i, "clipboardInput", (s, r) => {
      if (r.method != "drop")
        return;
      const o = Ll(e, r.targetRanges, r.target);
      this._removeDropMarker();
      /* istanbul ignore if -- @preserve */
      if (!o || !e.model.canEditAt(o)) {
        this._finalizeDragging(!1), s.stop();
        return;
      }
      if (this._draggedRange && this._draggingUid != r.dataTransfer.getData("application/ckeditor5-dragging-uid") && (this._draggedRange.detach(), this._draggedRange = null, this._draggingUid = ""), zl(r.dataTransfer) == "move" && this._draggedRange && this._draggedRange.containsRange(o, !0)) {
        this._finalizeDragging(!1), s.stop();
        return;
      }
      r.targetRanges = [e.editing.mapper.toViewRange(o)];
    }, { priority: "high" });
  }
  /**
   * Integration with the `contentInsertion` event of the clipboard pipeline.
   */
  _setupContentInsertionIntegration() {
    const e = this.editor.plugins.get(dt);
    e.on("contentInsertion", (t, i) => {
      if (!this.isEnabled || i.method !== "drop")
        return;
      const s = i.targetRanges.map((r) => this.editor.editing.mapper.toModelRange(r));
      this.editor.model.change((r) => r.setSelection(s));
    }, { priority: "high" }), e.on("contentInsertion", (t, i) => {
      if (!this.isEnabled || i.method !== "drop")
        return;
      const s = zl(i.dataTransfer) == "move", r = !i.resultRange || !i.resultRange.isCollapsed;
      this._finalizeDragging(r && s);
    }, { priority: "lowest" });
  }
  /**
   * Adds listeners that add the `draggable` attribute to the elements while the mouse button is down so the dragging could start.
   */
  _setupDraggableAttributeHandling() {
    const e = this.editor, t = e.editing.view, i = t.document;
    this.listenTo(i, "mousedown", (s, r) => {
      if (S.isAndroid || !r)
        return;
      this._clearDraggableAttributesDelayed.cancel();
      let o = $l(r.target);
      if (S.isBlink && !o && !i.selection.isCollapsed) {
        const a = i.selection.getSelectedElement();
        if (!a || !X(a)) {
          const l = i.selection.editableElement;
          l && !l.isReadOnly && (o = l);
        }
      }
      o && (t.change((a) => {
        a.setAttribute("draggable", "true", o);
      }), this._draggableElement = e.editing.mapper.toModelElement(o));
    }), this.listenTo(i, "mouseup", () => {
      S.isAndroid || this._clearDraggableAttributesDelayed();
    });
  }
  /**
   * Removes the `draggable` attribute from the element that was used for dragging.
   */
  _clearDraggableAttributes() {
    const e = this.editor.editing;
    e.view.change((t) => {
      this._draggableElement && this._draggableElement.root.rootName != "$graveyard" && t.removeAttribute("draggable", e.mapper.toViewElement(this._draggableElement)), this._draggableElement = null;
    });
  }
  /**
   * Creates downcast conversion for the drop target marker.
   */
  _setupDropMarker() {
    const e = this.editor;
    e.conversion.for("editingDowncast").markerToHighlight({
      model: "drop-target",
      view: {
        classes: ["ck-clipboard-drop-target-range"]
      }
    }), e.conversion.for("editingDowncast").markerToElement({
      model: "drop-target",
      view: (t, { writer: i }) => {
        if (e.model.schema.checkChild(t.markerRange.start, "$text"))
          return i.createUIElement("span", { class: "ck ck-clipboard-drop-target-position" }, function(r) {
            const o = this.toDomElement(r);
            return o.append("⁠", r.createElement("span"), "⁠"), o;
          });
      }
    });
  }
  /**
   * Updates the drop target marker to the provided range.
   *
   * @param targetRange The range to set the marker to.
   */
  _updateDropMarker(e) {
    const t = this.editor, i = t.model.markers;
    t.model.change((s) => {
      i.has("drop-target") ? i.get("drop-target").getRange().isEqual(e) || s.updateMarker("drop-target", { range: e }) : s.addMarker("drop-target", {
        range: e,
        usingOperation: !1,
        affectsData: !1
      });
    });
  }
  /**
   * Removes the drop target marker.
   */
  _removeDropMarker() {
    const e = this.editor.model;
    this._removeDropMarkerDelayed.cancel(), this._updateDropMarkerThrottled.cancel(), e.markers.has("drop-target") && e.change((t) => {
      t.removeMarker("drop-target");
    });
  }
  /**
   * Deletes the dragged content from its original range and clears the dragging state.
   *
   * @param moved Whether the move succeeded.
   */
  _finalizeDragging(e) {
    const t = this.editor, i = t.model;
    this._removeDropMarker(), this._clearDraggableAttributes(), t.plugins.has("WidgetToolbarRepository") && t.plugins.get("WidgetToolbarRepository").clearForceDisabled("dragDrop"), this._draggingUid = "", this._draggedRange && (e && this.isEnabled && i.deleteContent(i.createSelection(this._draggedRange), { doNotAutoparagraph: !0 }), this._draggedRange.detach(), this._draggedRange = null);
  }
}
function Ll(n, e, t) {
  const i = n.model, s = n.editing.mapper;
  let r = null;
  const o = e ? e[0].start : null;
  if (t.is("uiElement") && (t = t.parent), r = UA(n, t), r)
    return r;
  const a = KA(n, t), l = o ? s.toModelPosition(o) : null;
  return l ? (r = qA(n, l, a), r || (r = i.schema.getNearestSelectionRange(l, S.isGecko ? "forward" : "backward"), r) ? r : GA(n, l.parent)) : jA(n, a);
}
function UA(n, e) {
  const t = n.model, i = n.editing.mapper;
  if (X(e))
    return t.createRangeOn(i.toModelElement(e));
  if (!e.is("editableElement")) {
    const s = e.findAncestor((r) => X(r) || r.is("editableElement"));
    if (X(s))
      return t.createRangeOn(i.toModelElement(s));
  }
  return null;
}
function jA(n, e) {
  const t = n.model, i = t.schema, s = t.createPositionAt(e, 0);
  return i.getNearestSelectionRange(s, "forward");
}
function qA(n, e, t) {
  const i = n.model;
  if (!i.schema.checkChild(t, "$block"))
    return null;
  const s = i.createPositionAt(t, 0), r = e.path.slice(0, s.path.length), a = i.createPositionFromPath(e.root, r).nodeAfter;
  return a && i.schema.isObject(a) ? i.createRangeOn(a) : null;
}
function GA(n, e) {
  const t = n.model;
  let i = e;
  for (; i; ) {
    if (t.schema.isObject(i))
      return t.createRangeOn(i);
    i = i.parent;
  }
  /* istanbul ignore next -- @preserve */
  return null;
}
function KA(n, e) {
  const t = n.editing.mapper, i = n.editing.view, s = t.toModelElement(e);
  if (s)
    return s;
  const r = i.createPositionBefore(e), o = t.findMappedViewAncestor(r);
  return t.toModelElement(o);
}
function zl(n) {
  return S.isGecko ? n.dropEffect : ["all", "copyMove"].includes(n.effectAllowed) ? "move" : "copy";
}
function $l(n) {
  if (n.is("editableElement"))
    return null;
  if (n.hasClass("ck-widget__selection-handle"))
    return n.findAncestor(X);
  if (X(n))
    return n;
  const e = n.findAncestor((t) => X(t) || t.is("editableElement"));
  return X(e) ? e : null;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class JA extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "PastePlainText";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [dt];
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.model, i = e.editing.view, s = i.document, r = t.document.selection;
    let o = !1;
    i.addObserver(uo), this.listenTo(s, "keydown", (a, l) => {
      o = l.shiftKey;
    }), e.plugins.get(dt).on("contentInsertion", (a, l) => {
      !o && !YA(l.content, t.schema) || t.change((c) => {
        const u = Array.from(r.getAttributes()).filter(([d]) => t.schema.getAttributeProperties(d).isFormatting);
        r.isCollapsed || t.deleteContent(r, { doNotAutoparagraph: !0 }), u.push(...r.getAttributes());
        const h = c.createRangeIn(l.content);
        for (const d of h.getItems())
          d.is("$textProxy") && c.setAttributes(u, d);
      });
    });
  }
}
function YA(n, e) {
  if (n.childCount > 1)
    return !1;
  const t = n.getChild(0);
  return e.isObject(t) ? !1 : Array.from(t.getAttributeKeys()).length == 0;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Rd extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Clipboard";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [dt, WA, JA];
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ZA extends W {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.affectsData = !1;
  }
  /**
   * @inheritDoc
   */
  execute() {
    const e = this.editor.model, t = e.document.selection;
    let i = e.schema.getLimitElement(t);
    if (t.containsEntireContent(i) || !Hl(e.schema, i))
      do
        if (i = i.parent, !i)
          return;
      while (!Hl(e.schema, i));
    e.change((s) => {
      s.setSelection(i, "in");
    });
  }
}
function Hl(n, e) {
  return n.isLimit(e) && (n.checkChild(e, "$text") || n.checkChild(e, "paragraph"));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const XA = Wn("Ctrl+A");
class QA extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "SelectAllEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, i = e.editing.view.document;
    e.commands.add("selectAll", new ZA(e)), this.listenTo(i, "keydown", (s, r) => {
      si(r) === XA && (e.execute("selectAll"), r.preventDefault());
    });
  }
}
const eE = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M.75 15.5a.75.75 0 0 1 .75.75V18l.008.09A.5.5 0 0 0 2 18.5h1.75a.75.75 0 1 1 0 1.5H1.5l-.144-.007a1.5 1.5 0 0 1-1.35-1.349L0 18.5v-2.25a.75.75 0 0 1 .75-.75zm18.5 0a.75.75 0 0 1 .75.75v2.25l-.007.144a1.5 1.5 0 0 1-1.349 1.35L18.5 20h-2.25a.75.75 0 1 1 0-1.5H18a.5.5 0 0 0 .492-.41L18.5 18v-1.75a.75.75 0 0 1 .75-.75zm-10.45 3c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm.45-5.5a.75.75 0 1 1 0 1.5h-8.5a.75.75 0 1 1 0-1.5h8.5zM1.3 11c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM1.3 7c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5h-2.5a.75.75 0 1 1 0-1.5h2.5zm-5 0a.75.75 0 1 1 0 1.5h-5.5a.75.75 0 0 1 0-1.5h5.5zm-6.5-5a.75.75 0 0 1 0 1.5H2a.5.5 0 0 0-.492.41L1.5 2v1.75a.75.75 0 0 1-1.5 0V1.5l.007-.144A1.5 1.5 0 0 1 1.356.006L1.5 0h2.25zM18.5 0l.144.007a1.5 1.5 0 0 1 1.35 1.349L20 1.5v2.25a.75.75 0 1 1-1.5 0V2l-.008-.09A.5.5 0 0 0 18 1.5h-1.75a.75.75 0 1 1 0-1.5h2.25zM8.8 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class tE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "SelectAllUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    e.ui.componentFactory.add("selectAll", (t) => {
      const i = e.commands.get("selectAll"), s = new D(t), r = t.t;
      return s.set({
        label: r("Select all"),
        icon: eE,
        keystroke: "Ctrl+A",
        tooltip: !0
      }), s.bind("isEnabled").to(i, "isEnabled"), this.listenTo(s, "execute", () => {
        e.execute("selectAll"), e.editing.view.focus();
      }), s;
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class iE extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [QA, tE];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "SelectAll";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Vd extends W {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this._stack = [], this._createdBatches = /* @__PURE__ */ new WeakSet(), this.refresh(), this._isEnabledBasedOnSelection = !1, this.listenTo(e.data, "set", (t, i) => {
      i[1] = { ...i[1] };
      const s = i[1];
      s.batchType || (s.batchType = { isUndoable: !1 });
    }, { priority: "high" }), this.listenTo(e.data, "set", (t, i) => {
      i[1].batchType.isUndoable || this.clearStack();
    });
  }
  /**
   * @inheritDoc
   */
  refresh() {
    this.isEnabled = this._stack.length > 0;
  }
  /**
   * Returns all batches created by this command.
   */
  get createdBatches() {
    return this._createdBatches;
  }
  /**
   * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}
   * created by the editor which this command is registered to.
   *
   * @param batch The batch to add.
   */
  addBatch(e) {
    const t = this.editor.model.document.selection, i = {
      ranges: t.hasOwnRange ? Array.from(t.getRanges()) : [],
      isBackward: t.isBackward
    };
    this._stack.push({ batch: e, selection: i }), this.refresh();
  }
  /**
   * Removes all items from the stack.
   */
  clearStack() {
    this._stack = [], this.refresh();
  }
  /**
   * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.
   *
   * @param ranges Ranges to be restored.
   * @param isBackward A flag describing whether the restored range was selected forward or backward.
   * @param operations Operations which has been applied since selection has been stored.
   */
  _restoreSelection(e, t, i) {
    const s = this.editor.model, r = s.document, o = [], a = e.map((c) => c.getTransformedByOperations(i)), l = a.flat();
    for (const c of a) {
      const u = c.filter((h) => h.root != r.graveyard).filter((h) => !sE(h, l));
      u.length && (nE(u), o.push(u[0]));
    }
    o.length && s.change((c) => {
      c.setSelection(o, { backward: t });
    });
  }
  /**
   * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.
   * This is a helper method for {@link #execute}.
   *
   * @param batchToUndo The batch to be undone.
   * @param undoingBatch The batch that will contain undoing changes.
   */
  _undo(e, t) {
    const i = this.editor.model, s = i.document;
    this._createdBatches.add(t);
    const r = e.operations.slice().filter((o) => o.isDocumentOperation);
    r.reverse();
    for (const o of r) {
      const a = o.baseVersion + 1, l = Array.from(s.history.getOperations(a)), u = w2([o.getReversed()], l, {
        useRelations: !0,
        document: this.editor.model.document,
        padWithNoOps: !1,
        forceWeakRemove: !0
      }).operationsA;
      for (let h of u) {
        const d = h.affectedSelectable;
        d && !i.canEditAt(d) && (h = new ie(h.baseVersion)), t.addOperation(h), i.applyOperation(h), s.history.setOperationAsUndone(o, h);
      }
    }
  }
}
function nE(n) {
  n.sort((e, t) => e.start.isBefore(t.start) ? -1 : 1);
  for (let e = 1; e < n.length; e++) {
    const i = n[e - 1].getJoined(n[e], !0);
    i && (e--, n.splice(e, 2, i));
  }
}
function sE(n, e) {
  return e.some((t) => t !== n && t.containsRange(n, !0));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class rE extends Vd {
  /**
   * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms
   * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.
   * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.
   *
   * @fires execute
   * @fires revert
   * @param batch A batch that should be undone. If not set, the last added batch will be undone.
   */
  execute(e = null) {
    const t = e ? this._stack.findIndex((r) => r.batch == e) : this._stack.length - 1, i = this._stack.splice(t, 1)[0], s = this.editor.model.createBatch({ isUndo: !0 });
    this.editor.model.enqueueChange(s, () => {
      this._undo(i.batch, s);
      const r = this.editor.model.document.history.getOperations(i.batch.baseVersion);
      this._restoreSelection(i.selection.ranges, i.selection.isBackward, r), this.fire("revert", i.batch, s);
    }), this.refresh();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class oE extends Vd {
  /**
   * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to
   * the command's stack, applies the reverted and transformed version on the
   * {@link module:engine/model/document~Document document} and removes the batch from the stack.
   * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.
   *
   * @fires execute
   */
  execute() {
    const e = this._stack.pop(), t = this.editor.model.createBatch({ isUndo: !0 });
    this.editor.model.enqueueChange(t, () => {
      const s = e.batch.operations[e.batch.operations.length - 1].baseVersion + 1, r = this.editor.model.document.history.getOperations(s);
      this._restoreSelection(e.selection.ranges, e.selection.isBackward, r), this._undo(e.batch, t);
    }), this.refresh();
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class aE extends _ {
  constructor() {
    super(...arguments), this._batchRegistry = /* @__PURE__ */ new WeakSet();
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "UndoEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    this._undoCommand = new rE(e), this._redoCommand = new oE(e), e.commands.add("undo", this._undoCommand), e.commands.add("redo", this._redoCommand), this.listenTo(e.model, "applyOperation", (t, i) => {
      const s = i[0];
      if (!s.isDocumentOperation)
        return;
      const r = s.batch, o = this._redoCommand.createdBatches.has(r), a = this._undoCommand.createdBatches.has(r);
      this._batchRegistry.has(r) || (this._batchRegistry.add(r), r.isUndoable && (o ? this._undoCommand.addBatch(r) : a || (this._undoCommand.addBatch(r), this._redoCommand.clearStack())));
    }, { priority: "highest" }), this.listenTo(this._undoCommand, "revert", (t, i, s) => {
      this._redoCommand.addBatch(s);
    }), e.keystrokes.set("CTRL+Z", "undo"), e.keystrokes.set("CTRL+Y", "redo"), e.keystrokes.set("CTRL+SHIFT+Z", "redo");
  }
}
const Wl = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m5.042 9.367 2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z"/></svg>', Ul = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m14.958 9.367-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class lE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "UndoUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.locale, i = e.t, s = t.uiLanguageDirection == "ltr" ? Wl : Ul, r = t.uiLanguageDirection == "ltr" ? Ul : Wl;
    this._addButton("undo", i("Undo"), "CTRL+Z", s), this._addButton("redo", i("Redo"), "CTRL+Y", r);
  }
  /**
   * Creates a button for the specified command.
   *
   * @param name Command name.
   * @param label Button label.
   * @param keystroke Command keystroke.
   * @param Icon Source of the icon.
   */
  _addButton(e, t, i, s) {
    const r = this.editor;
    r.ui.componentFactory.add(e, (o) => {
      const a = r.commands.get(e), l = new D(o);
      return l.set({
        label: t,
        icon: s,
        keystroke: i,
        tooltip: !0
      }), l.bind("isEnabled").to(a, "isEnabled"), this.listenTo(l, "execute", () => {
        r.execute(e), r.editing.view.focus();
      }), l;
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Od extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [aE, lE];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Undo";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class tS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Rd, Zn, iE, sA, JC, Od];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Essentials";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class cE extends W {
  constructor(e) {
    super(e), this._isEnabledBasedOnSelection = !1;
  }
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this.editor.model, t = e.document, i = de(t.selection.getSelectedBlocks());
    this.value = !!i && i.is("element", "paragraph"), this.isEnabled = !!i && jl(i, e.schema);
  }
  /**
   * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection
   * will be turned to paragraphs.
   *
   * @fires execute
   * @param options Options for the executed command.
   * @param options.selection The selection that the command should be applied to. By default,
   * if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.
   */
  execute(e = {}) {
    const t = this.editor.model, i = t.document, s = e.selection || i.selection;
    t.canEditAt(s) && t.change((r) => {
      const o = s.getSelectedBlocks();
      for (const a of o)
        !a.is("element", "paragraph") && jl(a, t.schema) && r.rename(a, "paragraph");
    });
  }
}
function jl(n, e) {
  return e.checkChild(n.parent, "paragraph") && !e.isObject(n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class uE extends W {
  constructor(e) {
    super(e), this._isEnabledBasedOnSelection = !1;
  }
  /**
   * Executes the command.
   *
   * @param options Options for the executed command.
   * @param options.position The model position at which the new paragraph will be inserted.
   * @param options.attributes Attributes keys and values to set on a inserted paragraph.
   * @fires execute
   */
  execute(e) {
    const t = this.editor.model, i = e.attributes;
    let s = e.position;
    t.canEditAt(s) && t.change((r) => {
      const o = r.createElement("paragraph");
      if (i && t.schema.setAllowedAttributes(o, i, r), !t.schema.checkChild(s.parent, o)) {
        const a = t.schema.findAllowedParent(s, o);
        if (!a)
          return;
        s = r.split(s, a).position;
      }
      t.insertContent(o, s), r.setSelection(o, "in");
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Xn extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Paragraph";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.model;
    e.commands.add("paragraph", new cE(e)), e.commands.add("insertParagraph", new uE(e)), t.schema.register("paragraph", { inheritAllFrom: "$block" }), e.conversion.elementToElement({ model: "paragraph", view: "p" }), e.conversion.for("upcast").elementToElement({
      model: (i, { writer: s }) => !Xn.paragraphLikeElements.has(i.name) || i.isEmpty ? null : s.createElement("paragraph"),
      view: /.+/,
      converterPriority: "low"
    });
  }
}
Xn.paragraphLikeElements = /* @__PURE__ */ new Set([
  "blockquote",
  "dd",
  "div",
  "dt",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "li",
  "p",
  "td",
  "th"
]);
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const fo = ["left", "right", "center", "justify"];
function Md(n) {
  return fo.includes(n);
}
function Bd(n, e) {
  return e.contentLanguageDirection == "rtl" ? n === "right" : n === "left";
}
function Dd(n) {
  const e = n.map((i) => {
    let s;
    return typeof i == "string" ? s = { name: i } : s = i, s;
  }).filter((i) => {
    const s = fo.includes(i.name);
    return s || G("alignment-config-name-not-recognized", { option: i }), s;
  }), t = e.filter((i) => !!i.className).length;
  if (t && t < e.length)
    throw new f("alignment-config-classnames-are-missing", { configuredOptions: n });
  return e.forEach((i, s, r) => {
    const o = r.slice(s + 1);
    if (o.some((l) => l.name == i.name))
      throw new f("alignment-config-name-already-defined", { option: i, configuredOptions: n });
    if (i.className && o.some((c) => c.className == i.className))
      throw new f("alignment-config-classname-already-defined", { option: i, configuredOptions: n });
  }), e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const mo = "alignment";
class hE extends W {
  /**
   * @inheritDoc
   */
  refresh() {
    const t = this.editor.locale, i = de(this.editor.model.document.selection.getSelectedBlocks());
    this.isEnabled = !!i && this._canBeAligned(i), this.isEnabled && i.hasAttribute("alignment") ? this.value = i.getAttribute("alignment") : this.value = t.contentLanguageDirection === "rtl" ? "right" : "left";
  }
  /**
   * Executes the command. Applies the alignment `value` to the selected blocks.
   * If no `value` is passed, the `value` is the default one or it is equal to the currently selected block's alignment attribute,
   * the command will remove the attribute from the selected blocks.
   *
   * @param options Options for the executed command.
   * @param options.value The value to apply.
   * @fires execute
   */
  execute(e = {}) {
    const t = this.editor, i = t.locale, s = t.model, r = s.document, o = e.value;
    s.change((a) => {
      const l = Array.from(r.selection.getSelectedBlocks()).filter((h) => this._canBeAligned(h)), c = l[0].getAttribute("alignment");
      Bd(o, i) || c === o || !o ? dE(l, a) : fE(l, a, o);
    });
  }
  /**
   * Checks whether a block can have alignment set.
   *
   * @param block The block to be checked.
   */
  _canBeAligned(e) {
    return this.editor.model.schema.checkAttribute(e, mo);
  }
}
function dE(n, e) {
  for (const t of n)
    e.removeAttribute(mo, t);
}
function fE(n, e, t) {
  for (const i of n)
    e.setAttribute(mo, t, i);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class mE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "AlignmentEditing";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), e.config.define("alignment", {
      options: fo.map((t) => ({ name: t }))
    });
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.locale, i = e.model.schema, r = Dd(e.config.get("alignment.options")).filter((c) => Md(c.name) && !Bd(c.name, t)), o = r.some((c) => !!c.className);
    i.extend("$block", { allowAttributes: "alignment" }), e.model.schema.setAttributeProperties("alignment", { isFormatting: !0 }), o ? e.conversion.attributeToAttribute(bE(r)) : e.conversion.for("downcast").attributeToAttribute(gE(r));
    const a = pE(r);
    for (const c of a)
      e.conversion.for("upcast").attributeToAttribute(c);
    const l = wE(r);
    for (const c of l)
      e.conversion.for("upcast").attributeToAttribute(c);
    e.commands.add("alignment", new hE(e));
  }
}
function gE(n) {
  const e = {};
  for (const { name: i } of n)
    e[i] = {
      key: "style",
      value: {
        "text-align": i
      }
    };
  return {
    model: {
      key: "alignment",
      values: n.map((i) => i.name)
    },
    view: e
  };
}
function pE(n) {
  const e = [];
  for (const { name: t } of n)
    e.push({
      view: {
        key: "style",
        value: {
          "text-align": t
        }
      },
      model: {
        key: "alignment",
        value: t
      }
    });
  return e;
}
function wE(n) {
  const e = [];
  for (const { name: t } of n)
    e.push({
      view: {
        key: "align",
        value: t
      },
      model: {
        key: "alignment",
        value: t
      }
    });
  return e;
}
function bE(n) {
  const e = {};
  for (const i of n)
    e[i.name] = {
      key: "class",
      value: i.className
    };
  return {
    model: {
      key: "alignment",
      values: n.map((i) => i.name)
    },
    view: e
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const ln = /* @__PURE__ */ new Map([
  ["left", B.alignLeft],
  ["right", B.alignRight],
  ["center", B.alignCenter],
  ["justify", B.alignJustify]
]);
class _E extends _ {
  /**
   * Returns the localized option titles provided by the plugin.
   *
   * The following localized titles corresponding with
   * {@link module:alignment/alignmentconfig~AlignmentConfig#options} are available:
   *
   * * `'left'`,
   * * `'right'`,
   * * `'center'`,
   * * `'justify'`.
   *
   * @readonly
   */
  get localizedOptionTitles() {
    const e = this.editor.t;
    return {
      left: e("Align left"),
      right: e("Align right"),
      center: e("Align center"),
      justify: e("Justify")
    };
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "AlignmentUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.ui.componentFactory, i = e.t, s = Dd(e.config.get("alignment.options"));
    s.map((r) => r.name).filter(Md).forEach((r) => this._addButton(r)), t.add("alignment", (r) => {
      const o = ot(r);
      Kn(o, () => s.map((c) => t.create(`alignment:${c.name}`)), {
        enableActiveItemFocusOnDropdownOpen: !0,
        isVertical: !0,
        ariaLabel: i("Text alignment toolbar")
      }), o.buttonView.set({
        label: i("Text alignment"),
        tooltip: !0
      }), o.extendTemplate({
        attributes: {
          class: "ck-alignment-dropdown"
        }
      });
      const a = r.contentLanguageDirection === "rtl" ? ln.get("right") : ln.get("left"), l = e.commands.get("alignment");
      return o.buttonView.bind("icon").to(l, "value", (c) => ln.get(c) || a), o.bind("isEnabled").to(l, "isEnabled"), this.listenTo(o, "execute", () => {
        e.editing.view.focus();
      }), o;
    });
  }
  /**
   * Helper method for initializing the button and linking it with an appropriate command.
   *
   * @param option The name of the alignment option for which the button is added.
   */
  _addButton(e) {
    const t = this.editor;
    t.ui.componentFactory.add(`alignment:${e}`, (i) => {
      const s = t.commands.get("alignment"), r = new D(i);
      return r.set({
        label: this.localizedOptionTitles[e],
        icon: ln.get(e),
        tooltip: !0,
        isToggleable: !0
      }), r.bind("isEnabled").to(s), r.bind("isOn").to(s, "value", (o) => o === e), this.listenTo(r, "execute", () => {
        t.execute("alignment", { value: e }), t.editing.view.focus();
      }), r;
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class iS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [mE, _E];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Alignment";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class go extends W {
  /**
   * @param attributeKey Attribute that will be set by the command.
   */
  constructor(e, t) {
    super(e), this.attributeKey = t;
  }
  /**
   * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.
   */
  refresh() {
    const e = this.editor.model, t = e.document;
    this.value = this._getValueFromFirstAllowedNode(), this.isEnabled = e.schema.checkAttributeInSelection(t.selection, this.attributeKey);
  }
  /**
   * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.
   *
   * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.
   *
   * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:
   *
   * * If the selection is on a range, the command applies the attribute to all nodes in that range
   * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).
   * * If the selection is collapsed in a non-empty node, the command applies the attribute to the
   * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).
   * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note
   * that the selection inherits all attributes from a node if it is in an empty node).
   *
   * @fires execute
   * @param options Command options.
   * @param options.forceValue If set, it will force the command behavior. If `true`,
   * the command will apply the attribute, otherwise the command will remove the attribute.
   * If not set, the command will look for its current value to decide what it should do.
   */
  execute(e = {}) {
    const t = this.editor.model, s = t.document.selection, r = e.forceValue === void 0 ? !this.value : e.forceValue;
    t.change((o) => {
      if (s.isCollapsed)
        r ? o.setSelectionAttribute(this.attributeKey, !0) : o.removeSelectionAttribute(this.attributeKey);
      else {
        const a = t.schema.getValidRanges(s.getRanges(), this.attributeKey);
        for (const l of a)
          r ? o.setAttribute(this.attributeKey, r, l) : o.removeAttribute(this.attributeKey, l);
      }
    });
  }
  /**
   * Checks the attribute value of the first node in the selection that allows the attribute.
   * For the collapsed selection returns the selection attribute.
   *
   * @returns The attribute value.
   */
  _getValueFromFirstAllowedNode() {
    const e = this.editor.model, t = e.schema, i = e.document.selection;
    if (i.isCollapsed)
      return i.hasAttribute(this.attributeKey);
    for (const s of i.getRanges())
      for (const r of s.getItems())
        if (t.checkAttribute(r, this.attributeKey))
          return r.hasAttribute(this.attributeKey);
    return !1;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Wt = "bold";
class vE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "BoldEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    e.model.schema.extend("$text", { allowAttributes: Wt }), e.model.schema.setAttributeProperties(Wt, {
      isFormatting: !0,
      copyOnEnter: !0
    }), e.conversion.attributeToElement({
      model: Wt,
      view: "strong",
      upcastAlso: [
        "b",
        (t) => {
          const i = t.getStyle("font-weight");
          return i && (i == "bold" || Number(i) >= 600) ? {
            name: !0,
            styles: ["font-weight"]
          } : null;
        }
      ]
    }), e.commands.add(Wt, new go(e, Wt)), e.keystrokes.set("CTRL+B", Wt);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Ps = "bold";
class yE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "BoldUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.t;
    e.ui.componentFactory.add(Ps, (i) => {
      const s = e.commands.get(Ps), r = new D(i);
      return r.set({
        label: t("Bold"),
        icon: B.bold,
        keystroke: "CTRL+B",
        tooltip: !0,
        isToggleable: !0
      }), r.bind("isOn", "isEnabled").to(s, "value", "isEnabled"), this.listenTo(r, "execute", () => {
        e.execute(Ps), e.editing.view.focus();
      }), r;
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class nS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [vE, yE];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Bold";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Ut = "italic";
class kE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ItalicEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    e.model.schema.extend("$text", { allowAttributes: Ut }), e.model.schema.setAttributeProperties(Ut, {
      isFormatting: !0,
      copyOnEnter: !0
    }), e.conversion.attributeToElement({
      model: Ut,
      view: "i",
      upcastAlso: [
        "em",
        {
          styles: {
            "font-style": "italic"
          }
        }
      ]
    }), e.commands.add(Ut, new go(e, Ut)), e.keystrokes.set("CTRL+I", Ut);
  }
}
const CE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m9.586 14.633.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const xs = "italic";
class AE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ItalicUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.t;
    e.ui.componentFactory.add(xs, (i) => {
      const s = e.commands.get(xs), r = new D(i);
      return r.set({
        label: t("Italic"),
        icon: CE,
        keystroke: "CTRL+I",
        tooltip: !0,
        isToggleable: !0
      }), r.bind("isOn", "isEnabled").to(s, "value", "isEnabled"), this.listenTo(r, "execute", () => {
        e.execute(xs), e.editing.view.focus();
      }), r;
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class sS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [kE, AE];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Italic";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const yi = "underline";
class EE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "UnderlineEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    e.model.schema.extend("$text", { allowAttributes: yi }), e.model.schema.setAttributeProperties(yi, {
      isFormatting: !0,
      copyOnEnter: !0
    }), e.conversion.attributeToElement({
      model: yi,
      view: "u",
      upcastAlso: {
        styles: {
          "text-decoration": "underline"
        }
      }
    }), e.commands.add(yi, new go(e, yi)), e.keystrokes.set("CTRL+U", "underline");
  }
}
const TE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 18v-1.5h14V18zm2.2-8V3.6c0-.4.4-.6.8-.6.3 0 .7.2.7.6v6.2c0 2 1.3 2.8 3.2 2.8 1.9 0 3.4-.9 3.4-2.9V3.6c0-.3.4-.5.8-.5.3 0 .7.2.7.5V10c0 2.7-2.2 4-4.9 4-2.6 0-4.7-1.2-4.7-4z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Ss = "underline";
class PE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "UnderlineUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.t;
    e.ui.componentFactory.add(Ss, (i) => {
      const s = e.commands.get(Ss), r = new D(i);
      return r.set({
        label: t("Underline"),
        icon: TE,
        keystroke: "CTRL+U",
        tooltip: !0,
        isToggleable: !0
      }), r.bind("isOn", "isEnabled").to(s, "value", "isEnabled"), this.listenTo(r, "execute", () => {
        e.execute(Ss), e.editing.view.focus();
      }), r;
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class rS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [EE, PE];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Underline";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class xE extends W {
  /**
   * Creates an instance of the command.
   *
   * @param editor Editor instance.
   * @param modelElements Names of the element which this command can apply in the model.
   */
  constructor(e, t) {
    super(e), this.modelElements = t;
  }
  /**
   * @inheritDoc
   */
  refresh() {
    const e = de(this.editor.model.document.selection.getSelectedBlocks());
    this.value = !!e && this.modelElements.includes(e.name) && e.name, this.isEnabled = !!e && this.modelElements.some((t) => ql(e, t, this.editor.model.schema));
  }
  /**
   * Executes the command. Applies the heading to the selected blocks or, if the first selected
   * block is a heading already, turns selected headings (of this level only) to paragraphs.
   *
   * @param options.value Name of the element which this command will apply in the model.
   * @fires execute
   */
  execute(e) {
    const t = this.editor.model, i = t.document, s = e.value;
    t.change((r) => {
      const o = Array.from(i.selection.getSelectedBlocks()).filter((a) => ql(a, s, t.schema));
      for (const a of o)
        a.is("element", s) || r.rename(a, s);
    });
  }
}
function ql(n, e, t) {
  return t.checkChild(n.parent, e) && !t.isObject(n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Gl = "paragraph";
class SE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "HeadingEditing";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), e.config.define("heading", {
      options: [
        { model: "paragraph", title: "Paragraph", class: "ck-heading_paragraph" },
        { model: "heading1", view: "h2", title: "Heading 1", class: "ck-heading_heading1" },
        { model: "heading2", view: "h3", title: "Heading 2", class: "ck-heading_heading2" },
        { model: "heading3", view: "h4", title: "Heading 3", class: "ck-heading_heading3" }
      ]
    });
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Xn];
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.config.get("heading.options"), i = [];
    for (const s of t)
      s.model !== "paragraph" && (e.model.schema.register(s.model, {
        inheritAllFrom: "$block"
      }), e.conversion.elementToElement(s), i.push(s.model));
    this._addDefaultH1Conversion(e), e.commands.add("heading", new xE(e, i));
  }
  /**
   * @inheritDoc
   */
  afterInit() {
    const e = this.editor, t = e.commands.get("enter"), i = e.config.get("heading.options");
    t && this.listenTo(t, "afterExecute", (s, r) => {
      const o = e.model.document.selection.getFirstPosition().parent;
      i.some((l) => o.is("element", l.model)) && !o.is("element", Gl) && o.childCount === 0 && r.writer.rename(o, Gl);
    });
  }
  /**
   * Adds default conversion for `h1` -> `heading1` with a low priority.
   *
   * @param editor Editor instance on which to add the `h1` conversion.
   */
  _addDefaultH1Conversion(e) {
    e.conversion.for("upcast").elementToElement({
      model: "heading1",
      view: "h1",
      // With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure
      // this listener is called before it. If not, `h1` will be transformed into a paragraph.
      converterPriority: ve.low + 1
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function IE(n) {
  const e = n.t, t = {
    Paragraph: e("Paragraph"),
    "Heading 1": e("Heading 1"),
    "Heading 2": e("Heading 2"),
    "Heading 3": e("Heading 3"),
    "Heading 4": e("Heading 4"),
    "Heading 5": e("Heading 5"),
    "Heading 6": e("Heading 6")
  };
  return n.config.get("heading.options").map((i) => {
    const s = t[i.title];
    return s && s != i.title && (i.title = s), i;
  });
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class RE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "HeadingUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.t, i = IE(e), s = t("Choose heading"), r = t("Heading");
    e.ui.componentFactory.add("heading", (o) => {
      const a = {}, l = new Ue(), c = e.commands.get("heading"), u = e.commands.get("paragraph"), h = [c];
      for (const m of i) {
        const p = {
          type: "button",
          model: new vd({
            label: m.title,
            class: m.class,
            role: "menuitemradio",
            withText: !0
          })
        };
        m.model === "paragraph" ? (p.model.bind("isOn").to(u, "value"), p.model.set("commandName", "paragraph"), h.push(u)) : (p.model.bind("isOn").to(c, "value", (b) => b === m.model), p.model.set({
          commandName: "heading",
          commandValue: m.model
        })), l.add(p), a[m.model] = m.title;
      }
      const d = ot(o);
      return fd(d, l, {
        ariaLabel: r,
        role: "menu"
      }), d.buttonView.set({
        ariaLabel: r,
        ariaLabelledBy: void 0,
        isOn: !1,
        withText: !0,
        tooltip: r
      }), d.extendTemplate({
        attributes: {
          class: [
            "ck-heading-dropdown"
          ]
        }
      }), d.bind("isEnabled").toMany(h, "isEnabled", (...m) => m.some((p) => p)), d.buttonView.bind("label").to(c, "value", u, "value", (m, p) => {
        const b = m || p && "paragraph";
        return typeof b == "boolean" || !a[b] ? s : a[b];
      }), this.listenTo(d, "execute", (m) => {
        const { commandName: p, commandValue: b } = m.source;
        e.execute(p, b ? { value: b } : void 0), e.editing.view.focus();
      }), d;
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class oS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [SE, RE];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Heading";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class VE extends W {
  /**
   * Creates an instance of the command.
   *
   * @param editor Editor instance.
   * @param attributeKey The name of a model attribute on which this command operates.
   */
  constructor(e, t) {
    super(e), this.attributeKey = t;
  }
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this.editor.model, t = e.document;
    this.value = t.selection.getAttribute(this.attributeKey), this.isEnabled = e.schema.checkAttributeInSelection(t.selection, this.attributeKey);
  }
  /**
   * Executes the command. Applies the `value` of the {@link #attributeKey} to the selection.
   * If no `value` is passed, it removes the attribute from the selection.
   *
   * @param options Options for the executed command.
   * @param options.value The value to apply.
   * @fires execute
   */
  execute(e = {}) {
    const t = this.editor.model, s = t.document.selection, r = e.value, o = e.batch, a = (l) => {
      if (s.isCollapsed)
        r ? l.setSelectionAttribute(this.attributeKey, r) : l.removeSelectionAttribute(this.attributeKey);
      else {
        const c = t.schema.getValidRanges(s.getRanges(), this.attributeKey);
        for (const u of c)
          r ? l.setAttribute(this.attributeKey, r, u) : l.removeAttribute(this.attributeKey, u);
      }
    };
    o ? t.enqueueChange(o, (l) => {
      a(l);
    }) : t.change((l) => {
      a(l);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class OE extends H(Ue) {
  constructor(e) {
    super(e), this.set("isEmpty", !0), this.on("change", () => {
      this.set("isEmpty", this.length === 0);
    });
  }
  /**
   * Adds a color to the document color collection.
   *
   * This method ensures that no color duplicates are inserted (compared using
   * the color value of the {@link module:ui/colorgrid/colorgridview~ColorDefinition}).
   *
   * If the item does not have an ID, it will be automatically generated and set on the item.
   *
   * @param index The position of the item in the collection. The item is pushed to the collection when `index` is not specified.
   * @fires add
   * @fires change
   */
  add(e, t) {
    return this.find((i) => i.color === e.color) ? this : super.add(e, t);
  }
  /**
   * Checks if an object with given colors is present in the document color collection.
   */
  hasColor(e) {
    return !!this.find((t) => t.color === e);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ME extends E {
  /**
   * Creates a view to be inserted as a child of {@link module:ui/dropdown/dropdownview~DropdownView}.
   *
   * @param locale The localization services instance.
   * @param colors An array with definitions of colors to be displayed in the table.
   * @param columns The number of columns in the color grid.
   * @param removeButtonLabel The label of the button responsible for removing the color.
   * @param colorPickerLabel The label of the button responsible for color picker appearing.
   * @param documentColorsLabel The label for the section with the document colors.
   * @param documentColorsCount The number of colors in the document colors section inside the color dropdown.
   * @param colorPickerConfig The configuration of color picker feature.
   */
  constructor(e, { colors: t, columns: i, removeButtonLabel: s, documentColorsLabel: r, documentColorsCount: o, colorPickerLabel: a, colorPickerConfig: l }) {
    super(e), this.items = this.createCollection(), this.focusTracker = new fe(), this.keystrokes = new ke(), this._focusables = new qe(), this._colorPickerConfig = l, this._focusCycler = new wt({
      focusables: this._focusables,
      focusTracker: this.focusTracker,
      keystrokeHandler: this.keystrokes,
      actions: {
        // Navigate list items backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.
        focusPrevious: "shift + tab",
        // Navigate list items forwards using the <kbd>Tab</kbd> key.
        focusNext: "tab"
      }
    }), this.colorGridsPageView = new BE(e, {
      colors: t,
      columns: i,
      removeButtonLabel: s,
      documentColorsLabel: r,
      documentColorsCount: o,
      colorPickerLabel: a,
      focusTracker: this.focusTracker,
      focusables: this._focusables
    }), this.colorPickerPageView = new DE(e, {
      focusables: this._focusables,
      focusTracker: this.focusTracker,
      keystrokes: this.keystrokes,
      colorPickerConfig: l
    }), this.set("_isColorGridsPageVisible", !0), this.set("_isColorPickerPageVisible", !1), this.set("selectedColor", void 0), this.colorGridsPageView.bind("isVisible").to(this, "_isColorGridsPageVisible"), this.colorPickerPageView.bind("isVisible").to(this, "_isColorPickerPageVisible"), this.on("change:selectedColor", (c, u, h) => {
      this.colorGridsPageView.set("selectedColor", h), this.colorPickerPageView.set("selectedColor", h);
    }), this.colorGridsPageView.on("change:selectedColor", (c, u, h) => {
      this.set("selectedColor", h);
    }), this.colorPickerPageView.on("change:selectedColor", (c, u, h) => {
      this.set("selectedColor", h);
    }), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-color-table"
        ]
      },
      children: this.items
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.keystrokes.listenTo(this.element);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy();
  }
  /**
   * Appends static and document color grid views.
   */
  appendGrids() {
    this.items.length || (this.items.add(this.colorGridsPageView), this.colorGridsPageView.delegate("execute").to(this), this.colorGridsPageView.delegate("showColorPicker").to(this));
  }
  /**
   * Renders UI in dropdown. Which sub-components are rendered
   * depends on the component configuration.
   */
  appendUI() {
    this.appendGrids(), this._colorPickerConfig && this._appendColorPicker();
  }
  /**
   * Show "Color picker" and hide "Color grids".
   */
  showColorPicker() {
    this.colorPickerPageView.colorPickerView && (this.set("_isColorPickerPageVisible", !0), this.colorPickerPageView.focus(), this.set("_isColorGridsPageVisible", !1));
  }
  /**
   * Show "Color grids" and hide "Color picker".
   */
  showColorGrids() {
    this.set("_isColorGridsPageVisible", !0), this.set("_isColorPickerPageVisible", !1);
  }
  /**
   * Focuses the first focusable element in {@link #items}.
   */
  focus() {
    this._focusCycler.focusFirst();
  }
  /**
   * Focuses the last focusable element in {@link #items}.
   */
  focusLast() {
    this._focusCycler.focusLast();
  }
  /**
   * Scans through the editor model and searches for text node attributes with the given attribute name.
   * Found entries are set as document colors.
   *
   * All the previously stored document colors will be lost in the process.
   *
   * @param model The model used as a source to obtain the document colors.
   * @param attributeName Determines the name of the related model's attribute for a given dropdown.
   */
  updateDocumentColors(e, t) {
    this.colorGridsPageView.updateDocumentColors(e, t);
  }
  /**
   * Refreshes the state of the selected color in one or both {@link module:ui/colorgrid/colorgridview~ColorGridView}s
   * available in the {@link module:font/ui/colortableview~ColorTableView}. It guarantees that the selection will occur only in one
   * of them.
   */
  updateSelectedColors() {
    this.colorGridsPageView.updateSelectedColors();
  }
  /**
   * Appends the color picker view.
   */
  _appendColorPicker() {
    this.items.length !== 2 && (this.items.add(this.colorPickerPageView), this.colorGridsPageView.colorPickerButtonView && this.colorGridsPageView.colorPickerButtonView.on("execute", () => {
      this.showColorPicker();
    }), this.colorGridsPageView.addColorPickerButton(), this.colorPickerPageView.delegate("execute").to(this), this.colorPickerPageView.delegate("cancel").to(this));
  }
}
class BE extends E {
  /**
   * Creates a view to be inserted as a child of {@link module:ui/dropdown/dropdownview~DropdownView}.
   *
   * @param locale The localization services instance.
   * @param colors An array with definitions of colors to be displayed in the table.
   * @param columns The number of columns in the color grid.
   * @param removeButtonLabel The label of the button responsible for removing the color.
   * @param colorPickerLabel The label of the button responsible for color picker appearing.
   * @param documentColorsLabel The label for the section with the document colors.
   * @param documentColorsCount The number of colors in the document colors section inside the color dropdown.
   * @param focusTracker Tracks information about the DOM focus in the list.
   * @param focusables A collection of views that can be focused in the view.
   */
  constructor(e, { colors: t, columns: i, removeButtonLabel: s, documentColorsLabel: r, documentColorsCount: o, colorPickerLabel: a, focusTracker: l, focusables: c }) {
    super(e);
    const u = this.bindTemplate;
    this.set("isVisible", !0), this.focusTracker = l, this.items = this.createCollection(), this.colorDefinitions = t, this.columns = i, this.documentColors = new OE(), this.documentColorsCount = o, this._focusables = c, this._removeButtonLabel = s, this._colorPickerLabel = a, this._documentColorsLabel = r, this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck-color-grids-page-view",
          u.if("isVisible", "ck-hidden", (h) => !h)
        ]
      },
      children: this.items
    }), this.removeColorButtonView = this._createRemoveColorButton(), this.items.add(this.removeColorButtonView);
  }
  /**
   * Scans through the editor model and searches for text node attributes with the given attribute name.
   * Found entries are set as document colors.
   *
   * All the previously stored document colors will be lost in the process.
   *
   * @param model The model used as a source to obtain the document colors.
   * @param attributeName Determines the name of the related model's attribute for a given dropdown.
   */
  updateDocumentColors(e, t) {
    const i = e.document, s = this.documentColorsCount;
    this.documentColors.clear();
    for (const r of i.getRootNames()) {
      const o = i.getRoot(r), a = e.createRangeIn(o);
      for (const l of a.getItems())
        if (l.is("$textProxy") && l.hasAttribute(t) && (this._addColorToDocumentColors(l.getAttribute(t)), this.documentColors.length >= s))
          return;
    }
  }
  /**
   * Refreshes the state of the selected color in one or both {@link module:ui/colorgrid/colorgridview~ColorGridView}s
   * available in the {@link module:font/ui/colortableview~ColorTableView}. It guarantees that the selection will occur only in one
   * of them.
   */
  updateSelectedColors() {
    const e = this.documentColorsGrid, t = this.staticColorsGrid, i = this.selectedColor;
    t.selectedColor = i, e && (e.selectedColor = i);
  }
  /**
   * @inheritDoc
   */
  render() {
    if (super.render(), this.staticColorsGrid = this._createStaticColorsGrid(), this.items.add(this.staticColorsGrid), this.documentColorsCount) {
      const e = Ee.bind(this.documentColors, this.documentColors), t = new od(this.locale);
      t.text = this._documentColorsLabel, t.extendTemplate({
        attributes: {
          class: [
            "ck",
            "ck-color-grid__label",
            e.if("isEmpty", "ck-hidden")
          ]
        }
      }), this.items.add(t), this.documentColorsGrid = this._createDocumentColorsGrid(), this.items.add(this.documentColorsGrid);
    }
    this._createColorPickerButton(), this._addColorTablesElementsToFocusTracker(), this.focus();
  }
  /**
   * Focuses the component.
   */
  focus() {
    this.removeColorButtonView.focus();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy();
  }
  /**
   * Handles displaying the color picker button (if it was previously created) and making it focusable.
   */
  addColorPickerButton() {
    this.colorPickerButtonView && (this.items.add(this.colorPickerButtonView), this.focusTracker.add(this.colorPickerButtonView.element), this._focusables.add(this.colorPickerButtonView));
  }
  /**
   * Adds color table elements to focus tracker.
   */
  _addColorTablesElementsToFocusTracker() {
    this.focusTracker.add(this.removeColorButtonView.element), this._focusables.add(this.removeColorButtonView), this.staticColorsGrid && (this.focusTracker.add(this.staticColorsGrid.element), this._focusables.add(this.staticColorsGrid)), this.documentColorsGrid && (this.focusTracker.add(this.documentColorsGrid.element), this._focusables.add(this.documentColorsGrid));
  }
  /**
   * Creates the button responsible for displaying the color picker component.
   */
  _createColorPickerButton() {
    this.colorPickerButtonView = new D(), this.colorPickerButtonView.set({
      label: this._colorPickerLabel,
      withText: !0,
      icon: MC.colorPaletteIcon,
      class: "ck-color-table__color-picker"
    }), this.colorPickerButtonView.on("execute", () => {
      this.fire("showColorPicker");
    });
  }
  /**
   * Adds the remove color button as a child of the current view.
   */
  _createRemoveColorButton() {
    const e = new D();
    return e.set({
      withText: !0,
      icon: B.eraser,
      label: this._removeButtonLabel
    }), e.class = "ck-color-table__remove-color", e.on("execute", () => {
      this.fire("execute", {
        value: null,
        source: "removeColorButton"
      });
    }), e.render(), e;
  }
  /**
   * Creates a static color table grid based on the editor configuration.
   */
  _createStaticColorsGrid() {
    const e = new al(this.locale, {
      colorDefinitions: this.colorDefinitions,
      columns: this.columns
    });
    return e.on("execute", (t, i) => {
      this.fire("execute", {
        value: i.value,
        source: "staticColorsGrid"
      });
    }), e;
  }
  /**
   * Creates the document colors section view and binds it to {@link #documentColors}.
   */
  _createDocumentColorsGrid() {
    const e = Ee.bind(this.documentColors, this.documentColors), t = new al(this.locale, {
      columns: this.columns
    });
    return t.extendTemplate({
      attributes: {
        class: e.if("isEmpty", "ck-hidden")
      }
    }), t.items.bindTo(this.documentColors).using((i) => {
      const s = new Zh();
      return s.set({
        color: i.color,
        hasBorder: i.options && i.options.hasBorder
      }), i.label && s.set({
        label: i.label,
        tooltip: !0
      }), s.on("execute", () => {
        this.fire("execute", {
          value: i.color,
          source: "documentColorsGrid"
        });
      }), s;
    }), this.documentColors.on("change:isEmpty", (i, s, r) => {
      r && (t.selectedColor = null);
    }), t;
  }
  /**
   * Adds a given color to the document colors list. If possible, the method will attempt to use
   * data from the {@link #colorDefinitions} (label, color options).
   *
   * @param color A string that stores the value of the recently applied color.
   */
  _addColorToDocumentColors(e) {
    const t = this.colorDefinitions.find((i) => i.color === e);
    t ? this.documentColors.add(Object.assign({}, t)) : this.documentColors.add({
      color: e,
      label: e,
      options: {
        hasBorder: !1
      }
    });
  }
}
class DE extends E {
  /**
   * @param locale The localization services instance.
   * @param focusTracker Tracks information about the DOM focus in the list.
   * @param focusables A collection of views that can be focused in the view..
   * @param keystrokes An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.
   * @param colorPickerConfig The configuration of color picker feature.
   */
  constructor(e, { focusTracker: t, focusables: i, keystrokes: s, colorPickerConfig: r }) {
    super(e), this.items = this.createCollection(), this.focusTracker = t, this.keystrokes = s, this.set("isVisible", !1), this.set("selectedColor", void 0), this._focusables = i, this._pickerConfig = r;
    const o = this.bindTemplate, { saveButtonView: a, cancelButtonView: l } = this._createActionButtons();
    this.saveButtonView = a, this.cancelButtonView = l, this.actionBarView = this._createActionBarView({ saveButtonView: a, cancelButtonView: l }), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck-color-picker-page-view",
          o.if("isVisible", "ck-hidden", (c) => !c)
        ]
      },
      children: this.items
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render();
    const e = new lC(this.locale, this._pickerConfig);
    this.colorPickerView = e, this.colorPickerView.render(), this.selectedColor && (e.color = this.selectedColor), this.listenTo(this, "change:selectedColor", (t, i, s) => {
      e.color = s;
    }), this.items.add(this.colorPickerView), this.items.add(this.actionBarView), this._addColorPickersElementsToFocusTracker(), this._stopPropagationOnArrowsKeys(), this._executeOnEnterPress(), this._executeUponColorChange();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy();
  }
  /**
   * Focuses the color picker.
   */
  focus() {
    this.colorPickerView.focus();
  }
  /**
   * When color picker is focused and "enter" is pressed it executes command.
   */
  _executeOnEnterPress() {
    this.keystrokes.set("enter", (e) => {
      this.isVisible && this.focusTracker.focusedElement !== this.cancelButtonView.element && (this.fire("execute", {
        value: this.selectedColor
      }), e.stopPropagation(), e.preventDefault());
    });
  }
  /**
   * Removes default behavior of arrow keys in dropdown.
   */
  _stopPropagationOnArrowsKeys() {
    const e = (t) => t.stopPropagation();
    this.keystrokes.set("arrowright", e), this.keystrokes.set("arrowleft", e), this.keystrokes.set("arrowup", e), this.keystrokes.set("arrowdown", e);
  }
  /**
   * Adds color picker elements to focus tracker.
   */
  _addColorPickersElementsToFocusTracker() {
    for (const e of this.colorPickerView.slidersView)
      this.focusTracker.add(e.element), this._focusables.add(e);
    this.focusTracker.add(this.colorPickerView.hexInputRow.children.get(1).element), this._focusables.add(this.colorPickerView.hexInputRow.children.get(1)), this.focusTracker.add(this.saveButtonView.element), this._focusables.add(this.saveButtonView), this.focusTracker.add(this.cancelButtonView.element), this._focusables.add(this.cancelButtonView);
  }
  /**
   * Creates bar containing "Save" and "Cancel" buttons.
   */
  _createActionBarView({ saveButtonView: e, cancelButtonView: t }) {
    const i = new E(), s = this.createCollection();
    return s.add(e), s.add(t), i.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-color-table_action-bar"
        ]
      },
      children: s
    }), i;
  }
  /**
   * Creates "Save" and "Cancel" buttons.
   */
  _createActionButtons() {
    const e = this.locale, t = e.t, i = new D(e), s = new D(e);
    return i.set({
      icon: B.check,
      class: "ck-button-save",
      withText: !1,
      label: t("Accept"),
      type: "button"
    }), s.set({
      icon: B.cancel,
      class: "ck-button-cancel",
      withText: !1,
      label: t("Cancel")
    }), i.on("execute", () => {
      this.fire("execute", {
        source: "saveButton",
        value: this.selectedColor
      });
    }), s.on("execute", () => {
      this.fire("cancel");
    }), {
      saveButtonView: i,
      cancelButtonView: s
    };
  }
  /**
   * Fires the `execute` event if color in color picker changed.
   *
   * @fires execute
   */
  _executeUponColorChange() {
    this.colorPickerView.on("change:color", (e, t, i) => {
      this.fire("execute", {
        value: i,
        source: "colorPicker"
      });
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Fe = "fontColor";
function FE(n) {
  return (e) => zE(e.getStyle(n));
}
function NE(n) {
  return (e, { writer: t }) => t.createAttributeElement("span", {
    style: `${n}:${e}`
  }, { priority: 7 });
}
function LE({ dropdownView: n, colors: e, columns: t, removeButtonLabel: i, colorPickerLabel: s, documentColorsLabel: r, documentColorsCount: o, colorPickerConfig: a }) {
  const l = n.locale, c = new ME(l, {
    colors: e,
    columns: t,
    removeButtonLabel: i,
    colorPickerLabel: s,
    documentColorsLabel: r,
    documentColorsCount: o,
    colorPickerConfig: a
  });
  return n.colorTableView = c, n.panelView.children.add(c), c;
}
function zE(n) {
  return n.replace(/\s/g, "");
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class $E extends VE {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e, Fe);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class HE extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "FontColorEditing";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), e.config.define(Fe, {
      colors: [
        {
          color: "hsl(0, 0%, 0%)",
          label: "Black"
        },
        {
          color: "hsl(0, 0%, 30%)",
          label: "Dim grey"
        },
        {
          color: "hsl(0, 0%, 60%)",
          label: "Grey"
        },
        {
          color: "hsl(0, 0%, 90%)",
          label: "Light grey"
        },
        {
          color: "hsl(0, 0%, 100%)",
          label: "White",
          hasBorder: !0
        },
        {
          color: "hsl(0, 75%, 60%)",
          label: "Red"
        },
        {
          color: "hsl(30, 75%, 60%)",
          label: "Orange"
        },
        {
          color: "hsl(60, 75%, 60%)",
          label: "Yellow"
        },
        {
          color: "hsl(90, 75%, 60%)",
          label: "Light green"
        },
        {
          color: "hsl(120, 75%, 60%)",
          label: "Green"
        },
        {
          color: "hsl(150, 75%, 60%)",
          label: "Aquamarine"
        },
        {
          color: "hsl(180, 75%, 60%)",
          label: "Turquoise"
        },
        {
          color: "hsl(210, 75%, 60%)",
          label: "Light blue"
        },
        {
          color: "hsl(240, 75%, 60%)",
          label: "Blue"
        },
        {
          color: "hsl(270, 75%, 60%)",
          label: "Purple"
        }
      ],
      columns: 5
    }), e.conversion.for("upcast").elementToAttribute({
      view: {
        name: "span",
        styles: {
          color: /[\s\S]+/
        }
      },
      model: {
        key: Fe,
        value: FE("color")
      }
    }), e.conversion.for("upcast").elementToAttribute({
      view: {
        name: "font",
        attributes: {
          color: /^#?\w+$/
        }
      },
      model: {
        key: Fe,
        value: (t) => t.getAttribute("color")
      }
    }), e.conversion.for("downcast").attributeToElement({
      model: Fe,
      view: NE("color")
    }), e.commands.add(Fe, new $E(e)), e.model.schema.extend("$text", { allowAttributes: Fe }), e.model.schema.setAttributeProperties(Fe, {
      isFormatting: !0,
      copyOnEnter: !0
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class WE extends _ {
  /**
   * Creates a plugin which introduces a dropdown with a pre–configured {@link module:font/ui/colortableview~ColorTableView}.
   *
   * @param config The configuration object.
   * @param config.commandName The name of the command which will be executed when a color tile is clicked.
   * @param config.componentName The name of the dropdown in the {@link module:ui/componentfactory~ComponentFactory}
   * and the configuration scope name in `editor.config`.
   * @param config.icon The SVG icon used by the dropdown.
   * @param config.dropdownLabel The label used by the dropdown.
   */
  constructor(e, { commandName: t, componentName: i, icon: s, dropdownLabel: r }) {
    super(e), this.commandName = t, this.componentName = i, this.icon = s, this.dropdownLabel = r, this.columns = e.config.get(`${this.componentName}.columns`), this.colorTableView = void 0;
  }
  /**
  * @inheritDoc
  */
  init() {
    const e = this.editor, t = e.locale, i = t.t, s = e.commands.get(this.commandName), r = e.config.get(this.componentName), o = ok(r.colors), a = rk(t, o), l = r.documentColors, c = r.colorPicker !== !1;
    e.ui.componentFactory.add(this.componentName, (u) => {
      const h = ot(u);
      let d = !1;
      return this.colorTableView = LE({
        dropdownView: h,
        colors: a.map((m) => ({
          label: m.label,
          color: m.model,
          options: {
            hasBorder: m.hasBorder
          }
        })),
        columns: this.columns,
        removeButtonLabel: i("Remove color"),
        colorPickerLabel: i("Color picker"),
        documentColorsLabel: l !== 0 ? i("Document colors") : "",
        documentColorsCount: l === void 0 ? this.columns : l,
        colorPickerConfig: c ? r.colorPicker || {} : !1
      }), this.colorTableView.bind("selectedColor").to(s, "value"), h.buttonView.set({
        label: this.dropdownLabel,
        icon: this.icon,
        tooltip: !0
      }), h.extendTemplate({
        attributes: {
          class: "ck-color-ui-dropdown"
        }
      }), h.bind("isEnabled").to(s), this.colorTableView.on("execute", (m, p) => {
        h.isOpen && e.execute(this.commandName, {
          value: p.value,
          batch: this._undoStepBatch
        }), p.source !== "colorPicker" && e.editing.view.focus();
      }), this.colorTableView.on("showColorPicker", () => {
        this._undoStepBatch = e.model.createBatch();
      }), this.colorTableView.on("cancel", () => {
        this._undoStepBatch.operations.length && (h.isOpen = !1, e.execute("undo", this._undoStepBatch)), e.editing.view.focus();
      }), h.on("change:isOpen", (m, p, b) => {
        d || (d = !0, h.colorTableView.appendUI()), b ? (l !== 0 && this.colorTableView.updateDocumentColors(e.model, this.componentName), this.colorTableView.updateSelectedColors()) : this.colorTableView.showColorGrids();
      }), Jn(h, () => h.colorTableView.colorGridsPageView.staticColorsGrid.items.find((m) => m.isOn)), h;
    });
  }
}
const UE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.4 10.3 10 4.5l-2.4 5.8h4.8zm.5 1.2H7.1L5.7 15H4.2l5-12h1.6l5 12h-1.5L13 11.5zm3.1 7H4a1 1 0 0 1 0-2h12a1 1 0 0 1 0 2z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class jE extends WE {
  /**
   * @inheritDoc
   */
  constructor(e) {
    const t = e.locale.t;
    super(e, {
      commandName: Fe,
      componentName: Fe,
      icon: UE,
      dropdownLabel: t("Font Color")
    });
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "FontColorUI";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class aS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [HE, jE];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "FontColor";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Kl(n, e) {
  const t = (i, s, r) => {
    if (!r.consumable.consume(s.item, i.name))
      return;
    const o = s.attributeNewValue, a = r.writer, l = r.mapper.toViewElement(s.item), c = [...l.getChildren()].find((h) => h.getCustomProperty("media-content"));
    a.remove(c);
    const u = n.getMediaViewElement(a, o, e);
    a.insert(a.createPositionAt(l, 0), u);
  };
  return (i) => {
    i.on("attribute:url:media", t);
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function qE(n, e, t) {
  return e.setCustomProperty("media", !0, n), ho(n, e, { label: t });
}
function Jl(n, e, t, i) {
  return n.createContainerElement("figure", { class: "media" }, [
    e.getMediaViewElement(n, t, i),
    n.createSlot()
  ]);
}
function Yl(n) {
  const e = n.getSelectedElement();
  return e && e.is("element", "media") ? e : null;
}
function Fd(n, e, t, i) {
  n.change((s) => {
    const r = s.createElement("media", { url: e });
    n.insertObject(r, t, null, {
      setSelection: "on",
      findOptimalPosition: i ? "auto" : void 0
    });
  });
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class GE extends W {
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this.editor.model, t = e.document.selection, i = Yl(t);
    this.value = i ? i.getAttribute("url") : void 0, this.isEnabled = JE(t) || KE(t, e);
  }
  /**
   * Executes the command, which either:
   *
   * * updates the URL of the selected media,
   * * inserts the new media into the editor and puts the selection around it.
   *
   * @fires execute
   * @param url The URL of the media.
   */
  execute(e) {
    const t = this.editor.model, i = t.document.selection, s = Yl(i);
    s ? t.change((r) => {
      r.setAttribute("url", e, s);
    }) : Fd(t, e, i, !0);
  }
}
function KE(n, e) {
  let i = xd(n, e).start.parent;
  return i.isEmpty && !e.schema.isLimit(i) && (i = i.parent), e.schema.checkChild(i, "media");
}
function JE(n) {
  const e = n.getSelectedElement();
  return !!e && e.name === "media";
}
const YE = '<svg viewBox="0 0 64 42" xmlns="http://www.w3.org/2000/svg"><path d="M47.426 17V3.713L63.102 0v19.389h-.001l.001.272c0 1.595-2.032 3.43-4.538 4.098-2.506.668-4.538-.083-4.538-1.678 0-1.594 2.032-3.43 4.538-4.098.914-.244 2.032-.565 2.888-.603V4.516L49.076 7.447v9.556A1.014 1.014 0 0 0 49 17h-1.574zM29.5 17h-8.343a7.073 7.073 0 1 0-4.657 4.06v3.781H3.3a2.803 2.803 0 0 1-2.8-2.804V8.63a2.803 2.803 0 0 1 2.8-2.805h4.082L8.58 2.768A1.994 1.994 0 0 1 10.435 1.5h8.985c.773 0 1.477.448 1.805 1.149l1.488 3.177H26.7c1.546 0 2.8 1.256 2.8 2.805V17zm-11.637 0H17.5a1 1 0 0 0-1 1v.05A4.244 4.244 0 1 1 17.863 17zm29.684 2c.97 0 .953-.048.953.889v20.743c0 .953.016.905-.953.905H19.453c-.97 0-.953.048-.953-.905V19.89c0-.937-.016-.889.97-.889h28.077zm-4.701 19.338V22.183H24.154v16.155h18.692zM20.6 21.375v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616V37.53H20.6zm24.233-16.155v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615V37.53h-1.615zM29.485 25.283a.4.4 0 0 1 .593-.35l9.05 4.977a.4.4 0 0 1 0 .701l-9.05 4.978a.4.4 0 0 1-.593-.35v-9.956z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const ZE = "0 0 64 42";
class XE {
  /**
   * Creates an instance of the {@link module:media-embed/mediaregistry~MediaRegistry} class.
   *
   * @param locale The localization services instance.
   * @param config The configuration of the media embed feature.
   */
  constructor(e, t) {
    const i = t.providers, s = t.extraProviders || [], r = new Set(t.removeProviders), o = i.concat(s).filter((a) => {
      const l = a.name;
      return l ? !r.has(l) : (G("media-embed-no-provider-name", { provider: a }), !1);
    });
    this.locale = e, this.providerDefinitions = o;
  }
  /**
   * Checks whether the passed URL is representing a certain media type allowed in the editor.
   *
   * @param url The URL to be checked
   */
  hasMedia(e) {
    return !!this._getMedia(e);
  }
  /**
   * For the given media URL string and options, it returns the {@link module:engine/view/element~Element view element}
   * representing that media.
   *
   * **Note:** If no URL is specified, an empty view element is returned.
   *
   * @param writer The view writer used to produce a view element.
   * @param url The URL to be translated into a view element.
   */
  getMediaViewElement(e, t, i) {
    return this._getMedia(t).getViewElement(e, i);
  }
  /**
   * Returns a `Media` instance for the given URL.
   *
   * @param url The URL of the media.
   * @returns The `Media` instance or `null` when there is none.
   */
  _getMedia(e) {
    if (!e)
      return new Zl(this.locale);
    e = e.trim();
    for (const t of this.providerDefinitions) {
      const i = t.html, s = Q(t.url);
      for (const r of s) {
        const o = this._getUrlMatches(e, r);
        if (o)
          return new Zl(this.locale, e, o, i);
      }
    }
    return null;
  }
  /**
   * Tries to match `url` to `pattern`.
   *
   * @param url The URL of the media.
   * @param pattern The pattern that should accept the media URL.
   */
  _getUrlMatches(e, t) {
    let i = e.match(t);
    if (i)
      return i;
    let s = e.replace(/^https?:\/\//, "");
    return i = s.match(t), i || (s = s.replace(/^www\./, ""), i = s.match(t), i) ? i : null;
  }
}
class Zl {
  constructor(e, t, i, s) {
    this.url = this._getValidUrl(t), this._locale = e, this._match = i, this._previewRenderer = s;
  }
  /**
   * Returns the view element representation of the media.
   *
   * @param writer The view writer used to produce a view element.
   */
  getViewElement(e, t) {
    const i = {};
    let s;
    if (t.renderForEditingView || t.renderMediaPreview && this.url && this._previewRenderer) {
      this.url && (i["data-oembed-url"] = this.url), t.renderForEditingView && (i.class = "ck-media__wrapper");
      const r = this._getPreviewHtml(t);
      s = e.createRawElement("div", i, (o, a) => {
        a.setContentOf(o, r);
      });
    } else
      this.url && (i.url = this.url), s = e.createEmptyElement(t.elementName, i);
    return e.setCustomProperty("media-content", !0, s), s;
  }
  /**
   * Returns the HTML string of the media content preview.
   */
  _getPreviewHtml(e) {
    return this._previewRenderer ? this._previewRenderer(this._match) : this.url && e.renderForEditingView ? this._getPlaceholderHtml() : "";
  }
  /**
   * Returns the placeholder HTML when the media has no content preview.
   */
  _getPlaceholderHtml() {
    const e = new pt(), t = this._locale.t;
    return e.content = YE, e.viewBox = ZE, new Ee({
      tag: "div",
      attributes: {
        class: "ck ck-reset_all ck-media__placeholder"
      },
      children: [
        {
          tag: "div",
          attributes: {
            class: "ck-media__placeholder__icon"
          },
          children: [e]
        },
        {
          tag: "a",
          attributes: {
            class: "ck-media__placeholder__url",
            target: "_blank",
            rel: "noopener noreferrer",
            href: this.url,
            "data-cke-tooltip-text": t("Open media in new tab")
          },
          children: [
            {
              tag: "span",
              attributes: {
                class: "ck-media__placeholder__url__text"
              },
              children: [this.url]
            }
          ]
        }
      ]
    }).render().outerHTML;
  }
  /**
   * Returns the full URL to the specified media.
   *
   * @param url The URL of the media.
   */
  _getValidUrl(e) {
    return e ? e.match(/^https?/) ? e : "https://" + e : null;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class In extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "MediaEmbedEditing";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), e.config.define("mediaEmbed", {
      elementName: "oembed",
      providers: [
        {
          name: "dailymotion",
          url: /^dailymotion\.com\/video\/(\w+)/,
          html: (t) => `<div style="position: relative; padding-bottom: 100%; height: 0; "><iframe src="https://www.dailymotion.com/embed/video/${t[1]}" style="position: absolute; width: 100%; height: 100%; top: 0; left: 0;" frameborder="0" width="480" height="270" allowfullscreen allow="autoplay"></iframe></div>`
        },
        {
          name: "spotify",
          url: [
            /^open\.spotify\.com\/(artist\/\w+)/,
            /^open\.spotify\.com\/(album\/\w+)/,
            /^open\.spotify\.com\/(track\/\w+)/
          ],
          html: (t) => `<div style="position: relative; padding-bottom: 100%; height: 0; padding-bottom: 126%;"><iframe src="https://open.spotify.com/embed/${t[1]}" style="position: absolute; width: 100%; height: 100%; top: 0; left: 0;" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe></div>`
        },
        {
          name: "youtube",
          url: [
            /^(?:m\.)?youtube\.com\/watch\?v=([\w-]+)(?:&t=(\d+))?/,
            /^(?:m\.)?youtube\.com\/v\/([\w-]+)(?:\?t=(\d+))?/,
            /^youtube\.com\/embed\/([\w-]+)(?:\?start=(\d+))?/,
            /^youtu\.be\/([\w-]+)(?:\?t=(\d+))?/
          ],
          html: (t) => {
            const i = t[1], s = t[2];
            return `<div style="position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;"><iframe src="https://www.youtube.com/embed/${i}${s ? `?start=${s}` : ""}" style="position: absolute; width: 100%; height: 100%; top: 0; left: 0;" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div>`;
          }
        },
        {
          name: "vimeo",
          url: [
            /^vimeo\.com\/(\d+)/,
            /^vimeo\.com\/[^/]+\/[^/]+\/video\/(\d+)/,
            /^vimeo\.com\/album\/[^/]+\/video\/(\d+)/,
            /^vimeo\.com\/channels\/[^/]+\/(\d+)/,
            /^vimeo\.com\/groups\/[^/]+\/videos\/(\d+)/,
            /^vimeo\.com\/ondemand\/[^/]+\/(\d+)/,
            /^player\.vimeo\.com\/video\/(\d+)/
          ],
          html: (t) => `<div style="position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;"><iframe src="https://player.vimeo.com/video/${t[1]}" style="position: absolute; width: 100%; height: 100%; top: 0; left: 0;" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>`
        },
        {
          name: "instagram",
          url: /^instagram\.com\/p\/(\w+)/
        },
        {
          name: "twitter",
          url: /^twitter\.com/
        },
        {
          name: "googleMaps",
          url: [
            /^google\.com\/maps/,
            /^goo\.gl\/maps/,
            /^maps\.google\.com/,
            /^maps\.app\.goo\.gl/
          ]
        },
        {
          name: "flickr",
          url: /^flickr\.com/
        },
        {
          name: "facebook",
          url: /^facebook\.com/
        }
      ]
    }), this.registry = new XE(e.locale, e.config.get("mediaEmbed"));
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.model.schema, i = e.t, s = e.conversion, r = e.config.get("mediaEmbed.previewsInData"), o = e.config.get("mediaEmbed.elementName"), a = this.registry;
    e.commands.add("mediaEmbed", new GE(e)), t.register("media", {
      inheritAllFrom: "$blockObject",
      allowAttributes: ["url"]
    }), s.for("dataDowncast").elementToStructure({
      model: "media",
      view: (l, { writer: c }) => {
        const u = l.getAttribute("url");
        return Jl(c, a, u, {
          elementName: o,
          renderMediaPreview: !!u && r
        });
      }
    }), s.for("dataDowncast").add(Kl(a, {
      elementName: o,
      renderMediaPreview: r
    })), s.for("editingDowncast").elementToStructure({
      model: "media",
      view: (l, { writer: c }) => {
        const u = l.getAttribute("url"), h = Jl(c, a, u, {
          elementName: o,
          renderForEditingView: !0
        });
        return qE(h, c, i("media widget"));
      }
    }), s.for("editingDowncast").add(Kl(a, {
      elementName: o,
      renderForEditingView: !0
    })), s.for("upcast").elementToElement({
      view: (l) => ["oembed", o].includes(l.name) && l.getAttribute("url") ? { name: !0 } : null,
      model: (l, { writer: c }) => {
        const u = l.getAttribute("url");
        return a.hasMedia(u) ? c.createElement("media", { url: u }) : null;
      }
    }).elementToElement({
      view: {
        name: "div",
        attributes: {
          "data-oembed-url": !0
        }
      },
      model: (l, { writer: c }) => {
        const u = l.getAttribute("data-oembed-url");
        return a.hasMedia(u) ? c.createElement("media", { url: u }) : null;
      }
    }).add((l) => {
      const c = (u, h, d) => {
        if (!d.consumable.consume(h.viewItem, { name: !0, classes: "media" }))
          return;
        const { modelRange: m, modelCursor: p } = d.convertChildren(h.viewItem, h.modelCursor);
        h.modelRange = m, h.modelCursor = p, de(m.getItems()) || d.consumable.revert(h.viewItem, { name: !0, classes: "media" });
      };
      l.on("element:figure", c);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const QE = /^(?:http(s)?:\/\/)?[\w-]+\.[\w-.~:/?#[\]@!$&'()*+,;=%]+$/;
class eT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Rd, Vt, Od];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "AutoMediaEmbed";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this._timeoutId = null, this._positionToInsert = null;
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.model.document, i = e.plugins.get("ClipboardPipeline");
    this.listenTo(i, "inputTransformation", () => {
      const r = t.selection.getFirstRange(), o = re.fromPosition(r.start);
      o.stickiness = "toPrevious";
      const a = re.fromPosition(r.end);
      a.stickiness = "toNext", t.once("change:data", () => {
        this._embedMediaBetweenPositions(o, a), o.detach(), a.detach();
      }, { priority: "high" });
    }), e.commands.get("undo").on("execute", () => {
      this._timeoutId && (I.window.clearTimeout(this._timeoutId), this._positionToInsert.detach(), this._timeoutId = null, this._positionToInsert = null);
    }, { priority: "high" });
  }
  /**
   * Analyzes the part of the document between provided positions in search for a URL representing media.
   * When the URL is found, it is automatically converted into media.
   *
   * @param leftPosition Left position of the selection.
   * @param rightPosition Right position of the selection.
   */
  _embedMediaBetweenPositions(e, t) {
    const i = this.editor, s = i.plugins.get(In).registry, r = new We(e, t), o = r.getWalker({ ignoreElementEnd: !0 });
    let a = "";
    for (const c of o)
      c.item.is("$textProxy") && (a += c.item.data);
    if (a = a.trim(), !a.match(QE)) {
      r.detach();
      return;
    }
    if (!s.hasMedia(a)) {
      r.detach();
      return;
    }
    if (!i.commands.get("mediaEmbed").isEnabled) {
      r.detach();
      return;
    }
    this._positionToInsert = re.fromPosition(e), this._timeoutId = I.window.setTimeout(() => {
      i.model.change((c) => {
        this._timeoutId = null, c.remove(r), r.detach();
        let u = null;
        this._positionToInsert.root.rootName !== "$graveyard" && (u = this._positionToInsert), Fd(i.model, a, u, !1), this._positionToInsert.detach(), this._positionToInsert = null;
      }), i.plugins.get(Vt).requestUndoOnBackspace();
    }, 100);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class tT extends E {
  /**
   * @param validators Form validators used by {@link #isValid}.
   * @param locale The localization services instance.
   */
  constructor(e, t) {
    super(t);
    const i = t.t;
    this.focusTracker = new fe(), this.keystrokes = new ke(), this.set("mediaURLInputValue", ""), this.urlInputView = this._createUrlInput(), this.saveButtonView = this._createButton(i("Save"), B.check, "ck-button-save"), this.saveButtonView.type = "submit", this.saveButtonView.bind("isEnabled").to(this, "mediaURLInputValue", (s) => !!s), this.cancelButtonView = this._createButton(i("Cancel"), B.cancel, "ck-button-cancel", "cancel"), this._focusables = new qe(), this._focusCycler = new wt({
      focusables: this._focusables,
      focusTracker: this.focusTracker,
      keystrokeHandler: this.keystrokes,
      actions: {
        // Navigate form fields backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.
        focusPrevious: "shift + tab",
        // Navigate form fields forwards using the <kbd>Tab</kbd> key.
        focusNext: "tab"
      }
    }), this._validators = e, this.setTemplate({
      tag: "form",
      attributes: {
        class: [
          "ck",
          "ck-media-form",
          "ck-responsive-form"
        ],
        tabindex: "-1"
      },
      children: [
        this.urlInputView,
        this.saveButtonView,
        this.cancelButtonView
      ]
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), io({
      view: this
    }), [
      this.urlInputView,
      this.saveButtonView,
      this.cancelButtonView
    ].forEach((i) => {
      this._focusables.add(i), this.focusTracker.add(i.element);
    }), this.keystrokes.listenTo(this.element);
    const t = (i) => i.stopPropagation();
    this.keystrokes.set("arrowright", t), this.keystrokes.set("arrowleft", t), this.keystrokes.set("arrowup", t), this.keystrokes.set("arrowdown", t);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy();
  }
  /**
   * Focuses the fist {@link #_focusables} in the form.
   */
  focus() {
    this._focusCycler.focusFirst();
  }
  /**
   * The native DOM `value` of the {@link #urlInputView} element.
   *
   * **Note**: Do not confuse it with the {@link module:ui/inputtext/inputtextview~InputTextView#value}
   * which works one way only and may not represent the actual state of the component in the DOM.
   */
  get url() {
    return this.urlInputView.fieldView.element.value.trim();
  }
  set url(e) {
    this.urlInputView.fieldView.element.value = e.trim();
  }
  /**
   * Validates the form and returns `false` when some fields are invalid.
   */
  isValid() {
    this.resetFormStatus();
    for (const e of this._validators) {
      const t = e(this);
      if (t)
        return this.urlInputView.errorText = t, !1;
    }
    return !0;
  }
  /**
   * Cleans up the supplementary error and information text of the {@link #urlInputView}
   * bringing them back to the state when the form has been displayed for the first time.
   *
   * See {@link #isValid}.
   */
  resetFormStatus() {
    this.urlInputView.errorText = null, this.urlInputView.infoText = this._urlInputViewInfoDefault;
  }
  /**
   * Creates a labeled input view.
   *
   * @returns Labeled input view instance.
   */
  _createUrlInput() {
    const e = this.locale.t, t = new qi(this.locale, Yn), i = t.fieldView;
    return this._urlInputViewInfoDefault = e("Paste the media URL in the input."), this._urlInputViewInfoTip = e("Tip: Paste the URL into the content to embed faster."), t.label = e("Media URL"), t.infoText = this._urlInputViewInfoDefault, i.on("input", () => {
      t.infoText = i.element.value ? this._urlInputViewInfoTip : this._urlInputViewInfoDefault, this.mediaURLInputValue = i.element.value.trim();
    }), t;
  }
  /**
   * Creates a button view.
   *
   * @param label The button label.
   * @param icon The button icon.
   * @param className The additional button CSS class name.
   * @param eventName An event name that the `ButtonView#execute` event will be delegated to.
   * @returns The button view instance.
   */
  _createButton(e, t, i, s) {
    const r = new D(this.locale);
    return r.set({
      label: e,
      icon: t,
      tooltip: !0
    }), r.extendTemplate({
      attributes: {
        class: i
      }
    }), s && r.delegate("execute").to(this, s), r;
  }
}
const iT = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M18.68 3.03c.6 0 .59-.03.59.55v12.84c0 .59.01.56-.59.56H1.29c-.6 0-.59.03-.59-.56V3.58c0-.58-.01-.55.6-.55h17.38zM15.77 15V5H4.2v10h11.57zM2 4v1h1V4H2zm0 2v1h1V6H2zm0 2v1h1V8H2zm0 2v1h1v-1H2zm0 2v1h1v-1H2zm0 2v1h1v-1H2zM17 4v1h1V4h-1zm0 2v1h1V6h-1zm0 2v1h1V8h-1zm0 2v1h1v-1h-1zm0 2v1h1v-1h-1zm0 2v1h1v-1h-1zM7.5 7.177a.4.4 0 0 1 .593-.351l5.133 2.824a.4.4 0 0 1 0 .7l-5.133 2.824a.4.4 0 0 1-.593-.35V7.176v.001z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class nT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [In];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "MediaEmbedUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.commands.get("mediaEmbed");
    e.ui.componentFactory.add("mediaEmbed", (i) => {
      const s = ot(i);
      return this._setUpDropdown(s, t), s;
    });
  }
  _setUpDropdown(e, t) {
    const i = this.editor, s = i.t, r = e.buttonView, o = i.plugins.get(In).registry;
    e.once("change:isOpen", () => {
      const a = new (to(tT))(sT(i.t, o), i.locale);
      e.panelView.children.add(a), r.on("open", () => {
        a.disableCssTransitions(), a.url = t.value || "", a.urlInputView.fieldView.select(), a.enableCssTransitions();
      }, { priority: "low" }), e.on("submit", () => {
        a.isValid() && (i.execute("mediaEmbed", a.url), i.editing.view.focus());
      }), e.on("change:isOpen", () => a.resetFormStatus()), e.on("cancel", () => {
        i.editing.view.focus();
      }), a.delegate("submit", "cancel").to(e), a.urlInputView.fieldView.bind("value").to(t, "value"), a.urlInputView.bind("isEnabled").to(t, "isEnabled");
    }), e.bind("isEnabled").to(t), r.set({
      label: s("Insert media"),
      icon: iT,
      tooltip: !0
    });
  }
}
function sT(n, e) {
  return [
    (t) => {
      if (!t.url.length)
        return n("The URL must not be empty.");
    },
    (t) => {
      if (!e.hasMedia(t.url))
        return n("This media URL is not supported.");
    }
  ];
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class lS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [In, nT, eT, Gi];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "MediaEmbed";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Ot(n, e, t, i) {
  e && rT(n, e, i), t && Xe(n, t, i);
}
function Xe(n, e, t) {
  if (e.attributes)
    for (const [i, s] of Object.entries(e.attributes))
      n.setAttribute(i, s, t);
  e.styles && n.setStyle(e.styles, t), e.classes && n.addClass(e.classes, t);
}
function rT(n, e, t) {
  if (e.attributes)
    for (const [i] of Object.entries(e.attributes))
      n.removeAttribute(i, t);
  if (e.styles)
    for (const i of Object.keys(e.styles))
      n.removeStyle(i, t);
  e.classes && n.removeClass(e.classes, t);
}
function oT(n, e) {
  const t = st(n);
  let i = "attributes";
  for (i in e)
    i == "classes" ? t[i] = Array.from(/* @__PURE__ */ new Set([...n[i] || [], ...e[i]])) : t[i] = { ...n[i], ...e[i] };
  return t;
}
function jt(n, e, t, i, s) {
  const r = e.getAttribute(t), o = {};
  for (const a of ["attributes", "styles", "classes"]) {
    if (a != i) {
      r && r[a] && (o[a] = r[a]);
      continue;
    }
    if (i == "classes") {
      const c = new Set(r && r.classes || []);
      s(c), c.size && (o[a] = Array.from(c));
      continue;
    }
    const l = new Map(Object.entries(r && r[a] || {}));
    s(l), l.size && (o[a] = Object.fromEntries(l));
  }
  Object.keys(o).length ? e.is("documentSelection") ? n.setSelectionAttribute(t, o) : n.setAttribute(t, o, e) : r && (e.is("documentSelection") ? n.removeSelectionAttribute(t) : n.removeAttribute(t, e));
}
function aT(n) {
  return Db(n).replace(/ /g, "");
}
function Te(n) {
  return `html${aT(n)}Attributes`;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function po({ model: n }) {
  return (e, t) => t.writer.createElement(n, {
    htmlContent: e.getCustomProperty("$rawContent")
  });
}
function lT(n, { view: e, isInline: t }) {
  const i = n.t;
  return (s, { writer: r }) => {
    const o = i("HTML object"), a = Qn(e, s, r), l = s.getAttribute(Te(e));
    r.addClass("html-object-embed__content", a), l && Xe(r, l, a);
    const c = r.createContainerElement(t ? "span" : "div", {
      class: "html-object-embed",
      "data-html-object-embed-label": o
    }, a);
    return ho(c, r, { label: o });
  };
}
function Qn(n, e, t) {
  return t.createRawElement(n, null, (i, s) => {
    s.setContentOf(i, e.getAttribute("htmlContent"));
  });
}
function cT({ view: n, model: e }, t) {
  return (i) => {
    i.on(`element:${n}`, (s, r, o) => {
      let a = t.processViewAttributes(r.viewItem, o);
      if (!(!a && !o.consumable.test(r.viewItem, { name: !0 }))) {
        a = a || {}, o.consumable.consume(r.viewItem, { name: !0 }), r.modelRange || (r = Object.assign(r, o.convertChildren(r.viewItem, r.modelCursor)));
        for (const l of r.modelRange.getItems())
          if (o.schema.checkAttribute(l, e)) {
            const c = l.getAttribute(e), u = oT(a, c || {});
            o.writer.setAttribute(e, u, l);
          }
      }
    }, { priority: "low" });
  };
}
function uT({ priority: n, view: e }) {
  return (t, i) => {
    if (!t)
      return;
    const { writer: s } = i, r = s.createAttributeElement(e, null, { priority: n });
    return Xe(s, t, r), r;
  };
}
function Hi({ view: n }, e) {
  return (t) => {
    t.on(`element:${n}`, (i, s, r) => {
      if (!s.modelRange || s.modelRange.isCollapsed)
        return;
      const o = e.processViewAttributes(s.viewItem, r);
      o && r.writer.setAttribute(Te(s.viewItem.name), o, s.modelRange);
    }, { priority: "low" });
  };
}
function Wi({ view: n, model: e }) {
  return (t) => {
    t.on(`attribute:${Te(n)}:${e}`, (i, s, r) => {
      if (!r.consumable.consume(s.item, i.name))
        return;
      const { attributeOldValue: o, attributeNewValue: a } = s, l = r.writer, c = r.mapper.toViewElement(s.item);
      Ot(l, o, a, c);
    });
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Xl = {
  block: [
    // Existing features.
    {
      model: "codeBlock",
      view: "pre"
    },
    {
      model: "paragraph",
      view: "p"
    },
    {
      model: "blockQuote",
      view: "blockquote"
    },
    {
      model: "listItem",
      view: "li"
    },
    {
      model: "pageBreak",
      view: "div"
    },
    {
      model: "rawHtml",
      view: "div"
    },
    {
      model: "table",
      view: "table"
    },
    {
      model: "tableRow",
      view: "tr"
    },
    {
      model: "tableCell",
      view: "td"
    },
    {
      model: "tableCell",
      view: "th"
    },
    {
      model: "tableColumnGroup",
      view: "colgroup"
    },
    {
      model: "tableColumn",
      view: "col"
    },
    {
      model: "caption",
      view: "caption"
    },
    {
      model: "caption",
      view: "figcaption"
    },
    {
      model: "imageBlock",
      view: "img"
    },
    {
      model: "imageInline",
      view: "img"
    },
    // Compatibility features.
    {
      model: "htmlP",
      view: "p",
      modelSchema: {
        inheritAllFrom: "$block"
      }
    },
    {
      model: "htmlBlockquote",
      view: "blockquote",
      modelSchema: {
        inheritAllFrom: "$container"
      }
    },
    {
      model: "htmlTable",
      view: "table",
      modelSchema: {
        allowWhere: "$block",
        isBlock: !0
      }
    },
    {
      model: "htmlTbody",
      view: "tbody",
      modelSchema: {
        allowIn: "htmlTable",
        isBlock: !1
      }
    },
    {
      model: "htmlThead",
      view: "thead",
      modelSchema: {
        allowIn: "htmlTable",
        isBlock: !1
      }
    },
    {
      model: "htmlTfoot",
      view: "tfoot",
      modelSchema: {
        allowIn: "htmlTable",
        isBlock: !1
      }
    },
    {
      model: "htmlCaption",
      view: "caption",
      modelSchema: {
        allowIn: "htmlTable",
        allowChildren: "$text",
        isBlock: !1
      }
    },
    {
      model: "htmlColgroup",
      view: "colgroup",
      modelSchema: {
        allowIn: "htmlTable",
        allowChildren: "col",
        isBlock: !1
      }
    },
    {
      model: "htmlCol",
      view: "col",
      modelSchema: {
        allowIn: "htmlColgroup",
        isBlock: !1
      }
    },
    {
      model: "htmlTr",
      view: "tr",
      modelSchema: {
        allowIn: ["htmlTable", "htmlThead", "htmlTbody"],
        isLimit: !0
      }
    },
    // TODO can also include text.
    {
      model: "htmlTd",
      view: "td",
      modelSchema: {
        allowIn: "htmlTr",
        allowContentOf: "$container",
        isLimit: !0,
        isBlock: !1
      }
    },
    // TODO can also include text.
    {
      model: "htmlTh",
      view: "th",
      modelSchema: {
        allowIn: "htmlTr",
        allowContentOf: "$container",
        isLimit: !0,
        isBlock: !1
      }
    },
    // TODO can also include text.
    {
      model: "htmlFigure",
      view: "figure",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    // TODO can also include other block elements.
    {
      model: "htmlFigcaption",
      view: "figcaption",
      modelSchema: {
        allowIn: "htmlFigure",
        allowChildren: "$text",
        isBlock: !1
      }
    },
    // TODO can also include text.
    {
      model: "htmlAddress",
      view: "address",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    // TODO can also include text.
    {
      model: "htmlAside",
      view: "aside",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    // TODO can also include text.
    {
      model: "htmlMain",
      view: "main",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    // TODO can also include text.
    {
      model: "htmlDetails",
      view: "details",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    {
      model: "htmlSummary",
      view: "summary",
      modelSchema: {
        allowChildren: "$text",
        allowIn: "htmlDetails",
        isBlock: !1
      }
    },
    {
      model: "htmlDiv",
      view: "div",
      paragraphLikeModel: "htmlDivParagraph",
      modelSchema: {
        inheritAllFrom: "$container"
      }
    },
    // TODO can also include text.
    {
      model: "htmlFieldset",
      view: "fieldset",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    // TODO can also include h1-h6.
    {
      model: "htmlLegend",
      view: "legend",
      modelSchema: {
        allowIn: "htmlFieldset",
        allowChildren: "$text"
      }
    },
    // TODO can also include text.
    {
      model: "htmlHeader",
      view: "header",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    // TODO can also include text.
    {
      model: "htmlFooter",
      view: "footer",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    // TODO can also include text.
    {
      model: "htmlForm",
      view: "form",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !0
      }
    },
    {
      model: "htmlHgroup",
      view: "hgroup",
      modelSchema: {
        allowChildren: [
          "htmlH1",
          "htmlH2",
          "htmlH3",
          "htmlH4",
          "htmlH5",
          "htmlH6"
        ],
        isBlock: !1
      }
    },
    {
      model: "htmlH1",
      view: "h1",
      modelSchema: {
        inheritAllFrom: "$block"
      }
    },
    {
      model: "htmlH2",
      view: "h2",
      modelSchema: {
        inheritAllFrom: "$block"
      }
    },
    {
      model: "htmlH3",
      view: "h3",
      modelSchema: {
        inheritAllFrom: "$block"
      }
    },
    {
      model: "htmlH4",
      view: "h4",
      modelSchema: {
        inheritAllFrom: "$block"
      }
    },
    {
      model: "htmlH5",
      view: "h5",
      modelSchema: {
        inheritAllFrom: "$block"
      }
    },
    {
      model: "htmlH6",
      view: "h6",
      modelSchema: {
        inheritAllFrom: "$block"
      }
    },
    {
      model: "$htmlList",
      modelSchema: {
        allowWhere: "$container",
        allowChildren: ["$htmlList", "htmlLi"],
        isBlock: !1
      }
    },
    {
      model: "htmlDir",
      view: "dir",
      modelSchema: {
        inheritAllFrom: "$htmlList"
      }
    },
    {
      model: "htmlMenu",
      view: "menu",
      modelSchema: {
        inheritAllFrom: "$htmlList"
      }
    },
    {
      model: "htmlUl",
      view: "ul",
      modelSchema: {
        inheritAllFrom: "$htmlList"
      }
    },
    {
      model: "htmlOl",
      view: "ol",
      modelSchema: {
        inheritAllFrom: "$htmlList"
      }
    },
    // TODO can also include other block elements.
    {
      model: "htmlLi",
      view: "li",
      modelSchema: {
        allowIn: "$htmlList",
        allowChildren: "$text",
        isBlock: !1
      }
    },
    {
      model: "htmlPre",
      view: "pre",
      modelSchema: {
        inheritAllFrom: "$block"
      }
    },
    {
      model: "htmlArticle",
      view: "article",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    {
      model: "htmlSection",
      view: "section",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    // TODO can also include text.
    {
      model: "htmlNav",
      view: "nav",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    },
    {
      model: "htmlDivDl",
      view: "div",
      modelSchema: {
        allowChildren: ["htmlDt", "htmlDd"],
        allowIn: "htmlDl"
      }
    },
    {
      model: "htmlDl",
      view: "dl",
      modelSchema: {
        allowWhere: "$container",
        allowChildren: ["htmlDt", "htmlDd", "htmlDivDl"],
        isBlock: !1
      }
    },
    {
      model: "htmlDt",
      view: "dt",
      modelSchema: {
        allowChildren: "$block",
        isBlock: !1
      }
    },
    {
      model: "htmlDd",
      view: "dd",
      modelSchema: {
        allowChildren: "$block",
        isBlock: !1
      }
    },
    {
      model: "htmlCenter",
      view: "center",
      modelSchema: {
        inheritAllFrom: "$container",
        isBlock: !1
      }
    }
  ],
  inline: [
    // Existing features (attribute set on an existing model element).
    {
      model: "htmlLiAttributes",
      view: "li",
      appliesToBlock: !0,
      coupledAttribute: "listItemId"
    },
    {
      model: "htmlOlAttributes",
      view: "ol",
      appliesToBlock: !0,
      coupledAttribute: "listItemId"
    },
    {
      model: "htmlUlAttributes",
      view: "ul",
      appliesToBlock: !0,
      coupledAttribute: "listItemId"
    },
    {
      model: "htmlFigureAttributes",
      view: "figure",
      appliesToBlock: "table"
    },
    {
      model: "htmlTheadAttributes",
      view: "thead",
      appliesToBlock: "table"
    },
    {
      model: "htmlTbodyAttributes",
      view: "tbody",
      appliesToBlock: "table"
    },
    {
      model: "htmlFigureAttributes",
      view: "figure",
      appliesToBlock: "imageBlock"
    },
    // Compatibility features.
    {
      model: "htmlAcronym",
      view: "acronym",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlTt",
      view: "tt",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlFont",
      view: "font",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlTime",
      view: "time",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlVar",
      view: "var",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlBig",
      view: "big",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlSmall",
      view: "small",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlSamp",
      view: "samp",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlQ",
      view: "q",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlOutput",
      view: "output",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlKbd",
      view: "kbd",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlBdi",
      view: "bdi",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlBdo",
      view: "bdo",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlAbbr",
      view: "abbr",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlA",
      view: "a",
      priority: 5,
      coupledAttribute: "linkHref",
      attributeProperties: {
        copyOnEnter: !0
      }
    },
    {
      model: "htmlStrong",
      view: "strong",
      coupledAttribute: "bold",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlB",
      view: "b",
      coupledAttribute: "bold",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlI",
      view: "i",
      coupledAttribute: "italic",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlEm",
      view: "em",
      coupledAttribute: "italic",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlS",
      view: "s",
      coupledAttribute: "strikethrough",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.
    {
      model: "htmlDel",
      view: "del",
      coupledAttribute: "strikethrough",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.
    {
      model: "htmlIns",
      view: "ins",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlU",
      view: "u",
      coupledAttribute: "underline",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlSub",
      view: "sub",
      coupledAttribute: "subscript",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlSup",
      view: "sup",
      coupledAttribute: "superscript",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlCode",
      view: "code",
      coupledAttribute: "code",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlMark",
      view: "mark",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlSpan",
      view: "span",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlCite",
      view: "cite",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlLabel",
      view: "label",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    {
      model: "htmlDfn",
      view: "dfn",
      attributeProperties: {
        copyOnEnter: !0,
        isFormatting: !0
      }
    },
    // Objects.
    {
      model: "htmlObject",
      view: "object",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlIframe",
      view: "iframe",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlInput",
      view: "input",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlButton",
      view: "button",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlTextarea",
      view: "textarea",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlSelect",
      view: "select",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlVideo",
      view: "video",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlEmbed",
      view: "embed",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlOembed",
      view: "oembed",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlAudio",
      view: "audio",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlImg",
      view: "img",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlCanvas",
      view: "canvas",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    // TODO it could be probably represented as non-object element, although it has graphical representation,
    // so probably makes more sense to keep it as an object.
    {
      model: "htmlMeter",
      view: "meter",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    // TODO it could be probably represented as non-object element, although it has graphical representation,
    // so probably makes more sense to keep it as an object.
    {
      model: "htmlProgress",
      view: "progress",
      isObject: !0,
      modelSchema: {
        inheritAllFrom: "$inlineObject"
      }
    },
    {
      model: "htmlScript",
      view: "script",
      modelSchema: {
        allowWhere: ["$text", "$block"],
        isInline: !0
      }
    },
    {
      model: "htmlStyle",
      view: "style",
      modelSchema: {
        allowWhere: ["$text", "$block"],
        isInline: !0
      }
    },
    {
      model: "htmlCustomElement",
      view: "$customElement",
      modelSchema: {
        allowWhere: ["$text", "$block"],
        allowAttributesOf: "$inlineObject",
        isInline: !0
      }
    }
  ]
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ui extends _ {
  constructor() {
    super(...arguments), this._definitions = [];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "DataSchema";
  }
  /**
   * @inheritDoc
   */
  init() {
    for (const e of Xl.block)
      this.registerBlockElement(e);
    for (const e of Xl.inline)
      this.registerInlineElement(e);
  }
  /**
   * Add new data schema definition describing block element.
   */
  registerBlockElement(e) {
    this._definitions.push({ ...e, isBlock: !0 });
  }
  /**
   * Add new data schema definition describing inline element.
   */
  registerInlineElement(e) {
    this._definitions.push({ ...e, isInline: !0 });
  }
  /**
   * Updates schema definition describing block element with new properties.
   *
   * Creates new scheme if it doesn't exist.
   * Array properties are concatenated with original values.
   *
   * @param definition Definition update.
   */
  extendBlockElement(e) {
    this._extendDefinition({ ...e, isBlock: !0 });
  }
  /**
   * Updates schema definition describing inline element with new properties.
   *
   * Creates new scheme if it doesn't exist.
   * Array properties are concatenated with original values.
   *
   * @param definition Definition update.
   */
  extendInlineElement(e) {
    this._extendDefinition({ ...e, isInline: !0 });
  }
  /**
   * Returns all definitions matching the given view name.
   *
   * @param includeReferences Indicates if this method should also include definitions of referenced models.
   */
  getDefinitionsForView(e, t = !1) {
    const i = /* @__PURE__ */ new Set();
    for (const s of this._getMatchingViewDefinitions(e)) {
      if (t)
        for (const r of this._getReferences(s.model))
          i.add(r);
      i.add(s);
    }
    return i;
  }
  /**
   * Returns definitions matching the given model name.
   */
  getDefinitionsForModel(e) {
    return this._definitions.filter((t) => t.model == e);
  }
  /**
   * Returns definitions matching the given view name.
   */
  _getMatchingViewDefinitions(e) {
    return this._definitions.filter((t) => t.view && hT(e, t.view));
  }
  /**
   * Resolves all definition references registered for the given data schema definition.
   *
   * @param modelName Data schema model name.
   */
  *_getReferences(e) {
    const t = [
      "inheritAllFrom",
      "inheritTypesFrom",
      "allowWhere",
      "allowContentOf",
      "allowAttributesOf"
    ], i = this._definitions.filter((s) => s.model == e);
    for (const { modelSchema: s } of i)
      if (s)
        for (const r of t)
          for (const o of Q(s[r] || [])) {
            const a = this._definitions.filter((l) => l.model == o);
            for (const l of a)
              o !== e && (yield* this._getReferences(l.model), yield l);
          }
  }
  /**
   * Updates schema definition with new properties.
   *
   * Creates new scheme if it doesn't exist.
   * Array properties are concatenated with original values.
   *
   * @param definition Definition update.
   */
  _extendDefinition(e) {
    const t = Array.from(this._definitions.entries()).filter(([, i]) => i.model == e.model);
    if (t.length == 0) {
      this._definitions.push(e);
      return;
    }
    for (const [i, s] of t)
      this._definitions[i] = vb({}, s, e, (r, o) => Array.isArray(r) ? r.concat(o) : void 0);
  }
}
function hT(n, e) {
  return typeof n == "string" ? n === e : n instanceof RegExp ? n.test(e) : !1;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class te extends _ {
  constructor(e) {
    super(e), this._dataSchema = e.plugins.get("DataSchema"), this._allowedAttributes = new ri(), this._disallowedAttributes = new ri(), this._allowedElements = /* @__PURE__ */ new Set(), this._disallowedElements = /* @__PURE__ */ new Set(), this._dataInitialized = !1, this._coupledAttributes = null, this._registerElementsAfterInit(), this._registerElementHandlers(), this._registerCoupledAttributesPostFixer(), this._registerAssociatedHtmlAttributesPostFixer();
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "DataFilter";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ui, Gi];
  }
  /**
   * Load a configuration of one or many elements, where their attributes should be allowed.
   *
   * **Note**: Rules will be applied just before next data pipeline data init or set.
   *
   * @param config Configuration of elements that should have their attributes accepted in the editor.
   */
  loadAllowedConfig(e) {
    for (const t of e) {
      const i = t.name || /[\s\S]+/, s = tc(t);
      this.allowElement(i), s.forEach((r) => this.allowAttributes(r));
    }
  }
  /**
   * Load a configuration of one or many elements, where their attributes should be disallowed.
   *
   * **Note**: Rules will be applied just before next data pipeline data init or set.
   *
   * @param config Configuration of elements that should have their attributes rejected from the editor.
   */
  loadDisallowedConfig(e) {
    for (const t of e) {
      const i = t.name || /[\s\S]+/, s = tc(t);
      s.length == 0 ? this.disallowElement(i) : s.forEach((r) => this.disallowAttributes(r));
    }
  }
  /**
   * Allow the given element in the editor context.
   *
   * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used
   * to create data filter.
   *
   * **Note**: Rules will be applied just before next data pipeline data init or set.
   *
   * @param viewName String or regular expression matching view name.
   */
  allowElement(e) {
    for (const t of this._dataSchema.getDefinitionsForView(e, !0))
      this._addAllowedElement(t), this._coupledAttributes = null;
  }
  /**
   * Disallow the given element in the editor context.
   *
   * This method will only disallow elements described by the {@link module:html-support/dataschema~DataSchema} used
   * to create data filter.
   *
   * @param viewName String or regular expression matching view name.
   */
  disallowElement(e) {
    for (const t of this._dataSchema.getDefinitionsForView(e, !1))
      this._disallowedElements.add(t.view);
  }
  /**
   * Allow the given attributes for view element allowed by {@link #allowElement} method.
   *
   * @param config Pattern matching all attributes which should be allowed.
   */
  allowAttributes(e) {
    this._allowedAttributes.add(e);
  }
  /**
   * Disallow the given attributes for view element allowed by {@link #allowElement} method.
   *
   * @param config Pattern matching all attributes which should be disallowed.
   */
  disallowAttributes(e) {
    this._disallowedAttributes.add(e);
  }
  /**
   * Processes all allowed and disallowed attributes on the view element by consuming them and returning the allowed ones.
   *
   * This method applies the configuration set up by {@link #allowAttributes `allowAttributes()`}
   * and {@link #disallowAttributes `disallowAttributes()`} over the given view element by consuming relevant attributes.
   * It returns the allowed attributes that were found on the given view element for further processing by integration code.
   *
   * ```ts
   * dispatcher.on( 'element:myElement', ( evt, data, conversionApi ) => {
   * 	// Get rid of disallowed and extract all allowed attributes from a viewElement.
   * 	const viewAttributes = dataFilter.processViewAttributes( data.viewItem, conversionApi );
   * 	// Do something with them, i.e. store inside a model as a dictionary.
   * 	if ( viewAttributes ) {
   * 		conversionApi.writer.setAttribute( 'htmlAttributesOfMyElement', viewAttributes, data.modelRange );
   * 	}
   * } );
   * ```
   *
   * @see module:engine/conversion/viewconsumable~ViewConsumable#consume
   *
   * @returns Object with following properties:
   * - attributes Set with matched attribute names.
   * - styles Set with matched style names.
   * - classes Set with matched class names.
   */
  processViewAttributes(e, t) {
    return Ql(e, t, this._disallowedAttributes), Ql(e, t, this._allowedAttributes);
  }
  /**
   * Adds allowed element definition and fires registration event.
   */
  _addAllowedElement(e) {
    if (!this._allowedElements.has(e)) {
      if (this._allowedElements.add(e), "appliesToBlock" in e && typeof e.appliesToBlock == "string")
        for (const t of this._dataSchema.getDefinitionsForModel(e.appliesToBlock))
          t.isBlock && this._addAllowedElement(t);
      this._dataInitialized && this.editor.data.once("set", () => {
        this._fireRegisterEvent(e);
      }, {
        // With the highest priority listener we are able to register elements right before
        // running data conversion.
        priority: ve.highest + 1
      });
    }
  }
  /**
   * Registers elements allowed by {@link module:html-support/datafilter~DataFilter#allowElement} method
   * once {@link module:engine/controller/datacontroller~DataController editor's data controller} is initialized.
  */
  _registerElementsAfterInit() {
    this.editor.data.on("init", () => {
      this._dataInitialized = !0;
      for (const e of this._allowedElements)
        this._fireRegisterEvent(e);
    }, {
      // With highest priority listener we are able to register elements right before
      // running data conversion. Also:
      // * Make sure that priority is higher than the one used by `RealTimeCollaborationClient`,
      // as RTC is stopping event propagation.
      // * Make sure no other features hook into this event before GHS because otherwise the
      // downcast conversion (for these features) could run before GHS registered its converters
      // (https://github.com/ckeditor/ckeditor5/issues/11356).
      priority: ve.highest + 1
    });
  }
  /**
   * Registers default element handlers.
   */
  _registerElementHandlers() {
    this.on("register", (e, t) => {
      const i = this.editor.model.schema;
      if (t.isObject && !i.isRegistered(t.model))
        this._registerObjectElement(t);
      else if (t.isBlock)
        this._registerBlockElement(t);
      else if (t.isInline)
        this._registerInlineElement(t);
      else
        throw new f("data-filter-invalid-definition", null, t);
      e.stop();
    }, { priority: "lowest" });
  }
  /**
   * Registers a model post-fixer that is removing coupled GHS attributes of inline elements. Those attributes
   * are removed if a coupled feature attribute is removed.
   *
   * For example, consider following HTML:
   *
   * ```html
   * <a href="foo.html" id="myId">bar</a>
   * ```
   *
   * Which would be upcasted to following text node in the model:
   *
   * ```html
   * <$text linkHref="foo.html" htmlA="{ attributes: { id: 'myId' } }">bar</$text>
   * ```
   *
   * When the user removes the link from that text (using UI), only `linkHref` attribute would be removed:
   *
   * ```html
   * <$text htmlA="{ attributes: { id: 'myId' } }">bar</$text>
   * ```
   *
   * The `htmlA` attribute would stay in the model and would cause GHS to generate an `<a>` element.
   * This is incorrect from UX point of view, as the user wanted to remove the whole link (not only `href`).
   */
  _registerCoupledAttributesPostFixer() {
    const e = this.editor.model;
    e.document.registerPostFixer((t) => {
      const i = e.document.differ.getChanges();
      let s = !1;
      const r = this._getCoupledAttributesMap();
      for (const o of i) {
        if (o.type != "attribute" || o.attributeNewValue !== null)
          continue;
        const a = r.get(o.attributeKey);
        if (a)
          for (const { item: l } of o.range.getWalker({ shallow: !0 }))
            for (const c of a)
              l.hasAttribute(c) && (t.removeAttribute(c, l), s = !0);
      }
      return s;
    });
  }
  /**
   * Removes `html*Attributes` attributes from incompatible elements.
   *
   * For example, consider the following HTML:
   *
   * ```html
   * <heading2 htmlH2Attributes="...">foobar[]</heading2>
   * ```
   *
   * Pressing `enter` creates a new `paragraph` element that inherits
   * the `htmlH2Attributes` attribute from `heading2`.
   *
   * ```html
   * <heading2 htmlH2Attributes="...">foobar</heading2>
   * <paragraph htmlH2Attributes="...">[]</paragraph>
   * ```
   *
   * This postfixer ensures that this doesn't happen, and that elements can
   * only have `html*Attributes` associated with them,
   * e.g.: `htmlPAttributes` for `<p>`, `htmlDivAttributes` for `<div>`, etc.
   *
   * With it enabled, pressing `enter` at the end of `<heading2>` will create
   * a new paragraph without the `htmlH2Attributes` attribute.
   *
   * ```html
   * <heading2 htmlH2Attributes="...">foobar</heading2>
   * <paragraph>[]</paragraph>
   * ```
   */
  _registerAssociatedHtmlAttributesPostFixer() {
    const e = this.editor.model;
    e.document.registerPostFixer((t) => {
      const i = e.document.differ.getChanges();
      let s = !1;
      for (const r of i)
        if (!(r.type !== "insert" || r.name === "$text"))
          for (const o of r.attributes.keys())
            !o.startsWith("html") || !o.endsWith("Attributes") || e.schema.checkAttribute(r.name, o) || (t.removeAttribute(o, r.position.nodeAfter), s = !0);
      return s;
    });
  }
  /**
   * Collects the map of coupled attributes. The returned map is keyed by the feature attribute name
   * and coupled GHS attribute names are stored in the value array.
   */
  _getCoupledAttributesMap() {
    if (this._coupledAttributes)
      return this._coupledAttributes;
    this._coupledAttributes = /* @__PURE__ */ new Map();
    for (const e of this._allowedElements)
      if (e.coupledAttribute && e.model) {
        const t = this._coupledAttributes.get(e.coupledAttribute);
        t ? t.push(e.model) : this._coupledAttributes.set(e.coupledAttribute, [e.model]);
      }
    return this._coupledAttributes;
  }
  /**
   * Fires `register` event for the given element definition.
   */
  _fireRegisterEvent(e) {
    e.view && this._disallowedElements.has(e.view) || this.fire(e.view ? `register:${e.view}` : "register", e);
  }
  /**
   * Registers object element and attribute converters for the given data schema definition.
   */
  _registerObjectElement(e) {
    const t = this.editor, i = t.model.schema, s = t.conversion, { view: r, model: o } = e;
    i.register(o, e.modelSchema);
    /* istanbul ignore next: paranoid check -- @preserve */
    r && (i.extend(e.model, {
      allowAttributes: [Te(r), "htmlContent"]
    }), t.data.registerRawContentMatcher({
      name: r
    }), s.for("upcast").elementToElement({
      view: r,
      model: po(e),
      // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure
      // this listener is called before it. If not, some elements will be transformed into a paragraph.
      // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.
      converterPriority: ve.low + 2
    }), s.for("upcast").add(Hi(e, this)), s.for("editingDowncast").elementToStructure({
      model: {
        name: o,
        attributes: [Te(r)]
      },
      view: lT(t, e)
    }), s.for("dataDowncast").elementToElement({
      model: o,
      view: (a, { writer: l }) => Qn(r, a, l)
    }), s.for("dataDowncast").add(Wi(e)));
  }
  /**
   * Registers block element and attribute converters for the given data schema definition.
   */
  _registerBlockElement(e) {
    const t = this.editor, i = t.model.schema, s = t.conversion, { view: r, model: o } = e;
    if (!i.isRegistered(e.model)) {
      if (i.register(e.model, e.modelSchema), !r)
        return;
      s.for("upcast").elementToElement({
        model: o,
        view: r,
        // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure
        // this listener is called before it. If not, some elements will be transformed into a paragraph.
        // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.
        converterPriority: ve.low + 2
      }), s.for("downcast").elementToElement({
        model: o,
        view: r
      });
    }
    r && (i.extend(e.model, {
      allowAttributes: Te(r)
    }), s.for("upcast").add(Hi(e, this)), s.for("downcast").add(Wi(e)));
  }
  /**
   * Registers inline element and attribute converters for the given data schema definition.
   *
   * Extends `$text` model schema to allow the given definition model attribute and its properties.
   */
  _registerInlineElement(e) {
    const t = this.editor, i = t.model.schema, s = t.conversion, r = e.model;
    e.appliesToBlock || (i.extend("$text", {
      allowAttributes: r
    }), e.attributeProperties && i.setAttributeProperties(r, e.attributeProperties), s.for("upcast").add(cT(e, this)), s.for("downcast").attributeToElement({
      model: r,
      view: uT(e)
    }));
  }
}
function Ql(n, e, t) {
  const i = dT(n, e, t), { attributes: s, styles: r, classes: o } = mT(i), a = {};
  if (s.size)
    for (const l of s)
      Lu(l) || s.delete(l);
  return s.size && (a.attributes = ec(s, (l) => n.getAttribute(l))), r.size && (a.styles = ec(r, (l) => n.getStyle(l))), o.size && (a.classes = Array.from(o)), Object.keys(a).length ? a : null;
}
function dT(n, { consumable: e }, t) {
  const i = t.matchAll(n) || [], s = [];
  for (const r of i)
    fT(e, n, r), delete r.match.name, e.consume(n, r.match), s.push(r);
  return s;
}
function fT(n, e, t) {
  for (const i of ["attributes", "classes", "styles"]) {
    const s = t.match[i];
    if (s)
      for (const r of Array.from(s))
        n.test(e, { [i]: [r] }) || Ob(s, r);
  }
}
function mT(n) {
  const e = {
    attributes: /* @__PURE__ */ new Set(),
    classes: /* @__PURE__ */ new Set(),
    styles: /* @__PURE__ */ new Set()
  };
  for (const t of n)
    for (const i in e)
      (t.match[i] || []).forEach((r) => e[i].add(r));
  return e;
}
function ec(n, e) {
  const t = {};
  for (const i of n)
    e(i) !== void 0 && (t[i] = e(i));
  return t;
}
function Is(n, e) {
  const { name: t } = n, i = n[e];
  return me(i) ? Object.entries(i).map(([s, r]) => ({
    name: t,
    [e]: {
      [s]: r
    }
  })) : Array.isArray(i) ? i.map((s) => ({
    name: t,
    [e]: [s]
  })) : [n];
}
function tc(n) {
  const { name: e, attributes: t, classes: i, styles: s } = n, r = [];
  return t && r.push(...Is({ name: e, attributes: t }, "attributes")), i && r.push(...Is({ name: e, classes: i }, "classes")), s && r.push(...Is({ name: e, styles: s }, "styles")), r;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class gT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [te];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "CodeBlockElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    if (!this.editor.plugins.has("CodeBlockEditing"))
      return;
    const e = this.editor.plugins.get(te);
    e.on("register:pre", (t, i) => {
      if (i.model !== "codeBlock")
        return;
      const s = this.editor, r = s.model.schema, o = s.conversion;
      r.extend("codeBlock", {
        allowAttributes: ["htmlPreAttributes", "htmlContentAttributes"]
      }), o.for("upcast").add(pT(e)), o.for("downcast").add(wT()), t.stop();
    });
  }
}
function pT(n) {
  return (e) => {
    e.on("element:code", (t, i, s) => {
      const r = i.viewItem, o = r.parent;
      if (!o || !o.is("element", "pre"))
        return;
      a(o, "htmlPreAttributes"), a(r, "htmlContentAttributes");
      function a(l, c) {
        const u = n.processViewAttributes(l, s);
        u && s.writer.setAttribute(c, u, i.modelRange);
      }
    }, { priority: "low" });
  };
}
function wT() {
  return (n) => {
    n.on("attribute:htmlPreAttributes:codeBlock", (e, t, i) => {
      if (!i.consumable.consume(t.item, e.name))
        return;
      const { attributeOldValue: s, attributeNewValue: r } = t, a = i.mapper.toViewElement(t.item).parent;
      Ot(i.writer, s, r, a);
    }), n.on("attribute:htmlContentAttributes:codeBlock", (e, t, i) => {
      if (!i.consumable.consume(t.item, e.name))
        return;
      const { attributeOldValue: s, attributeNewValue: r } = t, o = i.mapper.toViewElement(t.item);
      Ot(i.writer, s, r, o);
    });
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class bT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [te];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "DualContentModelElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    this.editor.plugins.get(te).on("register", (t, i) => {
      const s = i, r = this.editor, o = r.model.schema, a = r.conversion;
      if (!s.paragraphLikeModel || o.isRegistered(s.model) || o.isRegistered(s.paragraphLikeModel))
        return;
      const l = {
        model: s.paragraphLikeModel,
        view: s.view
      };
      o.register(s.model, s.modelSchema), o.register(l.model, {
        inheritAllFrom: "$block"
      }), a.for("upcast").elementToElement({
        view: s.view,
        model: (c, { writer: u }) => this._hasBlockContent(c) ? u.createElement(s.model) : u.createElement(l.model),
        // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure
        // this listener is called before it. If not, some elements will be transformed into a paragraph.
        converterPriority: ve.low + 0.5
      }), a.for("downcast").elementToElement({
        view: s.view,
        model: s.model
      }), this._addAttributeConversion(s), a.for("downcast").elementToElement({
        view: l.view,
        model: l.model
      }), this._addAttributeConversion(l), t.stop();
    });
  }
  /**
   * Checks whether the given view element includes any other block element.
   */
  _hasBlockContent(e) {
    const t = this.editor.editing.view, i = t.domConverter.blockElements;
    for (const s of t.createRangeIn(e).getItems())
      if (s.is("element") && i.includes(s.name))
        return !0;
    return !1;
  }
  /**
   * Adds attribute filtering conversion for the given data schema.
   */
  _addAttributeConversion(e) {
    const t = this.editor, i = t.conversion, s = t.plugins.get(te);
    t.model.schema.extend(e.model, {
      allowAttributes: Te(e.view)
    }), i.for("upcast").add(Hi(e, s)), i.for("downcast").add(Wi(e));
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class _T extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ui, Zn];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "HeadingElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    if (!e.plugins.has("HeadingEditing"))
      return;
    const t = e.config.get("heading.options");
    this.registerHeadingElements(e, t);
  }
  /**
   * Registers all elements supported by HeadingEditing to enable custom attributes for those elements.
   */
  registerHeadingElements(e, t) {
    const i = e.plugins.get(ui), s = [];
    for (const r of t)
      "model" in r && "view" in r && (i.registerBlockElement({
        view: r.view,
        model: r.model
      }), s.push(r.model));
    i.extendBlockElement({
      model: "htmlHgroup",
      modelSchema: {
        allowChildren: s
      }
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function Rn(n, e, t) {
  const i = n.createRangeOn(e);
  for (const { item: s } of i.getWalker())
    if (s.is("element", t))
      return s;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class vT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [te];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    if (!e.plugins.has("ImageInlineEditing") && !e.plugins.has("ImageBlockEditing"))
      return;
    const t = e.model.schema, i = e.conversion, s = e.plugins.get(te);
    s.on("register:figure", () => {
      i.for("upcast").add(kT(s));
    }), s.on("register:img", (r, o) => {
      o.model !== "imageBlock" && o.model !== "imageInline" || (t.isRegistered("imageBlock") && t.extend("imageBlock", {
        allowAttributes: [
          "htmlImgAttributes",
          // Figure and Link don't have model counterpart.
          // We will preserve attributes on image model element using these attribute keys.
          "htmlFigureAttributes",
          "htmlLinkAttributes"
        ]
      }), t.isRegistered("imageInline") && t.extend("imageInline", {
        allowAttributes: [
          // `htmlA` is needed for standard GHS link integration.
          "htmlA",
          "htmlImgAttributes"
        ]
      }), i.for("upcast").add(yT(s)), i.for("downcast").add(CT()), r.stop());
    });
  }
}
function yT(n) {
  return (e) => {
    e.on("element:img", (t, i, s) => {
      if (!i.modelRange)
        return;
      const r = i.viewItem, o = r.parent;
      a(r, "htmlImgAttributes"), o.is("element", "a") && l(o);
      function a(c, u) {
        const h = n.processViewAttributes(c, s);
        h && s.writer.setAttribute(u, h, i.modelRange);
      }
      function l(c) {
        i.modelRange && i.modelRange.getContainedElement().is("element", "imageBlock") && a(c, "htmlLinkAttributes");
      }
    }, { priority: "low" });
  };
}
function kT(n) {
  return (e) => {
    e.on("element:figure", (t, i, s) => {
      const r = i.viewItem;
      if (!i.modelRange || !r.hasClass("image"))
        return;
      const o = n.processViewAttributes(r, s);
      o && s.writer.setAttribute("htmlFigureAttributes", o, i.modelRange);
    }, { priority: "low" });
  };
}
function CT() {
  return (n) => {
    e("htmlImgAttributes"), t("img", "htmlImgAttributes"), t("figure", "htmlFigureAttributes"), t("a", "htmlLinkAttributes");
    function e(i) {
      n.on(`attribute:${i}:imageInline`, (s, r, o) => {
        if (!o.consumable.consume(r.item, s.name))
          return;
        const { attributeOldValue: a, attributeNewValue: l } = r, c = o.mapper.toViewElement(r.item);
        Ot(o.writer, a, l, c);
      }, { priority: "low" });
    }
    function t(i, s) {
      n.on(`attribute:${s}:imageBlock`, (r, o, a) => {
        if (!a.consumable.test(o.item, r.name))
          return;
        const { attributeOldValue: l, attributeNewValue: c } = o, u = a.mapper.toViewElement(o.item), h = Rn(a.writer, u, i);
        h && (Ot(a.writer, l, c, h), a.consumable.consume(o.item, r.name));
      }, { priority: "low" }), i === "a" && n.on("attribute:linkHref:imageBlock", (r, o, a) => {
        if (!a.consumable.consume(o.item, "attribute:htmlLinkAttributes:imageBlock"))
          return;
        const l = a.mapper.toViewElement(o.item), c = Rn(a.writer, l, "a");
        Xe(a.writer, o.item.getAttribute("htmlLinkAttributes"), c);
      }, { priority: "low" });
    }
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class AT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [te];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "MediaEmbedElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    if (!e.plugins.has("MediaEmbed") || e.config.get("mediaEmbed.previewsInData"))
      return;
    const t = e.model.schema, i = e.conversion, s = this.editor.plugins.get(te), r = this.editor.plugins.get(ui), o = e.config.get("mediaEmbed.elementName");
    r.registerBlockElement({
      model: "media",
      view: o
    }), s.on("register:figure", () => {
      i.for("upcast").add(TT(s));
    }), s.on(`register:${o}`, (a, l) => {
      l.model === "media" && (t.extend("media", {
        allowAttributes: [
          Te(o),
          "htmlFigureAttributes"
        ]
      }), i.for("upcast").add(ET(s, o)), i.for("dataDowncast").add(PT(o)), a.stop());
    });
  }
}
function ET(n, e) {
  const t = (i, s, r) => {
    const o = s.viewItem;
    a(o, Te(e));
    function a(l, c) {
      const u = n.processViewAttributes(l, r);
      u && r.writer.setAttribute(c, u, s.modelRange);
    }
  };
  return (i) => {
    i.on(`element:${e}`, t, { priority: "low" });
  };
}
function TT(n) {
  return (e) => {
    e.on("element:figure", (t, i, s) => {
      const r = i.viewItem;
      if (!i.modelRange || !r.hasClass("media"))
        return;
      const o = n.processViewAttributes(r, s);
      o && s.writer.setAttribute("htmlFigureAttributes", o, i.modelRange);
    }, { priority: "low" });
  };
}
function PT(n) {
  return (e) => {
    t(n, Te(n)), t("figure", "htmlFigureAttributes");
    function t(i, s) {
      e.on(`attribute:${s}:media`, (r, o, a) => {
        if (!a.consumable.consume(o.item, r.name))
          return;
        const { attributeOldValue: l, attributeNewValue: c } = o, u = a.mapper.toViewElement(o.item), h = Rn(a.writer, u, i);
        Ot(a.writer, l, c, h);
      });
    }
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class xT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [te];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ScriptElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor.plugins.get(te);
    e.on("register:script", (t, i) => {
      const s = this.editor, r = s.model.schema, o = s.conversion;
      r.register("htmlScript", i.modelSchema), r.extend("htmlScript", {
        allowAttributes: ["htmlScriptAttributes", "htmlContent"],
        isContent: !0
      }), s.data.registerRawContentMatcher({
        name: "script"
      }), o.for("upcast").elementToElement({
        view: "script",
        model: po(i)
      }), o.for("upcast").add(Hi(i, e)), o.for("downcast").elementToElement({
        model: "htmlScript",
        view: (a, { writer: l }) => Qn("script", a, l)
      }), o.for("downcast").add(Wi(i)), t.stop();
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ST extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [te];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "TableElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    if (!e.plugins.has("TableEditing"))
      return;
    const t = e.model.schema, i = e.conversion, s = e.plugins.get(te), r = e.plugins.get("TableUtils");
    s.on("register:figure", () => {
      i.for("upcast").add(VT(s));
    }), s.on("register:table", (o, a) => {
      a.model === "table" && (t.extend("table", {
        allowAttributes: [
          "htmlTableAttributes",
          // Figure, thead and tbody elements don't have model counterparts.
          // We will be preserving attributes on table element using these attribute keys.
          "htmlFigureAttributes",
          "htmlTheadAttributes",
          "htmlTbodyAttributes"
        ]
      }), i.for("upcast").add(RT(s)), i.for("downcast").add(OT()), e.model.document.registerPostFixer(IT(e.model, r)), o.stop());
    });
  }
}
function IT(n, e) {
  return (t) => {
    const i = n.document.differ.getChanges();
    let s = !1;
    for (const r of i) {
      if (r.type != "attribute" || r.attributeKey != "headingRows")
        continue;
      const o = r.range.start.nodeAfter, a = o.getAttribute("htmlTheadAttributes"), l = o.getAttribute("htmlTbodyAttributes");
      a && !r.attributeNewValue ? (t.removeAttribute("htmlTheadAttributes", o), s = !0) : l && r.attributeNewValue == e.getRows(o) && (t.removeAttribute("htmlTbodyAttributes", o), s = !0);
    }
    return s;
  };
}
function RT(n) {
  return (e) => {
    e.on("element:table", (t, i, s) => {
      if (!i.modelRange)
        return;
      const r = i.viewItem;
      o(r, "htmlTableAttributes");
      for (const a of r.getChildren())
        a.is("element", "thead") && o(a, "htmlTheadAttributes"), a.is("element", "tbody") && o(a, "htmlTbodyAttributes");
      function o(a, l) {
        const c = n.processViewAttributes(a, s);
        c && s.writer.setAttribute(l, c, i.modelRange);
      }
    }, { priority: "low" });
  };
}
function VT(n) {
  return (e) => {
    e.on("element:figure", (t, i, s) => {
      const r = i.viewItem;
      if (!i.modelRange || !r.hasClass("table"))
        return;
      const o = n.processViewAttributes(r, s);
      o && s.writer.setAttribute("htmlFigureAttributes", o, i.modelRange);
    }, { priority: "low" });
  };
}
function OT() {
  return (n) => {
    e("table", "htmlTableAttributes"), e("figure", "htmlFigureAttributes"), e("thead", "htmlTheadAttributes"), e("tbody", "htmlTbodyAttributes");
    function e(t, i) {
      n.on(`attribute:${i}:table`, (s, r, o) => {
        if (!o.consumable.test(r.item, s.name))
          return;
        const a = o.mapper.toViewElement(r.item), l = Rn(o.writer, a, t);
        l && (o.consumable.consume(r.item, s.name), Ot(o.writer, r.attributeOldValue, r.attributeNewValue, l));
      });
    }
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class MT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [te];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "StyleElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor.plugins.get(te);
    e.on("register:style", (t, i) => {
      const s = this.editor, r = s.model.schema, o = s.conversion;
      r.register("htmlStyle", i.modelSchema), r.extend("htmlStyle", {
        allowAttributes: ["htmlStyleAttributes", "htmlContent"],
        isContent: !0
      }), s.data.registerRawContentMatcher({
        name: "style"
      }), o.for("upcast").elementToElement({
        view: "style",
        model: po(i)
      }), o.for("upcast").add(Hi(i, e)), o.for("downcast").elementToElement({
        model: "htmlStyle",
        view: (a, { writer: l }) => Qn("style", a, l)
      }), o.for("downcast").add(Wi(i)), t.stop();
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class BT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [te];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "DocumentListElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    if (!e.plugins.has("DocumentListEditing"))
      return;
    const t = e.model.schema, i = e.conversion, s = e.plugins.get(te), r = e.plugins.get("DocumentListEditing"), o = ["ul", "ol", "li"];
    r.registerDowncastStrategy({
      scope: "item",
      attributeName: "htmlLiAttributes",
      setAttributeOnDowncast: Xe
    }), r.registerDowncastStrategy({
      scope: "list",
      attributeName: "htmlUlAttributes",
      setAttributeOnDowncast: Xe
    }), r.registerDowncastStrategy({
      scope: "list",
      attributeName: "htmlOlAttributes",
      setAttributeOnDowncast: Xe
    }), s.on("register", (a, l) => {
      if (!o.includes(l.view) || (a.stop(), t.checkAttribute("$block", "htmlLiAttributes")))
        return;
      const c = o.map((u) => Te(u));
      t.extend("$block", { allowAttributes: c }), t.extend("$blockObject", { allowAttributes: c }), t.extend("$container", { allowAttributes: c }), i.for("upcast").add((u) => {
        u.on("element:ul", Rs("htmlUlAttributes", s), { priority: "low" }), u.on("element:ol", Rs("htmlOlAttributes", s), { priority: "low" }), u.on("element:li", Rs("htmlLiAttributes", s), { priority: "low" });
      });
    }), r.on("postFixer", (a, { listNodes: l, writer: c }) => {
      const u = [];
      for (const { node: h, previous: d } of l) {
        if (!d)
          continue;
        const m = h.getAttribute("listIndent"), p = d.getAttribute("listIndent");
        let b = null;
        if (m > p ? u[p] = d : m < p ? (b = u[m], u.length = m) : b = d, !!b) {
          if (b.getAttribute("listType") == h.getAttribute("listType")) {
            const C = ic(b.getAttribute("listType")), T = b.getAttribute(C);
            !vn(h.getAttribute(C), T) && c.model.schema.checkAttribute(h, C) && (c.setAttribute(C, T, h), a.return = !0);
          }
          if (b.getAttribute("listItemId") == h.getAttribute("listItemId")) {
            const C = b.getAttribute("htmlLiAttributes");
            !vn(h.getAttribute("htmlLiAttributes"), C) && c.model.schema.checkAttribute(h, "htmlLiAttributes") && (c.setAttribute("htmlLiAttributes", C, h), a.return = !0);
          }
        }
      }
    }), r.on("postFixer", (a, { listNodes: l, writer: c }) => {
      for (const { node: u } of l) {
        const h = u.getAttribute("listType");
        h === "bulleted" && u.getAttribute("htmlOlAttributes") && (c.removeAttribute("htmlOlAttributes", u), a.return = !0), h === "numbered" && u.getAttribute("htmlUlAttributes") && (c.removeAttribute("htmlUlAttributes", u), a.return = !0);
      }
    });
  }
  /**
   * @inheritDoc
   */
  afterInit() {
    const e = this.editor;
    if (!e.commands.get("indentList"))
      return;
    const t = e.commands.get("indentList");
    this.listenTo(t, "afterExecute", (i, s) => {
      e.model.change((r) => {
        for (const o of s) {
          const a = ic(o.getAttribute("listType"));
          e.model.schema.checkAttribute(o, a) && r.setAttribute(a, {}, o);
        }
      });
    });
  }
}
function Rs(n, e) {
  return (t, i, s) => {
    const r = i.viewItem;
    i.modelRange || Object.assign(i, s.convertChildren(i.viewItem, i.modelCursor));
    const o = e.processViewAttributes(r, s);
    for (const a of i.modelRange.getItems({ shallow: !0 }))
      a.hasAttribute("listItemId") && (a.hasAttribute(n) || s.writer.model.schema.checkAttribute(a, n) && s.writer.setAttribute(n, o || {}, a));
  };
}
function ic(n) {
  return n === "bulleted" ? "htmlUlAttributes" : "htmlOlAttributes";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class DT extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [te, ui];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "CustomElementSupport";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor.plugins.get(te), t = this.editor.plugins.get(ui);
    e.on("register:$customElement", (i, s) => {
      i.stop();
      const r = this.editor, o = r.model.schema, a = r.conversion, l = r.editing.view.domConverter.unsafeElements, c = r.data.htmlProcessor.domConverter.preElements;
      o.register(s.model, s.modelSchema), o.extend(s.model, {
        allowAttributes: ["htmlElementName", "htmlCustomElementAttributes", "htmlContent"],
        isContent: !0
      }), a.for("upcast").elementToElement({
        view: /.*/,
        model: (u, h) => {
          if (u.name == "$comment" || !FT(u.name) || t.getDefinitionsForView(u.name).size)
            return null;
          l.includes(u.name) || l.push(u.name), c.includes(u.name) || c.push(u.name);
          const d = h.writer.createElement(s.model, {
            htmlElementName: u.name
          }), m = e.processViewAttributes(u, h);
          m && h.writer.setAttribute("htmlCustomElementAttributes", m, d);
          const b = new Qr(u.document).createDocumentFragment(u), C = r.data.processor.toData(b);
          h.writer.setAttribute("htmlContent", C, d);
          for (const { item: T } of r.editing.view.createRangeIn(u))
            h.consumable.consume(T, { name: !0 });
          return d;
        },
        converterPriority: "low"
      }), a.for("editingDowncast").elementToElement({
        model: {
          name: s.model,
          attributes: ["htmlElementName", "htmlCustomElementAttributes", "htmlContent"]
        },
        view: (u, { writer: h }) => {
          const d = u.getAttribute("htmlElementName"), m = h.createRawElement(d);
          return u.hasAttribute("htmlCustomElementAttributes") && Xe(h, u.getAttribute("htmlCustomElementAttributes"), m), m;
        }
      }), a.for("dataDowncast").elementToElement({
        model: {
          name: s.model,
          attributes: ["htmlElementName", "htmlCustomElementAttributes", "htmlContent"]
        },
        view: (u, { writer: h }) => {
          const d = u.getAttribute("htmlElementName"), m = u.getAttribute("htmlContent"), p = h.createRawElement(d, null, (b, C) => {
            C.setContentOf(b, m);
            const T = b.firstChild;
            for (T.remove(); T.firstChild; )
              b.appendChild(T.firstChild);
          });
          return u.hasAttribute("htmlCustomElementAttributes") && Xe(h, u.getAttribute("htmlCustomElementAttributes"), p), p;
        }
      });
    });
  }
}
function FT(n) {
  try {
    document.createElement(n);
  } catch {
    return !1;
  }
  return !0;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class cS extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "GeneralHtmlSupport";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [
      te,
      gT,
      bT,
      _T,
      vT,
      AT,
      xT,
      ST,
      MT,
      BT,
      DT
    ];
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.plugins.get(te);
    t.loadAllowedConfig(e.config.get("htmlSupport.allow") || []), t.loadDisallowedConfig(e.config.get("htmlSupport.disallow") || []);
  }
  /**
   * Returns a GHS model attribute name related to a given view element name.
   *
   * @internal
   * @param viewElementName A view element name.
   */
  getGhsAttributeNameForElement(e) {
    const t = this.editor.plugins.get("DataSchema"), i = Array.from(t.getDefinitionsForView(e, !1)), s = i.find((r) => r.isInline && !i[0].isObject);
    return s ? s.model : Te(e);
  }
  /**
   * Updates GHS model attribute for a specified view element name, so it includes the given class name.
   *
   * @internal
   * @param viewElementName A view element name.
   * @param className The css class to add.
   * @param selectable The selection or element to update.
   */
  addModelHtmlClass(e, t, i) {
    const s = this.editor.model, r = this.getGhsAttributeNameForElement(e);
    s.change((o) => {
      for (const a of qt(s, i, r))
        jt(o, a, r, "classes", (l) => {
          for (const c of Q(t))
            l.add(c);
        });
    });
  }
  /**
   * Updates GHS model attribute for a specified view element name, so it does not include the given class name.
   *
   * @internal
   * @param viewElementName A view element name.
   * @param className The css class to remove.
   * @param selectable The selection or element to update.
   */
  removeModelHtmlClass(e, t, i) {
    const s = this.editor.model, r = this.getGhsAttributeNameForElement(e);
    s.change((o) => {
      for (const a of qt(s, i, r))
        jt(o, a, r, "classes", (l) => {
          for (const c of Q(t))
            l.delete(c);
        });
    });
  }
  /**
   * Updates GHS model attribute for a specified view element name, so it includes the given attribute.
   *
   * @param viewElementName A view element name.
   * @param attributes The object with attributes to set.
   * @param selectable The selection or element to update.
   */
  setModelHtmlAttributes(e, t, i) {
    const s = this.editor.model, r = this.getGhsAttributeNameForElement(e);
    s.change((o) => {
      for (const a of qt(s, i, r))
        jt(o, a, r, "attributes", (l) => {
          for (const [c, u] of Object.entries(t))
            l.set(c, u);
        });
    });
  }
  /**
   * Updates GHS model attribute for a specified view element name, so it does not include the given attribute.
   *
   * @param viewElementName A view element name.
   * @param attributeName The attribute name (or names) to remove.
   * @param selectable The selection or element to update.
   */
  removeModelHtmlAttributes(e, t, i) {
    const s = this.editor.model, r = this.getGhsAttributeNameForElement(e);
    s.change((o) => {
      for (const a of qt(s, i, r))
        jt(o, a, r, "attributes", (l) => {
          for (const c of Q(t))
            l.delete(c);
        });
    });
  }
  /**
   * Updates GHS model attribute for a specified view element name, so it includes a given style.
   *
   * @param viewElementName A view element name.
   * @param styles The object with styles to set.
   * @param selectable The selection or element to update.
   */
  setModelHtmlStyles(e, t, i) {
    const s = this.editor.model, r = this.getGhsAttributeNameForElement(e);
    s.change((o) => {
      for (const a of qt(s, i, r))
        jt(o, a, r, "styles", (l) => {
          for (const [c, u] of Object.entries(t))
            l.set(c, u);
        });
    });
  }
  /**
   * Updates GHS model attribute for a specified view element name, so it does not include a given style.
   *
   * @param viewElementName A view element name.
   * @param properties The style (or styles list) to remove.
   * @param selectable The selection or element to update.
   */
  removeModelHtmlStyles(e, t, i) {
    const s = this.editor.model, r = this.getGhsAttributeNameForElement(e);
    s.change((o) => {
      for (const a of qt(s, i, r))
        jt(o, a, r, "styles", (l) => {
          for (const c of Q(t))
            l.delete(c);
        });
    });
  }
}
function* qt(n, e, t) {
  if (e)
    if (!(Symbol.iterator in e) && e.is("documentSelection") && e.isCollapsed)
      n.schema.checkAttributeInSelection(e, t) && (yield e);
    else
      for (const i of NT(n, e, t))
        yield* i.getItems({ shallow: !0 });
}
function NT(n, e, t) {
  return !(Symbol.iterator in e) && (e.is("node") || e.is("$text") || e.is("$textProxy")) ? n.schema.checkAttribute(e, t) ? [n.createRangeOn(e)] : [] : n.schema.getValidRanges(n.createSelection(e).getRanges(), t);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class LT {
  constructor() {
    this._definitions = /* @__PURE__ */ new Set();
  }
  /**
   * Gives information about the number of decorators stored in the {@link module:link/utils/automaticdecorators~AutomaticDecorators}
   * instance.
   */
  get length() {
    return this._definitions.size;
  }
  /**
   * Adds automatic decorator objects or an array with them to be used during downcasting.
   *
   * @param item A configuration object of automatic rules for decorating links. It might also be an array of such objects.
   */
  add(e) {
    Array.isArray(e) ? e.forEach((t) => this._definitions.add(t)) : this._definitions.add(e);
  }
  /**
   * Provides the conversion helper used in the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add} method.
   *
   * @returns A dispatcher function used as conversion helper in {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add}.
   */
  getDispatcher() {
    return (e) => {
      e.on("attribute:linkHref", (t, i, s) => {
        if (!s.consumable.test(i.item, "attribute:linkHref") || !(i.item.is("selection") || s.schema.isInline(i.item)))
          return;
        const r = s.writer, o = r.document.selection;
        for (const a of this._definitions) {
          const l = r.createAttributeElement("a", a.attributes, {
            priority: 5
          });
          a.classes && r.addClass(a.classes, l);
          for (const c in a.styles)
            r.setStyle(c, a.styles[c], l);
          r.setCustomProperty("link", !0, l), a.callback(i.attributeNewValue) ? i.item.is("selection") ? r.wrap(o.getFirstRange(), l) : r.wrap(s.mapper.toViewRange(i.range), l) : r.unwrap(s.mapper.toViewRange(i.range), l);
        }
      }, { priority: "high" });
    };
  }
  /**
   * Provides the conversion helper used in the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add} method
   * when linking images.
   *
   * @returns A dispatcher function used as conversion helper in {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add}.
   */
  getDispatcherForLinkedImage() {
    return (e) => {
      e.on("attribute:linkHref:imageBlock", (t, i, { writer: s, mapper: r }) => {
        const o = r.toViewElement(i.item), a = Array.from(o.getChildren()).find((l) => l.is("element", "a"));
        for (const l of this._definitions) {
          const c = tt(l.attributes);
          if (l.callback(i.attributeNewValue)) {
            for (const [u, h] of c)
              u === "class" ? s.addClass(h, a) : s.setAttribute(u, h, a);
            l.classes && s.addClass(l.classes, a);
            for (const u in l.styles)
              s.setStyle(u, l.styles[u], a);
          } else {
            for (const [u, h] of c)
              u === "class" ? s.removeClass(h, a) : s.removeAttribute(u, a);
            l.classes && s.removeClass(l.classes, a);
            for (const u in l.styles)
              s.removeStyle(u, a);
          }
        }
      });
    };
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const zT = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g, $T = /^(?:(?:https?|ftps?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.:-]|$))/i, HT = /^[\S]+@((?![-_])(?:[-\w\u00a1-\uffff]{0,63}[^-_]\.))+(?:[a-z\u00a1-\uffff]{2,})$/i, WT = /^((\w+:(\/{2,})?)|(\W))/i, Vs = "Ctrl+K";
function UT(n) {
  return n.is("attributeElement") && !!n.getCustomProperty("link");
}
function nc(n, { writer: e }) {
  const t = e.createAttributeElement("a", { href: n }, { priority: 5 });
  return e.setCustomProperty("link", !0, t), t;
}
function Nd(n) {
  const e = String(n);
  return jT(e) ? e : "#";
}
function jT(n) {
  return !!n.replace(zT, "").match($T);
}
function qT(n, e) {
  const t = {
    "Open in a new tab": n("Open in a new tab"),
    Downloadable: n("Downloadable")
  };
  return e.forEach((i) => ("label" in i && t[i.label] && (i.label = t[i.label]), i)), e;
}
function GT(n) {
  const e = [];
  if (n)
    for (const [t, i] of Object.entries(n)) {
      const s = Object.assign({}, i, { id: `link${iu(t)}` });
      e.push(s);
    }
  return e;
}
function br(n, e) {
  return n ? e.checkAttribute(n.name, "linkHref") : !1;
}
function KT(n) {
  return HT.test(n);
}
function wo(n, e) {
  const t = KT(n) ? "mailto:" : e, i = !!t && !Ld(n);
  return n && i ? t + n : n;
}
function Ld(n) {
  return WT.test(n);
}
function sc(n) {
  window.open(n, "_blank", "noopener");
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class JT extends W {
  constructor() {
    super(...arguments), this.manualDecorators = new Ue(), this.automaticDecorators = new LT();
  }
  /**
   * Synchronizes the state of {@link #manualDecorators} with the currently present elements in the model.
   */
  restoreManualDecoratorStates() {
    for (const e of this.manualDecorators)
      e.value = this._getDecoratorStateFromModel(e.id);
  }
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this.editor.model, t = e.document.selection, i = t.getSelectedElement() || de(t.getSelectedBlocks());
    br(i, e.schema) ? (this.value = i.getAttribute("linkHref"), this.isEnabled = e.schema.checkAttribute(i, "linkHref")) : (this.value = t.getAttribute("linkHref"), this.isEnabled = e.schema.checkAttributeInSelection(t, "linkHref"));
    for (const s of this.manualDecorators)
      s.value = this._getDecoratorStateFromModel(s.id);
  }
  /**
   * Executes the command.
   *
   * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to
   * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).
   *
   * When the selection is collapsed and is not inside the text with the `linkHref` attribute, a
   * new {@link module:engine/model/text~Text text node} with the `linkHref` attribute will be inserted in place of the caret, but
   * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.
   * The selection will be updated to wrap the just inserted text node.
   *
   * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.
   *
   * # Decorators and model attribute management
   *
   * There is an optional argument to this command that applies or removes model
   * {@glink framework/architecture/editing-engine#text-attributes text attributes} brought by
   * {@link module:link/utils/manualdecorator~ManualDecorator manual link decorators}.
   *
   * Text attribute names in the model correspond to the entries in the {@link module:link/linkconfig~LinkConfig#decorators
   * configuration}.
   * For every decorator configured, a model text attribute exists with the "link" prefix. For example, a `'linkMyDecorator'` attribute
   * corresponds to `'myDecorator'` in the configuration.
   *
   * To learn more about link decorators, check out the {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`}
   * documentation.
   *
   * Here is how to manage decorator attributes with the link command:
   *
   * ```ts
   * const linkCommand = editor.commands.get( 'link' );
   *
   * // Adding a new decorator attribute.
   * linkCommand.execute( 'http://example.com', {
   * 	linkIsExternal: true
   * } );
   *
   * // Removing a decorator attribute from the selection.
   * linkCommand.execute( 'http://example.com', {
   * 	linkIsExternal: false
   * } );
   *
   * // Adding multiple decorator attributes at the same time.
   * linkCommand.execute( 'http://example.com', {
   * 	linkIsExternal: true,
   * 	linkIsDownloadable: true,
   * } );
   *
   * // Removing and adding decorator attributes at the same time.
   * linkCommand.execute( 'http://example.com', {
   * 	linkIsExternal: false,
   * 	linkFoo: true,
   * 	linkIsDownloadable: false,
   * } );
   * ```
   *
   * **Note**: If the decorator attribute name is not specified, its state remains untouched.
   *
   * **Note**: {@link module:link/unlinkcommand~UnlinkCommand#execute `UnlinkCommand#execute()`} removes all
   * decorator attributes.
   *
   * @fires execute
   * @param href Link destination.
   * @param manualDecoratorIds The information about manual decorator attributes to be applied or removed upon execution.
   */
  execute(e, t = {}) {
    const i = this.editor.model, s = i.document.selection, r = [], o = [];
    for (const a in t)
      t[a] ? r.push(a) : o.push(a);
    i.change((a) => {
      if (s.isCollapsed) {
        const l = s.getFirstPosition();
        if (s.hasAttribute("linkHref")) {
          const c = rc(s);
          let u = ci(l, "linkHref", s.getAttribute("linkHref"), i);
          s.getAttribute("linkHref") === c && (u = this._updateLinkContent(i, a, u, e)), a.setAttribute("linkHref", e, u), r.forEach((h) => {
            a.setAttribute(h, !0, u);
          }), o.forEach((h) => {
            a.removeAttribute(h, u);
          }), a.setSelection(a.createPositionAfter(u.end.nodeBefore));
        } else if (e !== "") {
          const c = tt(s.getAttributes());
          c.set("linkHref", e), r.forEach((h) => {
            c.set(h, !0);
          });
          const { end: u } = i.insertContent(a.createText(e, c), l);
          a.setSelection(u);
        }
        ["linkHref", ...r, ...o].forEach((c) => {
          a.removeSelectionAttribute(c);
        });
      } else {
        const l = i.schema.getValidRanges(s.getRanges(), "linkHref"), c = [];
        for (const h of s.getSelectedBlocks())
          i.schema.checkAttribute(h, "linkHref") && c.push(a.createRangeOn(h));
        const u = c.slice();
        for (const h of l)
          this._isRangeToUpdate(h, c) && u.push(h);
        for (const h of u) {
          let d = h;
          if (u.length === 1) {
            const m = rc(s);
            s.getAttribute("linkHref") === m && (d = this._updateLinkContent(i, a, h, e), a.setSelection(a.createSelection(d)));
          }
          a.setAttribute("linkHref", e, d), r.forEach((m) => {
            a.setAttribute(m, !0, d);
          }), o.forEach((m) => {
            a.removeAttribute(m, d);
          });
        }
      }
    });
  }
  /**
   * Provides information whether a decorator with a given name is present in the currently processed selection.
   *
   * @param decoratorName The name of the manual decorator used in the model
   * @returns The information whether a given decorator is currently present in the selection.
   */
  _getDecoratorStateFromModel(e) {
    const t = this.editor.model, i = t.document.selection, s = i.getSelectedElement();
    return br(s, t.schema) ? s.getAttribute(e) : i.getAttribute(e);
  }
  /**
   * Checks whether specified `range` is inside an element that accepts the `linkHref` attribute.
   *
   * @param range A range to check.
   * @param allowedRanges An array of ranges created on elements where the attribute is accepted.
   */
  _isRangeToUpdate(e, t) {
    for (const i of t)
      if (i.containsRange(e))
        return !1;
    return !0;
  }
  /**
   * Updates selected link with a new value as its content and as its href attribute.
   *
   * @param model Model is need to insert content.
   * @param writer Writer is need to create text element in model.
   * @param range A range where should be inserted content.
   * @param href A link value which should be in the href attribute and in the content.
   */
  _updateLinkContent(e, t, i, s) {
    const r = t.createText(s, { linkHref: s });
    return e.insertContent(r, i);
  }
}
function rc(n) {
  if (n.isCollapsed) {
    const e = n.getFirstPosition();
    return e.textNode && e.textNode.data;
  } else {
    const e = Array.from(n.getFirstRange().getItems());
    if (e.length > 1)
      return null;
    const t = e[0];
    return t.is("$text") || t.is("$textProxy") ? t.data : null;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class YT extends W {
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this.editor.model, t = e.document.selection, i = t.getSelectedElement();
    br(i, e.schema) ? this.isEnabled = e.schema.checkAttribute(i, "linkHref") : this.isEnabled = e.schema.checkAttributeInSelection(t, "linkHref");
  }
  /**
   * Executes the command.
   *
   * When the selection is collapsed, it removes the `linkHref` attribute from each node with the same `linkHref` attribute value.
   * When the selection is non-collapsed, it removes the `linkHref` attribute from each node in selected ranges.
   *
   * # Decorators
   *
   * If {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`} is specified,
   * all configured decorators are removed together with the `linkHref` attribute.
   *
   * @fires execute
   */
  execute() {
    const e = this.editor, t = this.editor.model, i = t.document.selection, s = e.commands.get("link");
    t.change((r) => {
      const o = i.isCollapsed ? [ci(i.getFirstPosition(), "linkHref", i.getAttribute("linkHref"), t)] : t.schema.getValidRanges(i.getRanges(), "linkHref");
      for (const a of o)
        if (r.removeAttribute("linkHref", a), s)
          for (const l of s.manualDecorators)
            r.removeAttribute(l.id, a);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ZT extends H() {
  /**
   * Creates a new instance of {@link module:link/utils/manualdecorator~ManualDecorator}.
   *
   * @param config.id The name of the attribute used in the model that represents a given manual decorator.
   * For example: `'linkIsExternal'`.
   * @param config.label The label used in the user interface to toggle the manual decorator.
   * @param config.attributes A set of attributes added to output data when the decorator is active for a specific link.
   * Attributes should keep the format of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.
   * @param [config.defaultValue] Controls whether the decorator is "on" by default.
   */
  constructor({ id: e, label: t, attributes: i, classes: s, styles: r, defaultValue: o }) {
    super(), this.id = e, this.set("value", void 0), this.defaultValue = o, this.label = t, this.attributes = i, this.classes = s, this.styles = r;
  }
  /**
   * Returns {@link module:engine/view/matcher~MatcherPattern} with decorator attributes.
   *
   * @internal
   */
  _createPattern() {
    return {
      attributes: this.attributes,
      classes: this.classes,
      styles: this.styles
    };
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const XT = "ck-link_selected", oc = "automatic", QT = "manual", eP = /^(https?:)?\/\//;
class tP extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "LinkEditing";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [xl, Cd, dt];
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), e.config.define("link", {
      addTargetToExternalLinks: !1
    });
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    e.model.schema.extend("$text", { allowAttributes: "linkHref" }), e.conversion.for("dataDowncast").attributeToElement({ model: "linkHref", view: nc }), e.conversion.for("editingDowncast").attributeToElement({ model: "linkHref", view: (s, r) => nc(Nd(s), r) }), e.conversion.for("upcast").elementToAttribute({
      view: {
        name: "a",
        attributes: {
          href: !0
        }
      },
      model: {
        key: "linkHref",
        value: (s) => s.getAttribute("href")
      }
    }), e.commands.add("link", new JT(e)), e.commands.add("unlink", new YT(e));
    const t = qT(e.t, GT(e.config.get("link.decorators")));
    this._enableAutomaticDecorators(t.filter((s) => s.mode === oc)), this._enableManualDecorators(t.filter((s) => s.mode === QT)), e.plugins.get(xl).registerAttribute("linkHref"), XC(e, "linkHref", "a", XT), this._enableLinkOpen(), this._enableInsertContentSelectionAttributesFixer(), this._enableClickingAfterLink(), this._enableTypingOverLink(), this._handleDeleteContentAfterLink(), this._enableClipboardIntegration();
  }
  /**
   * Processes an array of configured {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition automatic decorators}
   * and registers a {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast dispatcher}
   * for each one of them. Downcast dispatchers are obtained using the
   * {@link module:link/utils/automaticdecorators~AutomaticDecorators#getDispatcher} method.
   *
   * **Note**: This method also activates the automatic external link decorator if enabled with
   * {@link module:link/linkconfig~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}.
   */
  _enableAutomaticDecorators(e) {
    const t = this.editor, s = t.commands.get("link").automaticDecorators;
    t.config.get("link.addTargetToExternalLinks") && s.add({
      id: "linkIsExternal",
      mode: oc,
      callback: (r) => !!r && eP.test(r),
      attributes: {
        target: "_blank",
        rel: "noopener noreferrer"
      }
    }), s.add(e), s.length && t.conversion.for("downcast").add(s.getDispatcher());
  }
  /**
   * Processes an array of configured {@link module:link/linkconfig~LinkDecoratorManualDefinition manual decorators},
   * transforms them into {@link module:link/utils/manualdecorator~ManualDecorator} instances and stores them in the
   * {@link module:link/linkcommand~LinkCommand#manualDecorators} collection (a model for manual decorators state).
   *
   * Also registers an {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement attribute-to-element}
   * converter for each manual decorator and extends the {@link module:engine/model/schema~Schema model's schema}
   * with adequate model attributes.
   */
  _enableManualDecorators(e) {
    if (!e.length)
      return;
    const t = this.editor, s = t.commands.get("link").manualDecorators;
    e.forEach((r) => {
      t.model.schema.extend("$text", { allowAttributes: r.id });
      const o = new ZT(r);
      s.add(o), t.conversion.for("downcast").attributeToElement({
        model: o.id,
        view: (a, { writer: l, schema: c }, { item: u }) => {
          if ((u.is("selection") || c.isInline(u)) && a) {
            const h = l.createAttributeElement("a", o.attributes, { priority: 5 });
            o.classes && l.addClass(o.classes, h);
            for (const d in o.styles)
              l.setStyle(d, o.styles[d], h);
            return l.setCustomProperty("link", !0, h), h;
          }
        }
      }), t.conversion.for("upcast").elementToAttribute({
        view: {
          name: "a",
          ...o._createPattern()
        },
        model: {
          key: o.id
        }
      });
    });
  }
  /**
   * Attaches handlers for {@link module:engine/view/document~Document#event:enter} and
   * {@link module:engine/view/document~Document#event:click} to enable link following.
   */
  _enableLinkOpen() {
    const e = this.editor, i = e.editing.view.document;
    this.listenTo(i, "click", (s, r) => {
      if (!(S.isMac ? r.domEvent.metaKey : r.domEvent.ctrlKey))
        return;
      let a = r.domTarget;
      if (a.tagName.toLowerCase() != "a" && (a = a.closest("a")), !a)
        return;
      const l = a.getAttribute("href");
      l && (s.stop(), r.preventDefault(), sc(l));
    }, { context: "$capture" }), this.listenTo(i, "keydown", (s, r) => {
      const a = e.commands.get("link").value;
      a && r.keyCode === R.enter && r.altKey && (s.stop(), sc(a));
    });
  }
  /**
   * Starts listening to {@link module:engine/model/model~Model#event:insertContent} and corrects the model
   * selection attributes if the selection is at the end of a link after inserting the content.
   *
   * The purpose of this action is to improve the overall UX because the user is no longer "trapped" by the
   * `linkHref` attribute of the selection and they can type a "clean" (`linkHref`–less) text right away.
   *
   * See https://github.com/ckeditor/ckeditor5/issues/6053.
   */
  _enableInsertContentSelectionAttributesFixer() {
    const t = this.editor.model, i = t.document.selection;
    this.listenTo(t, "insertContent", () => {
      const s = i.anchor.nodeBefore, r = i.anchor.nodeAfter;
      i.hasAttribute("linkHref") && s && s.hasAttribute("linkHref") && (r && r.hasAttribute("linkHref") || t.change((o) => {
        Os(o, Ms(t.schema));
      }));
    }, { priority: "low" });
  }
  /**
   * Starts listening to {@link module:engine/view/document~Document#event:mousedown} and
   * {@link module:engine/view/document~Document#event:selectionChange} and puts the selection before/after a link node
   * if clicked at the beginning/ending of the link.
   *
   * The purpose of this action is to allow typing around the link node directly after a click.
   *
   * See https://github.com/ckeditor/ckeditor5/issues/1016.
   */
  _enableClickingAfterLink() {
    const e = this.editor, t = e.model;
    e.editing.view.addObserver(qn);
    let i = !1;
    this.listenTo(e.editing.view.document, "mousedown", () => {
      i = !0;
    }), this.listenTo(e.editing.view.document, "selectionChange", () => {
      if (!i)
        return;
      i = !1;
      const s = t.document.selection;
      if (!s.isCollapsed || !s.hasAttribute("linkHref"))
        return;
      const r = s.getFirstPosition(), o = ci(r, "linkHref", s.getAttribute("linkHref"), t);
      (r.isTouching(o.start) || r.isTouching(o.end)) && t.change((a) => {
        Os(a, Ms(t.schema));
      });
    });
  }
  /**
   * Starts listening to {@link module:engine/model/model~Model#deleteContent} and {@link module:engine/model/model~Model#insertContent}
   * and checks whether typing over the link. If so, attributes of removed text are preserved and applied to the inserted text.
   *
   * The purpose of this action is to allow modifying a text without loosing the `linkHref` attribute (and other).
   *
   * See https://github.com/ckeditor/ckeditor5/issues/4762.
   */
  _enableTypingOverLink() {
    const e = this.editor, t = e.editing.view;
    let i = null, s = !1;
    this.listenTo(t.document, "delete", () => {
      s = !0;
    }, { priority: "high" }), this.listenTo(e.model, "deleteContent", () => {
      const r = e.model.document.selection;
      if (!r.isCollapsed) {
        if (s) {
          s = !1;
          return;
        }
        ac(e) && iP(e.model) && (i = r.getAttributes());
      }
    }, { priority: "high" }), this.listenTo(e.model, "insertContent", (r, [o]) => {
      s = !1, ac(e) && i && (e.model.change((a) => {
        for (const [l, c] of i)
          a.setAttribute(l, c, o);
      }), i = null);
    }, { priority: "high" });
  }
  /**
   * Starts listening to {@link module:engine/model/model~Model#deleteContent} and checks whether
   * removing a content right after the "linkHref" attribute.
   *
   * If so, the selection should not preserve the `linkHref` attribute. However, if
   * the {@link module:typing/twostepcaretmovement~TwoStepCaretMovement} plugin is active and
   * the selection has the "linkHref" attribute due to overriden gravity (at the end), the `linkHref` attribute should stay untouched.
   *
   * The purpose of this action is to allow removing the link text and keep the selection outside the link.
   *
   * See https://github.com/ckeditor/ckeditor5/issues/7521.
   */
  _handleDeleteContentAfterLink() {
    const e = this.editor, t = e.model, i = t.document.selection, s = e.editing.view;
    let r = !1, o = !1;
    this.listenTo(s.document, "delete", (a, l) => {
      o = l.direction === "backward";
    }, { priority: "high" }), this.listenTo(t, "deleteContent", () => {
      r = !1;
      const a = i.getFirstPosition(), l = i.getAttribute("linkHref");
      if (!l)
        return;
      const c = ci(a, "linkHref", l, t);
      r = c.containsPosition(a) || c.end.isEqual(a);
    }, { priority: "high" }), this.listenTo(t, "deleteContent", () => {
      o && (o = !1, !r && e.model.enqueueChange((a) => {
        Os(a, Ms(t.schema));
      }));
    }, { priority: "low" });
  }
  /**
   * Enables URL fixing on pasting.
   */
  _enableClipboardIntegration() {
    const e = this.editor, t = e.model, i = this.editor.config.get("link.defaultProtocol");
    i && this.listenTo(e.plugins.get("ClipboardPipeline"), "contentInsertion", (s, r) => {
      t.change((o) => {
        const a = o.createRangeIn(r.content);
        for (const l of a.getItems())
          if (l.hasAttribute("linkHref")) {
            const c = wo(l.getAttribute("linkHref"), i);
            o.setAttribute("linkHref", c, l);
          }
      });
    });
  }
}
function Os(n, e) {
  n.removeSelectionAttribute("linkHref");
  for (const t of e)
    n.removeSelectionAttribute(t);
}
function iP(n) {
  const e = n.document.selection, t = e.getFirstPosition(), i = e.getLastPosition(), s = t.nodeAfter;
  if (!s || !s.is("$text") || !s.hasAttribute("linkHref"))
    return !1;
  const r = i.textNode || i.nodeBefore;
  return s === r ? !0 : ci(t, "linkHref", s.getAttribute("linkHref"), n).containsRange(n.createRange(t, i), !0);
}
function ac(n) {
  return n.model.change((t) => t.batch).isTyping;
}
function Ms(n) {
  return n.getDefinition("$text").allowAttributes.filter((t) => t.startsWith("link"));
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class nP extends E {
  /**
   * Creates an instance of the {@link module:link/ui/linkformview~LinkFormView} class.
   *
   * Also see {@link #render}.
   *
   * @param locale The localization services instance.
   * @param linkCommand Reference to {@link module:link/linkcommand~LinkCommand}.
   */
  constructor(e, t) {
    super(e), this.focusTracker = new fe(), this.keystrokes = new ke(), this._focusables = new qe();
    const i = e.t;
    this.urlInputView = this._createUrlInput(), this.saveButtonView = this._createButton(i("Save"), B.check, "ck-button-save"), this.saveButtonView.type = "submit", this.cancelButtonView = this._createButton(i("Cancel"), B.cancel, "ck-button-cancel", "cancel"), this._manualDecoratorSwitches = this._createManualDecoratorSwitches(t), this.children = this._createFormChildren(t.manualDecorators), this._focusCycler = new wt({
      focusables: this._focusables,
      focusTracker: this.focusTracker,
      keystrokeHandler: this.keystrokes,
      actions: {
        // Navigate form fields backwards using the Shift + Tab keystroke.
        focusPrevious: "shift + tab",
        // Navigate form fields forwards using the Tab key.
        focusNext: "tab"
      }
    });
    const s = ["ck", "ck-link-form", "ck-responsive-form"];
    t.manualDecorators.length && s.push("ck-link-form_layout-vertical", "ck-vertical-form"), this.setTemplate({
      tag: "form",
      attributes: {
        class: s,
        // https://github.com/ckeditor/ckeditor5-link/issues/90
        tabindex: "-1"
      },
      children: this.children
    });
  }
  /**
   * Obtains the state of the {@link module:ui/button/switchbuttonview~SwitchButtonView switch buttons} representing
   * {@link module:link/linkcommand~LinkCommand#manualDecorators manual link decorators}
   * in the {@link module:link/ui/linkformview~LinkFormView}.
   *
   * @returns Key-value pairs, where the key is the name of the decorator and the value is its state.
   */
  getDecoratorSwitchesState() {
    return Array.from(this._manualDecoratorSwitches).reduce((e, t) => (e[t.name] = t.isOn, e), {});
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), io({
      view: this
    }), [
      this.urlInputView,
      ...this._manualDecoratorSwitches,
      this.saveButtonView,
      this.cancelButtonView
    ].forEach((t) => {
      this._focusables.add(t), this.focusTracker.add(t.element);
    }), this.keystrokes.listenTo(this.element);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy();
  }
  /**
   * Focuses the fist {@link #_focusables} in the form.
   */
  focus() {
    this._focusCycler.focusFirst();
  }
  /**
   * Creates a labeled input view.
   *
   * @returns Labeled field view instance.
   */
  _createUrlInput() {
    const e = this.locale.t, t = new qi(this.locale, Yn);
    return t.label = e("Link URL"), t;
  }
  /**
   * Creates a button view.
   *
   * @param label The button label.
   * @param icon The button icon.
   * @param className The additional button CSS class name.
   * @param eventName An event name that the `ButtonView#execute` event will be delegated to.
   * @returns The button view instance.
   */
  _createButton(e, t, i, s) {
    const r = new D(this.locale);
    return r.set({
      label: e,
      icon: t,
      tooltip: !0
    }), r.extendTemplate({
      attributes: {
        class: i
      }
    }), s && r.delegate("execute").to(this, s), r;
  }
  /**
   * Populates {@link module:ui/viewcollection~ViewCollection} of {@link module:ui/button/switchbuttonview~SwitchButtonView}
   * made based on {@link module:link/linkcommand~LinkCommand#manualDecorators}.
   *
   * @param linkCommand A reference to the link command.
   * @returns ViewCollection of switch buttons.
   */
  _createManualDecoratorSwitches(e) {
    const t = this.createCollection();
    for (const i of e.manualDecorators) {
      const s = new Gn(this.locale);
      s.set({
        name: i.id,
        label: i.label,
        withText: !0
      }), s.bind("isOn").toMany([i, e], "value", (r, o) => o === void 0 && r === void 0 ? !!i.defaultValue : !!r), s.on("execute", () => {
        i.set("value", !s.isOn);
      }), t.add(s);
    }
    return t;
  }
  /**
   * Populates the {@link #children} collection of the form.
   *
   * If {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators} are configured in the editor, it creates an
   * additional `View` wrapping all {@link #_manualDecoratorSwitches} switch buttons corresponding
   * to these decorators.
   *
   * @param manualDecorators A reference to
   * the collection of manual decorators stored in the link command.
   * @returns The children of link form view.
   */
  _createFormChildren(e) {
    const t = this.createCollection();
    if (t.add(this.urlInputView), e.length) {
      const i = new E();
      i.setTemplate({
        tag: "ul",
        children: this._manualDecoratorSwitches.map((s) => ({
          tag: "li",
          children: [s],
          attributes: {
            class: [
              "ck",
              "ck-list__item"
            ]
          }
        })),
        attributes: {
          class: [
            "ck",
            "ck-reset",
            "ck-list"
          ]
        }
      }), t.add(i);
    }
    return t.add(this.saveButtonView), t.add(this.cancelButtonView), t;
  }
}
const sP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m11.077 15 .991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zm4.919 10.562-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class rP extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this.focusTracker = new fe(), this.keystrokes = new ke(), this._focusables = new qe();
    const t = e.t;
    this.previewButtonView = this._createPreviewButton(), this.unlinkButtonView = this._createButton(t("Unlink"), sP, "unlink"), this.editButtonView = this._createButton(t("Edit link"), B.pencil, "edit"), this.set("href", void 0), this._focusCycler = new wt({
      focusables: this._focusables,
      focusTracker: this.focusTracker,
      keystrokeHandler: this.keystrokes,
      actions: {
        // Navigate fields backwards using the Shift + Tab keystroke.
        focusPrevious: "shift + tab",
        // Navigate fields forwards using the Tab key.
        focusNext: "tab"
      }
    }), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-link-actions",
          "ck-responsive-form"
        ],
        // https://github.com/ckeditor/ckeditor5-link/issues/90
        tabindex: "-1"
      },
      children: [
        this.previewButtonView,
        this.editButtonView,
        this.unlinkButtonView
      ]
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), [
      this.previewButtonView,
      this.editButtonView,
      this.unlinkButtonView
    ].forEach((t) => {
      this._focusables.add(t), this.focusTracker.add(t.element);
    }), this.keystrokes.listenTo(this.element);
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy();
  }
  /**
   * Focuses the fist {@link #_focusables} in the actions.
   */
  focus() {
    this._focusCycler.focusFirst();
  }
  /**
   * Creates a button view.
   *
   * @param label The button label.
   * @param icon The button icon.
   * @param eventName An event name that the `ButtonView#execute` event will be delegated to.
   * @returns The button view instance.
   */
  _createButton(e, t, i) {
    const s = new D(this.locale);
    return s.set({
      label: e,
      icon: t,
      tooltip: !0
    }), s.delegate("execute").to(this, i), s;
  }
  /**
   * Creates a link href preview button.
   *
   * @returns The button view instance.
   */
  _createPreviewButton() {
    const e = new D(this.locale), t = this.bindTemplate, i = this.t;
    return e.set({
      withText: !0,
      tooltip: i("Open link in new tab")
    }), e.extendTemplate({
      attributes: {
        class: [
          "ck",
          "ck-link-actions__preview"
        ],
        href: t.to("href", (s) => s && Nd(s)),
        target: "_blank",
        rel: "noopener noreferrer"
      }
    }), e.bind("label").to(this, "href", (s) => s || i("This link has no URL")), e.bind("isEnabled").to(this, "href", (s) => !!s), e.template.tag = "a", e.template.eventListeners = {}, e;
  }
}
const oP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="m11.077 15 .991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Be = "link-ui";
class aP extends _ {
  constructor() {
    super(...arguments), this.actionsView = null, this.formView = null;
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [xn];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "LinkUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    e.editing.view.addObserver(i5), this._balloon = e.plugins.get(xn), this._createToolbarLinkButton(), this._enableBalloonActivators(), e.conversion.for("editingDowncast").markerToHighlight({
      model: Be,
      view: {
        classes: ["ck-fake-link-selection"]
      }
    }), e.conversion.for("editingDowncast").markerToElement({
      model: Be,
      view: {
        name: "span",
        classes: ["ck-fake-link-selection", "ck-fake-link-selection_collapsed"]
      }
    });
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.formView && this.formView.destroy(), this.actionsView && this.actionsView.destroy();
  }
  /**
   * Creates views.
   */
  _createViews() {
    this.actionsView = this._createActionsView(), this.formView = this._createFormView(), this._enableUserBalloonInteractions();
  }
  /**
   * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.
   */
  _createActionsView() {
    const e = this.editor, t = new rP(e.locale), i = e.commands.get("link"), s = e.commands.get("unlink");
    return t.bind("href").to(i, "value"), t.editButtonView.bind("isEnabled").to(i), t.unlinkButtonView.bind("isEnabled").to(s), this.listenTo(t, "edit", () => {
      this._addFormView();
    }), this.listenTo(t, "unlink", () => {
      e.execute("unlink"), this._hideUI();
    }), t.keystrokes.set("Esc", (r, o) => {
      this._hideUI(), o();
    }), t.keystrokes.set(Vs, (r, o) => {
      this._addFormView(), o();
    }), t;
  }
  /**
   * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.
   */
  _createFormView() {
    const e = this.editor, t = e.commands.get("link"), i = e.config.get("link.defaultProtocol"), s = new (to(nP))(e.locale, t);
    return s.urlInputView.fieldView.bind("value").to(t, "value"), s.urlInputView.bind("isEnabled").to(t, "isEnabled"), s.saveButtonView.bind("isEnabled").to(t), this.listenTo(s, "submit", () => {
      const { value: r } = s.urlInputView.fieldView.element, o = wo(r, i);
      e.execute("link", o, s.getDecoratorSwitchesState()), this._closeFormView();
    }), this.listenTo(s, "cancel", () => {
      this._closeFormView();
    }), s.keystrokes.set("Esc", (r, o) => {
      this._closeFormView(), o();
    }), s;
  }
  /**
   * Creates a toolbar Link button. Clicking this button will show
   * a {@link #_balloon} attached to the selection.
   */
  _createToolbarLinkButton() {
    const e = this.editor, t = e.commands.get("link"), i = e.t;
    e.ui.componentFactory.add("link", (s) => {
      const r = new D(s);
      return r.isEnabled = !0, r.label = i("Link"), r.icon = oP, r.keystroke = Vs, r.tooltip = !0, r.isToggleable = !0, r.bind("isEnabled").to(t, "isEnabled"), r.bind("isOn").to(t, "value", (o) => !!o), this.listenTo(r, "execute", () => this._showUI(!0)), r;
    });
  }
  /**
   * Attaches actions that control whether the balloon panel containing the
   * {@link #formView} should be displayed.
   */
  _enableBalloonActivators() {
    const e = this.editor, t = e.editing.view.document;
    this.listenTo(t, "click", () => {
      this._getSelectedLinkElement() && this._showUI();
    }), e.keystrokes.set(Vs, (i, s) => {
      s(), e.commands.get("link").isEnabled && this._showUI(!0);
    });
  }
  /**
   * Attaches actions that control whether the balloon panel containing the
   * {@link #formView} is visible or not.
   */
  _enableUserBalloonInteractions() {
    this.editor.keystrokes.set("Tab", (e, t) => {
      this._areActionsVisible && !this.actionsView.focusTracker.isFocused && (this.actionsView.focus(), t());
    }, {
      // Use the high priority because the link UI navigation is more important
      // than other feature's actions, e.g. list indentation.
      // https://github.com/ckeditor/ckeditor5-link/issues/146
      priority: "high"
    }), this.editor.keystrokes.set("Esc", (e, t) => {
      this._isUIVisible && (this._hideUI(), t());
    }), eo({
      emitter: this.formView,
      activator: () => this._isUIInPanel,
      contextElements: () => [this._balloon.view.element],
      callback: () => this._hideUI()
    });
  }
  /**
   * Adds the {@link #actionsView} to the {@link #_balloon}.
   *
   * @internal
   */
  _addActionsView() {
    this.actionsView || this._createViews(), !this._areActionsInPanel && this._balloon.add({
      view: this.actionsView,
      position: this._getBalloonPositionData()
    });
  }
  /**
   * Adds the {@link #formView} to the {@link #_balloon}.
   */
  _addFormView() {
    if (this.formView || this._createViews(), this._isFormInPanel)
      return;
    const t = this.editor.commands.get("link");
    this.formView.disableCssTransitions(), this._balloon.add({
      view: this.formView,
      position: this._getBalloonPositionData()
    }), this._balloon.visibleView === this.formView && this.formView.urlInputView.fieldView.select(), this.formView.enableCssTransitions(), this.formView.urlInputView.fieldView.element.value = t.value || "";
  }
  /**
   * Closes the form view. Decides whether the balloon should be hidden completely or if the action view should be shown. This is
   * decided upon the link command value (which has a value if the document selection is in the link).
   *
   * Additionally, if any {@link module:link/linkconfig~LinkConfig#decorators} are defined in the editor configuration, the state of
   * switch buttons responsible for manual decorator handling is restored.
   */
  _closeFormView() {
    const e = this.editor.commands.get("link");
    e.restoreManualDecoratorStates(), e.value !== void 0 ? this._removeFormView() : this._hideUI();
  }
  /**
   * Removes the {@link #formView} from the {@link #_balloon}.
   */
  _removeFormView() {
    this._isFormInPanel && (this.formView.saveButtonView.focus(), this._balloon.remove(this.formView), this.editor.editing.view.focus(), this._hideFakeVisualSelection());
  }
  /**
   * Shows the correct UI type. It is either {@link #formView} or {@link #actionsView}.
   *
   * @internal
   */
  _showUI(e = !1) {
    this.formView || this._createViews(), this._getSelectedLinkElement() ? (this._areActionsVisible ? this._addFormView() : this._addActionsView(), e && this._balloon.showStack("main")) : (this._showFakeVisualSelection(), this._addActionsView(), e && this._balloon.showStack("main"), this._addFormView()), this._startUpdatingUI();
  }
  /**
   * Removes the {@link #formView} from the {@link #_balloon}.
   *
   * See {@link #_addFormView}, {@link #_addActionsView}.
   */
  _hideUI() {
    if (!this._isUIInPanel)
      return;
    const e = this.editor;
    this.stopListening(e.ui, "update"), this.stopListening(this._balloon, "change:visibleView"), e.editing.view.focus(), this._removeFormView(), this._balloon.remove(this.actionsView), this._hideFakeVisualSelection();
  }
  /**
   * Makes the UI react to the {@link module:ui/editorui/editorui~EditorUI#event:update} event to
   * reposition itself when the editor UI should be refreshed.
   *
   * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.
   */
  _startUpdatingUI() {
    const e = this.editor, t = e.editing.view.document;
    let i = this._getSelectedLinkElement(), s = o();
    const r = () => {
      const a = this._getSelectedLinkElement(), l = o();
      i && !a || !i && l !== s ? this._hideUI() : this._isUIVisible && this._balloon.updatePosition(this._getBalloonPositionData()), i = a, s = l;
    };
    function o() {
      return t.selection.focus.getAncestors().reverse().find((a) => a.is("element"));
    }
    this.listenTo(e.ui, "update", r), this.listenTo(this._balloon, "change:visibleView", r);
  }
  /**
   * Returns `true` when {@link #formView} is in the {@link #_balloon}.
   */
  get _isFormInPanel() {
    return !!this.formView && this._balloon.hasView(this.formView);
  }
  /**
   * Returns `true` when {@link #actionsView} is in the {@link #_balloon}.
   */
  get _areActionsInPanel() {
    return !!this.actionsView && this._balloon.hasView(this.actionsView);
  }
  /**
   * Returns `true` when {@link #actionsView} is in the {@link #_balloon} and it is
   * currently visible.
   */
  get _areActionsVisible() {
    return !!this.actionsView && this._balloon.visibleView === this.actionsView;
  }
  /**
   * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.
   */
  get _isUIInPanel() {
    return this._isFormInPanel || this._areActionsInPanel;
  }
  /**
   * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is
   * currently visible.
   */
  get _isUIVisible() {
    const e = this._balloon.visibleView;
    return !!this.formView && e == this.formView || this._areActionsVisible;
  }
  /**
   * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached
   * to the target element or selection.
   *
   * If the selection is collapsed and inside a link element, the panel will be attached to the
   * entire link element. Otherwise, it will be attached to the selection.
   */
  _getBalloonPositionData() {
    const e = this.editor.editing.view, t = this.editor.model, i = e.document;
    let s;
    if (t.markers.has(Be)) {
      const r = Array.from(this.editor.editing.mapper.markerNameToElements(Be)), o = e.createRange(e.createPositionBefore(r[0]), e.createPositionAfter(r[r.length - 1]));
      s = e.domConverter.viewRangeToDom(o);
    } else
      s = () => {
        const r = this._getSelectedLinkElement();
        return r ? (
          // When selection is inside link element, then attach panel to this element.
          e.domConverter.mapViewToDom(r)
        ) : (
          // Otherwise attach panel to the selection.
          e.domConverter.viewRangeToDom(i.selection.getFirstRange())
        );
      };
    return { target: s };
  }
  /**
   * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under
   * the {@link module:engine/view/document~Document editing view's} selection or `null`
   * if there is none.
   *
   * **Note**: For a non–collapsed selection, the link element is returned when **fully**
   * selected and the **only** element within the selection boundaries, or when
   * a linked widget is selected.
   */
  _getSelectedLinkElement() {
    const e = this.editor.editing.view, t = e.document.selection, i = t.getSelectedElement();
    if (t.isCollapsed || i && X(i))
      return Bs(t.getFirstPosition());
    {
      const s = t.getFirstRange().getTrimmed(), r = Bs(s.start), o = Bs(s.end);
      return !r || r != o ? null : e.createRangeIn(r).getTrimmed().isEqual(s) ? r : null;
    }
  }
  /**
   * Displays a fake visual selection when the contextual balloon is displayed.
   *
   * This adds a 'link-ui' marker into the document that is rendered as a highlight on selected text fragment.
   */
  _showFakeVisualSelection() {
    const e = this.editor.model;
    e.change((t) => {
      const i = e.document.selection.getFirstRange();
      if (e.markers.has(Be))
        t.updateMarker(Be, { range: i });
      else if (i.start.isAtEnd) {
        const s = i.start.getLastMatchingPosition(({ item: r }) => !e.schema.isContent(r), { boundaries: i });
        t.addMarker(Be, {
          usingOperation: !1,
          affectsData: !1,
          range: t.createRange(s, i.end)
        });
      } else
        t.addMarker(Be, {
          usingOperation: !1,
          affectsData: !1,
          range: i
        });
    });
  }
  /**
   * Hides the fake visual selection created in {@link #_showFakeVisualSelection}.
   */
  _hideFakeVisualSelection() {
    const e = this.editor.model;
    e.markers.has(Be) && e.change((t) => {
      t.removeMarker(Be);
    });
  }
}
function Bs(n) {
  return n.getAncestors().find((e) => UT(e)) || null;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const lP = 4, cP = new RegExp(
  // Group 1: Line start or after a space.
  "(^|\\s)(((?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(((?!www\\.)|(www\\.))(?![-_])(?:[-_a-z0-9\\u00a1-\\uffff]{1,63}\\.)+(?:[a-z\\u00a1-\\uffff]{2,63})))(?::\\d{2,5})?(?:[/?#]\\S*)?)|((www.|(\\S+@))((?![-_])(?:[-_a-z0-9\\u00a1-\\uffff]{1,63}\\.))+(?:[a-z\\u00a1-\\uffff]{2,63})))$",
  "i"
), uP = 2;
class hP extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Vt];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "AutoLink";
  }
  /**
   * @inheritDoc
   */
  init() {
    const t = this.editor.model.document.selection;
    t.on("change:range", () => {
      this.isEnabled = !t.anchor.parent.is("element", "codeBlock");
    }), this._enableTypingHandling();
  }
  /**
   * @inheritDoc
   */
  afterInit() {
    this._enableEnterHandling(), this._enableShiftEnterHandling();
  }
  /**
   * Enables autolinking on typing.
   */
  _enableTypingHandling() {
    const e = this.editor, t = new YC(e.model, (i) => {
      if (!dP(i))
        return;
      const s = lc(i.substr(0, i.length - 1));
      if (s)
        return { url: s };
    });
    t.on("matched:data", (i, s) => {
      const { batch: r, range: o, url: a } = s;
      if (!r.isTyping)
        return;
      const l = o.end.getShiftedBy(-1), c = l.getShiftedBy(-a.length), u = e.model.createRange(c, l);
      this._applyAutoLink(a, u);
    }), t.bind("isEnabled").to(this);
  }
  /**
   * Enables autolinking on the <kbd>Enter</kbd> key.
   */
  _enableEnterHandling() {
    const e = this.editor, t = e.model, i = e.commands.get("enter");
    i && i.on("execute", () => {
      const s = t.document.selection.getFirstPosition();
      if (!s.parent.previousSibling)
        return;
      const r = t.createRangeIn(s.parent.previousSibling);
      this._checkAndApplyAutoLinkOnRange(r);
    });
  }
  /**
   * Enables autolinking on the <kbd>Shift</kbd>+<kbd>Enter</kbd> keyboard shortcut.
   */
  _enableShiftEnterHandling() {
    const e = this.editor, t = e.model, i = e.commands.get("shiftEnter");
    i && i.on("execute", () => {
      const s = t.document.selection.getFirstPosition(), r = t.createRange(t.createPositionAt(s.parent, 0), s.getShiftedBy(-1));
      this._checkAndApplyAutoLinkOnRange(r);
    });
  }
  /**
   * Checks if the passed range contains a linkable text.
   */
  _checkAndApplyAutoLinkOnRange(e) {
    const t = this.editor.model, { text: i, range: s } = Ed(e, t), r = lc(i);
    if (r) {
      const o = t.createRange(s.end.getShiftedBy(-r.length), s.end);
      this._applyAutoLink(r, o);
    }
  }
  /**
   * Applies a link on a given range if the link should be applied.
   *
   * @param url The URL to link.
   * @param range The text range to apply the link attribute to.
   */
  _applyAutoLink(e, t) {
    const i = this.editor.model, s = this.editor.config.get("link.defaultProtocol"), r = wo(e, s);
    !this.isEnabled || !fP(t, i) || !Ld(r) || mP(t) || this._persistAutoLink(r, t);
  }
  /**
   * Enqueues autolink changes in the model.
   *
   * @param url The URL to link.
   * @param range The text range to apply the link attribute to.
   */
  _persistAutoLink(e, t) {
    const i = this.editor.model, s = this.editor.plugins.get("Delete");
    i.enqueueChange((r) => {
      r.setAttribute("linkHref", e, t), i.enqueueChange(() => {
        s.requestUndoOnBackspace();
      });
    });
  }
}
function dP(n) {
  return n.length > lP && n[n.length - 1] === " " && n[n.length - 2] !== " ";
}
function lc(n) {
  const e = cP.exec(n);
  return e ? e[uP] : null;
}
function fP(n, e) {
  return e.schema.checkAttributeInSelection(e.createSelection(n), "linkHref");
}
function mP(n) {
  const e = n.start.nodeAfter;
  return !!e && e.hasAttribute("linkHref");
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class uS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [tP, aP, hP];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Link";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function gP(n) {
  const e = n.createContainerElement("li");
  return e.getFillerOffset = vP, e;
}
function pP(n, e) {
  const t = e.mapper, i = e.writer, s = n.getAttribute("listType") == "numbered" ? "ol" : "ul", r = gP(i), o = i.createContainerElement(s, null);
  return i.insert(i.createPositionAt(o, 0), r), t.bindElements(n, r), r;
}
function zd(n, e, t, i) {
  const s = e.parent, r = t.mapper, o = t.writer;
  let a = r.toViewPosition(i.createPositionBefore(n));
  const l = hi(n.previousSibling, {
    sameIndent: !0,
    smallerIndent: !0,
    listIndent: n.getAttribute("listIndent")
  }), c = n.previousSibling;
  if (l && l.getAttribute("listIndent") == n.getAttribute("listIndent")) {
    const u = r.toViewElement(l);
    a = o.breakContainer(o.createPositionAfter(u));
  } else if (c && c.name == "listItem") {
    a = r.toViewPosition(i.createPositionAt(c, "end"));
    const u = r.findMappedViewAncestor(a), h = wP(u);
    h ? a = o.createPositionBefore(h) : a = o.createPositionAt(u, "end");
  } else
    a = r.toViewPosition(i.createPositionBefore(n));
  if (a = $d(a), o.insert(a, s), c && c.name == "listItem") {
    const u = r.toViewElement(c), d = o.createRange(o.createPositionAt(u, 0), a).getWalker({ ignoreElementEnd: !0 });
    for (const m of d)
      if (m.item.is("element", "li")) {
        const p = o.breakContainer(o.createPositionBefore(m.item)), b = m.item.parent, C = o.createPositionAt(e, "end");
        Pe(o, C.nodeBefore, C.nodeAfter), o.move(o.createRangeOn(b), C), d._position = p;
      }
  } else {
    const u = s.nextSibling;
    if (u && (u.is("element", "ul") || u.is("element", "ol"))) {
      let h = null;
      for (const d of u.getChildren()) {
        const m = r.toModelElement(d);
        if (m && m.getAttribute("listIndent") > n.getAttribute("listIndent"))
          h = d;
        else
          break;
      }
      h && (o.breakContainer(o.createPositionAfter(h)), o.move(o.createRangeOn(h.parent), o.createPositionAt(e, "end")));
    }
  }
  Pe(o, s, s.nextSibling), Pe(o, s.previousSibling, s);
}
function Pe(n, e, t) {
  return !e || !t || e.name != "ul" && e.name != "ol" || e.name != t.name || e.getAttribute("class") !== t.getAttribute("class") ? null : n.mergeContainers(n.createPositionAfter(e));
}
function $d(n) {
  return n.getLastMatchingPosition((e) => e.item.is("uiElement"));
}
function hi(n, e) {
  const t = !!e.sameIndent, i = !!e.smallerIndent, s = e.listIndent;
  let r = n;
  for (; r && r.name == "listItem"; ) {
    const o = r.getAttribute("listIndent");
    if (t && s == o || i && s > o)
      return r;
    e.direction === "forward" ? r = r.nextSibling : r = r.previousSibling;
  }
  return null;
}
function cc(n, e, t, i) {
  n.ui.componentFactory.add(e, (s) => {
    const r = n.commands.get(e), o = new D(s);
    return o.set({
      label: t,
      icon: i,
      tooltip: !0,
      isToggleable: !0
    }), o.bind("isOn", "isEnabled").to(r, "value", "isEnabled"), o.on("execute", () => {
      n.execute(e), n.editing.view.focus();
    }), o;
  });
}
function wP(n) {
  for (const e of n.getChildren())
    if (e.name == "ul" || e.name == "ol")
      return e;
  return null;
}
function Vn(n, e) {
  const t = [], i = n.parent, s = {
    ignoreElementEnd: !1,
    startPosition: n,
    shallow: !0,
    direction: e
  }, r = i.getAttribute("listIndent"), o = [...new Le(s)].filter((a) => a.item.is("element")).map((a) => a.item);
  for (const a of o) {
    if (!a.is("element", "listItem") || a.getAttribute("listIndent") < r)
      break;
    if (!(a.getAttribute("listIndent") > r)) {
      if (a.getAttribute("listType") !== i.getAttribute("listType") || a.getAttribute("listStyle") !== i.getAttribute("listStyle") || a.getAttribute("listReversed") !== i.getAttribute("listReversed") || a.getAttribute("listStart") !== i.getAttribute("listStart"))
        break;
      e === "backward" ? t.unshift(a) : t.push(a);
    }
  }
  return t;
}
function es(n) {
  let t = [...n.document.selection.getSelectedBlocks()].filter((i) => i.is("element", "listItem")).map((i) => {
    const s = n.change((r) => r.createPositionAt(i, 0));
    return [
      ...Vn(s, "backward"),
      ...Vn(s, "forward")
    ];
  }).flat();
  return t = [...new Set(t)], t;
}
const bP = ["disc", "circle", "square"], _P = [
  "decimal",
  "decimal-leading-zero",
  "lower-roman",
  "upper-roman",
  "lower-latin",
  "upper-latin"
];
function Hd(n) {
  return bP.includes(n) ? "bulleted" : _P.includes(n) ? "numbered" : null;
}
function vP() {
  const n = !this.isEmpty && (this.getChild(0).name == "ul" || this.getChild(0).name == "ol");
  return this.isEmpty || n ? 0 : Zu.call(this);
}
const Wd = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z"/></svg>', Ud = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class yP extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ListUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor.t;
    cc(this.editor, "numberedList", e("Numbered List"), Wd), cc(this.editor, "bulletedList", e("Bulleted List"), Ud);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const kP = [
  { listStyle: "disc", typeAttribute: "disc", listType: "bulleted" },
  { listStyle: "circle", typeAttribute: "circle", listType: "bulleted" },
  { listStyle: "square", typeAttribute: "square", listType: "bulleted" },
  { listStyle: "decimal", typeAttribute: "1", listType: "numbered" },
  { listStyle: "decimal-leading-zero", typeAttribute: null, listType: "numbered" },
  { listStyle: "lower-roman", typeAttribute: "i", listType: "numbered" },
  { listStyle: "upper-roman", typeAttribute: "I", listType: "numbered" },
  { listStyle: "lower-alpha", typeAttribute: "a", listType: "numbered" },
  { listStyle: "upper-alpha", typeAttribute: "A", listType: "numbered" },
  { listStyle: "lower-latin", typeAttribute: "a", listType: "numbered" },
  { listStyle: "upper-latin", typeAttribute: "A", listType: "numbered" }
];
for (const { listStyle: n, typeAttribute: e, listType: t } of kP)
  ;
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class CP extends E {
  /**
   * Creates an instance of the collapsible view.
   *
   * @param locale The {@link module:core/editor/editor~Editor#locale} instance.
   * @param childViews An optional array of initial child views to be inserted into the collapsible.
   */
  constructor(e, t) {
    super(e);
    const i = this.bindTemplate;
    this.set("isCollapsed", !1), this.set("label", ""), this.buttonView = this._createButtonView(), this.children = this.createCollection(), this.set("_collapsibleAriaLabelUid", void 0), t && this.children.addMany(t), this.setTemplate({
      tag: "div",
      attributes: {
        class: [
          "ck",
          "ck-collapsible",
          i.if("isCollapsed", "ck-collapsible_collapsed")
        ]
      },
      children: [
        this.buttonView,
        {
          tag: "div",
          attributes: {
            class: [
              "ck",
              "ck-collapsible__children"
            ],
            role: "region",
            hidden: i.if("isCollapsed", "hidden"),
            "aria-labelledby": i.to("_collapsibleAriaLabelUid")
          },
          children: this.children
        }
      ]
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this._collapsibleAriaLabelUid = this.buttonView.labelView.element.id;
  }
  /**
   * Creates the main {@link #buttonView} of the collapsible.
   */
  _createButtonView() {
    const e = new D(this.locale), t = e.bindTemplate;
    return e.set({
      withText: !0,
      icon: ro
    }), e.extendTemplate({
      attributes: {
        "aria-expanded": t.to("isOn", (i) => String(i))
      }
    }), e.bind("label").to(this), e.bind("isOn").to(this, "isCollapsed", (i) => !i), e.on("execute", () => {
      this.isCollapsed = !this.isCollapsed;
    }), e;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class AP extends E {
  /**
   * Creates an instance of the list properties view.
   *
   * @param locale The {@link module:core/editor/editor~Editor#locale} instance.
   * @param options Options of the view.
   * @param options.enabledProperties An object containing the configuration of enabled list property names.
   * Allows conditional rendering the sub-components of the properties view.
   * @param options.styleButtonViews A list of style buttons to be rendered
   * inside the styles grid. The grid will not be rendered when `enabledProperties` does not include the `'styles'` key.
   * @param options.styleGridAriaLabel An assistive technologies label set on the grid of styles (if the grid is rendered).
   */
  constructor(e, { enabledProperties: t, styleButtonViews: i, styleGridAriaLabel: s }) {
    super(e), this.stylesView = null, this.additionalPropertiesCollapsibleView = null, this.startIndexFieldView = null, this.reversedSwitchButtonView = null, this.focusTracker = new fe(), this.keystrokes = new ke(), this.focusables = new qe();
    const r = [
      "ck",
      "ck-list-properties"
    ];
    this.children = this.createCollection(), this.focusCycler = new wt({
      focusables: this.focusables,
      focusTracker: this.focusTracker,
      keystrokeHandler: this.keystrokes,
      actions: {
        // Navigate #children backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.
        focusPrevious: "shift + tab",
        // Navigate #children forwards using the <kbd>Tab</kbd> key.
        focusNext: "tab"
      }
    }), t.styles ? (this.stylesView = this._createStylesView(i, s), this.children.add(this.stylesView)) : r.push("ck-list-properties_without-styles"), (t.startIndex || t.reversed) && (this._addNumberedListPropertyViews(t), r.push("ck-list-properties_with-numbered-properties")), this.setTemplate({
      tag: "div",
      attributes: {
        class: r
      },
      children: this.children
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    if (super.render(), this.stylesView) {
      this.focusables.add(this.stylesView), this.focusTracker.add(this.stylesView.element), (this.startIndexFieldView || this.reversedSwitchButtonView) && (this.focusables.add(this.children.last.buttonView), this.focusTracker.add(this.children.last.buttonView.element));
      for (const e of this.stylesView.children)
        this.stylesView.focusTracker.add(e.element);
      jh({
        keystrokeHandler: this.stylesView.keystrokes,
        focusTracker: this.stylesView.focusTracker,
        gridItems: this.stylesView.children,
        // Note: The styles view has a different number of columns depending on whether the other properties
        // are enabled in the dropdown or not (https://github.com/ckeditor/ckeditor5/issues/12340)
        numberOfColumns: () => I.window.getComputedStyle(this.stylesView.element).getPropertyValue("grid-template-columns").split(" ").length,
        uiLanguageDirection: this.locale && this.locale.uiLanguageDirection
      });
    }
    if (this.startIndexFieldView) {
      this.focusables.add(this.startIndexFieldView), this.focusTracker.add(this.startIndexFieldView.element);
      const e = (t) => t.stopPropagation();
      this.keystrokes.set("arrowright", e), this.keystrokes.set("arrowleft", e), this.keystrokes.set("arrowup", e), this.keystrokes.set("arrowdown", e);
    }
    this.reversedSwitchButtonView && (this.focusables.add(this.reversedSwitchButtonView), this.focusTracker.add(this.reversedSwitchButtonView.element)), this.keystrokes.listenTo(this.element);
  }
  /**
   * @inheritDoc
   */
  focus() {
    this.focusCycler.focusFirst();
  }
  /**
   * @inheritDoc
   */
  focusLast() {
    this.focusCycler.focusLast();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy();
  }
  /**
   * Creates the list styles grid.
   *
   * @param styleButtons Buttons to be placed in the grid.
   * @param styleGridAriaLabel The assistive technology label of the grid.
   */
  _createStylesView(e, t) {
    const i = new E(this.locale);
    return i.children = i.createCollection(), i.children.addMany(e), i.setTemplate({
      tag: "div",
      attributes: {
        "aria-label": t,
        class: [
          "ck",
          "ck-list-styles-list"
        ]
      },
      children: i.children
    }), i.children.delegate("execute").to(this), i.focus = function() {
      this.children.first.focus();
    }, i.focusTracker = new fe(), i.keystrokes = new ke(), i.render(), i.keystrokes.listenTo(i.element), i;
  }
  /**
   * Renders {@link #startIndexFieldView} and/or {@link #reversedSwitchButtonView} depending on the configuration of the properties view.
   *
   * @param enabledProperties An object containing the configuration of enabled list property names
   * (see {@link #constructor}).
   */
  _addNumberedListPropertyViews(e) {
    const t = this.locale.t, i = [];
    e.startIndex && (this.startIndexFieldView = this._createStartIndexField(), i.push(this.startIndexFieldView)), e.reversed && (this.reversedSwitchButtonView = this._createReversedSwitchButton(), i.push(this.reversedSwitchButtonView)), e.styles ? (this.additionalPropertiesCollapsibleView = new CP(this.locale, i), this.additionalPropertiesCollapsibleView.set({
      label: t("List properties"),
      isCollapsed: !0
    }), this.additionalPropertiesCollapsibleView.buttonView.bind("isEnabled").toMany(i, "isEnabled", (...s) => s.some((r) => r)), this.additionalPropertiesCollapsibleView.buttonView.on("change:isEnabled", (s, r, o) => {
      o || (this.additionalPropertiesCollapsibleView.isCollapsed = !0);
    }), this.children.add(this.additionalPropertiesCollapsibleView)) : this.children.addMany(i);
  }
  /**
   * Creates the list start index labeled field.
   */
  _createStartIndexField() {
    const e = this.locale.t, t = new qi(this.locale, Hk);
    return t.set({
      label: e("Start at"),
      class: "ck-numbered-list-properties__start-index"
    }), t.fieldView.set({
      min: 0,
      step: 1,
      value: 1,
      inputMode: "numeric"
    }), t.fieldView.on("input", () => {
      const i = t.fieldView.element, s = i.valueAsNumber;
      Number.isNaN(s) || (i.checkValidity() ? this.fire("listStart", { startIndex: s }) : t.errorText = e("Start index must be greater than 0."));
    }), t;
  }
  /**
   * Creates the reversed list switch button.
   */
  _createReversedSwitchButton() {
    const e = this.locale.t, t = new Gn(this.locale);
    return t.set({
      withText: !0,
      label: e("Reversed order"),
      class: "ck-numbered-list-properties__reversed-order"
    }), t.delegate("execute").to(this, "listReversed"), t;
  }
}
const EP = '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M11 27a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0-9a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0-9a3 3 0 1 1 0 6 3 3 0 0 1 0-6z"/></svg>', TP = '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M11 27a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0-10a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm0-10a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm0 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"/></svg>', PP = '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M14 27v6H8v-6h6zm0-9v6H8v-6h6zm0-9v6H8V9h6z"/></svg>', xP = '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M10.29 15V8.531H9.286c-.14.393-.4.736-.778 1.03-.378.295-.728.495-1.05.6v1.121a4.257 4.257 0 0 0 1.595-.936V15h1.235zm3.343 0v-1.235h-1.235V15h1.235zM11.3 24v-1.147H8.848c.064-.111.148-.226.252-.343.104-.117.351-.354.74-.712.39-.357.66-.631.81-.821.225-.288.39-.562.494-.824.104-.263.156-.539.156-.829 0-.51-.182-.936-.545-1.279-.363-.342-.863-.514-1.499-.514-.58 0-1.063.148-1.45.444-.387.296-.617.784-.69 1.463l1.23.124c.024-.36.112-.619.264-.774.153-.155.358-.233.616-.233.26 0 .465.074.613.222.148.148.222.36.222.635 0 .25-.085.501-.255.756-.126.185-.468.536-1.024 1.055-.692.641-1.155 1.156-1.389 1.544-.234.389-.375.8-.422 1.233H11.3zm2.333 0v-1.235h-1.235V24h1.235zM9.204 34.11c.615 0 1.129-.2 1.542-.598.413-.398.62-.88.62-1.446 0-.39-.11-.722-.332-.997a1.5 1.5 0 0 0-.886-.532c.619-.337.928-.788.928-1.353 0-.399-.151-.756-.453-1.073-.366-.386-.852-.58-1.459-.58a2.25 2.25 0 0 0-.96.2 1.617 1.617 0 0 0-.668.55c-.16.232-.28.544-.358.933l1.138.194c.032-.282.123-.495.272-.642.15-.146.33-.22.54-.22.215 0 .386.065.515.194s.193.302.193.518c0 .255-.087.46-.263.613-.176.154-.43.227-.765.218l-.136 1.006c.22-.061.409-.092.567-.092.24 0 .444.09.61.272.168.182.251.428.251.739 0 .328-.087.589-.261.782a.833.833 0 0 1-.644.29.841.841 0 0 1-.607-.242c-.167-.16-.27-.394-.307-.698l-1.196.145c.062.542.285.98.668 1.316.384.335.868.503 1.45.503zm4.43-.11v-1.235h-1.236V34h1.235z"/></svg>', SP = '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M5.714 15.11c.624 0 1.11-.22 1.46-.66.421-.533.632-1.408.632-2.627 0-1.222-.21-2.096-.629-2.624-.351-.445-.839-.668-1.463-.668-.624 0-1.11.22-1.459.66-.422.533-.633 1.406-.633 2.619 0 1.236.192 2.095.576 2.577.384.482.89.723 1.516.723zm0-1.024a.614.614 0 0 1-.398-.14c-.115-.094-.211-.283-.287-.565-.077-.283-.115-.802-.115-1.558s.043-1.294.128-1.613c.064-.246.155-.417.272-.512a.617.617 0 0 1 .4-.143.61.61 0 0 1 .398.143c.116.095.211.284.288.567.076.283.114.802.114 1.558s-.043 1.292-.128 1.608c-.064.246-.155.417-.272.512a.617.617 0 0 1-.4.143zm6.078.914V8.531H10.79c-.14.393-.4.736-.778 1.03-.378.295-.728.495-1.05.6v1.121a4.257 4.257 0 0 0 1.595-.936V15h1.235zm3.344 0v-1.235h-1.235V15h1.235zm-9.422 9.11c.624 0 1.11-.22 1.46-.66.421-.533.632-1.408.632-2.627 0-1.222-.21-2.096-.629-2.624-.351-.445-.839-.668-1.463-.668-.624 0-1.11.22-1.459.66-.422.533-.633 1.406-.633 2.619 0 1.236.192 2.095.576 2.577.384.482.89.723 1.516.723zm0-1.024a.614.614 0 0 1-.398-.14c-.115-.094-.211-.283-.287-.565-.077-.283-.115-.802-.115-1.558s.043-1.294.128-1.613c.064-.246.155-.417.272-.512a.617.617 0 0 1 .4-.143.61.61 0 0 1 .398.143c.116.095.211.284.288.567.076.283.114.802.114 1.558s-.043 1.292-.128 1.608c-.064.246-.155.417-.272.512a.617.617 0 0 1-.4.143zm7.088.914v-1.147H10.35c.065-.111.149-.226.253-.343.104-.117.35-.354.74-.712.39-.357.66-.631.81-.821.225-.288.39-.562.493-.824.104-.263.156-.539.156-.829 0-.51-.181-.936-.544-1.279-.364-.342-.863-.514-1.499-.514-.58 0-1.063.148-1.45.444-.387.296-.617.784-.69 1.463l1.23.124c.024-.36.112-.619.264-.774.152-.155.357-.233.615-.233.261 0 .465.074.613.222.148.148.222.36.222.635 0 .25-.085.501-.255.756-.126.185-.467.536-1.024 1.055-.691.641-1.154 1.156-1.388 1.544-.235.389-.375.8-.422 1.233h4.328zm2.334 0v-1.235h-1.235V24h1.235zM5.714 34.11c.624 0 1.11-.22 1.46-.66.421-.533.632-1.408.632-2.627 0-1.222-.21-2.096-.629-2.624-.351-.445-.839-.668-1.463-.668-.624 0-1.11.22-1.459.66-.422.533-.633 1.406-.633 2.619 0 1.236.192 2.095.576 2.577.384.482.89.723 1.516.723zm0-1.024a.614.614 0 0 1-.398-.14c-.115-.094-.211-.283-.287-.565-.077-.283-.115-.802-.115-1.558s.043-1.294.128-1.613c.064-.246.155-.417.272-.512a.617.617 0 0 1 .4-.143.61.61 0 0 1 .398.143c.116.095.211.284.288.567.076.283.114.802.114 1.558s-.043 1.292-.128 1.608c-.064.246-.155.417-.272.512a.617.617 0 0 1-.4.143zm4.992 1.024c.616 0 1.13-.2 1.543-.598.413-.398.62-.88.62-1.446 0-.39-.111-.722-.332-.997a1.5 1.5 0 0 0-.886-.532c.618-.337.927-.788.927-1.353 0-.399-.15-.756-.452-1.073-.366-.386-.853-.58-1.46-.58a2.25 2.25 0 0 0-.96.2 1.617 1.617 0 0 0-.667.55c-.16.232-.28.544-.359.933l1.139.194c.032-.282.123-.495.272-.642.15-.146.33-.22.54-.22.214 0 .386.065.515.194s.193.302.193.518c0 .255-.088.46-.264.613-.175.154-.43.227-.764.218l-.136 1.006c.22-.061.408-.092.566-.092.24 0 .444.09.611.272.167.182.25.428.25.739 0 .328-.086.589-.26.782a.833.833 0 0 1-.644.29.841.841 0 0 1-.607-.242c-.167-.16-.27-.394-.308-.698l-1.195.145c.062.542.284.98.668 1.316.384.335.867.503 1.45.503zm4.43-.11v-1.235h-1.235V34h1.235z"/></svg>', IP = '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M11.88 8.7V7.558h-1.234V8.7h1.234zm0 5.3V9.333h-1.234V14h1.234zm2.5 0v-1.235h-1.234V14h1.235zm-4.75 4.7v-1.142H8.395V18.7H9.63zm0 5.3v-4.667H8.395V24H9.63zm2.5-5.3v-1.142h-1.234V18.7h1.235zm0 5.3v-4.667h-1.234V24h1.235zm2.501 0v-1.235h-1.235V24h1.235zM7.38 28.7v-1.142H6.145V28.7H7.38zm0 5.3v-4.667H6.145V34H7.38zm2.5-5.3v-1.142H8.646V28.7H9.88zm0 5.3v-4.667H8.646V34H9.88zm2.5-5.3v-1.142h-1.234V28.7h1.235zm0 5.3v-4.667h-1.234V34h1.235zm2.501 0v-1.235h-1.235V34h1.235z"/></svg>', RP = '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M11.916 15V8.558h-1.301V15h1.3zm2.465 0v-1.235h-1.235V15h1.235zM9.665 25v-6.442h-1.3V25h1.3zm2.5 0v-6.442h-1.3V25h1.3zm2.466 0v-1.235h-1.235V25h1.235zm-7.216 9v-6.442h-1.3V34h1.3zm2.5 0v-6.442h-1.3V34h1.3zm2.501 0v-6.442h-1.3V34h1.3zm2.465 0v-1.235h-1.235V34h1.235z"/></svg>', VP = '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="M9.62 14.105c.272 0 .528-.05.768-.153s.466-.257.677-.462c.009.024.023.072.044.145.047.161.086.283.119.365h1.221a2.649 2.649 0 0 1-.222-.626c-.04-.195-.059-.498-.059-.908l.013-1.441c0-.536-.055-.905-.165-1.105-.11-.201-.3-.367-.569-.497-.27-.13-.68-.195-1.23-.195-.607 0-1.064.108-1.371.325-.308.217-.525.55-.65 1.002l1.12.202c.076-.217.176-.369.299-.455.123-.086.294-.13.514-.13.325 0 .546.05.663.152.118.101.176.27.176.508v.123c-.222.093-.622.194-1.2.303-.427.082-.755.178-.982.288-.227.11-.403.268-.53.474a1.327 1.327 0 0 0-.188.706c0 .398.138.728.415.988.277.261.656.391 1.136.391zm.368-.87a.675.675 0 0 1-.492-.189.606.606 0 0 1-.193-.448c0-.176.08-.32.241-.435.106-.07.33-.142.673-.215a7.19 7.19 0 0 0 .751-.19v.247c0 .296-.016.496-.048.602a.773.773 0 0 1-.295.409 1.07 1.07 0 0 1-.637.22zm4.645.765v-1.235h-1.235V14h1.235zM10.2 25.105c.542 0 1.003-.215 1.382-.646.38-.43.57-1.044.57-1.84 0-.771-.187-1.362-.559-1.774a1.82 1.82 0 0 0-1.41-.617c-.522 0-.973.216-1.354.65v-2.32H7.594V25h1.147v-.686a1.9 1.9 0 0 0 .67.592c.26.133.523.2.79.2zm-.299-.975c-.354 0-.638-.164-.852-.492-.153-.232-.229-.59-.229-1.073 0-.468.098-.818.295-1.048a.93.93 0 0 1 .738-.345c.302 0 .55.118.743.354.193.236.29.62.29 1.154 0 .5-.096.868-.288 1.1-.192.233-.424.35-.697.35zm4.478.87v-1.235h-1.234V25h1.234zm-4.017 9.105c.6 0 1.08-.142 1.437-.426.357-.284.599-.704.725-1.261l-1.213-.207c-.061.326-.167.555-.316.688a.832.832 0 0 1-.576.2.916.916 0 0 1-.75-.343c-.185-.228-.278-.62-.278-1.173 0-.498.091-.853.274-1.066.183-.212.429-.318.736-.318.232 0 .42.061.565.184.145.123.238.306.28.55l1.216-.22c-.146-.501-.387-.874-.722-1.119-.336-.244-.788-.366-1.356-.366-.695 0-1.245.214-1.653.643-.407.43-.61 1.03-.61 1.8 0 .762.202 1.358.608 1.788.406.431.95.646 1.633.646zM14.633 34v-1.235h-1.235V34h1.235z"/></svg>', OP = '<svg viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><path d="M35 29a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17zm0-9a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H18a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h17z" fill-opacity=".163"/><path d="m7.88 15 .532-1.463h2.575L11.549 15h1.415l-2.58-6.442H9.01L6.5 15h1.38zm2.69-2.549H8.811l.87-2.39.887 2.39zM14.88 15v-1.235h-1.234V15h1.234zM9.352 25c.83-.006 1.352-.02 1.569-.044.346-.038.636-.14.872-.305.236-.166.422-.387.558-.664.137-.277.205-.562.205-.855 0-.372-.106-.695-.317-.97-.21-.276-.512-.471-.905-.585a1.51 1.51 0 0 0 .661-.567 1.5 1.5 0 0 0 .244-.83c0-.28-.066-.53-.197-.754a1.654 1.654 0 0 0-.495-.539 1.676 1.676 0 0 0-.672-.266c-.25-.042-.63-.063-1.14-.063H7.158V25h2.193zm.142-3.88H8.46v-1.49h.747c.612 0 .983.007 1.112.022.217.026.38.102.49.226.11.125.165.287.165.486a.68.68 0 0 1-.192.503.86.86 0 0 1-.525.23 11.47 11.47 0 0 1-.944.023h.18zm.17 2.795H8.46v-1.723h1.05c.592 0 .977.03 1.154.092.177.062.313.16.406.295a.84.84 0 0 1 .14.492c0 .228-.06.41-.181.547a.806.806 0 0 1-.473.257c-.126.026-.423.04-.892.04zM14.88 25v-1.235h-1.234V25h1.234zm-5.018 9.11c.691 0 1.262-.17 1.711-.512.45-.341.772-.864.965-1.567l-1.261-.4c-.109.472-.287.818-.536 1.037-.25.22-.547.33-.892.33-.47 0-.85-.173-1.143-.519-.293-.345-.44-.925-.44-1.74 0-.767.15-1.322.447-1.665.297-.343.684-.514 1.162-.514.346 0 .64.096.881.29.242.193.4.457.477.79l1.288-.307c-.147-.516-.367-.911-.66-1.187-.492-.465-1.132-.698-1.92-.698-.902 0-1.63.296-2.184.89-.554.593-.83 1.426-.83 2.498 0 1.014.275 1.813.825 2.397.551.585 1.254.877 2.11.877zM14.88 34v-1.235h-1.234V34h1.234z"/></svg>';
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class MP extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ListPropertiesUI";
  }
  init() {
    const e = this.editor, t = e.locale.t, i = e.config.get("list.properties");
    i.styles && e.ui.componentFactory.add("bulletedList", uc({
      editor: e,
      parentCommandName: "bulletedList",
      buttonLabel: t("Bulleted List"),
      buttonIcon: Ud,
      styleGridAriaLabel: t("Bulleted list styles toolbar"),
      styleDefinitions: [
        {
          label: t("Toggle the disc list style"),
          tooltip: t("Disc"),
          type: "disc",
          icon: EP
        },
        {
          label: t("Toggle the circle list style"),
          tooltip: t("Circle"),
          type: "circle",
          icon: TP
        },
        {
          label: t("Toggle the square list style"),
          tooltip: t("Square"),
          type: "square",
          icon: PP
        }
      ]
    })), (i.styles || i.startIndex || i.reversed) && e.ui.componentFactory.add("numberedList", uc({
      editor: e,
      parentCommandName: "numberedList",
      buttonLabel: t("Numbered List"),
      buttonIcon: Wd,
      styleGridAriaLabel: t("Numbered list styles toolbar"),
      styleDefinitions: [
        {
          label: t("Toggle the decimal list style"),
          tooltip: t("Decimal"),
          type: "decimal",
          icon: xP
        },
        {
          label: t("Toggle the decimal with leading zero list style"),
          tooltip: t("Decimal with leading zero"),
          type: "decimal-leading-zero",
          icon: SP
        },
        {
          label: t("Toggle the lower–roman list style"),
          tooltip: t("Lower–roman"),
          type: "lower-roman",
          icon: IP
        },
        {
          label: t("Toggle the upper–roman list style"),
          tooltip: t("Upper-roman"),
          type: "upper-roman",
          icon: RP
        },
        {
          label: t("Toggle the lower–latin list style"),
          tooltip: t("Lower-latin"),
          type: "lower-latin",
          icon: VP
        },
        {
          label: t("Toggle the upper–latin list style"),
          tooltip: t("Upper-latin"),
          type: "upper-latin",
          icon: OP
        }
      ]
    }));
  }
}
function uc({ editor: n, parentCommandName: e, buttonLabel: t, buttonIcon: i, styleGridAriaLabel: s, styleDefinitions: r }) {
  const o = n.commands.get(e);
  return (a) => {
    const l = ot(a, ao), c = l.buttonView;
    return l.bind("isEnabled").to(o), l.class = "ck-list-styles-dropdown", c.on("execute", () => {
      n.execute(e), n.editing.view.focus();
    }), c.set({
      label: t,
      icon: i,
      tooltip: !0,
      isToggleable: !0
    }), c.bind("isOn").to(o, "value", (u) => !!u), l.once("change:isOpen", () => {
      const u = DP({
        editor: n,
        dropdownView: l,
        parentCommandName: e,
        styleGridAriaLabel: s,
        styleDefinitions: r
      });
      l.panelView.children.add(u);
    }), l.on("execute", () => {
      n.editing.view.focus();
    }), l;
  };
}
function BP({ editor: n, listStyleCommand: e, parentCommandName: t }) {
  const i = n.locale, s = n.commands.get(t);
  return ({ label: r, type: o, icon: a, tooltip: l }) => {
    const c = new D(i);
    return c.set({ label: r, icon: a, tooltip: l }), e.on("change:value", () => {
      c.isOn = e.value === o;
    }), c.on("execute", () => {
      s.value ? e.value !== o ? n.execute("listStyle", { type: o }) : n.execute("listStyle", { type: e.defaultType }) : n.model.change(() => {
        n.execute("listStyle", { type: o });
      });
    }), c;
  };
}
function DP({ editor: n, dropdownView: e, parentCommandName: t, styleDefinitions: i, styleGridAriaLabel: s }) {
  const r = n.locale, o = n.config.get("list.properties");
  let a = null;
  if (t != "numberedList" && (o.startIndex = !1, o.reversed = !1), o.styles) {
    const c = n.commands.get("listStyle"), u = BP({
      editor: n,
      parentCommandName: t,
      listStyleCommand: c
    }), h = typeof c.isStyleTypeSupported == "function" ? (d) => c.isStyleTypeSupported(d.type) : () => !0;
    a = i.filter(h).map(u);
  }
  const l = new AP(r, {
    styleGridAriaLabel: s,
    enabledProperties: o,
    styleButtonViews: a
  });
  if (o.styles && Jn(e, () => l.stylesView.children.find((c) => c.isOn)), o.startIndex) {
    const c = n.commands.get("listStart");
    l.startIndexFieldView.bind("isEnabled").to(c), l.startIndexFieldView.fieldView.bind("value").to(c), l.on("listStart", (u, h) => n.execute("listStart", h));
  }
  if (o.reversed) {
    const c = n.commands.get("listReversed");
    l.reversedSwitchButtonView.bind("isEnabled").to(c), l.reversedSwitchButtonView.bind("isOn").to(c, "value", (u) => !!u), l.on("listReversed", () => {
      const u = c.value;
      n.execute("listReversed", { reversed: !u });
    });
  }
  return l.delegate("execute").to(e), l;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class hc extends W {
  /**
   * Creates an instance of the command.
   *
   * @param editor The editor instance.
   * @param indentDirection The direction of indent. If it is equal to `backward`, the command will outdent a list item.
   */
  constructor(e, t) {
    super(e), this._indentBy = t == "forward" ? 1 : -1;
  }
  /**
   * @inheritDoc
   */
  refresh() {
    this.isEnabled = this._checkEnabled();
  }
  /**
   * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.
   *
   * @fires execute
   */
  execute() {
    const e = this.editor.model, t = e.document;
    let i = Array.from(t.selection.getSelectedBlocks());
    e.change((s) => {
      const r = i[i.length - 1];
      let o = r.nextSibling;
      for (; o && o.name == "listItem" && o.getAttribute("listIndent") > r.getAttribute("listIndent"); )
        i.push(o), o = o.nextSibling;
      this._indentBy < 0 && (i = i.reverse());
      for (const a of i) {
        const l = a.getAttribute("listIndent") + this._indentBy;
        l < 0 ? s.rename(a, "paragraph") : s.setAttribute("listIndent", l, a);
      }
      this.fire("_executeCleanup", i);
    });
  }
  /**
   * Checks whether the command can be enabled in the current context.
   *
   * @returns Whether the command should be enabled.
   */
  _checkEnabled() {
    const e = de(this.editor.model.document.selection.getSelectedBlocks());
    if (!e || !e.is("element", "listItem"))
      return !1;
    if (this._indentBy > 0) {
      const t = e.getAttribute("listIndent"), i = e.getAttribute("listType");
      let s = e.previousSibling;
      for (; s && s.is("element", "listItem") && s.getAttribute("listIndent") >= t; ) {
        if (s.getAttribute("listIndent") == t)
          return s.getAttribute("listType") == i;
        s = s.previousSibling;
      }
      return !1;
    }
    return !0;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class dc extends W {
  /**
   * Creates an instance of the command.
   *
   * @param editor The editor instance.
   * @param type List type that will be handled by this command.
   */
  constructor(e, t) {
    super(e), this.type = t;
  }
  /**
   * @inheritDoc
   */
  refresh() {
    this.value = this._getValue(), this.isEnabled = this._checkEnabled();
  }
  /**
   * Executes the list command.
   *
   * @fires execute
   * @param options Command options.
   * @param options.forceValue If set, it will force the command behavior. If `true`, the command will try to convert the
   * selected items and potentially the neighbor elements to the proper list items. If set to `false`, it will convert selected elements
   * to paragraphs. If not set, the command will toggle selected elements to list items or paragraphs, depending on the selection.
   */
  execute(e = {}) {
    const t = this.editor.model, i = t.document, s = Array.from(i.selection.getSelectedBlocks()).filter((o) => mc(o, t.schema)), r = e.forceValue !== void 0 ? !e.forceValue : this.value;
    t.change((o) => {
      if (r) {
        let a = s[s.length - 1].nextSibling, l = Number.POSITIVE_INFINITY, c = [];
        for (; a && a.name == "listItem" && a.getAttribute("listIndent") !== 0; ) {
          const u = a.getAttribute("listIndent");
          u < l && (l = u);
          const h = u - l;
          c.push({ element: a, listIndent: h }), a = a.nextSibling;
        }
        c = c.reverse();
        for (const u of c)
          o.setAttribute("listIndent", u.listIndent, u.element);
      }
      if (!r) {
        let a = Number.POSITIVE_INFINITY;
        for (const l of s)
          l.is("element", "listItem") && l.getAttribute("listIndent") < a && (a = l.getAttribute("listIndent"));
        a = a === 0 ? 1 : a, fc(s, !0, a), fc(s, !1, a);
      }
      for (const a of s.reverse())
        r && a.name == "listItem" ? o.rename(a, "paragraph") : !r && a.name != "listItem" ? (o.setAttributes({ listType: this.type, listIndent: 0 }, a), o.rename(a, "listItem")) : !r && a.name == "listItem" && a.getAttribute("listType") != this.type && o.setAttribute("listType", this.type, a);
      this.fire("_executeCleanup", s);
    });
  }
  /**
   * Checks the command's {@link #value}.
   *
   * @returns The current value.
   */
  _getValue() {
    const e = de(this.editor.model.document.selection.getSelectedBlocks());
    return !!e && e.is("element", "listItem") && e.getAttribute("listType") == this.type;
  }
  /**
   * Checks whether the command can be enabled in the current context.
   *
   * @returns Whether the command should be enabled.
   */
  _checkEnabled() {
    if (this.value)
      return !0;
    const e = this.editor.model.document.selection, t = this.editor.model.schema, i = de(e.getSelectedBlocks());
    return i ? mc(i, t) : !1;
  }
}
function fc(n, e, t) {
  const i = e ? n[0] : n[n.length - 1];
  if (i.is("element", "listItem")) {
    let s = i[e ? "previousSibling" : "nextSibling"], r = i.getAttribute("listIndent");
    for (; s && s.is("element", "listItem") && s.getAttribute("listIndent") >= t; )
      r > s.getAttribute("listIndent") && (r = s.getAttribute("listIndent")), s.getAttribute("listIndent") == r && n[e ? "unshift" : "push"](s), s = s[e ? "previousSibling" : "nextSibling"];
  }
}
function mc(n, e) {
  return e.checkChild(n.parent, "listItem") && !e.isObject(n);
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class FP extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ListUtils";
  }
  /**
   * Checks whether the given list-style-type is supported by numbered or bulleted list.
   */
  getListTypeFromListStyleType(e) {
    return Hd(e);
  }
  /**
   * Returns an array with all `listItem` elements in the model selection.
   *
   * It returns all the items even if only a part of the list is selected, including items that belong to nested lists.
   * If no list is selected, it returns an empty array.
   * The order of the elements is not specified.
   */
  getSelectedListItems(e) {
    return es(e);
  }
  /**
   * Returns an array with all `listItem` elements that represent the same list.
   *
   * It means that values of `listIndent`, `listType`, `listStyle`, `listReversed` and `listStart` for all items are equal.
   *
   * Additionally, if the `position` is inside a list item, that list item will be returned as well.
   *
   * @param position Starting position.
   * @param direction Walking direction.
   */
  getSiblingNodes(e, t) {
    return Vn(e, t);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function gc(n) {
  return (e, t, i) => {
    const s = i.consumable;
    if (!s.test(t.item, "insert") || !s.test(t.item, "attribute:listType") || !s.test(t.item, "attribute:listIndent"))
      return;
    s.consume(t.item, "insert"), s.consume(t.item, "attribute:listType"), s.consume(t.item, "attribute:listIndent");
    const r = t.item, o = pP(r, i);
    zd(r, o, i, n);
  };
}
function NP(n) {
  return (e, t, i) => {
    const o = i.mapper.toViewPosition(t.position).getLastMatchingPosition((m) => !m.item.is("element", "li")).nodeAfter, a = i.writer;
    a.breakContainer(a.createPositionBefore(o)), a.breakContainer(a.createPositionAfter(o));
    const l = o.parent, c = l.previousSibling, u = a.createRangeOn(l), h = a.remove(u);
    c && c.nextSibling && Pe(a, c, c.nextSibling);
    const d = i.mapper.toModelElement(o);
    jd(d.getAttribute("listIndent") + 1, t.position, u.start, o, i, n);
    for (const m of a.createRangeIn(h).getItems())
      i.mapper.unbindViewElement(m);
    e.stop();
  };
}
const LP = (n, e, t) => {
  if (!t.consumable.test(e.item, n.name))
    return;
  const i = t.mapper.toViewElement(e.item), s = t.writer;
  s.breakContainer(s.createPositionBefore(i)), s.breakContainer(s.createPositionAfter(i));
  const r = i.parent, o = e.attributeNewValue == "numbered" ? "ol" : "ul";
  s.rename(o, r);
}, zP = (n, e, t) => {
  t.consumable.consume(e.item, n.name);
  const s = t.mapper.toViewElement(e.item).parent, r = t.writer;
  Pe(r, s, s.nextSibling), Pe(r, s.previousSibling, s);
};
function $P(n) {
  return (e, t, i) => {
    if (!i.consumable.consume(t.item, "attribute:listIndent"))
      return;
    const s = i.mapper.toViewElement(t.item), r = i.writer;
    r.breakContainer(r.createPositionBefore(s)), r.breakContainer(r.createPositionAfter(s));
    const o = s.parent, a = o.previousSibling, l = r.createRangeOn(o);
    r.remove(l), a && a.nextSibling && Pe(r, a, a.nextSibling), jd(t.attributeOldValue + 1, t.range.start, l.start, s, i, n), zd(t.item, s, i, n);
    for (const c of t.item.getChildren())
      i.consumable.consume(c, "insert");
  };
}
const pc = (n, e, t) => {
  if (t.consumable.test(e.item, n.name) && e.item.name != "listItem") {
    let i = t.mapper.toViewPosition(e.range.start);
    const s = t.writer, r = [];
    for (; (i.parent.name == "ul" || i.parent.name == "ol") && (i = s.breakContainer(i), i.parent.name == "li"); ) {
      const o = i, a = s.createPositionAt(i.parent, "end");
      if (!o.isEqual(a)) {
        const l = s.remove(s.createRange(o, a));
        r.push(l);
      }
      i = s.createPositionAfter(i.parent);
    }
    if (r.length > 0) {
      for (let o = 0; o < r.length; o++) {
        const a = i.nodeBefore;
        if (i = s.insert(i, r[o]).end, o > 0) {
          const c = Pe(s, a, a.nextSibling);
          c && c.parent == a && i.offset--;
        }
      }
      Pe(s, i.nodeBefore, i.nodeAfter);
    }
  }
}, HP = (n, e, t) => {
  const i = t.mapper.toViewPosition(e.position), s = i.nodeBefore, r = i.nodeAfter;
  Pe(t.writer, s, r);
}, WP = (n, e, t) => {
  if (t.consumable.consume(e.viewItem, { name: !0 })) {
    const i = t.writer, s = i.createElement("listItem"), r = YP(e.viewItem);
    i.setAttribute("listIndent", r, s);
    const o = e.viewItem.parent && e.viewItem.parent.name == "ol" ? "numbered" : "bulleted";
    if (i.setAttribute("listType", o, s), !t.safeInsert(s, e.modelCursor))
      return;
    const a = KP(s, e.viewItem.getChildren(), t);
    e.modelRange = i.createRange(e.modelCursor, a), t.updateConversionResult(s, e);
  }
}, wc = (n, e, t) => {
  if (t.consumable.test(e.viewItem, { name: !0 })) {
    const i = Array.from(e.viewItem.getChildren());
    for (const s of i)
      !(s.is("element", "li") || di(s)) && s._remove();
  }
}, UP = (n, e, t) => {
  if (t.consumable.test(e.viewItem, { name: !0 })) {
    if (e.viewItem.childCount === 0)
      return;
    const i = [...e.viewItem.getChildren()];
    let s = !1;
    for (const r of i)
      s && !di(r) && r._remove(), di(r) && (s = !0);
  }
};
function bc(n) {
  return (e, t) => {
    if (t.isPhantom)
      return;
    const i = t.modelPosition.nodeBefore;
    if (i && i.is("element", "listItem")) {
      const s = t.mapper.toViewElement(i), r = s.getAncestors().find(di), o = n.createPositionAt(s, 0).getWalker();
      for (const a of o)
        if (a.type == "elementStart" && a.item.is("element", "li")) {
          t.viewPosition = a.previousPosition;
          break;
        } else if (a.type == "elementEnd" && a.item == r) {
          t.viewPosition = a.nextPosition;
          break;
        }
    }
  };
}
function jP(n) {
  return (e, t) => {
    const i = t.viewPosition, s = i.parent, r = t.mapper;
    if (s.name == "ul" || s.name == "ol") {
      if (i.isAtEnd) {
        const o = r.toModelElement(i.nodeBefore), a = r.getModelLength(i.nodeBefore);
        t.modelPosition = n.createPositionBefore(o).getShiftedBy(a);
      } else {
        const o = r.toModelElement(i.nodeAfter);
        t.modelPosition = n.createPositionBefore(o);
      }
      e.stop();
    } else if (s.name == "li" && i.nodeBefore && (i.nodeBefore.name == "ul" || i.nodeBefore.name == "ol")) {
      const o = r.toModelElement(s);
      let a = 1, l = i.nodeBefore;
      for (; l && di(l); )
        a += r.getModelLength(l), l = l.previousSibling;
      t.modelPosition = n.createPositionBefore(o).getShiftedBy(a), e.stop();
    }
  };
}
function qP(n, e) {
  const t = n.document.differ.getChanges(), i = /* @__PURE__ */ new Map();
  let s = !1;
  for (const l of t)
    if (l.type == "insert" && l.name == "listItem")
      r(l.position);
    else if (l.type == "insert" && l.name != "listItem") {
      if (l.name != "$text") {
        const u = l.position.nodeAfter;
        u.hasAttribute("listIndent") && (e.removeAttribute("listIndent", u), s = !0), u.hasAttribute("listType") && (e.removeAttribute("listType", u), s = !0), u.hasAttribute("listStyle") && (e.removeAttribute("listStyle", u), s = !0), u.hasAttribute("listReversed") && (e.removeAttribute("listReversed", u), s = !0), u.hasAttribute("listStart") && (e.removeAttribute("listStart", u), s = !0);
        for (const h of Array.from(n.createRangeIn(u)).filter((d) => d.item.is("element", "listItem")))
          r(h.previousPosition);
      }
      const c = l.position.getShiftedBy(l.length);
      r(c);
    } else
      l.type == "remove" && l.name == "listItem" ? r(l.position) : (l.type == "attribute" && l.attributeKey == "listIndent" || l.type == "attribute" && l.attributeKey == "listType") && r(l.range.start);
  for (const l of i.values())
    o(l), a(l);
  return s;
  function r(l) {
    const c = l.nodeBefore;
    if (!c || !c.is("element", "listItem")) {
      const u = l.nodeAfter;
      u && u.is("element", "listItem") && i.set(u, u);
    } else {
      let u = c;
      if (i.has(u))
        return;
      for (let h = u.previousSibling; h && h.is("element", "listItem"); h = u.previousSibling)
        if (u = h, i.has(u))
          return;
      i.set(c, u);
    }
  }
  function o(l) {
    let c = 0, u = null;
    for (; l && l.is("element", "listItem"); ) {
      const h = l.getAttribute("listIndent");
      if (h > c) {
        let d;
        u === null ? (u = h - c, d = c) : (u > h && (u = h), d = h - u), e.setAttribute("listIndent", d, l), s = !0;
      } else
        u = null, c = l.getAttribute("listIndent") + 1;
      l = l.nextSibling;
    }
  }
  function a(l) {
    let c = [], u = null;
    for (; l && l.is("element", "listItem"); ) {
      const h = l.getAttribute("listIndent");
      if (u && u.getAttribute("listIndent") > h && (c = c.slice(0, h + 1)), h != 0)
        if (c[h]) {
          const d = c[h];
          l.getAttribute("listType") != d && (e.setAttribute("listType", d, l), s = !0);
        } else
          c[h] = l.getAttribute("listType");
      u = l, l = l.nextSibling;
    }
  }
}
const GP = function(n, [e, t]) {
  const i = this;
  let s = e.is("documentFragment") ? e.getChild(0) : e, r;
  if (t ? r = i.createSelection(t) : r = i.document.selection, s && s.is("element", "listItem")) {
    const o = r.getFirstPosition();
    let a = null;
    if (o.parent.is("element", "listItem") ? a = o.parent : o.nodeBefore && o.nodeBefore.is("element", "listItem") && (a = o.nodeBefore), a) {
      const l = a.getAttribute("listIndent");
      if (l > 0)
        for (; s && s.is("element", "listItem"); )
          s._setAttribute("listIndent", s.getAttribute("listIndent") + l), s = s.nextSibling;
    }
  }
};
function KP(n, e, t) {
  const { writer: i, schema: s } = t;
  let r = i.createPositionAfter(n);
  for (const o of e)
    if (o.name == "ul" || o.name == "ol")
      r = t.convertItem(o, r).modelCursor;
    else {
      const a = t.convertItem(o, i.createPositionAt(n, "end")), l = a.modelRange.start.nodeAfter;
      l && l.is("element") && !s.checkChild(n, l.name) && (a.modelCursor.parent.is("element", "listItem") ? n = a.modelCursor.parent : n = JP(a.modelCursor), r = i.createPositionAfter(n));
    }
  return r;
}
function JP(n) {
  const e = new Le({ startPosition: n });
  let t;
  do
    t = e.next();
  while (!t.value.item.is("element", "listItem"));
  return t.value.item;
}
function jd(n, e, t, i, s, r) {
  const o = hi(e.nodeBefore, {
    sameIndent: !0,
    smallerIndent: !0,
    listIndent: n
  }), a = s.mapper, l = s.writer, c = o ? o.getAttribute("listIndent") : null;
  let u;
  if (!o)
    u = t;
  else if (c == n) {
    const h = a.toViewElement(o).parent;
    u = l.createPositionAfter(h);
  } else {
    const h = r.createPositionAt(o, "end");
    u = a.toViewPosition(h);
  }
  u = $d(u);
  for (const h of [...i.getChildren()])
    di(h) && (u = l.move(l.createRangeOn(h), u).end, Pe(l, h, h.nextSibling), Pe(l, h.previousSibling, h));
}
function di(n) {
  return n.is("element", "ol") || n.is("element", "ul");
}
function YP(n) {
  let e = 0, t = n.parent;
  for (; t; ) {
    if (t.is("element", "li"))
      e++;
    else {
      const i = t.previousSibling;
      i && i.is("element", "li") && e++;
    }
    t = t.parent;
  }
  return e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class qd extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ListEditing";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Zn, Vt, FP];
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    e.model.schema.register("listItem", {
      inheritAllFrom: "$block",
      allowAttributes: ["listType", "listIndent"]
    });
    const t = e.data, i = e.editing;
    e.model.document.registerPostFixer((r) => qP(e.model, r)), i.mapper.registerViewToModelLength("li", _r), t.mapper.registerViewToModelLength("li", _r), i.mapper.on("modelToViewPosition", bc(i.view)), i.mapper.on("viewToModelPosition", jP(e.model)), t.mapper.on("modelToViewPosition", bc(i.view)), e.conversion.for("editingDowncast").add((r) => {
      r.on("insert", pc, { priority: "high" }), r.on("insert:listItem", gc(e.model)), r.on("attribute:listType:listItem", LP, { priority: "high" }), r.on("attribute:listType:listItem", zP, { priority: "low" }), r.on("attribute:listIndent:listItem", $P(e.model)), r.on("remove:listItem", NP(e.model)), r.on("remove", HP, { priority: "low" });
    }), e.conversion.for("dataDowncast").add((r) => {
      r.on("insert", pc, { priority: "high" }), r.on("insert:listItem", gc(e.model));
    }), e.conversion.for("upcast").add((r) => {
      r.on("element:ul", wc, { priority: "high" }), r.on("element:ol", wc, { priority: "high" }), r.on("element:li", UP, { priority: "high" }), r.on("element:li", WP);
    }), e.model.on("insertContent", GP, { priority: "high" }), e.commands.add("numberedList", new dc(e, "numbered")), e.commands.add("bulletedList", new dc(e, "bulleted")), e.commands.add("indentList", new hc(e, "forward")), e.commands.add("outdentList", new hc(e, "backward"));
    const s = i.view.document;
    this.listenTo(s, "enter", (r, o) => {
      const a = this.editor.model.document, l = a.selection.getLastPosition().parent;
      a.selection.isCollapsed && l.name == "listItem" && l.isEmpty && (this.editor.execute("outdentList"), o.preventDefault(), r.stop());
    }, { context: "li" }), this.listenTo(s, "delete", (r, o) => {
      if (o.direction !== "backward")
        return;
      const a = this.editor.model.document.selection;
      if (!a.isCollapsed)
        return;
      const l = a.getFirstPosition();
      if (!l.isAtStart)
        return;
      const c = l.parent;
      c.name !== "listItem" || c.previousSibling && c.previousSibling.name === "listItem" || (this.editor.execute("outdentList"), o.preventDefault(), r.stop());
    }, { context: "li" }), this.listenTo(e.editing.view.document, "tab", (r, o) => {
      const a = o.shiftKey ? "outdentList" : "indentList";
      this.editor.commands.get(a).isEnabled && (e.execute(a), o.stopPropagation(), o.preventDefault(), r.stop());
    }, { context: "li" });
  }
  /**
   * @inheritDoc
   */
  afterInit() {
    const e = this.editor.commands, t = e.get("indent"), i = e.get("outdent");
    t && t.registerChildCommand(e.get("indentList")), i && i.registerChildCommand(e.get("outdentList"));
  }
}
function _r(n) {
  let e = 1;
  for (const t of n.getChildren())
    if (t.name == "ul" || t.name == "ol")
      for (const i of t.getChildren())
        e += _r(i);
  return e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class hS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [qd, yP];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "List";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ZP extends W {
  /**
   * Creates an instance of the command.
   *
   * @param editor The editor instance.
   * @param defaultType The list type that will be used by default if the value was not specified during
   * the command execution.
   */
  constructor(e, t) {
    super(e), this.defaultType = t;
  }
  /**
   * @inheritDoc
   */
  refresh() {
    this.value = this._getValue(), this.isEnabled = this._checkEnabled();
  }
  /**
   * Executes the command.
   *
   * @fires execute
   * @param options.type The type of the list style, e.g. `'disc'` or `'square'`. If `null` is specified, the default
   * style will be applied.
   */
  execute(e = {}) {
    this._tryToConvertItemsToList(e);
    const t = this.editor.model, i = es(t);
    i.length && t.change((s) => {
      for (const r of i)
        s.setAttribute("listStyle", e.type || this.defaultType, r);
    });
  }
  /**
   * Checks the command's {@link #value}.
   *
   * @returns The current value.
   */
  _getValue() {
    const e = this.editor.model.document.selection.getFirstPosition().parent;
    return e && e.is("element", "listItem") ? e.getAttribute("listStyle") : null;
  }
  /**
   * Checks whether the command can be enabled in the current context.
   *
   * @returns Whether the command should be enabled.
   */
  _checkEnabled() {
    const e = this.editor, t = e.commands.get("numberedList"), i = e.commands.get("bulletedList");
    return t.isEnabled || i.isEnabled;
  }
  /**
   * Checks if the provided list style is valid. Also changes the selection to a list if it's not set yet.
   *
   * @param The type of the list style. If `null` is specified, the function does nothing.
  */
  _tryToConvertItemsToList(e) {
    if (!e.type)
      return;
    const t = Hd(e.type);
    if (!t)
      return;
    const i = this.editor, s = `${t}List`;
    i.commands.get(s).value || i.execute(s);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class XP extends W {
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this._getValue();
    this.value = e, this.isEnabled = e != null;
  }
  /**
   * Executes the command.
   *
   * @fires execute
   * @param options.reversed Whether the list should be reversed.
   */
  execute(e = {}) {
    const t = this.editor.model, i = es(t).filter((s) => s.getAttribute("listType") == "numbered");
    t.change((s) => {
      for (const r of i)
        s.setAttribute("listReversed", !!e.reversed, r);
    });
  }
  /**
   * Checks the command's {@link #value}.
   *
   * @returns The current value.
   */
  _getValue() {
    const e = this.editor.model.document.selection.getFirstPosition().parent;
    return e && e.is("element", "listItem") && e.getAttribute("listType") == "numbered" ? e.getAttribute("listReversed") : null;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class QP extends W {
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this._getValue();
    this.value = e, this.isEnabled = e != null;
  }
  /**
   * Executes the command.
   *
   * @fires execute
   * @param options.startIndex The list start index.
   */
  execute({ startIndex: e = 1 } = {}) {
    const t = this.editor.model, i = es(t).filter((s) => s.getAttribute("listType") == "numbered");
    t.change((s) => {
      for (const r of i)
        s.setAttribute("listStart", e >= 0 ? e : 1, r);
    });
  }
  /**
   * Checks the command's {@link #value}.
   *
   * @returns The current value.
   */
  _getValue() {
    const e = this.editor.model.document.selection.getFirstPosition().parent;
    return e && e.is("element", "listItem") && e.getAttribute("listType") == "numbered" ? e.getAttribute("listStart") : null;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const cn = "default";
class ex extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [qd];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ListPropertiesEditing";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), e.config.define("list", {
      properties: {
        styles: !0,
        startIndex: !1,
        reversed: !1
      }
    });
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.model, i = e.config.get("list.properties"), s = tx(i);
    t.schema.extend("listItem", {
      allowAttributes: s.map((r) => r.attributeName)
    });
    for (const r of s)
      r.addCommand(e);
    this.listenTo(e.commands.get("indentList"), "_executeCleanup", sx(e, s)), this.listenTo(e.commands.get("outdentList"), "_executeCleanup", rx(e, s)), this.listenTo(e.commands.get("bulletedList"), "_executeCleanup", _c(e)), this.listenTo(e.commands.get("numberedList"), "_executeCleanup", _c(e)), t.document.registerPostFixer(ox(e, s)), e.conversion.for("upcast").add(ix(s)), e.conversion.for("downcast").add(nx(s)), this._mergeListAttributesWhileMergingLists(s);
  }
  /**
   * @inheritDoc
   */
  afterInit() {
    const e = this.editor;
    e.commands.get("todoList") && e.model.document.registerPostFixer(cx(e));
  }
  /**
   * Starts listening to {@link module:engine/model/model~Model#deleteContent} and checks whether two lists will be merged into a single
   * one after deleting the content.
   *
   * The purpose of this action is to adjust the `listStyle`, `listReversed` and `listStart` values
   * for the list that was merged.
   *
   * Consider the following model's content:
   *
   * ```xml
   * <listItem listIndent="0" listType="bulleted" listStyle="square">UL List item 1</listItem>
   * <listItem listIndent="0" listType="bulleted" listStyle="square">UL List item 2</listItem>
   * <paragraph>[A paragraph.]</paragraph>
   * <listItem listIndent="0" listType="bulleted" listStyle="circle">UL List item 1</listItem>
   * <listItem listIndent="0" listType="bulleted" listStyle="circle">UL List item 2</listItem>
   * ```
   *
   * After removing the paragraph element, the second list will be merged into the first one.
   * We want to inherit the `listStyle` attribute for the second list from the first one.
   *
   * ```xml
   * <listItem listIndent="0" listType="bulleted" listStyle="square">UL List item 1</listItem>
   * <listItem listIndent="0" listType="bulleted" listStyle="square">UL List item 2</listItem>
   * <listItem listIndent="0" listType="bulleted" listStyle="square">UL List item 1</listItem>
   * <listItem listIndent="0" listType="bulleted" listStyle="square">UL List item 2</listItem>
   * ```
   *
   * See https://github.com/ckeditor/ckeditor5/issues/7879.
   *
   * @param attributeStrategies Strategies for the enabled attributes.
   */
  _mergeListAttributesWhileMergingLists(e) {
    const i = this.editor.model;
    let s;
    this.listenTo(i, "deleteContent", (r, [o]) => {
      const a = o.getFirstPosition(), l = o.getLastPosition();
      if (a.parent === l.parent || !a.parent.is("element", "listItem"))
        return;
      const c = l.parent.nextSibling;
      if (!c || !c.is("element", "listItem"))
        return;
      const u = hi(a.parent, {
        sameIndent: !0,
        listIndent: c.getAttribute("listIndent")
      });
      u && u.getAttribute("listType") === c.getAttribute("listType") && (s = u);
    }, { priority: "high" }), this.listenTo(i, "deleteContent", () => {
      s && (i.change((r) => {
        const o = hi(s.nextSibling, {
          sameIndent: !0,
          listIndent: s.getAttribute("listIndent"),
          direction: "forward"
        });
        if (!o) {
          s = null;
          return;
        }
        const a = [
          o,
          ...Vn(r.createPositionAt(o, 0), "forward")
        ];
        for (const l of a)
          for (const c of e)
            if (c.appliesToListItem(l)) {
              const u = c.attributeName, h = s.getAttribute(u);
              r.setAttribute(u, h, l);
            }
      }), s = null);
    }, { priority: "low" });
  }
}
function tx(n) {
  const e = [];
  return n.styles && e.push({
    attributeName: "listStyle",
    defaultValue: cn,
    addCommand(t) {
      t.commands.add("listStyle", new ZP(t, cn));
    },
    appliesToListItem() {
      return !0;
    },
    setAttributeOnDowncast(t, i, s) {
      i && i !== cn ? t.setStyle("list-style-type", i, s) : t.removeStyle("list-style-type", s);
    },
    getAttributeOnUpcast(t) {
      return t.getStyle("list-style-type") || cn;
    }
  }), n.reversed && e.push({
    attributeName: "listReversed",
    defaultValue: !1,
    addCommand(t) {
      t.commands.add("listReversed", new XP(t));
    },
    appliesToListItem(t) {
      return t.getAttribute("listType") == "numbered";
    },
    setAttributeOnDowncast(t, i, s) {
      i ? t.setAttribute("reversed", "reversed", s) : t.removeAttribute("reversed", s);
    },
    getAttributeOnUpcast(t) {
      return t.hasAttribute("reversed");
    }
  }), n.startIndex && e.push({
    attributeName: "listStart",
    defaultValue: 1,
    addCommand(t) {
      t.commands.add("listStart", new QP(t));
    },
    appliesToListItem(t) {
      return t.getAttribute("listType") == "numbered";
    },
    setAttributeOnDowncast(t, i, s) {
      i == 0 || i > 1 ? t.setAttribute("start", i, s) : t.removeAttribute("start", s);
    },
    getAttributeOnUpcast(t) {
      const i = t.getAttribute("start");
      return i >= 0 ? i : 1;
    }
  }), e;
}
function ix(n) {
  return (e) => {
    e.on("element:li", (t, i, s) => {
      if (!i.modelRange)
        return;
      const r = i.viewItem.parent, o = i.modelRange.start.nodeAfter || i.modelRange.end.nodeBefore;
      for (const a of n)
        if (a.appliesToListItem(o)) {
          const l = a.getAttributeOnUpcast(r);
          s.writer.setAttribute(a.attributeName, l, o);
        }
    }, { priority: "low" });
  };
}
function nx(n) {
  return (t) => {
    for (const i of n)
      t.on(`attribute:${i.attributeName}:listItem`, (s, r, o) => {
        const a = o.writer, l = r.item, c = hi(l.previousSibling, {
          sameIndent: !0,
          listIndent: l.getAttribute("listIndent"),
          direction: "backward"
        }), u = o.mapper.toViewElement(l);
        e(l, c) || a.breakContainer(a.createPositionBefore(u)), i.setAttributeOnDowncast(a, r.attributeNewValue, u.parent);
      }, { priority: "low" });
  };
  function e(t, i) {
    return i && t.getAttribute("listType") === i.getAttribute("listType") && t.getAttribute("listIndent") === i.getAttribute("listIndent") && t.getAttribute("listStyle") === i.getAttribute("listStyle") && t.getAttribute("listReversed") === i.getAttribute("listReversed") && t.getAttribute("listStart") === i.getAttribute("listStart");
  }
}
function sx(n, e) {
  return (t, i) => {
    const s = i[0], r = s.getAttribute("listIndent"), o = i.filter((l) => l.getAttribute("listIndent") === r);
    let a = null;
    s.previousSibling.getAttribute("listIndent") + 1 !== r && (a = hi(s.previousSibling, {
      sameIndent: !0,
      direction: "backward",
      listIndent: r
    })), n.model.change((l) => {
      for (const c of o)
        for (const u of e)
          if (u.appliesToListItem(c)) {
            const h = a == null ? u.defaultValue : a.getAttribute(u.attributeName);
            l.setAttribute(u.attributeName, h, c);
          }
    });
  };
}
function rx(n, e) {
  return (t, i) => {
    if (i = i.reverse().filter((a) => a.is("element", "listItem")), !i.length)
      return;
    const s = i[0].getAttribute("listIndent"), r = i[0].getAttribute("listType");
    let o = i[0].previousSibling;
    if (o.is("element", "listItem"))
      for (; o.getAttribute("listIndent") !== s; )
        o = o.previousSibling;
    else
      o = null;
    o || (o = i[i.length - 1].nextSibling), !(!o || !o.is("element", "listItem")) && o.getAttribute("listType") === r && n.model.change((a) => {
      const l = i.filter((c) => c.getAttribute("listIndent") === s);
      for (const c of l)
        for (const u of e)
          if (u.appliesToListItem(c)) {
            const h = u.attributeName, d = o.getAttribute(h);
            a.setAttribute(h, d, c);
          }
    });
  };
}
function ox(n, e) {
  return (t) => {
    let i = !1;
    const s = Gd(n.model.document.differ.getChanges()).filter((o) => o.getAttribute("listType") !== "todo");
    if (!s.length)
      return i;
    let r = s[s.length - 1].nextSibling;
    if ((!r || !r.is("element", "listItem")) && (r = s[0].previousSibling, r)) {
      const o = s[0].getAttribute("listIndent");
      for (; r.is("element", "listItem") && r.getAttribute("listIndent") !== o && (r = r.previousSibling, !!r); )
        ;
    }
    for (const o of e) {
      const a = o.attributeName;
      for (const l of s) {
        if (!o.appliesToListItem(l)) {
          t.removeAttribute(a, l);
          continue;
        }
        if (!l.hasAttribute(a))
          ax(r, l, o) ? t.setAttribute(a, r.getAttribute(a), l) : t.setAttribute(a, o.defaultValue, l), i = !0;
        else {
          const c = l.previousSibling;
          lx(c, l, o.attributeName) && (t.setAttribute(a, c.getAttribute(a), l), i = !0);
        }
      }
    }
    return i;
  };
}
function ax(n, e, t) {
  if (!n)
    return !1;
  const i = n.getAttribute(t.attributeName);
  return !(!i || i == t.defaultValue || n.getAttribute("listType") !== e.getAttribute("listType"));
}
function lx(n, e, t) {
  if (!n || !n.is("element", "listItem") || e.getAttribute("listType") !== n.getAttribute("listType"))
    return !1;
  const i = n.getAttribute("listIndent");
  if (i < 1 || i !== e.getAttribute("listIndent"))
    return !1;
  const s = n.getAttribute(t);
  return !(!s || s === e.getAttribute(t));
}
function cx(n) {
  return (e) => {
    const t = Gd(n.model.document.differ.getChanges()).filter((i) => i.getAttribute("listType") === "todo" && (i.hasAttribute("listStyle") || i.hasAttribute("listReversed") || i.hasAttribute("listStart")));
    if (!t.length)
      return !1;
    for (const i of t)
      e.removeAttribute("listStyle", i), e.removeAttribute("listReversed", i), e.removeAttribute("listStart", i);
    return !0;
  };
}
function _c(n) {
  return (e, t) => {
    t = t.filter((i) => i.is("element", "listItem")), n.model.change((i) => {
      for (const s of t)
        i.removeAttribute("listStyle", s);
    });
  };
}
function Gd(n) {
  const e = [];
  for (const t of n) {
    const i = ux(t);
    i && i.is("element", "listItem") && e.push(i);
  }
  return e;
}
function ux(n) {
  return n.type === "attribute" ? n.range.start.nodeAfter : n.type === "insert" ? n.position.nodeAfter : null;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class dS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ex, MP];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ListProperties";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
Wn("Ctrl+Enter");
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function hx(n) {
  return n.createContainerElement("span", { class: "image-inline" }, n.createEmptyElement("img"));
}
function vc(n) {
  return n.createContainerElement("figure", { class: "image" }, [
    n.createEmptyElement("img"),
    n.createSlot("children")
  ]);
}
function Kd(n, e) {
  const t = n.plugins.get("ImageUtils"), i = n.plugins.has("ImageInlineEditing") && n.plugins.has("ImageBlockEditing");
  return (r) => t.isInlineImageView(r) ? i && (r.getStyle("display") == "block" || r.findAncestor(t.isBlockImageView) ? "imageBlock" : "imageInline") !== e ? null : s(r) : null;
  function s(r) {
    const o = {
      name: !0
    };
    return r.hasAttribute("src") && (o.attributes = ["src"]), o;
  }
}
function bo(n, e) {
  const t = de(e.getSelectedBlocks());
  return !t || n.isObject(t) || t.isEmpty && t.name != "listItem" ? "imageBlock" : "imageInline";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ft extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageUtils";
  }
  /**
   * Checks if the provided model element is an `image` or `imageInline`.
   */
  isImage(e) {
    return this.isInlineImage(e) || this.isBlockImage(e);
  }
  /**
   * Checks if the provided view element represents an inline image.
   *
   * Also, see {@link module:image/imageutils~ImageUtils#isImageWidget}.
   */
  isInlineImageView(e) {
    return !!e && e.is("element", "img");
  }
  /**
   * Checks if the provided view element represents a block image.
   *
   * Also, see {@link module:image/imageutils~ImageUtils#isImageWidget}.
   */
  isBlockImageView(e) {
    return !!e && e.is("element", "figure") && e.hasClass("image");
  }
  /**
   * Handles inserting single file. This method unifies image insertion using {@link module:widget/utils~findOptimalInsertionRange}
   * method.
   *
   * ```ts
   * const imageUtils = editor.plugins.get( 'ImageUtils' );
   *
   * imageUtils.insertImage( { src: 'path/to/image.jpg' } );
   * ```
   *
   * @param attributes Attributes of the inserted image.
   * This method filters out the attributes which are disallowed by the {@link module:engine/model/schema~Schema}.
   * @param selectable Place to insert the image. If not specified,
   * the {@link module:widget/utils~findOptimalInsertionRange} logic will be applied for the block images
   * and `model.document.selection` for the inline images.
   *
   * **Note**: If `selectable` is passed, this helper will not be able to set selection attributes (such as `linkHref`)
   * and apply them to the new image. In this case, make sure all selection attributes are passed in `attributes`.
   *
   * @param imageType Image type of inserted image. If not specified,
   * it will be determined automatically depending of editor config or place of the insertion.
   * @return The inserted model image element.
   */
  insertImage(e = {}, t = null, i = null) {
    const s = this.editor, r = s.model, o = r.document.selection;
    i = Jd(s, t || o, i), e = {
      ...Object.fromEntries(o.getAttributes()),
      ...e
    };
    for (const a in e)
      r.schema.checkAttribute(i, a) || delete e[a];
    return r.change((a) => {
      const l = a.createElement(i, e);
      return r.insertObject(l, t, null, {
        setSelection: "on",
        // If we want to insert a block image (for whatever reason) then we don't want to split text blocks.
        // This applies only when we don't have the selectable specified (i.e., we insert multiple block images at once).
        findOptimalPosition: !t && i != "imageInline" ? "auto" : void 0
      }), l.parent ? l : null;
    });
  }
  /**
   * Returns an image widget editing view element if one is selected or is among the selection's ancestors.
   */
  getClosestSelectedImageWidget(e) {
    const t = e.getFirstPosition();
    if (!t)
      return null;
    const i = e.getSelectedElement();
    if (i && this.isImageWidget(i))
      return i;
    let s = t.parent;
    for (; s; ) {
      if (s.is("element") && this.isImageWidget(s))
        return s;
      s = s.parent;
    }
    return null;
  }
  /**
   * Returns a image model element if one is selected or is among the selection's ancestors.
   */
  getClosestSelectedImageElement(e) {
    const t = e.getSelectedElement();
    return this.isImage(t) ? t : e.getFirstPosition().findAncestor("imageBlock");
  }
  /**
   * Checks if image can be inserted at current model selection.
   *
   * @internal
   */
  isImageAllowed() {
    const t = this.editor.model.document.selection;
    return dx(this.editor, t) && fx(t);
  }
  /**
   * Converts a given {@link module:engine/view/element~Element} to an image widget:
   * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the image widget
   * element.
   * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.
   *
   * @param writer An instance of the view writer.
   * @param label The element's label. It will be concatenated with the image `alt` attribute if one is present.
   */
  toImageWidget(e, t, i) {
    return t.setCustomProperty("image", !0, e), ho(e, t, { label: () => {
      const o = this.findViewImgElement(e).getAttribute("alt");
      return o ? `${o} ${i}` : i;
    } });
  }
  /**
   * Checks if a given view element is an image widget.
   */
  isImageWidget(e) {
    return !!e.getCustomProperty("image") && X(e);
  }
  /**
   * Checks if the provided model element is an `image`.
   */
  isBlockImage(e) {
    return !!e && e.is("element", "imageBlock");
  }
  /**
   * Checks if the provided model element is an `imageInline`.
   */
  isInlineImage(e) {
    return !!e && e.is("element", "imageInline");
  }
  /**
   * Get the view `<img>` from another view element, e.g. a widget (`<figure class="image">`), a link (`<a>`).
   *
   * The `<img>` can be located deep in other elements, so this helper performs a deep tree search.
   */
  findViewImgElement(e) {
    if (this.isInlineImageView(e))
      return e;
    const t = this.editor.editing.view;
    for (const { item: i } of t.createRangeIn(e))
      if (this.isInlineImageView(i))
        return i;
  }
}
function dx(n, e) {
  if (Jd(n, e, null) == "imageBlock") {
    const i = mx(e, n.model);
    if (n.model.schema.checkChild(i, "imageBlock"))
      return !0;
  } else if (n.model.schema.checkChild(e.focus, "imageInline"))
    return !0;
  return !1;
}
function fx(n) {
  return [...n.focus.getAncestors()].every((e) => !e.is("element", "imageBlock"));
}
function mx(n, e) {
  const i = xd(n, e).start.parent;
  return i.isEmpty && !i.is("element", "$root") ? i.parent : i;
}
function Jd(n, e, t) {
  const i = n.model.schema, s = n.config.get("image.insert.type");
  return n.plugins.has("ImageBlockEditing") ? n.plugins.has("ImageInlineEditing") ? t || (s === "inline" ? "imageInline" : s === "block" ? "imageBlock" : e.is("selection") ? bo(i, e) : i.checkChild(e, "imageInline") ? "imageInline" : "imageBlock") : "imageBlock" : "imageInline";
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class gx extends W {
  /**
   * @inheritDoc
   */
  refresh() {
    const i = this.editor.plugins.get("ImageUtils").getClosestSelectedImageElement(this.editor.model.document.selection);
    this.isEnabled = !!i, this.isEnabled && i.hasAttribute("alt") ? this.value = i.getAttribute("alt") : this.value = !1;
  }
  /**
   * Executes the command.
   *
   * @fires execute
   * @param options
   * @param options.newValue The new value of the `alt` attribute to set.
   */
  execute(e) {
    const t = this.editor, i = t.plugins.get("ImageUtils"), s = t.model, r = i.getClosestSelectedImageElement(s.document.selection);
    s.change((o) => {
      o.setAttribute("alt", e.newValue, r);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class px extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ft];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageTextAlternativeEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    this.editor.commands.add("imageTextAlternative", new gx(this.editor));
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class wx extends E {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = this.locale.t;
    this.focusTracker = new fe(), this.keystrokes = new ke(), this.labeledInput = this._createLabeledInputView(), this.saveButtonView = this._createButton(t("Save"), B.check, "ck-button-save"), this.saveButtonView.type = "submit", this.cancelButtonView = this._createButton(t("Cancel"), B.cancel, "ck-button-cancel", "cancel"), this._focusables = new qe(), this._focusCycler = new wt({
      focusables: this._focusables,
      focusTracker: this.focusTracker,
      keystrokeHandler: this.keystrokes,
      actions: {
        // Navigate form fields backwards using the Shift + Tab keystroke.
        focusPrevious: "shift + tab",
        // Navigate form fields forwards using the Tab key.
        focusNext: "tab"
      }
    }), this.setTemplate({
      tag: "form",
      attributes: {
        class: [
          "ck",
          "ck-text-alternative-form",
          "ck-responsive-form"
        ],
        // https://github.com/ckeditor/ckeditor5-image/issues/40
        tabindex: "-1"
      },
      children: [
        this.labeledInput,
        this.saveButtonView,
        this.cancelButtonView
      ]
    });
  }
  /**
   * @inheritDoc
   */
  render() {
    super.render(), this.keystrokes.listenTo(this.element), io({ view: this }), [this.labeledInput, this.saveButtonView, this.cancelButtonView].forEach((e) => {
      this._focusables.add(e), this.focusTracker.add(e.element);
    });
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this.focusTracker.destroy(), this.keystrokes.destroy();
  }
  /**
   * Creates the button view.
   *
   * @param label The button label
   * @param icon The button's icon.
   * @param className The additional button CSS class name.
   * @param eventName The event name that the ButtonView#execute event will be delegated to.
   * @returns The button view instance.
   */
  _createButton(e, t, i, s) {
    const r = new D(this.locale);
    return r.set({
      label: e,
      icon: t,
      tooltip: !0
    }), r.extendTemplate({
      attributes: {
        class: i
      }
    }), s && r.delegate("execute").to(this, s), r;
  }
  /**
   * Creates an input with a label.
   *
   * @returns Labeled field view instance.
   */
  _createLabeledInputView() {
    const e = this.locale.t, t = new qi(this.locale, Yn);
    return t.label = e("Text alternative"), t;
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function bx(n) {
  const e = n.plugins.get("ContextualBalloon");
  if (n.plugins.get("ImageUtils").getClosestSelectedImageWidget(n.editing.view.document.selection)) {
    const i = Yd(n);
    e.updatePosition(i);
  }
}
function Yd(n) {
  const e = n.editing.view, t = ae.defaultPositions, i = n.plugins.get("ImageUtils");
  return {
    target: e.domConverter.mapViewToDom(i.getClosestSelectedImageWidget(e.document.selection)),
    positions: [
      t.northArrowSouth,
      t.northArrowSouthWest,
      t.northArrowSouthEast,
      t.southArrowNorth,
      t.southArrowNorthWest,
      t.southArrowNorthEast,
      t.viewportStickyNorth
    ]
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class _x extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [xn];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageTextAlternativeUI";
  }
  /**
   * @inheritDoc
   */
  init() {
    this._createButton();
  }
  /**
   * @inheritDoc
   */
  destroy() {
    super.destroy(), this._form && this._form.destroy();
  }
  /**
   * Creates a button showing the balloon panel for changing the image text alternative and
   * registers it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.
   */
  _createButton() {
    const e = this.editor, t = e.t;
    e.ui.componentFactory.add("imageTextAlternative", (i) => {
      const s = e.commands.get("imageTextAlternative"), r = new D(i);
      return r.set({
        label: t("Change image text alternative"),
        icon: B.lowVision,
        tooltip: !0
      }), r.bind("isEnabled").to(s, "isEnabled"), r.bind("isOn").to(s, "value", (o) => !!o), this.listenTo(r, "execute", () => {
        this._showForm();
      }), r;
    });
  }
  /**
   * Creates the {@link module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}
   * form.
   */
  _createForm() {
    const e = this.editor, i = e.editing.view.document, s = e.plugins.get("ImageUtils");
    this._balloon = this.editor.plugins.get("ContextualBalloon"), this._form = new (to(wx))(e.locale), this._form.render(), this.listenTo(this._form, "submit", () => {
      e.execute("imageTextAlternative", {
        newValue: this._form.labeledInput.fieldView.element.value
      }), this._hideForm(!0);
    }), this.listenTo(this._form, "cancel", () => {
      this._hideForm(!0);
    }), this._form.keystrokes.set("Esc", (r, o) => {
      this._hideForm(!0), o();
    }), this.listenTo(e.ui, "update", () => {
      s.getClosestSelectedImageWidget(i.selection) ? this._isVisible && bx(e) : this._hideForm(!0);
    }), eo({
      emitter: this._form,
      activator: () => this._isVisible,
      contextElements: () => [this._balloon.view.element],
      callback: () => this._hideForm()
    });
  }
  /**
   * Shows the {@link #_form} in the {@link #_balloon}.
   */
  _showForm() {
    if (this._isVisible)
      return;
    this._form || this._createForm();
    const e = this.editor, t = e.commands.get("imageTextAlternative"), i = this._form.labeledInput;
    this._form.disableCssTransitions(), this._isInBalloon || this._balloon.add({
      view: this._form,
      position: Yd(e)
    }), i.fieldView.value = i.fieldView.element.value = t.value || "", this._form.labeledInput.fieldView.select(), this._form.enableCssTransitions();
  }
  /**
   * Removes the {@link #_form} from the {@link #_balloon}.
   *
   * @param focusEditable Controls whether the editing view is focused afterwards.
   */
  _hideForm(e = !1) {
    this._isInBalloon && (this._form.focusTracker.isFocused && this._form.saveButtonView.focus(), this._balloon.remove(this._form), e && this.editor.editing.view.focus());
  }
  /**
   * Returns `true` when the {@link #_form} is the visible view in the {@link #_balloon}.
   */
  get _isVisible() {
    return !!this._balloon && this._balloon.visibleView === this._form;
  }
  /**
   * Returns `true` when the {@link #_form} is in the {@link #_balloon}.
   */
  get _isInBalloon() {
    return !!this._balloon && this._balloon.hasView(this._form);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Zd extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [px, _x];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageTextAlternative";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function vx(n) {
  const e = (t, i, s) => {
    if (!s.consumable.test(i.viewItem, { name: !0, classes: "image" }))
      return;
    const r = n.findViewImgElement(i.viewItem);
    if (!r || !s.consumable.test(r, { name: !0 }))
      return;
    s.consumable.consume(i.viewItem, { name: !0, classes: "image" });
    const o = s.convertItem(r, i.modelCursor), a = de(o.modelRange.getItems());
    if (!a) {
      s.consumable.revert(i.viewItem, { name: !0, classes: "image" });
      return;
    }
    s.convertChildren(i.viewItem, a), s.updateConversionResult(a, i);
  };
  return (t) => {
    t.on("element:figure", e);
  };
}
function Xd(n, e) {
  const t = (i, s, r) => {
    if (!r.consumable.consume(s.item, i.name))
      return;
    const o = r.writer, a = r.mapper.toViewElement(s.item), l = n.findViewImgElement(a);
    if (s.attributeNewValue === null) {
      const c = s.attributeOldValue;
      c && c.data && (o.removeAttribute("srcset", l), o.removeAttribute("sizes", l), c.width && o.removeAttribute("width", l));
    } else {
      const c = s.attributeNewValue;
      c && c.data && (o.setAttribute("srcset", c.data, l), o.setAttribute("sizes", "100vw", l), c.width && o.setAttribute("width", c.width, l));
    }
  };
  return (i) => {
    i.on(`attribute:srcset:${e}`, t);
  };
}
function On(n, e, t) {
  const i = (s, r, o) => {
    if (!o.consumable.consume(r.item, s.name))
      return;
    const a = o.writer, l = o.mapper.toViewElement(r.item), c = n.findViewImgElement(l);
    a.setAttribute(r.attributeKey, r.attributeNewValue || "", c);
  };
  return (s) => {
    s.on(`attribute:${t}:${e}`, i);
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Qd extends je {
  /**
   * @inheritDoc
   */
  observe(e) {
    this.listenTo(e, "load", (t, i) => {
      const s = i.target;
      this.checkShouldIgnoreEventFromTarget(s) || s.tagName == "IMG" && this._fireEvents(i);
    }, { useCapture: !0 });
  }
  /**
   * @inheritDoc
   */
  stopObserving(e) {
    this.stopListening(e);
  }
  /**
   * Fires {@link module:engine/view/document~Document#event:layoutChanged} and
   * {@link module:engine/view/document~Document#event:imageLoaded}
   * if observer {@link #isEnabled is enabled}.
   *
   * @param domEvent The DOM event.
   */
  _fireEvents(e) {
    this.isEnabled && (this.document.fire("layoutChanged"), this.document.fire("imageLoaded", e));
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class yx extends W {
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e);
    const t = e.config.get("image.insert.type");
    e.plugins.has("ImageBlockEditing") || t === "block" && G("image-block-plugin-required"), e.plugins.has("ImageInlineEditing") || t === "inline" && G("image-inline-plugin-required");
  }
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this.editor.plugins.get("ImageUtils");
    this.isEnabled = e.isImageAllowed();
  }
  /**
   * Executes the command.
   *
   * @fires execute
   * @param options Options for the executed command.
   * @param options.source The image source or an array of image sources to insert.
   * See the documentation of the command to learn more about accepted formats.
   */
  execute(e) {
    const t = Q(e.source), i = this.editor.model.document.selection, s = this.editor.plugins.get("ImageUtils"), r = Object.fromEntries(i.getAttributes());
    t.forEach((o, a) => {
      const l = i.getSelectedElement();
      if (typeof o == "string" && (o = { src: o }), a && l && s.isImage(l)) {
        const c = this.editor.model.createPositionAfter(l);
        s.insertImage({ ...o, ...r }, c);
      } else
        s.insertImage({ ...o, ...r });
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class kx extends W {
  /**
   * @inheritDoc
   */
  refresh() {
    const t = this.editor.plugins.get("ImageUtils"), i = this.editor.model.document.selection.getSelectedElement();
    this.isEnabled = t.isImage(i), this.value = this.isEnabled ? i.getAttribute("src") : null;
  }
  /**
   * Executes the command.
   *
   * @fires execute
   * @param options Options for the executed command.
   * @param options.source The image source to replace.
   */
  execute(e) {
    const t = this.editor.model.document.selection.getSelectedElement();
    this.editor.model.change((i) => {
      i.setAttribute("src", e.source, t), i.removeAttribute("srcset", t), i.removeAttribute("sizes", t);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class ef extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ft];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.conversion;
    e.editing.view.addObserver(Qd), t.for("upcast").attributeToAttribute({
      view: {
        name: "img",
        key: "alt"
      },
      model: "alt"
    }).attributeToAttribute({
      view: {
        name: "img",
        key: "srcset"
      },
      model: {
        key: "srcset",
        value: (r) => {
          const o = {
            data: r.getAttribute("srcset")
          };
          return r.hasAttribute("width") && (o.width = r.getAttribute("width")), o;
        }
      }
    });
    const i = new yx(e), s = new kx(e);
    e.commands.add("insertImage", i), e.commands.add("replaceImageSource", s), e.commands.add("imageInsert", i);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class tf extends W {
  /**
   * @inheritDoc
   *
   * @param modelElementName Model element name the command converts to.
   */
  constructor(e, t) {
    super(e), this._modelElementName = t;
  }
  /**
   * @inheritDoc
   */
  refresh() {
    const t = this.editor.plugins.get("ImageUtils"), i = t.getClosestSelectedImageElement(this.editor.model.document.selection);
    this._modelElementName === "imageBlock" ? this.isEnabled = t.isInlineImage(i) : this.isEnabled = t.isBlockImage(i);
  }
  /**
   * Executes the command and changes the type of a selected image.
   *
   * @fires execute
   * @returns An object containing references to old and new model image elements
   * (for before and after the change) so external integrations can hook into the decorated
   * `execute` event and handle this change. `null` if the type change failed.
   */
  execute() {
    const e = this.editor, t = this.editor.model, i = e.plugins.get("ImageUtils"), s = i.getClosestSelectedImageElement(t.document.selection), r = Object.fromEntries(s.getAttributes());
    return !r.src && !r.uploadId ? null : t.change((o) => {
      const a = Array.from(t.markers).filter((u) => u.getRange().containsItem(s)), l = i.insertImage(r, t.createSelection(s, "on"), this._modelElementName);
      if (!l)
        return null;
      const c = o.createRangeOn(l);
      for (const u of a) {
        const h = u.getRange(), d = h.root.rootName != "$graveyard" ? h.getJoined(c, !0) : c;
        o.updateMarker(u, { range: d });
      }
      return {
        oldElement: s,
        newElement: l
      };
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Cx extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ef, ft, dt];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageBlockEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor;
    e.model.schema.register("imageBlock", {
      inheritAllFrom: "$blockObject",
      allowAttributes: ["alt", "src", "srcset"]
    }), this._setupConversion(), e.plugins.has("ImageInlineEditing") && (e.commands.add("imageTypeBlock", new tf(this.editor, "imageBlock")), this._setupClipboardIntegration());
  }
  /**
   * Configures conversion pipelines to support upcasting and downcasting
   * block images (block image widgets) and their attributes.
   */
  _setupConversion() {
    const e = this.editor, t = e.t, i = e.conversion, s = e.plugins.get("ImageUtils");
    i.for("dataDowncast").elementToStructure({
      model: "imageBlock",
      view: (r, { writer: o }) => vc(o)
    }), i.for("editingDowncast").elementToStructure({
      model: "imageBlock",
      view: (r, { writer: o }) => s.toImageWidget(vc(o), o, t("image widget"))
    }), i.for("downcast").add(On(s, "imageBlock", "src")).add(On(s, "imageBlock", "alt")).add(Xd(s, "imageBlock")), i.for("upcast").elementToElement({
      view: Kd(e, "imageBlock"),
      model: (r, { writer: o }) => o.createElement("imageBlock", r.hasAttribute("src") ? { src: r.getAttribute("src") } : void 0)
    }).add(vx(s));
  }
  /**
   * Integrates the plugin with the clipboard pipeline.
   *
   * Idea is that the feature should recognize the user's intent when an **inline** image is
   * pasted or dropped. If such an image is pasted/dropped:
   *
   * * into an empty block (e.g. an empty paragraph),
   * * on another object (e.g. some block widget).
   *
   * it gets converted into a block image on the fly. We assume this is the user's intent
   * if they decided to put their image there.
   *
   * See the `ImageInlineEditing` for the similar integration that works in the opposite direction.
   */
  _setupClipboardIntegration() {
    const e = this.editor, t = e.model, i = e.editing.view, s = e.plugins.get("ImageUtils"), r = e.plugins.get("ClipboardPipeline");
    this.listenTo(r, "inputTransformation", (o, a) => {
      const l = Array.from(a.content.getChildren());
      let c;
      if (!l.every(s.isInlineImageView))
        return;
      a.targetRanges ? c = e.editing.mapper.toModelRange(a.targetRanges[0]) : c = t.document.selection.getFirstRange();
      const u = t.createSelection(c);
      if (bo(t.schema, u) === "imageBlock") {
        const h = new Qr(i.document), d = l.map((m) => h.createElement("figure", { class: "image" }, m));
        a.content = h.createDocumentFragment(d);
      }
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ax extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Cx, Gi, Zd];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageBlock";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Ex extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ef, ft, dt];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageInlineEditing";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.model.schema;
    t.register("imageInline", {
      inheritAllFrom: "$inlineObject",
      allowAttributes: ["alt", "src", "srcset"]
    }), t.addChildCheck((i, s) => {
      if (i.endsWith("caption") && s.name === "imageInline")
        return !1;
    }), this._setupConversion(), e.plugins.has("ImageBlockEditing") && (e.commands.add("imageTypeInline", new tf(this.editor, "imageInline")), this._setupClipboardIntegration());
  }
  /**
   * Configures conversion pipelines to support upcasting and downcasting
   * inline images (inline image widgets) and their attributes.
   */
  _setupConversion() {
    const e = this.editor, t = e.t, i = e.conversion, s = e.plugins.get("ImageUtils");
    i.for("dataDowncast").elementToElement({
      model: "imageInline",
      view: (r, { writer: o }) => o.createEmptyElement("img")
    }), i.for("editingDowncast").elementToStructure({
      model: "imageInline",
      view: (r, { writer: o }) => s.toImageWidget(hx(o), o, t("image widget"))
    }), i.for("downcast").add(On(s, "imageInline", "src")).add(On(s, "imageInline", "alt")).add(Xd(s, "imageInline")), i.for("upcast").elementToElement({
      view: Kd(e, "imageInline"),
      model: (r, { writer: o }) => o.createElement("imageInline", r.hasAttribute("src") ? { src: r.getAttribute("src") } : void 0)
    });
  }
  /**
   * Integrates the plugin with the clipboard pipeline.
   *
   * Idea is that the feature should recognize the user's intent when an **block** image is
   * pasted or dropped. If such an image is pasted/dropped into a non-empty block
   * (e.g. a paragraph with some text) it gets converted into an inline image on the fly.
   *
   * We assume this is the user's intent if they decided to put their image there.
   *
   * **Note**: If a block image has a caption, it will not be converted to an inline image
   * to avoid the confusion. Captions are added on purpose and they should never be lost
   * in the clipboard pipeline.
   *
   * See the `ImageBlockEditing` for the similar integration that works in the opposite direction.
   */
  _setupClipboardIntegration() {
    const e = this.editor, t = e.model, i = e.editing.view, s = e.plugins.get("ImageUtils"), r = e.plugins.get("ClipboardPipeline");
    this.listenTo(r, "inputTransformation", (o, a) => {
      const l = Array.from(a.content.getChildren());
      let c;
      if (!l.every(s.isBlockImageView))
        return;
      a.targetRanges ? c = e.editing.mapper.toModelRange(a.targetRanges[0]) : c = t.document.selection.getFirstRange();
      const u = t.createSelection(c);
      if (bo(t.schema, u) === "imageInline") {
        const h = new Qr(i.document), d = l.map((m) => m.childCount === 1 ? (Array.from(m.getAttributes()).forEach((p) => h.setAttribute(...p, s.findViewImgElement(m))), m.getChild(0)) : m);
        a.content = h.createDocumentFragment(d);
      }
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Tx extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Ex, Gi, Zd];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageInline";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class fS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Ax, Tx];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "Image";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Px extends W {
  /**
   * @inheritDoc
   */
  refresh() {
    const e = this.editor, i = e.plugins.get("ImageUtils").getClosestSelectedImageElement(e.model.document.selection);
    this.isEnabled = !!i, !i || !i.hasAttribute("width") ? this.value = null : this.value = {
      width: i.getAttribute("width"),
      height: null
    };
  }
  /**
   * Executes the command.
   *
   * ```ts
   * // Sets the width to 50%:
   * editor.execute( 'resizeImage', { width: '50%' } );
   *
   * // Removes the width attribute:
   * editor.execute( 'resizeImage', { width: null } );
   * ```
   *
   * @param options
   * @param options.width The new width of the image.
   * @fires execute
   */
  execute(e) {
    const t = this.editor, i = t.model, r = t.plugins.get("ImageUtils").getClosestSelectedImageElement(i.document.selection);
    this.value = {
      width: e.width,
      height: null
    }, r && i.change((o) => {
      o.setAttribute("width", e.width, r);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class nf extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ft];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageResizeEditing";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), e.config.define("image", {
      resizeUnit: "%",
      resizeOptions: [
        {
          name: "resizeImage:original",
          value: null,
          icon: "original"
        },
        {
          name: "resizeImage:25",
          value: "25",
          icon: "small"
        },
        {
          name: "resizeImage:50",
          value: "50",
          icon: "medium"
        },
        {
          name: "resizeImage:75",
          value: "75",
          icon: "large"
        }
      ]
    });
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = new Px(e);
    this._registerSchema(), this._registerConverters("imageBlock"), this._registerConverters("imageInline"), e.commands.add("resizeImage", t), e.commands.add("imageResize", t);
  }
  _registerSchema() {
    this.editor.plugins.has("ImageBlockEditing") && this.editor.model.schema.extend("imageBlock", { allowAttributes: "width" }), this.editor.plugins.has("ImageInlineEditing") && this.editor.model.schema.extend("imageInline", { allowAttributes: "width" });
  }
  /**
   * Registers image resize converters.
   *
   * @param imageType The type of the image.
   */
  _registerConverters(e) {
    const t = this.editor;
    t.conversion.for("downcast").add((i) => i.on(`attribute:width:${e}`, (s, r, o) => {
      if (!o.consumable.consume(r.item, s.name))
        return;
      const a = o.writer, l = o.mapper.toViewElement(r.item);
      r.attributeNewValue !== null ? (a.setStyle("width", r.attributeNewValue, l), a.addClass("image_resized", l)) : (a.removeStyle("width", l), a.removeClass("image_resized", l));
    })), t.conversion.for("upcast").attributeToAttribute({
      view: {
        name: e === "imageBlock" ? "figure" : "img",
        styles: {
          width: /.+/
        }
      },
      model: {
        key: "width",
        value: (i) => i.getStyle("width")
      }
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Ds = {
  small: B.objectSizeSmall,
  medium: B.objectSizeMedium,
  large: B.objectSizeLarge,
  original: B.objectSizeFull
};
class xx extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [nf];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageResizeButtons";
  }
  /**
   * @inheritDoc
   */
  constructor(e) {
    super(e), this._resizeUnit = e.config.get("image.resizeUnit");
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor, t = e.config.get("image.resizeOptions"), i = e.commands.get("resizeImage");
    this.bind("isEnabled").to(i);
    for (const s of t)
      this._registerImageResizeButton(s);
    this._registerImageResizeDropdown(t);
  }
  /**
   * A helper function that creates a standalone button component for the plugin.
   *
   * @param resizeOption A model of the resize option.
   */
  _registerImageResizeButton(e) {
    const t = this.editor, { name: i, value: s, icon: r } = e, o = s ? s + this._resizeUnit : null;
    t.ui.componentFactory.add(i, (a) => {
      const l = new D(a), c = t.commands.get("resizeImage"), u = this._getOptionLabelValue(e, !0);
      if (!Ds[r])
        throw new f("imageresizebuttons-missing-icon", t, e);
      return l.set({
        // Use the `label` property for a verbose description (because of ARIA).
        label: u,
        icon: Ds[r],
        tooltip: u,
        isToggleable: !0
      }), l.bind("isEnabled").to(this), l.bind("isOn").to(c, "value", yc(o)), this.listenTo(l, "execute", () => {
        t.execute("resizeImage", { width: o });
      }), l;
    });
  }
  /**
   * A helper function that creates a dropdown component for the plugin containing all the resize options defined in
   * the editor configuration.
   *
   * @param options An array of configured options.
   */
  _registerImageResizeDropdown(e) {
    const t = this.editor, i = t.t, s = e.find((o) => !o.value), r = (o) => {
      const a = t.commands.get("resizeImage"), l = ot(o, ld), c = l.buttonView, u = i("Resize image");
      return c.set({
        tooltip: u,
        commandValue: s.value,
        icon: Ds.medium,
        isToggleable: !0,
        label: this._getOptionLabelValue(s),
        withText: !0,
        class: "ck-resize-image-button",
        ariaLabel: u,
        ariaLabelledBy: void 0
      }), c.bind("label").to(a, "value", (h) => h && h.width ? h.width : this._getOptionLabelValue(s)), l.bind("isEnabled").to(this), fd(l, () => this._getResizeDropdownListItemDefinitions(e, a), {
        ariaLabel: i("Image resize list"),
        role: "menu"
      }), this.listenTo(l, "execute", (h) => {
        t.execute(h.source.commandName, { width: h.source.commandValue }), t.editing.view.focus();
      }), l;
    };
    t.ui.componentFactory.add("resizeImage", r), t.ui.componentFactory.add("imageResize", r);
  }
  /**
   * A helper function for creating an option label value string.
   *
   * @param option A resize option object.
   * @param forTooltip An optional flag for creating a tooltip label.
   * @returns A user-defined label combined from the numeric value and the resize unit or the default label
   * for reset options (`Original`).
   */
  _getOptionLabelValue(e, t = !1) {
    const i = this.editor.t;
    return e.label ? e.label : t ? e.value ? i("Resize image to %0", e.value + this._resizeUnit) : i("Resize image to the original size") : e.value ? e.value + this._resizeUnit : i("Original");
  }
  /**
   * A helper function that parses the resize options and returns list item definitions ready for use in the dropdown.
   *
   * @param options The resize options.
   * @param command The resize image command.
   * @returns Dropdown item definitions.
   */
  _getResizeDropdownListItemDefinitions(e, t) {
    const i = new Ue();
    return e.map((s) => {
      const r = s.value ? s.value + this._resizeUnit : null, o = {
        type: "button",
        model: new vd({
          commandName: "resizeImage",
          commandValue: r,
          label: this._getOptionLabelValue(s),
          role: "menuitemradio",
          withText: !0,
          icon: null
        })
      };
      o.model.bind("isOn").to(t, "value", yc(r)), i.add(o);
    }), i;
  }
}
function yc(n) {
  return (e) => {
    const t = e;
    return n === null && t === n ? !0 : t !== null && t.width === n;
  };
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const Sx = "figure.image.ck-widget > img,figure.image.ck-widget > picture > img,figure.image.ck-widget > a > img,figure.image.ck-widget > a > picture > img,span.image-inline.ck-widget > img,span.image-inline.ck-widget > picture > img", Ix = /(image|image-inline)/, Fs = "image_resized";
class Rx extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Ts];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageResizeHandles";
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor.commands.get("resizeImage");
    this.bind("isEnabled").to(e), this._setupResizerCreator();
  }
  /**
   * Attaches the listeners responsible for creating a resizer for each image, except for images inside the HTML embed preview.
   */
  _setupResizerCreator() {
    const e = this.editor, t = e.editing.view;
    t.addObserver(Qd), this.listenTo(t.document, "imageLoaded", (i, s) => {
      if (!s.target.matches(Sx))
        return;
      const r = e.editing.view.domConverter, a = r.domToView(s.target).findAncestor({ classes: Ix });
      let l = this.editor.plugins.get(Ts).getResizerByViewElement(a);
      if (l) {
        l.redraw();
        return;
      }
      const c = e.editing.mapper, u = c.toModelElement(a);
      l = e.plugins.get(Ts).attachTo({
        unit: e.config.get("image.resizeUnit"),
        modelElement: u,
        viewElement: a,
        editor: e,
        getHandleHost(h) {
          return h.querySelector("img");
        },
        getResizeHost() {
          return r.mapViewToDom(c.toViewElement(u.parent));
        },
        // TODO consider other positions.
        isCentered() {
          const h = u.getAttribute("imageStyle");
          return !h || h == "block" || h == "alignCenter";
        },
        onCommit(h) {
          t.change((d) => {
            d.removeClass(Fs, a);
          }), e.execute("resizeImage", { width: h });
        }
      }), l.on("updateSize", () => {
        a.hasClass(Fs) || t.change((h) => {
          h.addClass(Fs, a);
        });
      }), l.bind("isEnabled").to(this);
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class mS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [nf, Rx, xx];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageResize";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Vx extends W {
  /**
   * Creates an instance of the image style command. When executed, the command applies one of
   * {@link module:image/imageconfig~ImageStyleConfig#options style options} to the currently selected image.
   *
   * @param editor The editor instance.
   * @param styles The style options that this command supports.
   */
  constructor(e, t) {
    super(e), this._defaultStyles = {
      imageBlock: !1,
      imageInline: !1
    }, this._styles = new Map(t.map((i) => {
      if (i.isDefault)
        for (const s of i.modelElements)
          this._defaultStyles[s] = i.name;
      return [i.name, i];
    }));
  }
  /**
   * @inheritDoc
   */
  refresh() {
    const i = this.editor.plugins.get("ImageUtils").getClosestSelectedImageElement(this.editor.model.document.selection);
    this.isEnabled = !!i, this.isEnabled ? i.hasAttribute("imageStyle") ? this.value = i.getAttribute("imageStyle") : this.value = this._defaultStyles[i.name] : this.value = !1;
  }
  /**
   * Executes the command and applies the style to the currently selected image:
   *
   * ```ts
   * editor.execute( 'imageStyle', { value: 'side' } );
   * ```
   *
   * **Note**: Executing this command may change the image model element if the desired style requires an image
   * of a different type. Learn more about {@link module:image/imageconfig~ImageStyleOptionDefinition#modelElements model element}
   * configuration for the style option.
   *
   * @param options.value The name of the style (as configured in {@link module:image/imageconfig~ImageStyleConfig#options}).
   * @fires execute
   */
  execute(e = {}) {
    const t = this.editor, i = t.model, s = t.plugins.get("ImageUtils");
    i.change((r) => {
      const o = e.value;
      let a = s.getClosestSelectedImageElement(i.document.selection);
      o && this.shouldConvertImageType(o, a) && (this.editor.execute(s.isBlockImage(a) ? "imageTypeInline" : "imageTypeBlock"), a = s.getClosestSelectedImageElement(i.document.selection)), !o || this._styles.get(o).isDefault ? r.removeAttribute("imageStyle", a) : r.setAttribute("imageStyle", o, a);
    });
  }
  /**
   * Returns `true` if requested style change would trigger the image type change.
   *
   * @param requestedStyle The name of the style (as configured in {@link module:image/imageconfig~ImageStyleConfig#options}).
   * @param imageElement The image model element.
   */
  shouldConvertImageType(e, t) {
    return !this._styles.get(e).modelElements.includes(t.name);
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
const { objectFullWidth: Ox, objectInline: sf, objectLeft: rf, objectRight: vr, objectCenter: yr, objectBlockLeft: of, objectBlockRight: af } = B, gn = {
  // This style represents an image placed in the line of text.
  get inline() {
    return {
      name: "inline",
      title: "In line",
      icon: sf,
      modelElements: ["imageInline"],
      isDefault: !0
    };
  },
  // This style represents an image aligned to the left and wrapped with text.
  get alignLeft() {
    return {
      name: "alignLeft",
      title: "Left aligned image",
      icon: rf,
      modelElements: ["imageBlock", "imageInline"],
      className: "image-style-align-left"
    };
  },
  // This style represents an image aligned to the left.
  get alignBlockLeft() {
    return {
      name: "alignBlockLeft",
      title: "Left aligned image",
      icon: of,
      modelElements: ["imageBlock"],
      className: "image-style-block-align-left"
    };
  },
  // This style represents a centered image.
  get alignCenter() {
    return {
      name: "alignCenter",
      title: "Centered image",
      icon: yr,
      modelElements: ["imageBlock"],
      className: "image-style-align-center"
    };
  },
  // This style represents an image aligned to the right and wrapped with text.
  get alignRight() {
    return {
      name: "alignRight",
      title: "Right aligned image",
      icon: vr,
      modelElements: ["imageBlock", "imageInline"],
      className: "image-style-align-right"
    };
  },
  // This style represents an image aligned to the right.
  get alignBlockRight() {
    return {
      name: "alignBlockRight",
      title: "Right aligned image",
      icon: af,
      modelElements: ["imageBlock"],
      className: "image-style-block-align-right"
    };
  },
  // This option is equal to the situation when no style is applied.
  get block() {
    return {
      name: "block",
      title: "Centered image",
      icon: yr,
      modelElements: ["imageBlock"],
      isDefault: !0
    };
  },
  // This represents a side image.
  get side() {
    return {
      name: "side",
      title: "Side image",
      icon: vr,
      modelElements: ["imageBlock"],
      className: "image-style-side"
    };
  }
}, lf = {
  full: Ox,
  left: of,
  right: af,
  center: yr,
  inlineLeft: rf,
  inlineRight: vr,
  inline: sf
}, cf = [{
  name: "imageStyle:wrapText",
  title: "Wrap text",
  defaultItem: "imageStyle:alignLeft",
  items: ["imageStyle:alignLeft", "imageStyle:alignRight"]
}, {
  name: "imageStyle:breakText",
  title: "Break text",
  defaultItem: "imageStyle:block",
  items: ["imageStyle:alignBlockLeft", "imageStyle:block", "imageStyle:alignBlockRight"]
}];
function Mx(n) {
  return (n.configuredStyles.options || []).map((i) => Fx(i)).filter((i) => Nx(i, n));
}
function Bx(n, e) {
  return n && e ? {
    options: [
      "inline",
      "alignLeft",
      "alignRight",
      "alignCenter",
      "alignBlockLeft",
      "alignBlockRight",
      "block",
      "side"
    ]
  } : n ? {
    options: ["block", "side"]
  } : e ? {
    options: ["inline", "alignLeft", "alignRight"]
  } : {};
}
function Dx(n) {
  return n.has("ImageBlockEditing") && n.has("ImageInlineEditing") ? [...cf] : [];
}
function Fx(n) {
  return typeof n == "string" ? gn[n] ? n = { ...gn[n] } : n = { name: n } : n = Lx(gn[n.name], n), typeof n.icon == "string" && (n.icon = lf[n.icon] || n.icon), n;
}
function Nx(n, { isBlockPluginLoaded: e, isInlinePluginLoaded: t }) {
  const { modelElements: i, name: s } = n;
  if (!i || !i.length || !s)
    return uf({ style: n }), !1;
  {
    const r = [e ? "imageBlock" : null, t ? "imageInline" : null];
    if (!i.some((o) => r.includes(o)))
      return G("image-style-missing-dependency", {
        style: n,
        missingPlugins: i.map((o) => o === "imageBlock" ? "ImageBlockEditing" : "ImageInlineEditing")
      }), !1;
  }
  return !0;
}
function Lx(n, e) {
  const t = { ...e };
  for (const i in n)
    Object.prototype.hasOwnProperty.call(e, i) || (t[i] = n[i]);
  return t;
}
function uf(n) {
  G("image-style-configuration-definition-invalid", n);
}
const kr = {
  normalizeStyles: Mx,
  getDefaultStylesConfiguration: Bx,
  getDefaultDropdownDefinitions: Dx,
  warnInvalidStyle: uf,
  DEFAULT_OPTIONS: gn,
  DEFAULT_ICONS: lf,
  DEFAULT_DROPDOWN_DEFINITIONS: cf
};
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
function zx(n) {
  return (e, t, i) => {
    if (!i.consumable.consume(t.item, e.name))
      return;
    const s = kc(t.attributeNewValue, n), r = kc(t.attributeOldValue, n), o = i.mapper.toViewElement(t.item), a = i.writer;
    r && a.removeClass(r.className, o), s && a.addClass(s.className, o);
  };
}
function $x(n) {
  const e = {
    imageInline: n.filter((t) => !t.isDefault && t.modelElements.includes("imageInline")),
    imageBlock: n.filter((t) => !t.isDefault && t.modelElements.includes("imageBlock"))
  };
  return (t, i, s) => {
    if (!i.modelRange)
      return;
    const r = i.viewItem, o = de(i.modelRange.getItems());
    if (o && s.schema.checkAttribute(o, "imageStyle"))
      for (const a of e[o.name])
        s.consumable.consume(r, { classes: a.className }) && s.writer.setAttribute("imageStyle", a.name, o);
  };
}
function kc(n, e) {
  for (const t of e)
    if (t.name === n)
      return t;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class hf extends _ {
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageStyleEditing";
  }
  /**
   * @inheritDoc
   */
  static get requires() {
    return [ft];
  }
  /**
   * @inheritDoc
   */
  init() {
    const { normalizeStyles: e, getDefaultStylesConfiguration: t } = kr, i = this.editor, s = i.plugins.has("ImageBlockEditing"), r = i.plugins.has("ImageInlineEditing");
    i.config.define("image.styles", t(s, r)), this.normalizedStyles = e({
      configuredStyles: i.config.get("image.styles"),
      isBlockPluginLoaded: s,
      isInlinePluginLoaded: r
    }), this._setupConversion(s, r), this._setupPostFixer(), i.commands.add("imageStyle", new Vx(i, this.normalizedStyles));
  }
  /**
   * Sets the editor conversion taking the presence of
   * {@link module:image/image/imageinlineediting~ImageInlineEditing `ImageInlineEditing`}
   * and {@link module:image/image/imageblockediting~ImageBlockEditing `ImageBlockEditing`} plugins into consideration.
   */
  _setupConversion(e, t) {
    const i = this.editor, s = i.model.schema, r = zx(this.normalizedStyles), o = $x(this.normalizedStyles);
    i.editing.downcastDispatcher.on("attribute:imageStyle", r), i.data.downcastDispatcher.on("attribute:imageStyle", r), e && (s.extend("imageBlock", { allowAttributes: "imageStyle" }), i.data.upcastDispatcher.on("element:figure", o, { priority: "low" })), t && (s.extend("imageInline", { allowAttributes: "imageStyle" }), i.data.upcastDispatcher.on("element:img", o, { priority: "low" }));
  }
  /**
   * Registers a post-fixer that will make sure that the style attribute value is correct for a specific image type (block vs inline).
   */
  _setupPostFixer() {
    const e = this.editor, t = e.model.document, i = e.plugins.get(ft), s = new Map(this.normalizedStyles.map((r) => [r.name, r]));
    t.registerPostFixer((r) => {
      let o = !1;
      for (const a of t.differ.getChanges())
        if (a.type == "insert" || a.type == "attribute" && a.attributeKey == "imageStyle") {
          let l = a.type == "insert" ? a.position.nodeAfter : a.range.start.nodeAfter;
          if (l && l.is("element", "paragraph") && l.childCount > 0 && (l = l.getChild(0)), !i.isImage(l))
            continue;
          const c = l.getAttribute("imageStyle");
          if (!c)
            continue;
          const u = s.get(c);
          (!u || !u.modelElements.includes(l.name)) && (r.removeAttribute("imageStyle", l), o = !0);
        }
      return o;
    });
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class Hx extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [hf];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageStyleUI";
  }
  /**
   * Returns the default localized style titles provided by the plugin.
   *
   * The following localized titles corresponding with
   * {@link module:image/imagestyle/utils#DEFAULT_OPTIONS} are available:
   *
   * * `'Wrap text'`,
   * * `'Break text'`,
   * * `'In line'`,
   * * `'Full size image'`,
   * * `'Side image'`,
   * * `'Left aligned image'`,
   * * `'Centered image'`,
   * * `'Right aligned image'`
   */
  get localizedDefaultStylesTitles() {
    const e = this.editor.t;
    return {
      "Wrap text": e("Wrap text"),
      "Break text": e("Break text"),
      "In line": e("In line"),
      "Full size image": e("Full size image"),
      "Side image": e("Side image"),
      "Left aligned image": e("Left aligned image"),
      "Centered image": e("Centered image"),
      "Right aligned image": e("Right aligned image")
    };
  }
  /**
   * @inheritDoc
   */
  init() {
    const e = this.editor.plugins, t = this.editor.config.get("image.toolbar") || [], i = e.get("ImageStyleEditing"), s = Cc(i.normalizedStyles, this.localizedDefaultStylesTitles);
    for (const o of s)
      this._createButton(o);
    const r = Cc([
      ...t.filter(K),
      ...kr.getDefaultDropdownDefinitions(e)
    ], this.localizedDefaultStylesTitles);
    for (const o of r)
      this._createDropdown(o, s);
  }
  /**
   * Creates a dropdown and stores it in the editor {@link module:ui/componentfactory~ComponentFactory}.
   */
  _createDropdown(e, t) {
    const i = this.editor.ui.componentFactory;
    i.add(e.name, (s) => {
      let r;
      const { defaultItem: o, items: a, title: l } = e, c = a.filter((m) => t.find(({ name: p }) => Ac(p) === m)).map((m) => {
        const p = i.create(m);
        return m === o && (r = p), p;
      });
      a.length !== c.length && kr.warnInvalidStyle({ dropdown: e });
      const u = ot(s, ao), h = u.buttonView, d = h.arrowView;
      return Kn(u, c, { enableActiveItemFocusOnDropdownOpen: !0 }), h.set({
        label: Ec(l, r.label),
        class: null,
        tooltip: !0
      }), d.unbind("label"), d.set({
        label: l
      }), h.bind("icon").toMany(c, "isOn", (...m) => {
        const p = m.findIndex(At);
        return p < 0 ? r.icon : c[p].icon;
      }), h.bind("label").toMany(c, "isOn", (...m) => {
        const p = m.findIndex(At);
        return Ec(l, p < 0 ? r.label : c[p].label);
      }), h.bind("isOn").toMany(c, "isOn", (...m) => m.some(At)), h.bind("class").toMany(c, "isOn", (...m) => m.some(At) ? "ck-splitbutton_flatten" : void 0), h.on("execute", () => {
        c.some(({ isOn: m }) => m) ? u.isOpen = !u.isOpen : r.fire("execute");
      }), u.bind("isEnabled").toMany(c, "isEnabled", (...m) => m.some(At)), this.listenTo(u, "execute", () => {
        this.editor.editing.view.focus();
      }), u;
    });
  }
  /**
   * Creates a button and stores it in the editor {@link module:ui/componentfactory~ComponentFactory}.
   */
  _createButton(e) {
    const t = e.name;
    this.editor.ui.componentFactory.add(Ac(t), (i) => {
      const s = this.editor.commands.get("imageStyle"), r = new D(i);
      return r.set({
        label: e.title,
        icon: e.icon,
        tooltip: !0,
        isToggleable: !0
      }), r.bind("isEnabled").to(s, "isEnabled"), r.bind("isOn").to(s, "value", (o) => o === t), r.on("execute", this._executeCommand.bind(this, t)), r;
    });
  }
  _executeCommand(e) {
    this.editor.execute("imageStyle", { value: e }), this.editor.editing.view.focus();
  }
}
function Cc(n, e) {
  for (const t of n)
    e[t.title] && (t.title = e[t.title]);
  return n;
}
function Ac(n) {
  return `imageStyle:${n}`;
}
function Ec(n, e) {
  return (n ? n + ": " : "") + e;
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class gS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [hf, Hx];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageStyle";
  }
}
/**
 * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
class pS extends _ {
  /**
   * @inheritDoc
   */
  static get requires() {
    return [Dl, ft];
  }
  /**
   * @inheritDoc
   */
  static get pluginName() {
    return "ImageToolbar";
  }
  /**
   * @inheritDoc
   */
  afterInit() {
    const e = this.editor, t = e.t, i = e.plugins.get(Dl), s = e.plugins.get("ImageUtils");
    i.register("image", {
      ariaLabel: t("Image toolbar"),
      items: Wx(e.config.get("image.toolbar") || []),
      getRelatedElement: (r) => s.getClosestSelectedImageWidget(r)
    });
  }
}
function Wx(n) {
  return n.map((e) => K(e) ? e.name : e);
}
export {
  iS as Alignment,
  nS as Bold,
  D as ButtonView,
  Ue as Collection,
  W as Command,
  ld as DropdownButtonView,
  tS as Essentials,
  aS as FontColor,
  cS as GeneralHtmlSupport,
  oS as Heading,
  fS as Image,
  mS as ImageResize,
  gS as ImageStyle,
  pS as ImageToolbar,
  ft as ImageUtils,
  co as InlineEditor,
  sS as Italic,
  uS as Link,
  hS as List,
  dS as ListProperties,
  lS as MediaEmbed,
  vd as Model,
  je as Observer,
  Xn as Paragraph,
  _ as Plugin,
  rS as Underline,
  Od as Undo,
  Gi as Widget,
  Ts as WidgetResize,
  Dl as WidgetToolbarRepository,
  fd as addListToDropdown,
  ot as createDropdown,
  xd as findOptimalInsertionRange,
  X as isWidget,
  ho as toWidget,
  eS as viewToModelPositionOutsideModelElement
};
